
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_div_native_layer_norm_backward_sum_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (512L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (512L*x1) + (25088L*x0)));
                            auto tmp1 = static_cast<float>(49.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 / tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp7 = tmp5 * tmp6;
                            tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            tmp_acc1_vec = tmp_acc1_vec + tmp7;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr1[static_cast<long>(x1 + (49L*x0))] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr2[static_cast<long>(x1 + (49L*x0))] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = in_ptr4[static_cast<long>(x1 + (49L*x0))];
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (512L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                        auto tmp10 = out_ptr1[static_cast<long>(x1 + (49L*x0))];
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (512L*x1) + (25088L*x0)));
                        auto tmp14 = out_ptr2[static_cast<long>(x1 + (49L*x0))];
                        auto tmp2 = static_cast<float>(49.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 / tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp7 = static_cast<float>(512.0);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp11 = at::vec::Vectorized<float>(tmp10);
                        auto tmp12 = tmp9 - tmp11;
                        auto tmp15 = at::vec::Vectorized<float>(tmp14);
                        auto tmp16 = tmp13 * tmp15;
                        auto tmp17 = tmp12 - tmp16;
                        auto tmp18 = at::vec::Vectorized<float>(tmp0);
                        auto tmp19 = tmp18 * tmp17;
                        tmp19.store(out_ptr3 + static_cast<long>(x2 + (512L*x1) + (25088L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x2) + (25088L*x1)));
                            auto tmp1 = static_cast<float>(49.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 / tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            tmp_acc1_vec = tmp_acc1_vec + tmp3;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(802816L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(512L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (512L*x2) + (25088L*x1) + (200704L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-200704L) + x3 + (512L*x2) + (25088L*x1) + (200704L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (512L*x0) + (1024L*x2) + (50176L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(512.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(802816L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(512.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(512L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (512L*x2) + (25088L*x1) + (200704L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-200704L) + x3 + (512L*x2) + (25088L*x1) + (200704L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (512L*x0) + (1024L*x2) + (50176L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(512.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_view_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        float tmp3[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (512L*x1) + (512L*x1_inner) + (25088L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (512L*x1) + (512L*x1_inner) + (25088L*x0)));
                            auto tmp2 = tmp0 + tmp1;
                            tmp2.store(tmp3 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp3, 8, out_ptr0 + static_cast<long>(x1 + (49L*x2) + (25088L*x0)), static_cast<long>(49L));
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (512L*x1) + (25088L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x2 + (512L*x1) + (25088L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 + tmp1);
                        out_ptr0[static_cast<long>(x1 + (49L*x2) + (25088L*x0))] = tmp2;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr0[static_cast<long>((49L*x1) + (49L*x1_inner) + (25088L*(c10::div_floor_integer(x0, 49L))) + (static_cast<long>(x0) % static_cast<long>(49L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(802816L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (2048L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr4 + static_cast<long>(x1 + (49L*x2) + (25088L*x0)), static_cast<long>(49L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr5[static_cast<long>(x1 + x1_inner + (49L*x0))];
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (512L*x1) + (512L*x1_inner) + (25088L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp9 = out_ptr1[static_cast<long>(x1 + x1_inner + (49L*x0))];
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (512L*x1) + (512L*x1_inner) + (25088L*x0)));
                            auto tmp13 = out_ptr2[static_cast<long>(x1 + x1_inner + (49L*x0))];
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = static_cast<float>(512.0);
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            auto tmp10 = at::vec::Vectorized<float>(tmp9);
                            auto tmp11 = tmp8 - tmp10;
                            auto tmp14 = at::vec::Vectorized<float>(tmp13);
                            auto tmp15 = tmp12 * tmp14;
                            auto tmp16 = tmp11 - tmp15;
                            auto tmp17 = at::vec::Vectorized<float>(tmp2);
                            auto tmp18 = tmp17 * tmp16;
                            auto tmp19 = tmp1 + tmp18;
                            tmp19.store(in_out_ptr0 + static_cast<long>(x2 + (512L*x1) + (512L*x1_inner) + (25088L*x0)));
                        }
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr4[static_cast<long>(x1 + (49L*x2) + (25088L*x0))];
                        auto tmp1 = in_ptr5[static_cast<long>(x1 + (49L*x0))];
                        auto tmp2 = in_out_ptr0[static_cast<long>(x2 + (512L*x1) + (25088L*x0))];
                        auto tmp3 = in_ptr2[static_cast<long>(x2)];
                        auto tmp7 = out_ptr1[static_cast<long>(x1 + (49L*x0))];
                        auto tmp9 = in_ptr3[static_cast<long>(x2 + (512L*x1) + (25088L*x0))];
                        auto tmp10 = out_ptr2[static_cast<long>(x1 + (49L*x0))];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = static_cast<float>(512.0);
                        auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 - tmp11);
                        auto tmp13 = decltype(tmp1)(tmp1 * tmp12);
                        auto tmp14 = decltype(tmp0)(tmp0 + tmp13);
                        in_out_ptr0[static_cast<long>(x2 + (512L*x1) + (25088L*x0))] = tmp14;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(512L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (512L*x2) + (25088L*x1) + (200704L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-200704L) + x3 + (512L*x2) + (25088L*x1) + (200704L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (512L*x0) + (1024L*x2) + (50176L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp1 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp10 = out_ptr1[static_cast<long>(x0)];
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp14 = out_ptr2[static_cast<long>(x0)];
                        auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                        auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (512L*x0)));
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp7 = static_cast<float>(512.0);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp11 = at::vec::Vectorized<float>(tmp10);
                        auto tmp12 = tmp9 - tmp11;
                        auto tmp15 = at::vec::Vectorized<float>(tmp14);
                        auto tmp16 = tmp13 * tmp15;
                        auto tmp17 = tmp12 - tmp16;
                        auto tmp18 = at::vec::Vectorized<float>(tmp1);
                        auto tmp19 = tmp18 * tmp17;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = tmp20 * tmp21;
                        auto tmp24 = tmp22 * tmp23;
                        tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp22;
                        tmp_acc1_vec = tmp_acc1_vec + tmp24;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr5[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr6[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr8[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp7 = out_ptr5[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp11 = out_ptr6[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(512.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(320.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(320.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(320L); x2+=static_cast<long>(8L))
                    {
                        float tmp3[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (320L*x1) + (320L*x1_inner) + (62720L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (320L*x1) + (320L*x1_inner) + (62720L*x0)));
                            auto tmp2 = tmp0 + tmp1;
                            tmp2.store(tmp3 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp3, 8, out_ptr0 + static_cast<long>(x1 + (196L*x2) + (62720L*x0)), static_cast<long>(196L));
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(320L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (320L*x1) + (62720L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x2 + (320L*x1) + (62720L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 + tmp1);
                        out_ptr0[static_cast<long>(x1 + (196L*x2) + (62720L*x0))] = tmp2;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr0[static_cast<long>((196L*x1) + (196L*x1_inner) + (62720L*(c10::div_floor_integer(x0, 196L))) + (static_cast<long>(x0) % static_cast<long>(196L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2007040L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1280L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1280L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(320L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr4 + static_cast<long>(x1 + (196L*x2) + (62720L*x0)), static_cast<long>(196L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr5[static_cast<long>(x1 + x1_inner + (196L*x0))];
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (320L*x1) + (320L*x1_inner) + (62720L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp9 = out_ptr1[static_cast<long>(x1 + x1_inner + (196L*x0))];
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (320L*x1) + (320L*x1_inner) + (62720L*x0)));
                            auto tmp13 = out_ptr2[static_cast<long>(x1 + x1_inner + (196L*x0))];
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = static_cast<float>(320.0);
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            auto tmp10 = at::vec::Vectorized<float>(tmp9);
                            auto tmp11 = tmp8 - tmp10;
                            auto tmp14 = at::vec::Vectorized<float>(tmp13);
                            auto tmp15 = tmp12 * tmp14;
                            auto tmp16 = tmp11 - tmp15;
                            auto tmp17 = at::vec::Vectorized<float>(tmp2);
                            auto tmp18 = tmp17 * tmp16;
                            auto tmp19 = tmp1 + tmp18;
                            tmp19.store(in_out_ptr0 + static_cast<long>(x2 + (320L*x1) + (320L*x1_inner) + (62720L*x0)));
                        }
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(320L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr4[static_cast<long>(x1 + (196L*x2) + (62720L*x0))];
                        auto tmp1 = in_ptr5[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = in_out_ptr0[static_cast<long>(x2 + (320L*x1) + (62720L*x0))];
                        auto tmp3 = in_ptr2[static_cast<long>(x2)];
                        auto tmp7 = out_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp9 = in_ptr3[static_cast<long>(x2 + (320L*x1) + (62720L*x0))];
                        auto tmp10 = out_ptr2[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = static_cast<float>(320.0);
                        auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 - tmp7);
                        auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 - tmp11);
                        auto tmp13 = decltype(tmp1)(tmp1 * tmp12);
                        auto tmp14 = decltype(tmp0)(tmp0 + tmp13);
                        in_out_ptr0[static_cast<long>(x2 + (320L*x1) + (62720L*x0))] = tmp14;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(320L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                            auto tmp1 = static_cast<int>(0);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = static_cast<int>(8);
                            auto tmp4 = tmp0 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = tmp0 >= tmp3;
                            auto tmp9 = static_cast<int>(16);
                            auto tmp10 = tmp0 < tmp9;
                            auto tmp11 = [&]
                            {
                                auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-125440L) + x3 + (320L*x2) + (15680L*x1) + (125440L*x0)), to_float_mask(tmp8));
                                return tmp12;
                            }
                            ;
                            auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                            auto tmp14 = to_float_mask(tmp4);
                            auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                            tmp15.store(out_ptr0 + static_cast<long>(x3 + (320L*x0) + (640L*x2) + (31360L*x1)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(640L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (640L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp1 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp10 = out_ptr1[static_cast<long>(x0)];
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp14 = out_ptr2[static_cast<long>(x0)];
                        auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                        auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (320L*x0)));
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp7 = static_cast<float>(320.0);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp11 = at::vec::Vectorized<float>(tmp10);
                        auto tmp12 = tmp9 - tmp11;
                        auto tmp15 = at::vec::Vectorized<float>(tmp14);
                        auto tmp16 = tmp13 * tmp15;
                        auto tmp17 = tmp12 - tmp16;
                        auto tmp18 = at::vec::Vectorized<float>(tmp1);
                        auto tmp19 = tmp18 * tmp17;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = tmp20 * tmp21;
                        auto tmp24 = tmp22 * tmp23;
                        tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp22;
                        tmp_acc1_vec = tmp_acc1_vec + tmp24;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr5[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr6[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(320L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (320L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(320L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr8[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp7 = out_ptr5[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (320L*x0)));
                    auto tmp11 = out_ptr6[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(320.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (320L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(128.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(8);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (128L*x2) + (6272L*x1) + (50176L*x0)), to_float_mask(tmp4));
                            return tmp6;
                        }
                        ;
                        auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp8 = tmp0 >= tmp3;
                        auto tmp9 = static_cast<int>(16);
                        auto tmp10 = tmp0 < tmp9;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-50176L) + x3 + (128L*x2) + (6272L*x1) + (50176L*x0)), to_float_mask(tmp8));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                        auto tmp14 = to_float_mask(tmp4);
                        auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                        tmp15.store(out_ptr0 + static_cast<long>(x3 + (128L*x0) + (256L*x2) + (12544L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = in_ptr4[static_cast<long>(x0)];
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp7 = out_ptr1[static_cast<long>(x0)];
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                auto tmp11 = out_ptr2[static_cast<long>(x0)];
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = static_cast<float>(128.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 * tmp5;
                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                auto tmp9 = tmp6 - tmp8;
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp14 = tmp9 - tmp13;
                auto tmp15 = at::vec::Vectorized<float>(tmp0);
                auto tmp16 = tmp15 * tmp14;
                tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(128.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(128.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(8);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (128L*x2) + (6272L*x1) + (50176L*x0)), to_float_mask(tmp4));
                            return tmp6;
                        }
                        ;
                        auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp8 = tmp0 >= tmp3;
                        auto tmp9 = static_cast<int>(16);
                        auto tmp10 = tmp0 < tmp9;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-50176L) + x3 + (128L*x2) + (6272L*x1) + (50176L*x0)), to_float_mask(tmp8));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                        auto tmp14 = to_float_mask(tmp4);
                        auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                        tmp15.store(out_ptr0 + static_cast<long>(x3 + (128L*x0) + (256L*x2) + (12544L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = in_ptr4[static_cast<long>(x0)];
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp7 = out_ptr1[static_cast<long>(x0)];
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                auto tmp11 = out_ptr2[static_cast<long>(x0)];
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = static_cast<float>(128.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 * tmp5;
                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                auto tmp9 = tmp6 - tmp8;
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp14 = tmp9 - tmp13;
                auto tmp15 = at::vec::Vectorized<float>(tmp0);
                auto tmp16 = tmp15 * tmp14;
                tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(128.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(128.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(8);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (128L*x2) + (6272L*x1) + (50176L*x0)), to_float_mask(tmp4));
                            return tmp6;
                        }
                        ;
                        auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp8 = tmp0 >= tmp3;
                        auto tmp9 = static_cast<int>(16);
                        auto tmp10 = tmp0 < tmp9;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-50176L) + x3 + (128L*x2) + (6272L*x1) + (50176L*x0)), to_float_mask(tmp8));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                        auto tmp14 = to_float_mask(tmp4);
                        auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                        tmp15.store(out_ptr0 + static_cast<long>(x3 + (128L*x0) + (256L*x2) + (12544L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = in_ptr4[static_cast<long>(x0)];
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp7 = out_ptr1[static_cast<long>(x0)];
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                auto tmp11 = out_ptr2[static_cast<long>(x0)];
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = static_cast<float>(128.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 * tmp5;
                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                auto tmp9 = tmp6 - tmp8;
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp14 = tmp9 - tmp13;
                auto tmp15 = at::vec::Vectorized<float>(tmp0);
                auto tmp16 = tmp15 * tmp14;
                tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(128.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        float tmp3[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (128L*x1) + (128L*x1_inner) + (100352L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (128L*x1_inner) + (100352L*x0)));
                            auto tmp2 = tmp0 + tmp1;
                            tmp2.store(tmp3 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp3, 8, out_ptr0 + static_cast<long>(x1 + (784L*x2) + (100352L*x0)), static_cast<long>(784L));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr0[static_cast<long>((784L*x1) + (784L*x1_inner) + (100352L*(c10::div_floor_integer(x0, 784L))) + (static_cast<long>(x0) % static_cast<long>(784L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr4 + static_cast<long>(x1 + (784L*x2) + (100352L*x0)), static_cast<long>(784L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr5[static_cast<long>(x1 + x1_inner + (784L*x0))];
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (128L*x1_inner) + (100352L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp9 = out_ptr1[static_cast<long>(x1 + x1_inner + (784L*x0))];
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (128L*x1) + (128L*x1_inner) + (100352L*x0)));
                            auto tmp13 = out_ptr2[static_cast<long>(x1 + x1_inner + (784L*x0))];
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = static_cast<float>(128.0);
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            auto tmp10 = at::vec::Vectorized<float>(tmp9);
                            auto tmp11 = tmp8 - tmp10;
                            auto tmp14 = at::vec::Vectorized<float>(tmp13);
                            auto tmp15 = tmp12 * tmp14;
                            auto tmp16 = tmp11 - tmp15;
                            auto tmp17 = at::vec::Vectorized<float>(tmp2);
                            auto tmp18 = tmp17 * tmp16;
                            auto tmp19 = tmp1 + tmp18;
                            tmp19.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (128L*x1_inner) + (100352L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(128L); x3+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(8);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (128L*x2) + (6272L*x1) + (50176L*x0)), to_float_mask(tmp4));
                            return tmp6;
                        }
                        ;
                        auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp8 = tmp0 >= tmp3;
                        auto tmp9 = static_cast<int>(16);
                        auto tmp10 = tmp0 < tmp9;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-50176L) + x3 + (128L*x2) + (6272L*x1) + (50176L*x0)), to_float_mask(tmp8));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                        auto tmp14 = to_float_mask(tmp4);
                        auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                        tmp15.store(out_ptr0 + static_cast<long>(x3 + (128L*x0) + (256L*x2) + (12544L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = in_ptr4[static_cast<long>(x0)];
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp7 = out_ptr1[static_cast<long>(x0)];
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (128L*x0)));
                auto tmp11 = out_ptr2[static_cast<long>(x0)];
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = static_cast<float>(128.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 * tmp5;
                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                auto tmp9 = tmp6 - tmp8;
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp14 = tmp9 - tmp13;
                auto tmp15 = at::vec::Vectorized<float>(tmp0);
                auto tmp16 = tmp15 * tmp14;
                tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp10 = out_ptr1[static_cast<long>(x0)];
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp14 = out_ptr2[static_cast<long>(x0)];
                        auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                        auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp7 = static_cast<float>(128.0);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp11 = at::vec::Vectorized<float>(tmp10);
                        auto tmp12 = tmp9 - tmp11;
                        auto tmp15 = at::vec::Vectorized<float>(tmp14);
                        auto tmp16 = tmp13 * tmp15;
                        auto tmp17 = tmp12 - tmp16;
                        auto tmp18 = at::vec::Vectorized<float>(tmp1);
                        auto tmp19 = tmp18 * tmp17;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = tmp20 * tmp21;
                        auto tmp24 = tmp22 * tmp23;
                        tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp22;
                        tmp_acc1_vec = tmp_acc1_vec + tmp24;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr5[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr6[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr9[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp7 = out_ptr5[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp11 = out_ptr6[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(128.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(12845056L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(64.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(8);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (64L*x2) + (3136L*x1) + (25088L*x0)), to_float_mask(tmp4));
                            return tmp6;
                        }
                        ;
                        auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp8 = tmp0 >= tmp3;
                        auto tmp9 = static_cast<int>(16);
                        auto tmp10 = tmp0 < tmp9;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-25088L) + x3 + (64L*x2) + (3136L*x1) + (25088L*x0)), to_float_mask(tmp8));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                        auto tmp14 = to_float_mask(tmp4);
                        auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                        tmp15.store(out_ptr0 + static_cast<long>(x3 + (64L*x0) + (128L*x2) + (6272L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (64L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = in_ptr4[static_cast<long>(x0)];
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp7 = out_ptr1[static_cast<long>(x0)];
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                auto tmp11 = out_ptr2[static_cast<long>(x0)];
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = static_cast<float>(64.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 * tmp5;
                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                auto tmp9 = tmp6 - tmp8;
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp14 = tmp9 - tmp13;
                auto tmp15 = at::vec::Vectorized<float>(tmp0);
                auto tmp16 = tmp15 * tmp14;
                tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(64.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(12845056L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp8 = out_ptr1[static_cast<long>(x0)];
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp12 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp5 = static_cast<float>(64.0);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 - tmp9;
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp10 - tmp14;
                    auto tmp16 = at::vec::Vectorized<float>(tmp1);
                    auto tmp17 = tmp16 * tmp15;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(8);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (64L*x2) + (3136L*x1) + (25088L*x0)), to_float_mask(tmp4));
                            return tmp6;
                        }
                        ;
                        auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp8 = tmp0 >= tmp3;
                        auto tmp9 = static_cast<int>(16);
                        auto tmp10 = tmp0 < tmp9;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-25088L) + x3 + (64L*x2) + (3136L*x1) + (25088L*x0)), to_float_mask(tmp8));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                        auto tmp14 = to_float_mask(tmp4);
                        auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                        tmp15.store(out_ptr0 + static_cast<long>(x3 + (64L*x0) + (128L*x2) + (6272L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (64L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = in_ptr4[static_cast<long>(x0)];
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp7 = out_ptr1[static_cast<long>(x0)];
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                auto tmp11 = out_ptr2[static_cast<long>(x0)];
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = static_cast<float>(64.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 * tmp5;
                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                auto tmp9 = tmp6 - tmp8;
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp14 = tmp9 - tmp13;
                auto tmp15 = at::vec::Vectorized<float>(tmp0);
                auto tmp16 = tmp15 * tmp14;
                tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp7 = static_cast<float>(64.0);
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp12 - tmp16;
                    auto tmp18 = at::vec::Vectorized<float>(tmp1);
                    auto tmp19 = tmp18 * tmp17;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_add_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        float tmp3[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (64L*x1_inner) + (200704L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (64L*x1_inner) + (200704L*x0)));
                            auto tmp2 = tmp0 + tmp1;
                            tmp2.store(tmp3 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp3, 8, out_ptr0 + static_cast<long>(x1 + (3136L*x2) + (200704L*x0)), static_cast<long>(3136L));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr0[static_cast<long>((3136L*x1) + (3136L*x1_inner) + (200704L*(c10::div_floor_integer(x0, 3136L))) + (static_cast<long>(x0) % static_cast<long>(3136L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(12845056L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr4 + static_cast<long>(x1 + (3136L*x2) + (200704L*x0)), static_cast<long>(3136L), tmp0, 8);
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                            auto tmp2 = in_ptr5[static_cast<long>(x1 + x1_inner + (3136L*x0))];
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (64L*x1) + (64L*x1_inner) + (200704L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp9 = out_ptr1[static_cast<long>(x1 + x1_inner + (3136L*x0))];
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (64L*x1) + (64L*x1_inner) + (200704L*x0)));
                            auto tmp13 = out_ptr2[static_cast<long>(x1 + x1_inner + (3136L*x0))];
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = static_cast<float>(64.0);
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            auto tmp10 = at::vec::Vectorized<float>(tmp9);
                            auto tmp11 = tmp8 - tmp10;
                            auto tmp14 = at::vec::Vectorized<float>(tmp13);
                            auto tmp15 = tmp12 * tmp14;
                            auto tmp16 = tmp11 - tmp15;
                            auto tmp17 = at::vec::Vectorized<float>(tmp2);
                            auto tmp18 = tmp17 * tmp16;
                            auto tmp19 = tmp1 + tmp18;
                            tmp19.store(in_out_ptr0 + static_cast<long>(x2 + (64L*x1) + (64L*x1_inner) + (200704L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(64L); x3+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = static_cast<int>(8);
                        auto tmp4 = tmp0 < tmp3;
                        auto tmp5 = [&]
                        {
                            auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x3 + (64L*x2) + (3136L*x1) + (25088L*x0)), to_float_mask(tmp4));
                            return tmp6;
                        }
                        ;
                        auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                        auto tmp8 = tmp0 >= tmp3;
                        auto tmp9 = static_cast<int>(16);
                        auto tmp10 = tmp0 < tmp9;
                        auto tmp11 = [&]
                        {
                            auto tmp12 = masked_load(in_ptr1 + static_cast<long>((-25088L) + x3 + (64L*x2) + (3136L*x1) + (25088L*x0)), to_float_mask(tmp8));
                            return tmp12;
                        }
                        ;
                        auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp8));
                        auto tmp14 = to_float_mask(tmp4);
                        auto tmp15 = decltype(tmp7)::blendv(tmp13, tmp7, tmp14);
                        tmp15.store(out_ptr0 + static_cast<long>(x3 + (64L*x0) + (128L*x2) + (6272L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_layer_norm_backward_sum_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (64L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = in_ptr4[static_cast<long>(x0)];
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp7 = out_ptr1[static_cast<long>(x0)];
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                auto tmp11 = out_ptr2[static_cast<long>(x0)];
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = static_cast<float>(64.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 * tmp5;
                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                auto tmp9 = tmp6 - tmp8;
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp14 = tmp9 - tmp13;
                auto tmp15 = at::vec::Vectorized<float>(tmp0);
                auto tmp16 = tmp15 * tmp14;
                tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp1 = in_ptr5[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp10 = out_ptr1[static_cast<long>(x0)];
                        auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp14 = out_ptr2[static_cast<long>(x0)];
                        auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                        auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (64L*x0)));
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        auto tmp7 = static_cast<float>(64.0);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp6 * tmp8;
                        auto tmp11 = at::vec::Vectorized<float>(tmp10);
                        auto tmp12 = tmp9 - tmp11;
                        auto tmp15 = at::vec::Vectorized<float>(tmp14);
                        auto tmp16 = tmp13 * tmp15;
                        auto tmp17 = tmp12 - tmp16;
                        auto tmp18 = at::vec::Vectorized<float>(tmp1);
                        auto tmp19 = tmp18 * tmp17;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = tmp20 * tmp21;
                        auto tmp24 = tmp22 * tmp23;
                        tmp20.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp22;
                        tmp_acc1_vec = tmp_acc1_vec + tmp24;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr5[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr6[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr8 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr8[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp7 = out_ptr5[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp11 = out_ptr6[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(64.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_3, primals_5, primals_9, primals_11, primals_17, primals_23, primals_25, primals_29, primals_31, primals_37, primals_43, primals_47, primals_49, primals_55, primals_61, primals_63, primals_65, primals_69, primals_71, primals_77, primals_83, primals_85, primals_89, primals_91, primals_97, primals_103, primals_107, primals_109, primals_115, primals_121, primals_125, primals_127, primals_133, primals_139, primals_141, primals_143, primals_147, primals_149, primals_155, primals_161, primals_163, primals_167, primals_169, primals_175, primals_181, primals_185, primals_187, primals_193, primals_199, primals_203, primals_205, primals_211, primals_217, primals_221, primals_223, primals_229, primals_235, primals_239, primals_241, primals_247, primals_253, primals_257, primals_259, primals_265, primals_271, primals_275, primals_277, primals_283, primals_289, primals_293, primals_295, primals_301, primals_307, primals_311, primals_313, primals_319, primals_325, primals_329, primals_331, primals_337, primals_343, primals_347, primals_349, primals_355, primals_361, primals_365, primals_367, primals_373, primals_379, primals_383, primals_385, primals_391, primals_397, primals_401, primals_403, primals_409, primals_415, primals_419, primals_421, primals_427, primals_433, primals_437, primals_439, primals_445, primals_451, primals_455, primals_457, primals_463, primals_469, primals_471, primals_473, primals_481, primals_487, primals_489, primals_497, primals_503, primals_511, primals_517, primals_521, mul, mul_2, view_1, permute_2, view_4, mul_4, view_6, getitem_6, getitem_7, getitem_9, getitem_10, getitem_11, getitem_14, getitem_15, view_10, mul_6, view_12, addmm_3, view_14, view_16, mul_11, view_19, permute_15, view_22, mul_13, view_24, getitem_23, getitem_24, getitem_26, getitem_27, getitem_28, getitem_31, getitem_32, view_28, mul_15, view_30, addmm_8, view_32, mul_20, view_34, permute_25, view_37, mul_22, view_39, getitem_40, getitem_41, getitem_43, getitem_44, getitem_45, getitem_48, getitem_49, view_43, mul_24, view_45, addmm_13, view_47, clone_11, mul_29, mul_31, view_51, permute_37, view_54, mul_33, view_56, getitem_59, getitem_60, getitem_62, getitem_63, getitem_64, getitem_67, getitem_68, view_60, mul_35, view_62, addmm_18, view_64, view_66, mul_40, view_69, permute_50, view_72, mul_42, view_74, getitem_76, getitem_77, getitem_79, getitem_80, getitem_81, getitem_84, getitem_85, view_78, mul_44, view_80, addmm_23, view_82, mul_49, view_84, permute_60, view_87, mul_51, view_89, getitem_93, getitem_94, getitem_96, getitem_97, getitem_98, getitem_101, getitem_102, view_93, mul_53, view_95, addmm_28, view_97, mul_58, view_99, permute_70, view_102, mul_60, view_104, getitem_110, getitem_111, getitem_113, getitem_114, getitem_115, getitem_118, getitem_119, view_108, mul_62, view_110, addmm_33, view_112, clone_26, mul_67, mul_69, view_116, permute_82, view_119, mul_71, view_121, getitem_129, getitem_130, getitem_132, getitem_133, getitem_134, getitem_137, getitem_138, view_125, mul_73, view_127, addmm_38, view_129, view_131, mul_78, view_134, permute_95, view_137, mul_80, view_139, getitem_146, getitem_147, getitem_149, getitem_150, getitem_151, getitem_154, getitem_155, view_143, mul_82, view_145, addmm_43, view_147, mul_87, view_149, permute_105, view_152, mul_89, view_154, getitem_163, getitem_164, getitem_166, getitem_167, getitem_168, getitem_171, getitem_172, view_158, mul_91, view_160, addmm_48, view_162, mul_96, view_164, permute_115, view_167, mul_98, view_169, getitem_180, getitem_181, getitem_183, getitem_184, getitem_185, getitem_188, getitem_189, view_173, mul_100, view_175, addmm_53, view_177, mul_105, view_179, permute_125, view_182, mul_107, view_184, getitem_197, getitem_198, getitem_200, getitem_201, getitem_202, getitem_205, getitem_206, view_188, mul_109, view_190, addmm_58, view_192, mul_114, view_194, permute_135, view_197, mul_116, view_199, getitem_214, getitem_215, getitem_217, getitem_218, getitem_219, getitem_222, getitem_223, view_203, mul_118, view_205, addmm_63, view_207, mul_123, view_209, permute_145, view_212, mul_125, view_214, getitem_231, getitem_232, getitem_234, getitem_235, getitem_236, getitem_239, getitem_240, view_218, mul_127, view_220, addmm_68, view_222, mul_132, view_224, permute_155, view_227, mul_134, view_229, getitem_248, getitem_249, getitem_251, getitem_252, getitem_253, getitem_256, getitem_257, view_233, mul_136, view_235, addmm_73, view_237, mul_141, view_239, permute_165, view_242, mul_143, view_244, getitem_265, getitem_266, getitem_268, getitem_269, getitem_270, getitem_273, getitem_274, view_248, mul_145, view_250, addmm_78, view_252, mul_150, view_254, permute_175, view_257, mul_152, view_259, getitem_282, getitem_283, getitem_285, getitem_286, getitem_287, getitem_290, getitem_291, view_263, mul_154, view_265, addmm_83, view_267, mul_159, view_269, permute_185, view_272, mul_161, view_274, getitem_299, getitem_300, getitem_302, getitem_303, getitem_304, getitem_307, getitem_308, view_278, mul_163, view_280, addmm_88, view_282, mul_168, view_284, permute_195, view_287, mul_170, view_289, getitem_316, getitem_317, getitem_319, getitem_320, getitem_321, getitem_324, getitem_325, view_293, mul_172, view_295, addmm_93, view_297, mul_177, view_299, permute_205, view_302, mul_179, view_304, getitem_333, getitem_334, getitem_336, getitem_337, getitem_338, getitem_341, getitem_342, view_308, mul_181, view_310, addmm_98, view_312, mul_186, view_314, permute_215, view_317, mul_188, view_319, getitem_350, getitem_351, getitem_353, getitem_354, getitem_355, getitem_358, getitem_359, view_323, mul_190, view_325, addmm_103, view_327, mul_195, view_329, permute_225, view_332, mul_197, view_334, getitem_367, getitem_368, getitem_370, getitem_371, getitem_372, getitem_375, getitem_376, view_338, mul_199, view_340, addmm_108, view_342, mul_204, view_344, permute_235, view_347, mul_206, view_349, getitem_384, getitem_385, getitem_387, getitem_388, getitem_389, getitem_392, getitem_393, view_353, mul_208, view_355, addmm_113, view_357, mul_213, view_359, permute_245, view_362, mul_215, view_364, getitem_401, getitem_402, getitem_404, getitem_405, getitem_406, getitem_409, getitem_410, view_368, mul_217, view_370, addmm_118, view_372, mul_222, view_374, permute_255, view_377, mul_224, view_379, getitem_418, getitem_419, getitem_421, getitem_422, getitem_423, getitem_426, getitem_427, view_383, mul_226, view_385, addmm_123, view_387, clone_83, mul_231, mul_233, view_391, permute_267, getitem_435, getitem_436, getitem_438, getitem_439, getitem_440, getitem_443, getitem_444, view_398, mul_235, view_400, addmm_128, view_402, view_404, mul_240, view_407, permute_278, getitem_450, getitem_451, getitem_453, getitem_454, getitem_455, getitem_458, getitem_459, view_414, mul_242, view_416, addmm_133, view_418, mul_247, view_420, permute_286, getitem_465, getitem_466, getitem_468, getitem_469, getitem_470, getitem_473, getitem_474, view_427, mul_249, view_429, addmm_138, view_431, mul_254, clone_95, permute_294, div_1, permute_298, permute_302, div_2, permute_306, alias_28, permute_312, permute_317, div_3, permute_321, permute_325, div_4, permute_329, alias_29, permute_335, permute_340, div_5, permute_346, permute_350, div_6, permute_354, alias_30, permute_360, permute_365, div_7, div_8, permute_371, permute_375, div_9, permute_379, alias_31, permute_385, div_10, permute_392, div_11, permute_396, permute_400, div_12, permute_404, alias_32, permute_410, div_13, permute_417, div_14, permute_421, permute_425, div_15, permute_429, alias_33, permute_435, div_16, permute_442, div_17, permute_446, permute_450, div_18, permute_454, alias_34, permute_460, div_19, permute_467, div_20, permute_471, permute_475, div_21, permute_479, alias_35, permute_485, div_22, permute_492, div_23, permute_496, permute_500, div_24, permute_504, alias_36, permute_510, div_25, permute_517, div_26, permute_521, permute_525, div_27, permute_529, alias_37, permute_535, div_28, permute_542, div_29, permute_546, permute_550, div_30, permute_554, alias_38, permute_560, div_31, permute_567, div_32, permute_571, permute_575, div_33, permute_579, alias_39, permute_585, div_34, permute_592, div_35, permute_596, permute_600, div_36, permute_604, alias_40, permute_610, div_37, permute_617, div_38, permute_621, permute_625, div_39, permute_629, alias_41, permute_635, div_40, permute_642, div_41, permute_646, permute_650, div_42, permute_654, alias_42, permute_660, div_43, permute_667, div_44, permute_671, permute_675, div_45, permute_679, alias_43, permute_685, div_46, permute_692, div_47, permute_696, permute_700, div_48, permute_704, alias_44, permute_710, div_49, permute_717, div_50, permute_721, permute_725, div_51, permute_729, alias_45, permute_735, div_52, permute_742, div_53, permute_746, permute_750, div_54, permute_754, alias_46, permute_760, div_55, permute_767, div_56, permute_771, permute_775, div_57, permute_779, alias_47, permute_785, div_58, permute_792, div_59, permute_798, permute_802, div_60, permute_806, alias_48, permute_812, div_61, permute_819, div_62, div_63, permute_825, permute_829, div_64, permute_833, alias_49, permute_839, div_65, permute_846, div_66, permute_850, permute_854, div_67, permute_858, alias_50, permute_864, div_68, permute_871, div_69, permute_875, permute_879, div_70, permute_883, alias_51, permute_889, div_71, permute_896, div_72, permute_902, permute_906, div_73, permute_910, alias_52, permute_916, div_74, permute_923, div_75, div_76, permute_929, permute_933, div_77, permute_937, alias_53, permute_943, div_78, permute_950, div_79, permute_954, permute_958, div_80, permute_962, alias_54, permute_968, div_81, permute_975, div_82, permute_981, permute_985, div_83, permute_989, alias_55, permute_995, div_84, permute_1002, div_85, div_86, tangents_1 = args
    args.clear()
    assert_size_stride(primals_1, (64, 3, 4, 4), (48, 1, 12, 3))
    assert_size_stride(primals_3, (64, ), (1, ))
    assert_size_stride(primals_5, (64, ), (1, ))
    assert_size_stride(primals_9, (64, 64, 8, 8), (4096, 1, 512, 64))
    assert_size_stride(primals_11, (64, ), (1, ))
    assert_size_stride(primals_17, (64, ), (1, ))
    assert_size_stride(primals_23, (64, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_25, (64, ), (1, ))
    assert_size_stride(primals_29, (64, 64, 8, 8), (4096, 1, 512, 64))
    assert_size_stride(primals_31, (64, ), (1, ))
    assert_size_stride(primals_37, (64, ), (1, ))
    assert_size_stride(primals_43, (64, ), (1, ))
    assert_size_stride(primals_47, (64, 64, 8, 8), (4096, 1, 512, 64))
    assert_size_stride(primals_49, (64, ), (1, ))
    assert_size_stride(primals_55, (64, ), (1, ))
    assert_size_stride(primals_61, (128, 64, 2, 2), (256, 1, 128, 64))
    assert_size_stride(primals_63, (128, ), (1, ))
    assert_size_stride(primals_65, (128, ), (1, ))
    assert_size_stride(primals_69, (128, 128, 4, 4), (2048, 1, 512, 128))
    assert_size_stride(primals_71, (128, ), (1, ))
    assert_size_stride(primals_77, (128, ), (1, ))
    assert_size_stride(primals_83, (128, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_85, (128, ), (1, ))
    assert_size_stride(primals_89, (128, 128, 4, 4), (2048, 1, 512, 128))
    assert_size_stride(primals_91, (128, ), (1, ))
    assert_size_stride(primals_97, (128, ), (1, ))
    assert_size_stride(primals_103, (128, ), (1, ))
    assert_size_stride(primals_107, (128, 128, 4, 4), (2048, 1, 512, 128))
    assert_size_stride(primals_109, (128, ), (1, ))
    assert_size_stride(primals_115, (128, ), (1, ))
    assert_size_stride(primals_121, (128, ), (1, ))
    assert_size_stride(primals_125, (128, 128, 4, 4), (2048, 1, 512, 128))
    assert_size_stride(primals_127, (128, ), (1, ))
    assert_size_stride(primals_133, (128, ), (1, ))
    assert_size_stride(primals_139, (320, 128, 2, 2), (512, 1, 256, 128))
    assert_size_stride(primals_141, (320, ), (1, ))
    assert_size_stride(primals_143, (320, ), (1, ))
    assert_size_stride(primals_147, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_149, (320, ), (1, ))
    assert_size_stride(primals_155, (320, ), (1, ))
    assert_size_stride(primals_161, (320, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_163, (320, ), (1, ))
    assert_size_stride(primals_167, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_169, (320, ), (1, ))
    assert_size_stride(primals_175, (320, ), (1, ))
    assert_size_stride(primals_181, (320, ), (1, ))
    assert_size_stride(primals_185, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_187, (320, ), (1, ))
    assert_size_stride(primals_193, (320, ), (1, ))
    assert_size_stride(primals_199, (320, ), (1, ))
    assert_size_stride(primals_203, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_205, (320, ), (1, ))
    assert_size_stride(primals_211, (320, ), (1, ))
    assert_size_stride(primals_217, (320, ), (1, ))
    assert_size_stride(primals_221, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_223, (320, ), (1, ))
    assert_size_stride(primals_229, (320, ), (1, ))
    assert_size_stride(primals_235, (320, ), (1, ))
    assert_size_stride(primals_239, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_241, (320, ), (1, ))
    assert_size_stride(primals_247, (320, ), (1, ))
    assert_size_stride(primals_253, (320, ), (1, ))
    assert_size_stride(primals_257, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_259, (320, ), (1, ))
    assert_size_stride(primals_265, (320, ), (1, ))
    assert_size_stride(primals_271, (320, ), (1, ))
    assert_size_stride(primals_275, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_277, (320, ), (1, ))
    assert_size_stride(primals_283, (320, ), (1, ))
    assert_size_stride(primals_289, (320, ), (1, ))
    assert_size_stride(primals_293, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_295, (320, ), (1, ))
    assert_size_stride(primals_301, (320, ), (1, ))
    assert_size_stride(primals_307, (320, ), (1, ))
    assert_size_stride(primals_311, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_313, (320, ), (1, ))
    assert_size_stride(primals_319, (320, ), (1, ))
    assert_size_stride(primals_325, (320, ), (1, ))
    assert_size_stride(primals_329, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_331, (320, ), (1, ))
    assert_size_stride(primals_337, (320, ), (1, ))
    assert_size_stride(primals_343, (320, ), (1, ))
    assert_size_stride(primals_347, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_349, (320, ), (1, ))
    assert_size_stride(primals_355, (320, ), (1, ))
    assert_size_stride(primals_361, (320, ), (1, ))
    assert_size_stride(primals_365, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_367, (320, ), (1, ))
    assert_size_stride(primals_373, (320, ), (1, ))
    assert_size_stride(primals_379, (320, ), (1, ))
    assert_size_stride(primals_383, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_385, (320, ), (1, ))
    assert_size_stride(primals_391, (320, ), (1, ))
    assert_size_stride(primals_397, (320, ), (1, ))
    assert_size_stride(primals_401, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_403, (320, ), (1, ))
    assert_size_stride(primals_409, (320, ), (1, ))
    assert_size_stride(primals_415, (320, ), (1, ))
    assert_size_stride(primals_419, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_421, (320, ), (1, ))
    assert_size_stride(primals_427, (320, ), (1, ))
    assert_size_stride(primals_433, (320, ), (1, ))
    assert_size_stride(primals_437, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_439, (320, ), (1, ))
    assert_size_stride(primals_445, (320, ), (1, ))
    assert_size_stride(primals_451, (320, ), (1, ))
    assert_size_stride(primals_455, (320, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_457, (320, ), (1, ))
    assert_size_stride(primals_463, (320, ), (1, ))
    assert_size_stride(primals_469, (512, 320, 2, 2), (1280, 1, 640, 320))
    assert_size_stride(primals_471, (512, ), (1, ))
    assert_size_stride(primals_473, (512, ), (1, ))
    assert_size_stride(primals_481, (512, ), (1, ))
    assert_size_stride(primals_487, (512, 1, 3, 3), (9, 9, 3, 1))
    assert_size_stride(primals_489, (512, ), (1, ))
    assert_size_stride(primals_497, (512, ), (1, ))
    assert_size_stride(primals_503, (512, ), (1, ))
    assert_size_stride(primals_511, (512, ), (1, ))
    assert_size_stride(primals_517, (512, ), (1, ))
    assert_size_stride(primals_521, (8, 3, 224, 224), (150528, 1, 672, 3))
    assert_size_stride(mul, (8, 3136, 64), (200704, 64, 1))
    assert_size_stride(mul_2, (8, 3136, 64), (200704, 64, 1))
    assert_size_stride(view_1, (25088, 64), (64, 1))
    assert_size_stride(permute_2, (8, 1, 3136, 64), (200704, 64, 64, 1))
    assert_size_stride(view_4, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(mul_4, (8, 49, 64), (3136, 64, 1))
    assert_size_stride(view_6, (392, 64), (64, 1))
    assert_size_stride(getitem_6, (8, 1, 49, 64), (6272, 0, 128, 1))
    assert_size_stride(getitem_7, (8, 1, 49, 64), (6272, 0, 128, 1))
    assert_size_stride(getitem_9, (8, 1, 3136), (3136, 1, 1))
    assert_size_stride(getitem_10, (), ())
    assert_size_stride(getitem_11, (), ())
    assert_size_stride(getitem_14, (), ())
    assert_size_stride(getitem_15, (), ())
    assert_size_stride(view_10, (25088, 64), (64, 1))
    assert_size_stride(mul_6, (8, 3136, 64), (200704, 64, 1))
    assert_size_stride(view_12, (25088, 64), (64, 1))
    assert_size_stride(addmm_3, (25088, 512), (512, 1))
    assert_size_stride(view_14, (25088, 512), (512, 1))
    assert_size_stride(view_16, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(mul_11, (8, 3136, 64), (200704, 64, 1))
    assert_size_stride(view_19, (25088, 64), (64, 1))
    assert_size_stride(permute_15, (8, 1, 3136, 64), (200704, 64, 64, 1))
    assert_size_stride(view_22, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(mul_13, (8, 49, 64), (3136, 64, 1))
    assert_size_stride(view_24, (392, 64), (64, 1))
    assert_size_stride(getitem_23, (8, 1, 49, 64), (6272, 0, 128, 1))
    assert_size_stride(getitem_24, (8, 1, 49, 64), (6272, 0, 128, 1))
    assert_size_stride(getitem_26, (8, 1, 3136), (3136, 1, 1))
    assert_size_stride(getitem_27, (), ())
    assert_size_stride(getitem_28, (), ())
    assert_size_stride(getitem_31, (), ())
    assert_size_stride(getitem_32, (), ())
    assert_size_stride(view_28, (25088, 64), (64, 1))
    assert_size_stride(mul_15, (8, 3136, 64), (200704, 64, 1))
    assert_size_stride(view_30, (25088, 64), (64, 1))
    assert_size_stride(addmm_8, (25088, 512), (512, 1))
    assert_size_stride(view_32, (25088, 512), (512, 1))
    assert_size_stride(mul_20, (8, 3136, 64), (200704, 64, 1))
    assert_size_stride(view_34, (25088, 64), (64, 1))
    assert_size_stride(permute_25, (8, 1, 3136, 64), (200704, 64, 64, 1))
    assert_size_stride(view_37, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(mul_22, (8, 49, 64), (3136, 64, 1))
    assert_size_stride(view_39, (392, 64), (64, 1))
    assert_size_stride(getitem_40, (8, 1, 49, 64), (6272, 0, 128, 1))
    assert_size_stride(getitem_41, (8, 1, 49, 64), (6272, 0, 128, 1))
    assert_size_stride(getitem_43, (8, 1, 3136), (3136, 1, 1))
    assert_size_stride(getitem_44, (), ())
    assert_size_stride(getitem_45, (), ())
    assert_size_stride(getitem_48, (), ())
    assert_size_stride(getitem_49, (), ())
    assert_size_stride(view_43, (25088, 64), (64, 1))
    assert_size_stride(mul_24, (8, 3136, 64), (200704, 64, 1))
    assert_size_stride(view_45, (25088, 64), (64, 1))
    assert_size_stride(addmm_13, (25088, 512), (512, 1))
    assert_size_stride(view_47, (25088, 512), (512, 1))
    assert_size_stride(clone_11, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(mul_29, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(mul_31, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(view_51, (6272, 128), (128, 1))
    assert_size_stride(permute_37, (8, 2, 784, 64), (100352, 1, 128, 2))
    assert_size_stride(view_54, (8, 128, 28, 28), (100352, 1, 3584, 128))
    assert_size_stride(mul_33, (8, 49, 128), (6272, 128, 1))
    assert_size_stride(view_56, (392, 128), (128, 1))
    assert_size_stride(getitem_59, (8, 2, 49, 64), (12544, 64, 256, 1))
    assert_size_stride(getitem_60, (8, 2, 49, 64), (12544, 64, 256, 1))
    assert_size_stride(getitem_62, (8, 2, 784), (1568, 1, 2))
    assert_size_stride(getitem_63, (), ())
    assert_size_stride(getitem_64, (), ())
    assert_size_stride(getitem_67, (), ())
    assert_size_stride(getitem_68, (), ())
    assert_size_stride(view_60, (6272, 128), (128, 1))
    assert_size_stride(mul_35, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(view_62, (6272, 128), (128, 1))
    assert_size_stride(addmm_18, (6272, 1024), (1024, 1))
    assert_size_stride(view_64, (6272, 1024), (1024, 1))
    assert_size_stride(view_66, (8, 128, 28, 28), (100352, 1, 3584, 128))
    assert_size_stride(mul_40, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(view_69, (6272, 128), (128, 1))
    assert_size_stride(permute_50, (8, 2, 784, 64), (100352, 1, 128, 2))
    assert_size_stride(view_72, (8, 128, 28, 28), (100352, 1, 3584, 128))
    assert_size_stride(mul_42, (8, 49, 128), (6272, 128, 1))
    assert_size_stride(view_74, (392, 128), (128, 1))
    assert_size_stride(getitem_76, (8, 2, 49, 64), (12544, 64, 256, 1))
    assert_size_stride(getitem_77, (8, 2, 49, 64), (12544, 64, 256, 1))
    assert_size_stride(getitem_79, (8, 2, 784), (1568, 1, 2))
    assert_size_stride(getitem_80, (), ())
    assert_size_stride(getitem_81, (), ())
    assert_size_stride(getitem_84, (), ())
    assert_size_stride(getitem_85, (), ())
    assert_size_stride(view_78, (6272, 128), (128, 1))
    assert_size_stride(mul_44, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(view_80, (6272, 128), (128, 1))
    assert_size_stride(addmm_23, (6272, 1024), (1024, 1))
    assert_size_stride(view_82, (6272, 1024), (1024, 1))
    assert_size_stride(mul_49, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(view_84, (6272, 128), (128, 1))
    assert_size_stride(permute_60, (8, 2, 784, 64), (100352, 1, 128, 2))
    assert_size_stride(view_87, (8, 128, 28, 28), (100352, 1, 3584, 128))
    assert_size_stride(mul_51, (8, 49, 128), (6272, 128, 1))
    assert_size_stride(view_89, (392, 128), (128, 1))
    assert_size_stride(getitem_93, (8, 2, 49, 64), (12544, 64, 256, 1))
    assert_size_stride(getitem_94, (8, 2, 49, 64), (12544, 64, 256, 1))
    assert_size_stride(getitem_96, (8, 2, 784), (1568, 1, 2))
    assert_size_stride(getitem_97, (), ())
    assert_size_stride(getitem_98, (), ())
    assert_size_stride(getitem_101, (), ())
    assert_size_stride(getitem_102, (), ())
    assert_size_stride(view_93, (6272, 128), (128, 1))
    assert_size_stride(mul_53, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(view_95, (6272, 128), (128, 1))
    assert_size_stride(addmm_28, (6272, 1024), (1024, 1))
    assert_size_stride(view_97, (6272, 1024), (1024, 1))
    assert_size_stride(mul_58, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(view_99, (6272, 128), (128, 1))
    assert_size_stride(permute_70, (8, 2, 784, 64), (100352, 1, 128, 2))
    assert_size_stride(view_102, (8, 128, 28, 28), (100352, 1, 3584, 128))
    assert_size_stride(mul_60, (8, 49, 128), (6272, 128, 1))
    assert_size_stride(view_104, (392, 128), (128, 1))
    assert_size_stride(getitem_110, (8, 2, 49, 64), (12544, 64, 256, 1))
    assert_size_stride(getitem_111, (8, 2, 49, 64), (12544, 64, 256, 1))
    assert_size_stride(getitem_113, (8, 2, 784), (1568, 1, 2))
    assert_size_stride(getitem_114, (), ())
    assert_size_stride(getitem_115, (), ())
    assert_size_stride(getitem_118, (), ())
    assert_size_stride(getitem_119, (), ())
    assert_size_stride(view_108, (6272, 128), (128, 1))
    assert_size_stride(mul_62, (8, 784, 128), (100352, 128, 1))
    assert_size_stride(view_110, (6272, 128), (128, 1))
    assert_size_stride(addmm_33, (6272, 1024), (1024, 1))
    assert_size_stride(view_112, (6272, 1024), (1024, 1))
    assert_size_stride(clone_26, (8, 128, 28, 28), (100352, 1, 3584, 128))
    assert_size_stride(mul_67, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(mul_69, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_116, (1568, 320), (320, 1))
    assert_size_stride(permute_82, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_119, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_71, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_121, (392, 320), (320, 1))
    assert_size_stride(getitem_129, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_130, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_132, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_133, (), ())
    assert_size_stride(getitem_134, (), ())
    assert_size_stride(getitem_137, (), ())
    assert_size_stride(getitem_138, (), ())
    assert_size_stride(view_125, (1568, 320), (320, 1))
    assert_size_stride(mul_73, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_127, (1568, 320), (320, 1))
    assert_size_stride(addmm_38, (1568, 1280), (1280, 1))
    assert_size_stride(view_129, (1568, 1280), (1280, 1))
    assert_size_stride(view_131, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_78, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_134, (1568, 320), (320, 1))
    assert_size_stride(permute_95, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_137, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_80, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_139, (392, 320), (320, 1))
    assert_size_stride(getitem_146, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_147, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_149, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_150, (), ())
    assert_size_stride(getitem_151, (), ())
    assert_size_stride(getitem_154, (), ())
    assert_size_stride(getitem_155, (), ())
    assert_size_stride(view_143, (1568, 320), (320, 1))
    assert_size_stride(mul_82, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_145, (1568, 320), (320, 1))
    assert_size_stride(addmm_43, (1568, 1280), (1280, 1))
    assert_size_stride(view_147, (1568, 1280), (1280, 1))
    assert_size_stride(mul_87, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_149, (1568, 320), (320, 1))
    assert_size_stride(permute_105, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_152, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_89, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_154, (392, 320), (320, 1))
    assert_size_stride(getitem_163, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_164, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_166, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_167, (), ())
    assert_size_stride(getitem_168, (), ())
    assert_size_stride(getitem_171, (), ())
    assert_size_stride(getitem_172, (), ())
    assert_size_stride(view_158, (1568, 320), (320, 1))
    assert_size_stride(mul_91, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_160, (1568, 320), (320, 1))
    assert_size_stride(addmm_48, (1568, 1280), (1280, 1))
    assert_size_stride(view_162, (1568, 1280), (1280, 1))
    assert_size_stride(mul_96, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_164, (1568, 320), (320, 1))
    assert_size_stride(permute_115, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_167, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_98, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_169, (392, 320), (320, 1))
    assert_size_stride(getitem_180, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_181, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_183, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_184, (), ())
    assert_size_stride(getitem_185, (), ())
    assert_size_stride(getitem_188, (), ())
    assert_size_stride(getitem_189, (), ())
    assert_size_stride(view_173, (1568, 320), (320, 1))
    assert_size_stride(mul_100, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_175, (1568, 320), (320, 1))
    assert_size_stride(addmm_53, (1568, 1280), (1280, 1))
    assert_size_stride(view_177, (1568, 1280), (1280, 1))
    assert_size_stride(mul_105, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_179, (1568, 320), (320, 1))
    assert_size_stride(permute_125, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_182, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_107, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_184, (392, 320), (320, 1))
    assert_size_stride(getitem_197, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_198, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_200, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_201, (), ())
    assert_size_stride(getitem_202, (), ())
    assert_size_stride(getitem_205, (), ())
    assert_size_stride(getitem_206, (), ())
    assert_size_stride(view_188, (1568, 320), (320, 1))
    assert_size_stride(mul_109, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_190, (1568, 320), (320, 1))
    assert_size_stride(addmm_58, (1568, 1280), (1280, 1))
    assert_size_stride(view_192, (1568, 1280), (1280, 1))
    assert_size_stride(mul_114, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_194, (1568, 320), (320, 1))
    assert_size_stride(permute_135, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_197, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_116, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_199, (392, 320), (320, 1))
    assert_size_stride(getitem_214, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_215, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_217, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_218, (), ())
    assert_size_stride(getitem_219, (), ())
    assert_size_stride(getitem_222, (), ())
    assert_size_stride(getitem_223, (), ())
    assert_size_stride(view_203, (1568, 320), (320, 1))
    assert_size_stride(mul_118, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_205, (1568, 320), (320, 1))
    assert_size_stride(addmm_63, (1568, 1280), (1280, 1))
    assert_size_stride(view_207, (1568, 1280), (1280, 1))
    assert_size_stride(mul_123, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_209, (1568, 320), (320, 1))
    assert_size_stride(permute_145, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_212, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_125, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_214, (392, 320), (320, 1))
    assert_size_stride(getitem_231, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_232, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_234, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_235, (), ())
    assert_size_stride(getitem_236, (), ())
    assert_size_stride(getitem_239, (), ())
    assert_size_stride(getitem_240, (), ())
    assert_size_stride(view_218, (1568, 320), (320, 1))
    assert_size_stride(mul_127, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_220, (1568, 320), (320, 1))
    assert_size_stride(addmm_68, (1568, 1280), (1280, 1))
    assert_size_stride(view_222, (1568, 1280), (1280, 1))
    assert_size_stride(mul_132, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_224, (1568, 320), (320, 1))
    assert_size_stride(permute_155, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_227, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_134, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_229, (392, 320), (320, 1))
    assert_size_stride(getitem_248, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_249, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_251, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_252, (), ())
    assert_size_stride(getitem_253, (), ())
    assert_size_stride(getitem_256, (), ())
    assert_size_stride(getitem_257, (), ())
    assert_size_stride(view_233, (1568, 320), (320, 1))
    assert_size_stride(mul_136, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_235, (1568, 320), (320, 1))
    assert_size_stride(addmm_73, (1568, 1280), (1280, 1))
    assert_size_stride(view_237, (1568, 1280), (1280, 1))
    assert_size_stride(mul_141, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_239, (1568, 320), (320, 1))
    assert_size_stride(permute_165, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_242, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_143, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_244, (392, 320), (320, 1))
    assert_size_stride(getitem_265, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_266, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_268, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_269, (), ())
    assert_size_stride(getitem_270, (), ())
    assert_size_stride(getitem_273, (), ())
    assert_size_stride(getitem_274, (), ())
    assert_size_stride(view_248, (1568, 320), (320, 1))
    assert_size_stride(mul_145, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_250, (1568, 320), (320, 1))
    assert_size_stride(addmm_78, (1568, 1280), (1280, 1))
    assert_size_stride(view_252, (1568, 1280), (1280, 1))
    assert_size_stride(mul_150, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_254, (1568, 320), (320, 1))
    assert_size_stride(permute_175, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_257, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_152, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_259, (392, 320), (320, 1))
    assert_size_stride(getitem_282, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_283, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_285, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_286, (), ())
    assert_size_stride(getitem_287, (), ())
    assert_size_stride(getitem_290, (), ())
    assert_size_stride(getitem_291, (), ())
    assert_size_stride(view_263, (1568, 320), (320, 1))
    assert_size_stride(mul_154, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_265, (1568, 320), (320, 1))
    assert_size_stride(addmm_83, (1568, 1280), (1280, 1))
    assert_size_stride(view_267, (1568, 1280), (1280, 1))
    assert_size_stride(mul_159, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_269, (1568, 320), (320, 1))
    assert_size_stride(permute_185, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_272, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_161, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_274, (392, 320), (320, 1))
    assert_size_stride(getitem_299, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_300, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_302, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_303, (), ())
    assert_size_stride(getitem_304, (), ())
    assert_size_stride(getitem_307, (), ())
    assert_size_stride(getitem_308, (), ())
    assert_size_stride(view_278, (1568, 320), (320, 1))
    assert_size_stride(mul_163, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_280, (1568, 320), (320, 1))
    assert_size_stride(addmm_88, (1568, 1280), (1280, 1))
    assert_size_stride(view_282, (1568, 1280), (1280, 1))
    assert_size_stride(mul_168, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_284, (1568, 320), (320, 1))
    assert_size_stride(permute_195, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_287, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_170, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_289, (392, 320), (320, 1))
    assert_size_stride(getitem_316, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_317, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_319, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_320, (), ())
    assert_size_stride(getitem_321, (), ())
    assert_size_stride(getitem_324, (), ())
    assert_size_stride(getitem_325, (), ())
    assert_size_stride(view_293, (1568, 320), (320, 1))
    assert_size_stride(mul_172, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_295, (1568, 320), (320, 1))
    assert_size_stride(addmm_93, (1568, 1280), (1280, 1))
    assert_size_stride(view_297, (1568, 1280), (1280, 1))
    assert_size_stride(mul_177, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_299, (1568, 320), (320, 1))
    assert_size_stride(permute_205, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_302, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_179, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_304, (392, 320), (320, 1))
    assert_size_stride(getitem_333, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_334, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_336, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_337, (), ())
    assert_size_stride(getitem_338, (), ())
    assert_size_stride(getitem_341, (), ())
    assert_size_stride(getitem_342, (), ())
    assert_size_stride(view_308, (1568, 320), (320, 1))
    assert_size_stride(mul_181, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_310, (1568, 320), (320, 1))
    assert_size_stride(addmm_98, (1568, 1280), (1280, 1))
    assert_size_stride(view_312, (1568, 1280), (1280, 1))
    assert_size_stride(mul_186, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_314, (1568, 320), (320, 1))
    assert_size_stride(permute_215, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_317, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_188, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_319, (392, 320), (320, 1))
    assert_size_stride(getitem_350, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_351, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_353, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_354, (), ())
    assert_size_stride(getitem_355, (), ())
    assert_size_stride(getitem_358, (), ())
    assert_size_stride(getitem_359, (), ())
    assert_size_stride(view_323, (1568, 320), (320, 1))
    assert_size_stride(mul_190, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_325, (1568, 320), (320, 1))
    assert_size_stride(addmm_103, (1568, 1280), (1280, 1))
    assert_size_stride(view_327, (1568, 1280), (1280, 1))
    assert_size_stride(mul_195, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_329, (1568, 320), (320, 1))
    assert_size_stride(permute_225, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_332, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_197, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_334, (392, 320), (320, 1))
    assert_size_stride(getitem_367, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_368, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_370, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_371, (), ())
    assert_size_stride(getitem_372, (), ())
    assert_size_stride(getitem_375, (), ())
    assert_size_stride(getitem_376, (), ())
    assert_size_stride(view_338, (1568, 320), (320, 1))
    assert_size_stride(mul_199, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_340, (1568, 320), (320, 1))
    assert_size_stride(addmm_108, (1568, 1280), (1280, 1))
    assert_size_stride(view_342, (1568, 1280), (1280, 1))
    assert_size_stride(mul_204, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_344, (1568, 320), (320, 1))
    assert_size_stride(permute_235, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_347, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_206, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_349, (392, 320), (320, 1))
    assert_size_stride(getitem_384, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_385, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_387, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_388, (), ())
    assert_size_stride(getitem_389, (), ())
    assert_size_stride(getitem_392, (), ())
    assert_size_stride(getitem_393, (), ())
    assert_size_stride(view_353, (1568, 320), (320, 1))
    assert_size_stride(mul_208, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_355, (1568, 320), (320, 1))
    assert_size_stride(addmm_113, (1568, 1280), (1280, 1))
    assert_size_stride(view_357, (1568, 1280), (1280, 1))
    assert_size_stride(mul_213, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_359, (1568, 320), (320, 1))
    assert_size_stride(permute_245, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_362, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_215, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_364, (392, 320), (320, 1))
    assert_size_stride(getitem_401, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_402, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_404, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_405, (), ())
    assert_size_stride(getitem_406, (), ())
    assert_size_stride(getitem_409, (), ())
    assert_size_stride(getitem_410, (), ())
    assert_size_stride(view_368, (1568, 320), (320, 1))
    assert_size_stride(mul_217, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_370, (1568, 320), (320, 1))
    assert_size_stride(addmm_118, (1568, 1280), (1280, 1))
    assert_size_stride(view_372, (1568, 1280), (1280, 1))
    assert_size_stride(mul_222, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_374, (1568, 320), (320, 1))
    assert_size_stride(permute_255, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(view_377, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_224, (8, 49, 320), (15680, 320, 1))
    assert_size_stride(view_379, (392, 320), (320, 1))
    assert_size_stride(getitem_418, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_419, (8, 5, 49, 64), (31360, 64, 640, 1))
    assert_size_stride(getitem_421, (8, 5, 196), (980, 1, 5))
    assert_size_stride(getitem_422, (), ())
    assert_size_stride(getitem_423, (), ())
    assert_size_stride(getitem_426, (), ())
    assert_size_stride(getitem_427, (), ())
    assert_size_stride(view_383, (1568, 320), (320, 1))
    assert_size_stride(mul_226, (8, 196, 320), (62720, 320, 1))
    assert_size_stride(view_385, (1568, 320), (320, 1))
    assert_size_stride(addmm_123, (1568, 1280), (1280, 1))
    assert_size_stride(view_387, (1568, 1280), (1280, 1))
    assert_size_stride(clone_83, (8, 320, 14, 14), (62720, 1, 4480, 320))
    assert_size_stride(mul_231, (8, 49, 512), (25088, 512, 1))
    assert_size_stride(mul_233, (8, 49, 512), (25088, 512, 1))
    assert_size_stride(view_391, (392, 512), (512, 1))
    assert_size_stride(permute_267, (8, 8, 49, 64), (25088, 1, 512, 8))
    assert_size_stride(getitem_435, (8, 8, 49, 64), (50176, 64, 1024, 1))
    assert_size_stride(getitem_436, (8, 8, 49, 64), (50176, 64, 1024, 1))
    assert_size_stride(getitem_438, (8, 8, 49), (392, 1, 8))
    assert_size_stride(getitem_439, (), ())
    assert_size_stride(getitem_440, (), ())
    assert_size_stride(getitem_443, (), ())
    assert_size_stride(getitem_444, (), ())
    assert_size_stride(view_398, (392, 512), (512, 1))
    assert_size_stride(mul_235, (8, 49, 512), (25088, 512, 1))
    assert_size_stride(view_400, (392, 512), (512, 1))
    assert_size_stride(addmm_128, (392, 2048), (2048, 1))
    assert_size_stride(view_402, (392, 2048), (2048, 1))
    assert_size_stride(view_404, (8, 512, 7, 7), (25088, 1, 3584, 512))
    assert_size_stride(mul_240, (8, 49, 512), (25088, 512, 1))
    assert_size_stride(view_407, (392, 512), (512, 1))
    assert_size_stride(permute_278, (8, 8, 49, 64), (25088, 1, 512, 8))
    assert_size_stride(getitem_450, (8, 8, 49, 64), (50176, 64, 1024, 1))
    assert_size_stride(getitem_451, (8, 8, 49, 64), (50176, 64, 1024, 1))
    assert_size_stride(getitem_453, (8, 8, 49), (392, 1, 8))
    assert_size_stride(getitem_454, (), ())
    assert_size_stride(getitem_455, (), ())
    assert_size_stride(getitem_458, (), ())
    assert_size_stride(getitem_459, (), ())
    assert_size_stride(view_414, (392, 512), (512, 1))
    assert_size_stride(mul_242, (8, 49, 512), (25088, 512, 1))
    assert_size_stride(view_416, (392, 512), (512, 1))
    assert_size_stride(addmm_133, (392, 2048), (2048, 1))
    assert_size_stride(view_418, (392, 2048), (2048, 1))
    assert_size_stride(mul_247, (8, 49, 512), (25088, 512, 1))
    assert_size_stride(view_420, (392, 512), (512, 1))
    assert_size_stride(permute_286, (8, 8, 49, 64), (25088, 1, 512, 8))
    assert_size_stride(getitem_465, (8, 8, 49, 64), (50176, 64, 1024, 1))
    assert_size_stride(getitem_466, (8, 8, 49, 64), (50176, 64, 1024, 1))
    assert_size_stride(getitem_468, (8, 8, 49), (392, 1, 8))
    assert_size_stride(getitem_469, (), ())
    assert_size_stride(getitem_470, (), ())
    assert_size_stride(getitem_473, (), ())
    assert_size_stride(getitem_474, (), ())
    assert_size_stride(view_427, (392, 512), (512, 1))
    assert_size_stride(mul_249, (8, 49, 512), (25088, 512, 1))
    assert_size_stride(view_429, (392, 512), (512, 1))
    assert_size_stride(addmm_138, (392, 2048), (2048, 1))
    assert_size_stride(view_431, (392, 2048), (2048, 1))
    assert_size_stride(mul_254, (8, 49, 512), (25088, 512, 1))
    assert_size_stride(clone_95, (8, 512), (512, 1))
    assert_size_stride(permute_294, (1000, 512), (512, 1))
    assert_size_stride(div_1, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_298, (512, 2048), (2048, 1))
    assert_size_stride(permute_302, (2048, 512), (512, 1))
    assert_size_stride(div_2, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_306, (512, 512), (512, 1))
    assert_size_stride(alias_28, (8, 8, 49, 64), (25088, 1, 512, 8))
    assert_size_stride(permute_312, (1024, 512), (512, 1))
    assert_size_stride(permute_317, (512, 512), (512, 1))
    assert_size_stride(div_3, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_321, (512, 2048), (2048, 1))
    assert_size_stride(permute_325, (2048, 512), (512, 1))
    assert_size_stride(div_4, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_329, (512, 512), (512, 1))
    assert_size_stride(alias_29, (8, 8, 49, 64), (25088, 1, 512, 8))
    assert_size_stride(permute_335, (1024, 512), (512, 1))
    assert_size_stride(permute_340, (512, 512), (512, 1))
    assert_size_stride(div_5, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_346, (512, 2048), (2048, 1))
    assert_size_stride(permute_350, (2048, 512), (512, 1))
    assert_size_stride(div_6, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_354, (512, 512), (512, 1))
    assert_size_stride(alias_30, (8, 8, 49, 64), (25088, 1, 512, 8))
    assert_size_stride(permute_360, (1024, 512), (512, 1))
    assert_size_stride(permute_365, (512, 512), (512, 1))
    assert_size_stride(div_7, (8, 49, 1), (49, 1, 1))
    assert_size_stride(div_8, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_371, (320, 1280), (1280, 1))
    assert_size_stride(permute_375, (1280, 320), (320, 1))
    assert_size_stride(div_9, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_379, (320, 320), (320, 1))
    assert_size_stride(alias_31, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_385, (640, 320), (320, 1))
    assert_size_stride(div_10, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_392, (320, 320), (320, 1))
    assert_size_stride(div_11, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_396, (320, 1280), (1280, 1))
    assert_size_stride(permute_400, (1280, 320), (320, 1))
    assert_size_stride(div_12, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_404, (320, 320), (320, 1))
    assert_size_stride(alias_32, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_410, (640, 320), (320, 1))
    assert_size_stride(div_13, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_417, (320, 320), (320, 1))
    assert_size_stride(div_14, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_421, (320, 1280), (1280, 1))
    assert_size_stride(permute_425, (1280, 320), (320, 1))
    assert_size_stride(div_15, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_429, (320, 320), (320, 1))
    assert_size_stride(alias_33, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_435, (640, 320), (320, 1))
    assert_size_stride(div_16, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_442, (320, 320), (320, 1))
    assert_size_stride(div_17, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_446, (320, 1280), (1280, 1))
    assert_size_stride(permute_450, (1280, 320), (320, 1))
    assert_size_stride(div_18, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_454, (320, 320), (320, 1))
    assert_size_stride(alias_34, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_460, (640, 320), (320, 1))
    assert_size_stride(div_19, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_467, (320, 320), (320, 1))
    assert_size_stride(div_20, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_471, (320, 1280), (1280, 1))
    assert_size_stride(permute_475, (1280, 320), (320, 1))
    assert_size_stride(div_21, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_479, (320, 320), (320, 1))
    assert_size_stride(alias_35, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_485, (640, 320), (320, 1))
    assert_size_stride(div_22, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_492, (320, 320), (320, 1))
    assert_size_stride(div_23, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_496, (320, 1280), (1280, 1))
    assert_size_stride(permute_500, (1280, 320), (320, 1))
    assert_size_stride(div_24, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_504, (320, 320), (320, 1))
    assert_size_stride(alias_36, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_510, (640, 320), (320, 1))
    assert_size_stride(div_25, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_517, (320, 320), (320, 1))
    assert_size_stride(div_26, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_521, (320, 1280), (1280, 1))
    assert_size_stride(permute_525, (1280, 320), (320, 1))
    assert_size_stride(div_27, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_529, (320, 320), (320, 1))
    assert_size_stride(alias_37, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_535, (640, 320), (320, 1))
    assert_size_stride(div_28, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_542, (320, 320), (320, 1))
    assert_size_stride(div_29, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_546, (320, 1280), (1280, 1))
    assert_size_stride(permute_550, (1280, 320), (320, 1))
    assert_size_stride(div_30, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_554, (320, 320), (320, 1))
    assert_size_stride(alias_38, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_560, (640, 320), (320, 1))
    assert_size_stride(div_31, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_567, (320, 320), (320, 1))
    assert_size_stride(div_32, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_571, (320, 1280), (1280, 1))
    assert_size_stride(permute_575, (1280, 320), (320, 1))
    assert_size_stride(div_33, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_579, (320, 320), (320, 1))
    assert_size_stride(alias_39, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_585, (640, 320), (320, 1))
    assert_size_stride(div_34, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_592, (320, 320), (320, 1))
    assert_size_stride(div_35, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_596, (320, 1280), (1280, 1))
    assert_size_stride(permute_600, (1280, 320), (320, 1))
    assert_size_stride(div_36, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_604, (320, 320), (320, 1))
    assert_size_stride(alias_40, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_610, (640, 320), (320, 1))
    assert_size_stride(div_37, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_617, (320, 320), (320, 1))
    assert_size_stride(div_38, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_621, (320, 1280), (1280, 1))
    assert_size_stride(permute_625, (1280, 320), (320, 1))
    assert_size_stride(div_39, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_629, (320, 320), (320, 1))
    assert_size_stride(alias_41, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_635, (640, 320), (320, 1))
    assert_size_stride(div_40, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_642, (320, 320), (320, 1))
    assert_size_stride(div_41, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_646, (320, 1280), (1280, 1))
    assert_size_stride(permute_650, (1280, 320), (320, 1))
    assert_size_stride(div_42, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_654, (320, 320), (320, 1))
    assert_size_stride(alias_42, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_660, (640, 320), (320, 1))
    assert_size_stride(div_43, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_667, (320, 320), (320, 1))
    assert_size_stride(div_44, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_671, (320, 1280), (1280, 1))
    assert_size_stride(permute_675, (1280, 320), (320, 1))
    assert_size_stride(div_45, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_679, (320, 320), (320, 1))
    assert_size_stride(alias_43, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_685, (640, 320), (320, 1))
    assert_size_stride(div_46, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_692, (320, 320), (320, 1))
    assert_size_stride(div_47, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_696, (320, 1280), (1280, 1))
    assert_size_stride(permute_700, (1280, 320), (320, 1))
    assert_size_stride(div_48, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_704, (320, 320), (320, 1))
    assert_size_stride(alias_44, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_710, (640, 320), (320, 1))
    assert_size_stride(div_49, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_717, (320, 320), (320, 1))
    assert_size_stride(div_50, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_721, (320, 1280), (1280, 1))
    assert_size_stride(permute_725, (1280, 320), (320, 1))
    assert_size_stride(div_51, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_729, (320, 320), (320, 1))
    assert_size_stride(alias_45, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_735, (640, 320), (320, 1))
    assert_size_stride(div_52, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_742, (320, 320), (320, 1))
    assert_size_stride(div_53, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_746, (320, 1280), (1280, 1))
    assert_size_stride(permute_750, (1280, 320), (320, 1))
    assert_size_stride(div_54, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_754, (320, 320), (320, 1))
    assert_size_stride(alias_46, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_760, (640, 320), (320, 1))
    assert_size_stride(div_55, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_767, (320, 320), (320, 1))
    assert_size_stride(div_56, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_771, (320, 1280), (1280, 1))
    assert_size_stride(permute_775, (1280, 320), (320, 1))
    assert_size_stride(div_57, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_779, (320, 320), (320, 1))
    assert_size_stride(alias_47, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_785, (640, 320), (320, 1))
    assert_size_stride(div_58, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_792, (320, 320), (320, 1))
    assert_size_stride(div_59, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_798, (320, 1280), (1280, 1))
    assert_size_stride(permute_802, (1280, 320), (320, 1))
    assert_size_stride(div_60, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_806, (320, 320), (320, 1))
    assert_size_stride(alias_48, (8, 5, 196, 64), (62720, 1, 320, 5))
    assert_size_stride(permute_812, (640, 320), (320, 1))
    assert_size_stride(div_61, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_819, (320, 320), (320, 1))
    assert_size_stride(div_62, (8, 196, 1), (196, 1, 1))
    assert_size_stride(div_63, (8, 196, 1), (196, 1, 1))
    assert_size_stride(permute_825, (128, 1024), (1024, 1))
    assert_size_stride(permute_829, (1024, 128), (128, 1))
    assert_size_stride(div_64, (8, 784, 1), (784, 1, 1))
    assert_size_stride(permute_833, (128, 128), (128, 1))
    assert_size_stride(alias_49, (8, 2, 784, 64), (100352, 1, 128, 2))
    assert_size_stride(permute_839, (256, 128), (128, 1))
    assert_size_stride(div_65, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_846, (128, 128), (128, 1))
    assert_size_stride(div_66, (8, 784, 1), (784, 1, 1))
    assert_size_stride(permute_850, (128, 1024), (1024, 1))
    assert_size_stride(permute_854, (1024, 128), (128, 1))
    assert_size_stride(div_67, (8, 784, 1), (784, 1, 1))
    assert_size_stride(permute_858, (128, 128), (128, 1))
    assert_size_stride(alias_50, (8, 2, 784, 64), (100352, 1, 128, 2))
    assert_size_stride(permute_864, (256, 128), (128, 1))
    assert_size_stride(div_68, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_871, (128, 128), (128, 1))
    assert_size_stride(div_69, (8, 784, 1), (784, 1, 1))
    assert_size_stride(permute_875, (128, 1024), (1024, 1))
    assert_size_stride(permute_879, (1024, 128), (128, 1))
    assert_size_stride(div_70, (8, 784, 1), (784, 1, 1))
    assert_size_stride(permute_883, (128, 128), (128, 1))
    assert_size_stride(alias_51, (8, 2, 784, 64), (100352, 1, 128, 2))
    assert_size_stride(permute_889, (256, 128), (128, 1))
    assert_size_stride(div_71, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_896, (128, 128), (128, 1))
    assert_size_stride(div_72, (8, 784, 1), (784, 1, 1))
    assert_size_stride(permute_902, (128, 1024), (1024, 1))
    assert_size_stride(permute_906, (1024, 128), (128, 1))
    assert_size_stride(div_73, (8, 784, 1), (784, 1, 1))
    assert_size_stride(permute_910, (128, 128), (128, 1))
    assert_size_stride(alias_52, (8, 2, 784, 64), (100352, 1, 128, 2))
    assert_size_stride(permute_916, (256, 128), (128, 1))
    assert_size_stride(div_74, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_923, (128, 128), (128, 1))
    assert_size_stride(div_75, (8, 784, 1), (784, 1, 1))
    assert_size_stride(div_76, (8, 784, 1), (784, 1, 1))
    assert_size_stride(permute_929, (64, 512), (512, 1))
    assert_size_stride(permute_933, (512, 64), (64, 1))
    assert_size_stride(div_77, (8, 3136, 1), (3136, 1, 1))
    assert_size_stride(permute_937, (64, 64), (64, 1))
    assert_size_stride(alias_53, (8, 1, 3136, 64), (200704, 64, 64, 1))
    assert_size_stride(permute_943, (128, 64), (64, 1))
    assert_size_stride(div_78, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_950, (64, 64), (64, 1))
    assert_size_stride(div_79, (8, 3136, 1), (3136, 1, 1))
    assert_size_stride(permute_954, (64, 512), (512, 1))
    assert_size_stride(permute_958, (512, 64), (64, 1))
    assert_size_stride(div_80, (8, 3136, 1), (3136, 1, 1))
    assert_size_stride(permute_962, (64, 64), (64, 1))
    assert_size_stride(alias_54, (8, 1, 3136, 64), (200704, 64, 64, 1))
    assert_size_stride(permute_968, (128, 64), (64, 1))
    assert_size_stride(div_81, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_975, (64, 64), (64, 1))
    assert_size_stride(div_82, (8, 3136, 1), (3136, 1, 1))
    assert_size_stride(permute_981, (64, 512), (512, 1))
    assert_size_stride(permute_985, (512, 64), (64, 1))
    assert_size_stride(div_83, (8, 3136, 1), (3136, 1, 1))
    assert_size_stride(permute_989, (64, 64), (64, 1))
    assert_size_stride(alias_55, (8, 1, 3136, 64), (200704, 64, 64, 1))
    assert_size_stride(permute_995, (128, 64), (64, 1))
    assert_size_stride(div_84, (8, 49, 1), (49, 1, 1))
    assert_size_stride(permute_1002, (64, 64), (64, 1))
    assert_size_stride(div_85, (8, 3136, 1), (3136, 1, 1))
    assert_size_stride(div_86, (8, 3136, 1), (3136, 1, 1))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_294, out=buf0)
    del permute_294
    buf1 = empty((1000, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), clone_95, out=buf1)
    del clone_95
    buf2 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf3 = empty_strided((8, 49, 1), (49, 1, 392), device='cpu', dtype=torch.float32)
    buf4 = empty_strided((8, 49, 1), (49, 1, 392), device='cpu', dtype=torch.float32)
    buf5 = empty((8, 49, 512), device='cpu', dtype=torch.float32)
    buf6 = empty((512, ), device='cpu', dtype=torch.float32)
    buf7 = empty((512, ), device='cpu', dtype=torch.float32)
    cpp_fused_div_native_layer_norm_backward_sum_0(c_void_p(tangents_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(primals_517.data_ptr()), c_void_p(mul_254.data_ptr()), c_void_p(div_1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf7.data_ptr()))
    del div_1
    del mul_254
    del primals_517
    del tangents_1
    buf8 = empty((392, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf5, (392, 512), (512, 1), 0), permute_298, out=buf8)
    del permute_298
    buf9 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf5, (512, 392), (1, 512), 0), view_431, out=buf9)
    del view_431
    buf10 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf11 = reinterpret_tensor(buf8, (8, 49, 2048), (100352, 2048, 1), 0); del buf8  # reuse
    cpp_fused_gelu_gelu_backward_sum_1(c_void_p(buf11.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(addmm_138.data_ptr()), c_void_p(buf10.data_ptr()))
    del addmm_138
    buf12 = empty((392, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf11, (392, 2048), (2048, 1), 0), permute_302, out=buf12)
    del permute_302
    buf13 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf11, (2048, 392), (1, 2048), 0), view_429, out=buf13)
    del view_429
    buf14 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf15 = buf4; del buf4  # reuse
    buf16 = buf3; del buf3  # reuse
    buf17 = empty((512, ), device='cpu', dtype=torch.float32)
    buf18 = empty((512, ), device='cpu', dtype=torch.float32)
    buf19 = reinterpret_tensor(buf12, (8, 49, 512), (25088, 512, 1), 0); del buf12  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_2(c_void_p(buf19.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(primals_511.data_ptr()), c_void_p(mul_249.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(div_2.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(buf17.data_ptr()), c_void_p(buf18.data_ptr()))
    del div_2
    del mul_249
    del primals_511
    buf20 = reinterpret_tensor(buf5, (392, 512), (512, 1), 0); del buf5  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf19, (392, 512), (512, 1), 0), permute_306, out=buf20)
    del permute_306
    buf21 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf19, (512, 392), (1, 512), 0), view_427, out=buf21)
    del view_427
    buf22 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_3(c_void_p(buf19.data_ptr()), c_void_p(buf22.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf23 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf20, (8, 8, 49, 64), (25088, 64, 512, 1), 0), permute_286, getitem_465, getitem_466, alias_28, getitem_468, getitem_469, getitem_470, 0, 0, 0.0, False, getitem_473, getitem_474)
    del alias_28
    del buf20
    del getitem_465
    del getitem_466
    del getitem_468
    del getitem_469
    del getitem_470
    del getitem_473
    del getitem_474
    del permute_286
    buf24 = buf23[0]
    buf25 = buf23[1]
    buf26 = buf23[2]
    del buf23
    buf27 = empty((8, 49, 2, 8, 64), device='cpu', dtype=torch.float32)
    cpp_fused_clone_4(c_void_p(buf25.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf27.data_ptr()))
    buf28 = reinterpret_tensor(buf26, (392, 512), (512, 1), 0); del buf26  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf27, (392, 1024), (1024, 1), 0), permute_312, out=buf28)
    del permute_312
    buf29 = empty((1024, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf27, (1024, 392), (1, 1024), 0), view_420, out=buf29)
    buf30 = empty((1, 1024), device='cpu', dtype=torch.float32)
    cpp_fused_sum_5(c_void_p(buf27.data_ptr()), c_void_p(buf30.data_ptr()))
    buf31 = reinterpret_tensor(buf25, (392, 512), (512, 1), 0); del buf25  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf24, (392, 512), (512, 1), 0), permute_317, out=buf31)
    del permute_317
    buf32 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf24, (512, 392), (1, 512), 0), view_420, out=buf32)
    del view_420
    buf33 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf34 = buf16; del buf16  # reuse
    buf35 = buf15; del buf15  # reuse
    buf36 = empty((512, ), device='cpu', dtype=torch.float32)
    buf37 = empty((512, ), device='cpu', dtype=torch.float32)
    buf38 = buf19; del buf19  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_6(c_void_p(buf38.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf28.data_ptr()), c_void_p(buf31.data_ptr()), c_void_p(primals_503.data_ptr()), c_void_p(mul_247.data_ptr()), c_void_p(div_3.data_ptr()), c_void_p(buf33.data_ptr()), c_void_p(buf34.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(buf37.data_ptr()))
    del buf24
    del buf28
    del div_3
    del mul_247
    del primals_503
    buf39 = reinterpret_tensor(buf11, (392, 2048), (2048, 1), 0); del buf11  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf38, (392, 512), (512, 1), 0), permute_321, out=buf39)
    del permute_321
    buf40 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf38, (512, 392), (1, 512), 0), view_418, out=buf40)
    del view_418
    buf41 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf42 = reinterpret_tensor(buf39, (8, 49, 2048), (100352, 2048, 1), 0); del buf39  # reuse
    cpp_fused_gelu_gelu_backward_sum_7(c_void_p(buf42.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(addmm_133.data_ptr()), c_void_p(buf41.data_ptr()))
    del addmm_133
    buf43 = buf31; del buf31  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf42, (392, 2048), (2048, 1), 0), permute_325, out=buf43)
    del permute_325
    buf44 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf42, (2048, 392), (1, 2048), 0), view_416, out=buf44)
    del view_416
    buf45 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf46 = buf35; del buf35  # reuse
    buf47 = buf34; del buf34  # reuse
    buf48 = empty((512, ), device='cpu', dtype=torch.float32)
    buf49 = empty((512, ), device='cpu', dtype=torch.float32)
    buf50 = buf38; del buf38  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_8(c_void_p(buf50.data_ptr()), c_void_p(buf42.data_ptr()), c_void_p(buf43.data_ptr()), c_void_p(primals_497.data_ptr()), c_void_p(mul_242.data_ptr()), c_void_p(div_4.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(buf48.data_ptr()), c_void_p(buf49.data_ptr()))
    del div_4
    del mul_242
    del primals_497
    buf51 = buf43; del buf43  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf50, (392, 512), (512, 1), 0), permute_329, out=buf51)
    del permute_329
    buf52 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf50, (512, 392), (1, 512), 0), view_414, out=buf52)
    del view_414
    buf53 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_9(c_void_p(buf50.data_ptr()), c_void_p(buf53.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf54 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf51, (8, 8, 49, 64), (25088, 64, 512, 1), 0), permute_278, getitem_450, getitem_451, alias_29, getitem_453, getitem_454, getitem_455, 0, 0, 0.0, False, getitem_458, getitem_459)
    del alias_29
    del buf51
    del getitem_450
    del getitem_451
    del getitem_453
    del getitem_454
    del getitem_455
    del getitem_458
    del getitem_459
    del permute_278
    buf55 = buf54[0]
    buf56 = buf54[1]
    buf57 = buf54[2]
    del buf54
    buf58 = buf27; del buf27  # reuse
    cpp_fused_clone_10(c_void_p(buf56.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf58.data_ptr()))
    buf59 = reinterpret_tensor(buf57, (392, 512), (512, 1), 0); del buf57  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf58, (392, 1024), (1024, 1), 0), permute_335, out=buf59)
    del permute_335
    buf60 = empty((1024, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf58, (1024, 392), (1, 1024), 0), view_407, out=buf60)
    buf61 = empty((1, 1024), device='cpu', dtype=torch.float32)
    cpp_fused_sum_11(c_void_p(buf58.data_ptr()), c_void_p(buf61.data_ptr()))
    buf62 = reinterpret_tensor(buf56, (392, 512), (512, 1), 0); del buf56  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf55, (392, 512), (512, 1), 0), permute_340, out=buf62)
    del permute_340
    buf63 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf55, (512, 392), (1, 512), 0), view_407, out=buf63)
    del view_407
    buf64 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf65 = buf47; del buf47  # reuse
    buf66 = buf46; del buf46  # reuse
    buf67 = empty((512, ), device='cpu', dtype=torch.float32)
    buf68 = empty((512, ), device='cpu', dtype=torch.float32)
    buf69 = buf50; del buf50  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_12(c_void_p(buf69.data_ptr()), c_void_p(buf55.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf62.data_ptr()), c_void_p(primals_489.data_ptr()), c_void_p(mul_240.data_ptr()), c_void_p(div_5.data_ptr()), c_void_p(buf64.data_ptr()), c_void_p(buf65.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf67.data_ptr()), c_void_p(buf68.data_ptr()))
    del buf55
    del div_5
    del mul_240
    del primals_489
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf70 = aten.convolution_backward(reinterpret_tensor(buf69, (8, 512, 7, 7), (25088, 1, 3584, 512), 0), view_404, primals_487, [512], [1, 1], [1, 1], [1, 1], False, [0, 0], 512, [True, True, True])
    del primals_487
    del view_404
    buf71 = buf70[0]
    buf72 = buf70[1]
    buf73 = buf70[2]
    del buf70
    buf74 = reinterpret_tensor(buf62, (8, 512, 7, 7), (25088, 49, 7, 1), 0); del buf62  # reuse
    buf75 = buf59; del buf59  # reuse
    cpp_fused_add_view_13(c_void_p(buf69.data_ptr()), c_void_p(buf71.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(buf75.data_ptr()))
    del buf69
    del buf71
    buf76 = reinterpret_tensor(buf42, (392, 2048), (2048, 1), 0); del buf42  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf75, permute_346, out=buf76)
    del permute_346
    buf77 = empty((512, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf75, (512, 392), (1, 512), 0), view_402, out=buf77)
    del view_402
    buf78 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf79 = reinterpret_tensor(buf76, (8, 49, 2048), (100352, 2048, 1), 0); del buf76  # reuse
    cpp_fused_gelu_gelu_backward_sum_14(c_void_p(buf79.data_ptr()), c_void_p(buf75.data_ptr()), c_void_p(addmm_128.data_ptr()), c_void_p(buf78.data_ptr()))
    del addmm_128
    buf80 = buf75; del buf75  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf79, (392, 2048), (2048, 1), 0), permute_350, out=buf80)
    del permute_350
    buf81 = empty((2048, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf79, (2048, 392), (1, 2048), 0), view_400, out=buf81)
    del view_400
    buf82 = empty((1, 2048), device='cpu', dtype=torch.float32)
    buf83 = buf66; del buf66  # reuse
    buf84 = buf65; del buf65  # reuse
    buf85 = empty((512, ), device='cpu', dtype=torch.float32)
    buf86 = empty((512, ), device='cpu', dtype=torch.float32)
    buf87 = reinterpret_tensor(buf80, (8, 49, 512), (25088, 512, 1), 0); del buf80  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_15(c_void_p(buf87.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(primals_481.data_ptr()), c_void_p(mul_235.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(div_6.data_ptr()), c_void_p(buf82.data_ptr()), c_void_p(buf83.data_ptr()), c_void_p(buf84.data_ptr()), c_void_p(buf85.data_ptr()), c_void_p(buf86.data_ptr()))
    del div_6
    del mul_235
    del primals_481
    buf88 = reinterpret_tensor(buf74, (392, 512), (512, 1), 0); del buf74  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf87, (392, 512), (512, 1), 0), permute_354, out=buf88)
    del permute_354
    buf89 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf87, (512, 392), (1, 512), 0), view_398, out=buf89)
    del view_398
    buf90 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_16(c_void_p(buf87.data_ptr()), c_void_p(buf90.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf91 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf88, (8, 8, 49, 64), (25088, 64, 512, 1), 0), permute_267, getitem_435, getitem_436, alias_30, getitem_438, getitem_439, getitem_440, 0, 0, 0.0, False, getitem_443, getitem_444)
    del alias_30
    del buf88
    del getitem_435
    del getitem_436
    del getitem_438
    del getitem_439
    del getitem_440
    del getitem_443
    del getitem_444
    del permute_267
    buf92 = buf91[0]
    buf93 = buf91[1]
    buf94 = buf91[2]
    del buf91
    buf95 = buf58; del buf58  # reuse
    cpp_fused_clone_17(c_void_p(buf93.data_ptr()), c_void_p(buf94.data_ptr()), c_void_p(buf95.data_ptr()))
    buf96 = reinterpret_tensor(buf94, (392, 512), (512, 1), 0); del buf94  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf95, (392, 1024), (1024, 1), 0), permute_360, out=buf96)
    del permute_360
    buf97 = empty((1024, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf95, (1024, 392), (1, 1024), 0), view_391, out=buf97)
    buf98 = empty((1, 1024), device='cpu', dtype=torch.float32)
    cpp_fused_sum_18(c_void_p(buf95.data_ptr()), c_void_p(buf98.data_ptr()))
    del buf95
    buf99 = reinterpret_tensor(buf93, (392, 512), (512, 1), 0); del buf93  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf92, (392, 512), (512, 1), 0), permute_365, out=buf99)
    del permute_365
    buf100 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf92, (512, 392), (1, 512), 0), view_391, out=buf100)
    del view_391
    buf101 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf102 = buf84; del buf84  # reuse
    buf103 = buf83; del buf83  # reuse
    buf104 = empty((512, ), device='cpu', dtype=torch.float32)
    buf105 = empty((512, ), device='cpu', dtype=torch.float32)
    buf106 = buf87; del buf87  # reuse
    buf107 = empty_strided((8, 49, 1), (49, 1, 392), device='cpu', dtype=torch.float32)
    buf108 = empty_strided((8, 49, 1), (49, 1, 392), device='cpu', dtype=torch.float32)
    buf109 = empty((512, ), device='cpu', dtype=torch.float32)
    buf110 = empty((512, ), device='cpu', dtype=torch.float32)
    buf111 = reinterpret_tensor(buf106, (8, 512, 7, 7), (25088, 1, 3584, 512), 0); del buf106  # reuse
    cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_19(c_void_p(buf111.data_ptr()), c_void_p(buf92.data_ptr()), c_void_p(buf96.data_ptr()), c_void_p(buf99.data_ptr()), c_void_p(primals_473.data_ptr()), c_void_p(mul_233.data_ptr()), c_void_p(div_7.data_ptr()), c_void_p(primals_471.data_ptr()), c_void_p(mul_231.data_ptr()), c_void_p(div_8.data_ptr()), c_void_p(buf101.data_ptr()), c_void_p(buf102.data_ptr()), c_void_p(buf103.data_ptr()), c_void_p(buf104.data_ptr()), c_void_p(buf105.data_ptr()), c_void_p(buf107.data_ptr()), c_void_p(buf108.data_ptr()), c_void_p(buf109.data_ptr()), c_void_p(buf110.data_ptr()))
    del buf102
    del buf103
    del buf92
    del buf96
    del buf99
    del div_7
    del div_8
    del mul_231
    del mul_233
    del primals_471
    del primals_473
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf112 = aten.convolution_backward(buf111, clone_83, primals_469, [512], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf111
    del clone_83
    del primals_469
    buf113 = buf112[0]
    buf114 = buf112[1]
    buf115 = buf112[2]
    del buf112
    buf116 = empty((1568, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf113, (1568, 320), (320, 1), 0), permute_371, out=buf116)
    del permute_371
    buf117 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf113, (320, 1568), (1, 320), 0), view_387, out=buf117)
    del view_387
    buf118 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf119 = reinterpret_tensor(buf116, (8, 196, 1280), (250880, 1280, 1), 0); del buf116  # reuse
    cpp_fused_gelu_gelu_backward_sum_20(c_void_p(buf119.data_ptr()), c_void_p(buf113.data_ptr()), c_void_p(addmm_123.data_ptr()), c_void_p(buf118.data_ptr()))
    del addmm_123
    buf120 = empty((1568, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf119, (1568, 1280), (1280, 1), 0), permute_375, out=buf120)
    del permute_375
    buf121 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf119, (1280, 1568), (1, 1280), 0), view_385, out=buf121)
    del view_385
    buf122 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf123 = empty_strided((8, 196, 1), (196, 1, 1568), device='cpu', dtype=torch.float32)
    buf124 = empty_strided((8, 196, 1), (196, 1, 1568), device='cpu', dtype=torch.float32)
    buf125 = empty((320, ), device='cpu', dtype=torch.float32)
    buf126 = empty((320, ), device='cpu', dtype=torch.float32)
    buf127 = reinterpret_tensor(buf113, (8, 196, 320), (62720, 320, 1), 0); del buf113  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_21(c_void_p(buf127.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(primals_463.data_ptr()), c_void_p(mul_226.data_ptr()), c_void_p(div_9.data_ptr()), c_void_p(buf122.data_ptr()), c_void_p(buf123.data_ptr()), c_void_p(buf124.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(buf126.data_ptr()))
    del div_9
    del mul_226
    del primals_463
    buf128 = buf120; del buf120  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf127, (1568, 320), (320, 1), 0), permute_379, out=buf128)
    del permute_379
    buf129 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf127, (320, 1568), (1, 320), 0), view_383, out=buf129)
    del view_383
    buf130 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_22(c_void_p(buf127.data_ptr()), c_void_p(buf130.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf131 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf128, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_255, getitem_418, getitem_419, alias_31, getitem_421, getitem_422, getitem_423, 0, 0, 0.0, False, getitem_426, getitem_427)
    del alias_31
    del getitem_418
    del getitem_419
    del getitem_421
    del getitem_422
    del getitem_423
    del getitem_426
    del getitem_427
    del permute_255
    buf132 = buf131[0]
    buf133 = buf131[1]
    buf134 = buf131[2]
    del buf131
    buf135 = empty((8, 49, 2, 5, 64), device='cpu', dtype=torch.float32)
    cpp_fused_clone_23(c_void_p(buf133.data_ptr()), c_void_p(buf134.data_ptr()), c_void_p(buf135.data_ptr()))
    del buf133
    buf136 = reinterpret_tensor(buf134, (392, 320), (320, 1), 0); del buf134  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf135, (392, 640), (640, 1), 0), permute_385, out=buf136)
    del permute_385
    buf137 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf135, (640, 392), (1, 640), 0), view_379, out=buf137)
    del view_379
    buf138 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf139 = buf108; del buf108  # reuse
    buf140 = buf107; del buf107  # reuse
    buf141 = empty((320, ), device='cpu', dtype=torch.float32)
    buf142 = empty((320, ), device='cpu', dtype=torch.float32)
    buf143 = reinterpret_tensor(buf136, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf136  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_24(c_void_p(buf143.data_ptr()), c_void_p(buf135.data_ptr()), c_void_p(primals_457.data_ptr()), c_void_p(mul_224.data_ptr()), c_void_p(div_10.data_ptr()), c_void_p(buf138.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf140.data_ptr()), c_void_p(buf141.data_ptr()), c_void_p(buf142.data_ptr()))
    del div_10
    del mul_224
    del primals_457
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf144 = aten.convolution_backward(buf143, view_377, primals_455, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf143
    del primals_455
    del view_377
    buf145 = buf144[0]
    buf146 = buf144[1]
    buf147 = buf144[2]
    del buf144
    buf148 = buf128; del buf128  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf132, (1568, 320), (320, 1), 0), permute_392, out=buf148)
    del permute_392
    buf149 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf132, (320, 1568), (1, 320), 0), view_374, out=buf149)
    del view_374
    buf150 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf151 = buf124; del buf124  # reuse
    buf152 = buf123; del buf123  # reuse
    buf153 = empty((320, ), device='cpu', dtype=torch.float32)
    buf154 = empty((320, ), device='cpu', dtype=torch.float32)
    buf155 = buf127; del buf127  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_25(c_void_p(buf155.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(buf145.data_ptr()), c_void_p(buf148.data_ptr()), c_void_p(primals_451.data_ptr()), c_void_p(mul_222.data_ptr()), c_void_p(div_11.data_ptr()), c_void_p(buf150.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(buf153.data_ptr()), c_void_p(buf154.data_ptr()))
    del buf132
    del buf145
    del div_11
    del mul_222
    del primals_451
    buf156 = reinterpret_tensor(buf119, (1568, 1280), (1280, 1), 0); del buf119  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf155, (1568, 320), (320, 1), 0), permute_396, out=buf156)
    del permute_396
    buf157 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf155, (320, 1568), (1, 320), 0), view_372, out=buf157)
    del view_372
    buf158 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf159 = reinterpret_tensor(buf156, (8, 196, 1280), (250880, 1280, 1), 0); del buf156  # reuse
    cpp_fused_gelu_gelu_backward_sum_26(c_void_p(buf159.data_ptr()), c_void_p(buf155.data_ptr()), c_void_p(addmm_118.data_ptr()), c_void_p(buf158.data_ptr()))
    del addmm_118
    buf160 = buf148; del buf148  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf159, (1568, 1280), (1280, 1), 0), permute_400, out=buf160)
    del permute_400
    buf161 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf159, (1280, 1568), (1, 1280), 0), view_370, out=buf161)
    del view_370
    buf162 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf163 = buf152; del buf152  # reuse
    buf164 = buf151; del buf151  # reuse
    buf165 = empty((320, ), device='cpu', dtype=torch.float32)
    buf166 = empty((320, ), device='cpu', dtype=torch.float32)
    buf167 = buf155; del buf155  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_27(c_void_p(buf167.data_ptr()), c_void_p(buf159.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(primals_445.data_ptr()), c_void_p(mul_217.data_ptr()), c_void_p(div_12.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(buf163.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf165.data_ptr()), c_void_p(buf166.data_ptr()))
    del div_12
    del mul_217
    del primals_445
    buf168 = buf160; del buf160  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf167, (1568, 320), (320, 1), 0), permute_404, out=buf168)
    del permute_404
    buf169 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf167, (320, 1568), (1, 320), 0), view_368, out=buf169)
    del view_368
    buf170 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_28(c_void_p(buf167.data_ptr()), c_void_p(buf170.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf171 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf168, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_245, getitem_401, getitem_402, alias_32, getitem_404, getitem_405, getitem_406, 0, 0, 0.0, False, getitem_409, getitem_410)
    del alias_32
    del getitem_401
    del getitem_402
    del getitem_404
    del getitem_405
    del getitem_406
    del getitem_409
    del getitem_410
    del permute_245
    buf172 = buf171[0]
    buf173 = buf171[1]
    buf174 = buf171[2]
    del buf171
    buf175 = buf135; del buf135  # reuse
    cpp_fused_clone_29(c_void_p(buf173.data_ptr()), c_void_p(buf174.data_ptr()), c_void_p(buf175.data_ptr()))
    del buf173
    buf176 = reinterpret_tensor(buf174, (392, 320), (320, 1), 0); del buf174  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf175, (392, 640), (640, 1), 0), permute_410, out=buf176)
    del permute_410
    buf177 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf175, (640, 392), (1, 640), 0), view_364, out=buf177)
    del view_364
    buf178 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf179 = buf140; del buf140  # reuse
    buf180 = buf139; del buf139  # reuse
    buf181 = empty((320, ), device='cpu', dtype=torch.float32)
    buf182 = empty((320, ), device='cpu', dtype=torch.float32)
    buf183 = reinterpret_tensor(buf176, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf176  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_30(c_void_p(buf183.data_ptr()), c_void_p(buf175.data_ptr()), c_void_p(primals_439.data_ptr()), c_void_p(mul_215.data_ptr()), c_void_p(div_13.data_ptr()), c_void_p(buf178.data_ptr()), c_void_p(buf179.data_ptr()), c_void_p(buf180.data_ptr()), c_void_p(buf181.data_ptr()), c_void_p(buf182.data_ptr()))
    del div_13
    del mul_215
    del primals_439
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf184 = aten.convolution_backward(buf183, view_362, primals_437, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf183
    del primals_437
    del view_362
    buf185 = buf184[0]
    buf186 = buf184[1]
    buf187 = buf184[2]
    del buf184
    buf188 = buf168; del buf168  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf172, (1568, 320), (320, 1), 0), permute_417, out=buf188)
    del permute_417
    buf189 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf172, (320, 1568), (1, 320), 0), view_359, out=buf189)
    del view_359
    buf190 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf191 = buf164; del buf164  # reuse
    buf192 = buf163; del buf163  # reuse
    buf193 = empty((320, ), device='cpu', dtype=torch.float32)
    buf194 = empty((320, ), device='cpu', dtype=torch.float32)
    buf195 = buf167; del buf167  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_31(c_void_p(buf195.data_ptr()), c_void_p(buf172.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(buf188.data_ptr()), c_void_p(primals_433.data_ptr()), c_void_p(mul_213.data_ptr()), c_void_p(div_14.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(buf193.data_ptr()), c_void_p(buf194.data_ptr()))
    del buf172
    del buf185
    del div_14
    del mul_213
    del primals_433
    buf196 = reinterpret_tensor(buf159, (1568, 1280), (1280, 1), 0); del buf159  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf195, (1568, 320), (320, 1), 0), permute_421, out=buf196)
    del permute_421
    buf197 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf195, (320, 1568), (1, 320), 0), view_357, out=buf197)
    del view_357
    buf198 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf199 = reinterpret_tensor(buf196, (8, 196, 1280), (250880, 1280, 1), 0); del buf196  # reuse
    cpp_fused_gelu_gelu_backward_sum_32(c_void_p(buf199.data_ptr()), c_void_p(buf195.data_ptr()), c_void_p(addmm_113.data_ptr()), c_void_p(buf198.data_ptr()))
    del addmm_113
    buf200 = buf188; del buf188  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf199, (1568, 1280), (1280, 1), 0), permute_425, out=buf200)
    del permute_425
    buf201 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf199, (1280, 1568), (1, 1280), 0), view_355, out=buf201)
    del view_355
    buf202 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf203 = buf192; del buf192  # reuse
    buf204 = buf191; del buf191  # reuse
    buf205 = empty((320, ), device='cpu', dtype=torch.float32)
    buf206 = empty((320, ), device='cpu', dtype=torch.float32)
    buf207 = buf195; del buf195  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_33(c_void_p(buf207.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf200.data_ptr()), c_void_p(primals_427.data_ptr()), c_void_p(mul_208.data_ptr()), c_void_p(div_15.data_ptr()), c_void_p(buf202.data_ptr()), c_void_p(buf203.data_ptr()), c_void_p(buf204.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(buf206.data_ptr()))
    del div_15
    del mul_208
    del primals_427
    buf208 = buf200; del buf200  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf207, (1568, 320), (320, 1), 0), permute_429, out=buf208)
    del permute_429
    buf209 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf207, (320, 1568), (1, 320), 0), view_353, out=buf209)
    del view_353
    buf210 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_34(c_void_p(buf207.data_ptr()), c_void_p(buf210.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf211 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf208, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_235, getitem_384, getitem_385, alias_33, getitem_387, getitem_388, getitem_389, 0, 0, 0.0, False, getitem_392, getitem_393)
    del alias_33
    del getitem_384
    del getitem_385
    del getitem_387
    del getitem_388
    del getitem_389
    del getitem_392
    del getitem_393
    del permute_235
    buf212 = buf211[0]
    buf213 = buf211[1]
    buf214 = buf211[2]
    del buf211
    buf215 = buf175; del buf175  # reuse
    cpp_fused_clone_35(c_void_p(buf213.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf215.data_ptr()))
    del buf213
    buf216 = reinterpret_tensor(buf214, (392, 320), (320, 1), 0); del buf214  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf215, (392, 640), (640, 1), 0), permute_435, out=buf216)
    del permute_435
    buf217 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf215, (640, 392), (1, 640), 0), view_349, out=buf217)
    del view_349
    buf218 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf219 = buf180; del buf180  # reuse
    buf220 = buf179; del buf179  # reuse
    buf221 = empty((320, ), device='cpu', dtype=torch.float32)
    buf222 = empty((320, ), device='cpu', dtype=torch.float32)
    buf223 = reinterpret_tensor(buf216, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf216  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_36(c_void_p(buf223.data_ptr()), c_void_p(buf215.data_ptr()), c_void_p(primals_421.data_ptr()), c_void_p(mul_206.data_ptr()), c_void_p(div_16.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(buf219.data_ptr()), c_void_p(buf220.data_ptr()), c_void_p(buf221.data_ptr()), c_void_p(buf222.data_ptr()))
    del div_16
    del mul_206
    del primals_421
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf224 = aten.convolution_backward(buf223, view_347, primals_419, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf223
    del primals_419
    del view_347
    buf225 = buf224[0]
    buf226 = buf224[1]
    buf227 = buf224[2]
    del buf224
    buf228 = buf208; del buf208  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf212, (1568, 320), (320, 1), 0), permute_442, out=buf228)
    del permute_442
    buf229 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf212, (320, 1568), (1, 320), 0), view_344, out=buf229)
    del view_344
    buf230 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf231 = buf204; del buf204  # reuse
    buf232 = buf203; del buf203  # reuse
    buf233 = empty((320, ), device='cpu', dtype=torch.float32)
    buf234 = empty((320, ), device='cpu', dtype=torch.float32)
    buf235 = buf207; del buf207  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_37(c_void_p(buf235.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf225.data_ptr()), c_void_p(buf228.data_ptr()), c_void_p(primals_415.data_ptr()), c_void_p(mul_204.data_ptr()), c_void_p(div_17.data_ptr()), c_void_p(buf230.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf233.data_ptr()), c_void_p(buf234.data_ptr()))
    del buf212
    del buf225
    del div_17
    del mul_204
    del primals_415
    buf236 = reinterpret_tensor(buf199, (1568, 1280), (1280, 1), 0); del buf199  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf235, (1568, 320), (320, 1), 0), permute_446, out=buf236)
    del permute_446
    buf237 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf235, (320, 1568), (1, 320), 0), view_342, out=buf237)
    del view_342
    buf238 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf239 = reinterpret_tensor(buf236, (8, 196, 1280), (250880, 1280, 1), 0); del buf236  # reuse
    cpp_fused_gelu_gelu_backward_sum_38(c_void_p(buf239.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(addmm_108.data_ptr()), c_void_p(buf238.data_ptr()))
    del addmm_108
    buf240 = buf228; del buf228  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf239, (1568, 1280), (1280, 1), 0), permute_450, out=buf240)
    del permute_450
    buf241 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf239, (1280, 1568), (1, 1280), 0), view_340, out=buf241)
    del view_340
    buf242 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf243 = buf232; del buf232  # reuse
    buf244 = buf231; del buf231  # reuse
    buf245 = empty((320, ), device='cpu', dtype=torch.float32)
    buf246 = empty((320, ), device='cpu', dtype=torch.float32)
    buf247 = buf235; del buf235  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_39(c_void_p(buf247.data_ptr()), c_void_p(buf239.data_ptr()), c_void_p(buf240.data_ptr()), c_void_p(primals_409.data_ptr()), c_void_p(mul_199.data_ptr()), c_void_p(div_18.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(buf243.data_ptr()), c_void_p(buf244.data_ptr()), c_void_p(buf245.data_ptr()), c_void_p(buf246.data_ptr()))
    del div_18
    del mul_199
    del primals_409
    buf248 = buf240; del buf240  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf247, (1568, 320), (320, 1), 0), permute_454, out=buf248)
    del permute_454
    buf249 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf247, (320, 1568), (1, 320), 0), view_338, out=buf249)
    del view_338
    buf250 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_40(c_void_p(buf247.data_ptr()), c_void_p(buf250.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf251 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf248, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_225, getitem_367, getitem_368, alias_34, getitem_370, getitem_371, getitem_372, 0, 0, 0.0, False, getitem_375, getitem_376)
    del alias_34
    del getitem_367
    del getitem_368
    del getitem_370
    del getitem_371
    del getitem_372
    del getitem_375
    del getitem_376
    del permute_225
    buf252 = buf251[0]
    buf253 = buf251[1]
    buf254 = buf251[2]
    del buf251
    buf255 = buf215; del buf215  # reuse
    cpp_fused_clone_41(c_void_p(buf253.data_ptr()), c_void_p(buf254.data_ptr()), c_void_p(buf255.data_ptr()))
    del buf253
    buf256 = reinterpret_tensor(buf254, (392, 320), (320, 1), 0); del buf254  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf255, (392, 640), (640, 1), 0), permute_460, out=buf256)
    del permute_460
    buf257 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf255, (640, 392), (1, 640), 0), view_334, out=buf257)
    del view_334
    buf258 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf259 = buf220; del buf220  # reuse
    buf260 = buf219; del buf219  # reuse
    buf261 = empty((320, ), device='cpu', dtype=torch.float32)
    buf262 = empty((320, ), device='cpu', dtype=torch.float32)
    buf263 = reinterpret_tensor(buf256, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf256  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_42(c_void_p(buf263.data_ptr()), c_void_p(buf255.data_ptr()), c_void_p(primals_403.data_ptr()), c_void_p(mul_197.data_ptr()), c_void_p(div_19.data_ptr()), c_void_p(buf258.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(buf261.data_ptr()), c_void_p(buf262.data_ptr()))
    del div_19
    del mul_197
    del primals_403
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf264 = aten.convolution_backward(buf263, view_332, primals_401, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf263
    del primals_401
    del view_332
    buf265 = buf264[0]
    buf266 = buf264[1]
    buf267 = buf264[2]
    del buf264
    buf268 = buf248; del buf248  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf252, (1568, 320), (320, 1), 0), permute_467, out=buf268)
    del permute_467
    buf269 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf252, (320, 1568), (1, 320), 0), view_329, out=buf269)
    del view_329
    buf270 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf271 = buf244; del buf244  # reuse
    buf272 = buf243; del buf243  # reuse
    buf273 = empty((320, ), device='cpu', dtype=torch.float32)
    buf274 = empty((320, ), device='cpu', dtype=torch.float32)
    buf275 = buf247; del buf247  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_43(c_void_p(buf275.data_ptr()), c_void_p(buf252.data_ptr()), c_void_p(buf265.data_ptr()), c_void_p(buf268.data_ptr()), c_void_p(primals_397.data_ptr()), c_void_p(mul_195.data_ptr()), c_void_p(div_20.data_ptr()), c_void_p(buf270.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf274.data_ptr()))
    del buf252
    del buf265
    del div_20
    del mul_195
    del primals_397
    buf276 = reinterpret_tensor(buf239, (1568, 1280), (1280, 1), 0); del buf239  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf275, (1568, 320), (320, 1), 0), permute_471, out=buf276)
    del permute_471
    buf277 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf275, (320, 1568), (1, 320), 0), view_327, out=buf277)
    del view_327
    buf278 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf279 = reinterpret_tensor(buf276, (8, 196, 1280), (250880, 1280, 1), 0); del buf276  # reuse
    cpp_fused_gelu_gelu_backward_sum_44(c_void_p(buf279.data_ptr()), c_void_p(buf275.data_ptr()), c_void_p(addmm_103.data_ptr()), c_void_p(buf278.data_ptr()))
    del addmm_103
    buf280 = buf268; del buf268  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf279, (1568, 1280), (1280, 1), 0), permute_475, out=buf280)
    del permute_475
    buf281 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf279, (1280, 1568), (1, 1280), 0), view_325, out=buf281)
    del view_325
    buf282 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf283 = buf272; del buf272  # reuse
    buf284 = buf271; del buf271  # reuse
    buf285 = empty((320, ), device='cpu', dtype=torch.float32)
    buf286 = empty((320, ), device='cpu', dtype=torch.float32)
    buf287 = buf275; del buf275  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_45(c_void_p(buf287.data_ptr()), c_void_p(buf279.data_ptr()), c_void_p(buf280.data_ptr()), c_void_p(primals_391.data_ptr()), c_void_p(mul_190.data_ptr()), c_void_p(div_21.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(buf283.data_ptr()), c_void_p(buf284.data_ptr()), c_void_p(buf285.data_ptr()), c_void_p(buf286.data_ptr()))
    del div_21
    del mul_190
    del primals_391
    buf288 = buf280; del buf280  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf287, (1568, 320), (320, 1), 0), permute_479, out=buf288)
    del permute_479
    buf289 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf287, (320, 1568), (1, 320), 0), view_323, out=buf289)
    del view_323
    buf290 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_46(c_void_p(buf287.data_ptr()), c_void_p(buf290.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf291 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf288, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_215, getitem_350, getitem_351, alias_35, getitem_353, getitem_354, getitem_355, 0, 0, 0.0, False, getitem_358, getitem_359)
    del alias_35
    del getitem_350
    del getitem_351
    del getitem_353
    del getitem_354
    del getitem_355
    del getitem_358
    del getitem_359
    del permute_215
    buf292 = buf291[0]
    buf293 = buf291[1]
    buf294 = buf291[2]
    del buf291
    buf295 = buf255; del buf255  # reuse
    cpp_fused_clone_47(c_void_p(buf293.data_ptr()), c_void_p(buf294.data_ptr()), c_void_p(buf295.data_ptr()))
    del buf293
    buf296 = reinterpret_tensor(buf294, (392, 320), (320, 1), 0); del buf294  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf295, (392, 640), (640, 1), 0), permute_485, out=buf296)
    del permute_485
    buf297 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf295, (640, 392), (1, 640), 0), view_319, out=buf297)
    del view_319
    buf298 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf299 = buf260; del buf260  # reuse
    buf300 = buf259; del buf259  # reuse
    buf301 = empty((320, ), device='cpu', dtype=torch.float32)
    buf302 = empty((320, ), device='cpu', dtype=torch.float32)
    buf303 = reinterpret_tensor(buf296, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf296  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_48(c_void_p(buf303.data_ptr()), c_void_p(buf295.data_ptr()), c_void_p(primals_385.data_ptr()), c_void_p(mul_188.data_ptr()), c_void_p(div_22.data_ptr()), c_void_p(buf298.data_ptr()), c_void_p(buf299.data_ptr()), c_void_p(buf300.data_ptr()), c_void_p(buf301.data_ptr()), c_void_p(buf302.data_ptr()))
    del div_22
    del mul_188
    del primals_385
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf304 = aten.convolution_backward(buf303, view_317, primals_383, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf303
    del primals_383
    del view_317
    buf305 = buf304[0]
    buf306 = buf304[1]
    buf307 = buf304[2]
    del buf304
    buf308 = buf288; del buf288  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf292, (1568, 320), (320, 1), 0), permute_492, out=buf308)
    del permute_492
    buf309 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf292, (320, 1568), (1, 320), 0), view_314, out=buf309)
    del view_314
    buf310 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf311 = buf284; del buf284  # reuse
    buf312 = buf283; del buf283  # reuse
    buf313 = empty((320, ), device='cpu', dtype=torch.float32)
    buf314 = empty((320, ), device='cpu', dtype=torch.float32)
    buf315 = buf287; del buf287  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_49(c_void_p(buf315.data_ptr()), c_void_p(buf292.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(primals_379.data_ptr()), c_void_p(mul_186.data_ptr()), c_void_p(div_23.data_ptr()), c_void_p(buf310.data_ptr()), c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(buf313.data_ptr()), c_void_p(buf314.data_ptr()))
    del buf292
    del buf305
    del div_23
    del mul_186
    del primals_379
    buf316 = reinterpret_tensor(buf279, (1568, 1280), (1280, 1), 0); del buf279  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf315, (1568, 320), (320, 1), 0), permute_496, out=buf316)
    del permute_496
    buf317 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf315, (320, 1568), (1, 320), 0), view_312, out=buf317)
    del view_312
    buf318 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf319 = reinterpret_tensor(buf316, (8, 196, 1280), (250880, 1280, 1), 0); del buf316  # reuse
    cpp_fused_gelu_gelu_backward_sum_50(c_void_p(buf319.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(addmm_98.data_ptr()), c_void_p(buf318.data_ptr()))
    del addmm_98
    buf320 = buf308; del buf308  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf319, (1568, 1280), (1280, 1), 0), permute_500, out=buf320)
    del permute_500
    buf321 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf319, (1280, 1568), (1, 1280), 0), view_310, out=buf321)
    del view_310
    buf322 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf323 = buf312; del buf312  # reuse
    buf324 = buf311; del buf311  # reuse
    buf325 = empty((320, ), device='cpu', dtype=torch.float32)
    buf326 = empty((320, ), device='cpu', dtype=torch.float32)
    buf327 = buf315; del buf315  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_51(c_void_p(buf327.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(buf320.data_ptr()), c_void_p(primals_373.data_ptr()), c_void_p(mul_181.data_ptr()), c_void_p(div_24.data_ptr()), c_void_p(buf322.data_ptr()), c_void_p(buf323.data_ptr()), c_void_p(buf324.data_ptr()), c_void_p(buf325.data_ptr()), c_void_p(buf326.data_ptr()))
    del div_24
    del mul_181
    del primals_373
    buf328 = buf320; del buf320  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf327, (1568, 320), (320, 1), 0), permute_504, out=buf328)
    del permute_504
    buf329 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf327, (320, 1568), (1, 320), 0), view_308, out=buf329)
    del view_308
    buf330 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_52(c_void_p(buf327.data_ptr()), c_void_p(buf330.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf331 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf328, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_205, getitem_333, getitem_334, alias_36, getitem_336, getitem_337, getitem_338, 0, 0, 0.0, False, getitem_341, getitem_342)
    del alias_36
    del getitem_333
    del getitem_334
    del getitem_336
    del getitem_337
    del getitem_338
    del getitem_341
    del getitem_342
    del permute_205
    buf332 = buf331[0]
    buf333 = buf331[1]
    buf334 = buf331[2]
    del buf331
    buf335 = buf295; del buf295  # reuse
    cpp_fused_clone_53(c_void_p(buf333.data_ptr()), c_void_p(buf334.data_ptr()), c_void_p(buf335.data_ptr()))
    del buf333
    buf336 = reinterpret_tensor(buf334, (392, 320), (320, 1), 0); del buf334  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf335, (392, 640), (640, 1), 0), permute_510, out=buf336)
    del permute_510
    buf337 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf335, (640, 392), (1, 640), 0), view_304, out=buf337)
    del view_304
    buf338 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf339 = buf300; del buf300  # reuse
    buf340 = buf299; del buf299  # reuse
    buf341 = empty((320, ), device='cpu', dtype=torch.float32)
    buf342 = empty((320, ), device='cpu', dtype=torch.float32)
    buf343 = reinterpret_tensor(buf336, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf336  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_54(c_void_p(buf343.data_ptr()), c_void_p(buf335.data_ptr()), c_void_p(primals_367.data_ptr()), c_void_p(mul_179.data_ptr()), c_void_p(div_25.data_ptr()), c_void_p(buf338.data_ptr()), c_void_p(buf339.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(buf341.data_ptr()), c_void_p(buf342.data_ptr()))
    del div_25
    del mul_179
    del primals_367
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf344 = aten.convolution_backward(buf343, view_302, primals_365, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf343
    del primals_365
    del view_302
    buf345 = buf344[0]
    buf346 = buf344[1]
    buf347 = buf344[2]
    del buf344
    buf348 = buf328; del buf328  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf332, (1568, 320), (320, 1), 0), permute_517, out=buf348)
    del permute_517
    buf349 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf332, (320, 1568), (1, 320), 0), view_299, out=buf349)
    del view_299
    buf350 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf351 = buf324; del buf324  # reuse
    buf352 = buf323; del buf323  # reuse
    buf353 = empty((320, ), device='cpu', dtype=torch.float32)
    buf354 = empty((320, ), device='cpu', dtype=torch.float32)
    buf355 = buf327; del buf327  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_55(c_void_p(buf355.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(buf345.data_ptr()), c_void_p(buf348.data_ptr()), c_void_p(primals_361.data_ptr()), c_void_p(mul_177.data_ptr()), c_void_p(div_26.data_ptr()), c_void_p(buf350.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(buf352.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(buf354.data_ptr()))
    del buf332
    del buf345
    del div_26
    del mul_177
    del primals_361
    buf356 = reinterpret_tensor(buf319, (1568, 1280), (1280, 1), 0); del buf319  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf355, (1568, 320), (320, 1), 0), permute_521, out=buf356)
    del permute_521
    buf357 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf355, (320, 1568), (1, 320), 0), view_297, out=buf357)
    del view_297
    buf358 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf359 = reinterpret_tensor(buf356, (8, 196, 1280), (250880, 1280, 1), 0); del buf356  # reuse
    cpp_fused_gelu_gelu_backward_sum_56(c_void_p(buf359.data_ptr()), c_void_p(buf355.data_ptr()), c_void_p(addmm_93.data_ptr()), c_void_p(buf358.data_ptr()))
    del addmm_93
    buf360 = buf348; del buf348  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf359, (1568, 1280), (1280, 1), 0), permute_525, out=buf360)
    del permute_525
    buf361 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf359, (1280, 1568), (1, 1280), 0), view_295, out=buf361)
    del view_295
    buf362 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf363 = buf352; del buf352  # reuse
    buf364 = buf351; del buf351  # reuse
    buf365 = empty((320, ), device='cpu', dtype=torch.float32)
    buf366 = empty((320, ), device='cpu', dtype=torch.float32)
    buf367 = buf355; del buf355  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_57(c_void_p(buf367.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(buf360.data_ptr()), c_void_p(primals_355.data_ptr()), c_void_p(mul_172.data_ptr()), c_void_p(div_27.data_ptr()), c_void_p(buf362.data_ptr()), c_void_p(buf363.data_ptr()), c_void_p(buf364.data_ptr()), c_void_p(buf365.data_ptr()), c_void_p(buf366.data_ptr()))
    del div_27
    del mul_172
    del primals_355
    buf368 = buf360; del buf360  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf367, (1568, 320), (320, 1), 0), permute_529, out=buf368)
    del permute_529
    buf369 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf367, (320, 1568), (1, 320), 0), view_293, out=buf369)
    del view_293
    buf370 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_58(c_void_p(buf367.data_ptr()), c_void_p(buf370.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf371 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf368, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_195, getitem_316, getitem_317, alias_37, getitem_319, getitem_320, getitem_321, 0, 0, 0.0, False, getitem_324, getitem_325)
    del alias_37
    del getitem_316
    del getitem_317
    del getitem_319
    del getitem_320
    del getitem_321
    del getitem_324
    del getitem_325
    del permute_195
    buf372 = buf371[0]
    buf373 = buf371[1]
    buf374 = buf371[2]
    del buf371
    buf375 = buf335; del buf335  # reuse
    cpp_fused_clone_59(c_void_p(buf373.data_ptr()), c_void_p(buf374.data_ptr()), c_void_p(buf375.data_ptr()))
    del buf373
    buf376 = reinterpret_tensor(buf374, (392, 320), (320, 1), 0); del buf374  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf375, (392, 640), (640, 1), 0), permute_535, out=buf376)
    del permute_535
    buf377 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf375, (640, 392), (1, 640), 0), view_289, out=buf377)
    del view_289
    buf378 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf379 = buf340; del buf340  # reuse
    buf380 = buf339; del buf339  # reuse
    buf381 = empty((320, ), device='cpu', dtype=torch.float32)
    buf382 = empty((320, ), device='cpu', dtype=torch.float32)
    buf383 = reinterpret_tensor(buf376, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf376  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_60(c_void_p(buf383.data_ptr()), c_void_p(buf375.data_ptr()), c_void_p(primals_349.data_ptr()), c_void_p(mul_170.data_ptr()), c_void_p(div_28.data_ptr()), c_void_p(buf378.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(buf380.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf382.data_ptr()))
    del div_28
    del mul_170
    del primals_349
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf384 = aten.convolution_backward(buf383, view_287, primals_347, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf383
    del primals_347
    del view_287
    buf385 = buf384[0]
    buf386 = buf384[1]
    buf387 = buf384[2]
    del buf384
    buf388 = buf368; del buf368  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf372, (1568, 320), (320, 1), 0), permute_542, out=buf388)
    del permute_542
    buf389 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf372, (320, 1568), (1, 320), 0), view_284, out=buf389)
    del view_284
    buf390 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf391 = buf364; del buf364  # reuse
    buf392 = buf363; del buf363  # reuse
    buf393 = empty((320, ), device='cpu', dtype=torch.float32)
    buf394 = empty((320, ), device='cpu', dtype=torch.float32)
    buf395 = buf367; del buf367  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_61(c_void_p(buf395.data_ptr()), c_void_p(buf372.data_ptr()), c_void_p(buf385.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(primals_343.data_ptr()), c_void_p(mul_168.data_ptr()), c_void_p(div_29.data_ptr()), c_void_p(buf390.data_ptr()), c_void_p(buf391.data_ptr()), c_void_p(buf392.data_ptr()), c_void_p(buf393.data_ptr()), c_void_p(buf394.data_ptr()))
    del buf372
    del buf385
    del div_29
    del mul_168
    del primals_343
    buf396 = reinterpret_tensor(buf359, (1568, 1280), (1280, 1), 0); del buf359  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf395, (1568, 320), (320, 1), 0), permute_546, out=buf396)
    del permute_546
    buf397 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf395, (320, 1568), (1, 320), 0), view_282, out=buf397)
    del view_282
    buf398 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf399 = reinterpret_tensor(buf396, (8, 196, 1280), (250880, 1280, 1), 0); del buf396  # reuse
    cpp_fused_gelu_gelu_backward_sum_62(c_void_p(buf399.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(addmm_88.data_ptr()), c_void_p(buf398.data_ptr()))
    del addmm_88
    buf400 = buf388; del buf388  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf399, (1568, 1280), (1280, 1), 0), permute_550, out=buf400)
    del permute_550
    buf401 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf399, (1280, 1568), (1, 1280), 0), view_280, out=buf401)
    del view_280
    buf402 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf403 = buf392; del buf392  # reuse
    buf404 = buf391; del buf391  # reuse
    buf405 = empty((320, ), device='cpu', dtype=torch.float32)
    buf406 = empty((320, ), device='cpu', dtype=torch.float32)
    buf407 = buf395; del buf395  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_63(c_void_p(buf407.data_ptr()), c_void_p(buf399.data_ptr()), c_void_p(buf400.data_ptr()), c_void_p(primals_337.data_ptr()), c_void_p(mul_163.data_ptr()), c_void_p(div_30.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(buf403.data_ptr()), c_void_p(buf404.data_ptr()), c_void_p(buf405.data_ptr()), c_void_p(buf406.data_ptr()))
    del div_30
    del mul_163
    del primals_337
    buf408 = buf400; del buf400  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf407, (1568, 320), (320, 1), 0), permute_554, out=buf408)
    del permute_554
    buf409 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf407, (320, 1568), (1, 320), 0), view_278, out=buf409)
    del view_278
    buf410 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_64(c_void_p(buf407.data_ptr()), c_void_p(buf410.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf411 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf408, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_185, getitem_299, getitem_300, alias_38, getitem_302, getitem_303, getitem_304, 0, 0, 0.0, False, getitem_307, getitem_308)
    del alias_38
    del getitem_299
    del getitem_300
    del getitem_302
    del getitem_303
    del getitem_304
    del getitem_307
    del getitem_308
    del permute_185
    buf412 = buf411[0]
    buf413 = buf411[1]
    buf414 = buf411[2]
    del buf411
    buf415 = buf375; del buf375  # reuse
    cpp_fused_clone_65(c_void_p(buf413.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(buf415.data_ptr()))
    del buf413
    buf416 = reinterpret_tensor(buf414, (392, 320), (320, 1), 0); del buf414  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf415, (392, 640), (640, 1), 0), permute_560, out=buf416)
    del permute_560
    buf417 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf415, (640, 392), (1, 640), 0), view_274, out=buf417)
    del view_274
    buf418 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf419 = buf380; del buf380  # reuse
    buf420 = buf379; del buf379  # reuse
    buf421 = empty((320, ), device='cpu', dtype=torch.float32)
    buf422 = empty((320, ), device='cpu', dtype=torch.float32)
    buf423 = reinterpret_tensor(buf416, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf416  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_66(c_void_p(buf423.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(primals_331.data_ptr()), c_void_p(mul_161.data_ptr()), c_void_p(div_31.data_ptr()), c_void_p(buf418.data_ptr()), c_void_p(buf419.data_ptr()), c_void_p(buf420.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf422.data_ptr()))
    del div_31
    del mul_161
    del primals_331
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf424 = aten.convolution_backward(buf423, view_272, primals_329, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf423
    del primals_329
    del view_272
    buf425 = buf424[0]
    buf426 = buf424[1]
    buf427 = buf424[2]
    del buf424
    buf428 = buf408; del buf408  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf412, (1568, 320), (320, 1), 0), permute_567, out=buf428)
    del permute_567
    buf429 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf412, (320, 1568), (1, 320), 0), view_269, out=buf429)
    del view_269
    buf430 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf431 = buf404; del buf404  # reuse
    buf432 = buf403; del buf403  # reuse
    buf433 = empty((320, ), device='cpu', dtype=torch.float32)
    buf434 = empty((320, ), device='cpu', dtype=torch.float32)
    buf435 = buf407; del buf407  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_67(c_void_p(buf435.data_ptr()), c_void_p(buf412.data_ptr()), c_void_p(buf425.data_ptr()), c_void_p(buf428.data_ptr()), c_void_p(primals_325.data_ptr()), c_void_p(mul_159.data_ptr()), c_void_p(div_32.data_ptr()), c_void_p(buf430.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(buf432.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf434.data_ptr()))
    del buf412
    del buf425
    del div_32
    del mul_159
    del primals_325
    buf436 = reinterpret_tensor(buf399, (1568, 1280), (1280, 1), 0); del buf399  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf435, (1568, 320), (320, 1), 0), permute_571, out=buf436)
    del permute_571
    buf437 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf435, (320, 1568), (1, 320), 0), view_267, out=buf437)
    del view_267
    buf438 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf439 = reinterpret_tensor(buf436, (8, 196, 1280), (250880, 1280, 1), 0); del buf436  # reuse
    cpp_fused_gelu_gelu_backward_sum_68(c_void_p(buf439.data_ptr()), c_void_p(buf435.data_ptr()), c_void_p(addmm_83.data_ptr()), c_void_p(buf438.data_ptr()))
    del addmm_83
    buf440 = buf428; del buf428  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf439, (1568, 1280), (1280, 1), 0), permute_575, out=buf440)
    del permute_575
    buf441 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf439, (1280, 1568), (1, 1280), 0), view_265, out=buf441)
    del view_265
    buf442 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf443 = buf432; del buf432  # reuse
    buf444 = buf431; del buf431  # reuse
    buf445 = empty((320, ), device='cpu', dtype=torch.float32)
    buf446 = empty((320, ), device='cpu', dtype=torch.float32)
    buf447 = buf435; del buf435  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_69(c_void_p(buf447.data_ptr()), c_void_p(buf439.data_ptr()), c_void_p(buf440.data_ptr()), c_void_p(primals_319.data_ptr()), c_void_p(mul_154.data_ptr()), c_void_p(div_33.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(buf443.data_ptr()), c_void_p(buf444.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(buf446.data_ptr()))
    del div_33
    del mul_154
    del primals_319
    buf448 = buf440; del buf440  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf447, (1568, 320), (320, 1), 0), permute_579, out=buf448)
    del permute_579
    buf449 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf447, (320, 1568), (1, 320), 0), view_263, out=buf449)
    del view_263
    buf450 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_70(c_void_p(buf447.data_ptr()), c_void_p(buf450.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf451 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf448, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_175, getitem_282, getitem_283, alias_39, getitem_285, getitem_286, getitem_287, 0, 0, 0.0, False, getitem_290, getitem_291)
    del alias_39
    del getitem_282
    del getitem_283
    del getitem_285
    del getitem_286
    del getitem_287
    del getitem_290
    del getitem_291
    del permute_175
    buf452 = buf451[0]
    buf453 = buf451[1]
    buf454 = buf451[2]
    del buf451
    buf455 = buf415; del buf415  # reuse
    cpp_fused_clone_71(c_void_p(buf453.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf455.data_ptr()))
    del buf453
    buf456 = reinterpret_tensor(buf454, (392, 320), (320, 1), 0); del buf454  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf455, (392, 640), (640, 1), 0), permute_585, out=buf456)
    del permute_585
    buf457 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf455, (640, 392), (1, 640), 0), view_259, out=buf457)
    del view_259
    buf458 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf459 = buf420; del buf420  # reuse
    buf460 = buf419; del buf419  # reuse
    buf461 = empty((320, ), device='cpu', dtype=torch.float32)
    buf462 = empty((320, ), device='cpu', dtype=torch.float32)
    buf463 = reinterpret_tensor(buf456, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf456  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_72(c_void_p(buf463.data_ptr()), c_void_p(buf455.data_ptr()), c_void_p(primals_313.data_ptr()), c_void_p(mul_152.data_ptr()), c_void_p(div_34.data_ptr()), c_void_p(buf458.data_ptr()), c_void_p(buf459.data_ptr()), c_void_p(buf460.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(buf462.data_ptr()))
    del div_34
    del mul_152
    del primals_313
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf464 = aten.convolution_backward(buf463, view_257, primals_311, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf463
    del primals_311
    del view_257
    buf465 = buf464[0]
    buf466 = buf464[1]
    buf467 = buf464[2]
    del buf464
    buf468 = buf448; del buf448  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf452, (1568, 320), (320, 1), 0), permute_592, out=buf468)
    del permute_592
    buf469 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf452, (320, 1568), (1, 320), 0), view_254, out=buf469)
    del view_254
    buf470 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf471 = buf444; del buf444  # reuse
    buf472 = buf443; del buf443  # reuse
    buf473 = empty((320, ), device='cpu', dtype=torch.float32)
    buf474 = empty((320, ), device='cpu', dtype=torch.float32)
    buf475 = buf447; del buf447  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_73(c_void_p(buf475.data_ptr()), c_void_p(buf452.data_ptr()), c_void_p(buf465.data_ptr()), c_void_p(buf468.data_ptr()), c_void_p(primals_307.data_ptr()), c_void_p(mul_150.data_ptr()), c_void_p(div_35.data_ptr()), c_void_p(buf470.data_ptr()), c_void_p(buf471.data_ptr()), c_void_p(buf472.data_ptr()), c_void_p(buf473.data_ptr()), c_void_p(buf474.data_ptr()))
    del buf452
    del buf465
    del div_35
    del mul_150
    del primals_307
    buf476 = reinterpret_tensor(buf439, (1568, 1280), (1280, 1), 0); del buf439  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf475, (1568, 320), (320, 1), 0), permute_596, out=buf476)
    del permute_596
    buf477 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf475, (320, 1568), (1, 320), 0), view_252, out=buf477)
    del view_252
    buf478 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf479 = reinterpret_tensor(buf476, (8, 196, 1280), (250880, 1280, 1), 0); del buf476  # reuse
    cpp_fused_gelu_gelu_backward_sum_74(c_void_p(buf479.data_ptr()), c_void_p(buf475.data_ptr()), c_void_p(addmm_78.data_ptr()), c_void_p(buf478.data_ptr()))
    del addmm_78
    buf480 = buf468; del buf468  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf479, (1568, 1280), (1280, 1), 0), permute_600, out=buf480)
    del permute_600
    buf481 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf479, (1280, 1568), (1, 1280), 0), view_250, out=buf481)
    del view_250
    buf482 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf483 = buf472; del buf472  # reuse
    buf484 = buf471; del buf471  # reuse
    buf485 = empty((320, ), device='cpu', dtype=torch.float32)
    buf486 = empty((320, ), device='cpu', dtype=torch.float32)
    buf487 = buf475; del buf475  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_75(c_void_p(buf487.data_ptr()), c_void_p(buf479.data_ptr()), c_void_p(buf480.data_ptr()), c_void_p(primals_301.data_ptr()), c_void_p(mul_145.data_ptr()), c_void_p(div_36.data_ptr()), c_void_p(buf482.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(buf485.data_ptr()), c_void_p(buf486.data_ptr()))
    del div_36
    del mul_145
    del primals_301
    buf488 = buf480; del buf480  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf487, (1568, 320), (320, 1), 0), permute_604, out=buf488)
    del permute_604
    buf489 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf487, (320, 1568), (1, 320), 0), view_248, out=buf489)
    del view_248
    buf490 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_76(c_void_p(buf487.data_ptr()), c_void_p(buf490.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf491 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf488, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_165, getitem_265, getitem_266, alias_40, getitem_268, getitem_269, getitem_270, 0, 0, 0.0, False, getitem_273, getitem_274)
    del alias_40
    del getitem_265
    del getitem_266
    del getitem_268
    del getitem_269
    del getitem_270
    del getitem_273
    del getitem_274
    del permute_165
    buf492 = buf491[0]
    buf493 = buf491[1]
    buf494 = buf491[2]
    del buf491
    buf495 = buf455; del buf455  # reuse
    cpp_fused_clone_77(c_void_p(buf493.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf495.data_ptr()))
    del buf493
    buf496 = reinterpret_tensor(buf494, (392, 320), (320, 1), 0); del buf494  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf495, (392, 640), (640, 1), 0), permute_610, out=buf496)
    del permute_610
    buf497 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf495, (640, 392), (1, 640), 0), view_244, out=buf497)
    del view_244
    buf498 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf499 = buf460; del buf460  # reuse
    buf500 = buf459; del buf459  # reuse
    buf501 = empty((320, ), device='cpu', dtype=torch.float32)
    buf502 = empty((320, ), device='cpu', dtype=torch.float32)
    buf503 = reinterpret_tensor(buf496, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf496  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_78(c_void_p(buf503.data_ptr()), c_void_p(buf495.data_ptr()), c_void_p(primals_295.data_ptr()), c_void_p(mul_143.data_ptr()), c_void_p(div_37.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf500.data_ptr()), c_void_p(buf501.data_ptr()), c_void_p(buf502.data_ptr()))
    del div_37
    del mul_143
    del primals_295
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf504 = aten.convolution_backward(buf503, view_242, primals_293, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf503
    del primals_293
    del view_242
    buf505 = buf504[0]
    buf506 = buf504[1]
    buf507 = buf504[2]
    del buf504
    buf508 = buf488; del buf488  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf492, (1568, 320), (320, 1), 0), permute_617, out=buf508)
    del permute_617
    buf509 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf492, (320, 1568), (1, 320), 0), view_239, out=buf509)
    del view_239
    buf510 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf511 = buf484; del buf484  # reuse
    buf512 = buf483; del buf483  # reuse
    buf513 = empty((320, ), device='cpu', dtype=torch.float32)
    buf514 = empty((320, ), device='cpu', dtype=torch.float32)
    buf515 = buf487; del buf487  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_79(c_void_p(buf515.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(buf505.data_ptr()), c_void_p(buf508.data_ptr()), c_void_p(primals_289.data_ptr()), c_void_p(mul_141.data_ptr()), c_void_p(div_38.data_ptr()), c_void_p(buf510.data_ptr()), c_void_p(buf511.data_ptr()), c_void_p(buf512.data_ptr()), c_void_p(buf513.data_ptr()), c_void_p(buf514.data_ptr()))
    del buf492
    del buf505
    del div_38
    del mul_141
    del primals_289
    buf516 = reinterpret_tensor(buf479, (1568, 1280), (1280, 1), 0); del buf479  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf515, (1568, 320), (320, 1), 0), permute_621, out=buf516)
    del permute_621
    buf517 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf515, (320, 1568), (1, 320), 0), view_237, out=buf517)
    del view_237
    buf518 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf519 = reinterpret_tensor(buf516, (8, 196, 1280), (250880, 1280, 1), 0); del buf516  # reuse
    cpp_fused_gelu_gelu_backward_sum_80(c_void_p(buf519.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(addmm_73.data_ptr()), c_void_p(buf518.data_ptr()))
    del addmm_73
    buf520 = buf508; del buf508  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf519, (1568, 1280), (1280, 1), 0), permute_625, out=buf520)
    del permute_625
    buf521 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf519, (1280, 1568), (1, 1280), 0), view_235, out=buf521)
    del view_235
    buf522 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf523 = buf512; del buf512  # reuse
    buf524 = buf511; del buf511  # reuse
    buf525 = empty((320, ), device='cpu', dtype=torch.float32)
    buf526 = empty((320, ), device='cpu', dtype=torch.float32)
    buf527 = buf515; del buf515  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_81(c_void_p(buf527.data_ptr()), c_void_p(buf519.data_ptr()), c_void_p(buf520.data_ptr()), c_void_p(primals_283.data_ptr()), c_void_p(mul_136.data_ptr()), c_void_p(div_39.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf523.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf525.data_ptr()), c_void_p(buf526.data_ptr()))
    del div_39
    del mul_136
    del primals_283
    buf528 = buf520; del buf520  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf527, (1568, 320), (320, 1), 0), permute_629, out=buf528)
    del permute_629
    buf529 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf527, (320, 1568), (1, 320), 0), view_233, out=buf529)
    del view_233
    buf530 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_82(c_void_p(buf527.data_ptr()), c_void_p(buf530.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf531 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf528, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_155, getitem_248, getitem_249, alias_41, getitem_251, getitem_252, getitem_253, 0, 0, 0.0, False, getitem_256, getitem_257)
    del alias_41
    del getitem_248
    del getitem_249
    del getitem_251
    del getitem_252
    del getitem_253
    del getitem_256
    del getitem_257
    del permute_155
    buf532 = buf531[0]
    buf533 = buf531[1]
    buf534 = buf531[2]
    del buf531
    buf535 = buf495; del buf495  # reuse
    cpp_fused_clone_83(c_void_p(buf533.data_ptr()), c_void_p(buf534.data_ptr()), c_void_p(buf535.data_ptr()))
    del buf533
    buf536 = reinterpret_tensor(buf534, (392, 320), (320, 1), 0); del buf534  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf535, (392, 640), (640, 1), 0), permute_635, out=buf536)
    del permute_635
    buf537 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf535, (640, 392), (1, 640), 0), view_229, out=buf537)
    del view_229
    buf538 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf539 = buf500; del buf500  # reuse
    buf540 = buf499; del buf499  # reuse
    buf541 = empty((320, ), device='cpu', dtype=torch.float32)
    buf542 = empty((320, ), device='cpu', dtype=torch.float32)
    buf543 = reinterpret_tensor(buf536, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf536  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_84(c_void_p(buf543.data_ptr()), c_void_p(buf535.data_ptr()), c_void_p(primals_277.data_ptr()), c_void_p(mul_134.data_ptr()), c_void_p(div_40.data_ptr()), c_void_p(buf538.data_ptr()), c_void_p(buf539.data_ptr()), c_void_p(buf540.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(buf542.data_ptr()))
    del div_40
    del mul_134
    del primals_277
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf544 = aten.convolution_backward(buf543, view_227, primals_275, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf543
    del primals_275
    del view_227
    buf545 = buf544[0]
    buf546 = buf544[1]
    buf547 = buf544[2]
    del buf544
    buf548 = buf528; del buf528  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf532, (1568, 320), (320, 1), 0), permute_642, out=buf548)
    del permute_642
    buf549 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf532, (320, 1568), (1, 320), 0), view_224, out=buf549)
    del view_224
    buf550 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf551 = buf524; del buf524  # reuse
    buf552 = buf523; del buf523  # reuse
    buf553 = empty((320, ), device='cpu', dtype=torch.float32)
    buf554 = empty((320, ), device='cpu', dtype=torch.float32)
    buf555 = buf527; del buf527  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_85(c_void_p(buf555.data_ptr()), c_void_p(buf532.data_ptr()), c_void_p(buf545.data_ptr()), c_void_p(buf548.data_ptr()), c_void_p(primals_271.data_ptr()), c_void_p(mul_132.data_ptr()), c_void_p(div_41.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(buf551.data_ptr()), c_void_p(buf552.data_ptr()), c_void_p(buf553.data_ptr()), c_void_p(buf554.data_ptr()))
    del buf532
    del buf545
    del div_41
    del mul_132
    del primals_271
    buf556 = reinterpret_tensor(buf519, (1568, 1280), (1280, 1), 0); del buf519  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf555, (1568, 320), (320, 1), 0), permute_646, out=buf556)
    del permute_646
    buf557 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf555, (320, 1568), (1, 320), 0), view_222, out=buf557)
    del view_222
    buf558 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf559 = reinterpret_tensor(buf556, (8, 196, 1280), (250880, 1280, 1), 0); del buf556  # reuse
    cpp_fused_gelu_gelu_backward_sum_86(c_void_p(buf559.data_ptr()), c_void_p(buf555.data_ptr()), c_void_p(addmm_68.data_ptr()), c_void_p(buf558.data_ptr()))
    del addmm_68
    buf560 = buf548; del buf548  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf559, (1568, 1280), (1280, 1), 0), permute_650, out=buf560)
    del permute_650
    buf561 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf559, (1280, 1568), (1, 1280), 0), view_220, out=buf561)
    del view_220
    buf562 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf563 = buf552; del buf552  # reuse
    buf564 = buf551; del buf551  # reuse
    buf565 = empty((320, ), device='cpu', dtype=torch.float32)
    buf566 = empty((320, ), device='cpu', dtype=torch.float32)
    buf567 = buf555; del buf555  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_87(c_void_p(buf567.data_ptr()), c_void_p(buf559.data_ptr()), c_void_p(buf560.data_ptr()), c_void_p(primals_265.data_ptr()), c_void_p(mul_127.data_ptr()), c_void_p(div_42.data_ptr()), c_void_p(buf562.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(buf564.data_ptr()), c_void_p(buf565.data_ptr()), c_void_p(buf566.data_ptr()))
    del div_42
    del mul_127
    del primals_265
    buf568 = buf560; del buf560  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf567, (1568, 320), (320, 1), 0), permute_654, out=buf568)
    del permute_654
    buf569 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf567, (320, 1568), (1, 320), 0), view_218, out=buf569)
    del view_218
    buf570 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_88(c_void_p(buf567.data_ptr()), c_void_p(buf570.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf571 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf568, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_145, getitem_231, getitem_232, alias_42, getitem_234, getitem_235, getitem_236, 0, 0, 0.0, False, getitem_239, getitem_240)
    del alias_42
    del getitem_231
    del getitem_232
    del getitem_234
    del getitem_235
    del getitem_236
    del getitem_239
    del getitem_240
    del permute_145
    buf572 = buf571[0]
    buf573 = buf571[1]
    buf574 = buf571[2]
    del buf571
    buf575 = buf535; del buf535  # reuse
    cpp_fused_clone_89(c_void_p(buf573.data_ptr()), c_void_p(buf574.data_ptr()), c_void_p(buf575.data_ptr()))
    del buf573
    buf576 = reinterpret_tensor(buf574, (392, 320), (320, 1), 0); del buf574  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf575, (392, 640), (640, 1), 0), permute_660, out=buf576)
    del permute_660
    buf577 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf575, (640, 392), (1, 640), 0), view_214, out=buf577)
    del view_214
    buf578 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf579 = buf540; del buf540  # reuse
    buf580 = buf539; del buf539  # reuse
    buf581 = empty((320, ), device='cpu', dtype=torch.float32)
    buf582 = empty((320, ), device='cpu', dtype=torch.float32)
    buf583 = reinterpret_tensor(buf576, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf576  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_90(c_void_p(buf583.data_ptr()), c_void_p(buf575.data_ptr()), c_void_p(primals_259.data_ptr()), c_void_p(mul_125.data_ptr()), c_void_p(div_43.data_ptr()), c_void_p(buf578.data_ptr()), c_void_p(buf579.data_ptr()), c_void_p(buf580.data_ptr()), c_void_p(buf581.data_ptr()), c_void_p(buf582.data_ptr()))
    del div_43
    del mul_125
    del primals_259
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf584 = aten.convolution_backward(buf583, view_212, primals_257, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf583
    del primals_257
    del view_212
    buf585 = buf584[0]
    buf586 = buf584[1]
    buf587 = buf584[2]
    del buf584
    buf588 = buf568; del buf568  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf572, (1568, 320), (320, 1), 0), permute_667, out=buf588)
    del permute_667
    buf589 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf572, (320, 1568), (1, 320), 0), view_209, out=buf589)
    del view_209
    buf590 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf591 = buf564; del buf564  # reuse
    buf592 = buf563; del buf563  # reuse
    buf593 = empty((320, ), device='cpu', dtype=torch.float32)
    buf594 = empty((320, ), device='cpu', dtype=torch.float32)
    buf595 = buf567; del buf567  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_91(c_void_p(buf595.data_ptr()), c_void_p(buf572.data_ptr()), c_void_p(buf585.data_ptr()), c_void_p(buf588.data_ptr()), c_void_p(primals_253.data_ptr()), c_void_p(mul_123.data_ptr()), c_void_p(div_44.data_ptr()), c_void_p(buf590.data_ptr()), c_void_p(buf591.data_ptr()), c_void_p(buf592.data_ptr()), c_void_p(buf593.data_ptr()), c_void_p(buf594.data_ptr()))
    del buf572
    del buf585
    del div_44
    del mul_123
    del primals_253
    buf596 = reinterpret_tensor(buf559, (1568, 1280), (1280, 1), 0); del buf559  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf595, (1568, 320), (320, 1), 0), permute_671, out=buf596)
    del permute_671
    buf597 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf595, (320, 1568), (1, 320), 0), view_207, out=buf597)
    del view_207
    buf598 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf599 = reinterpret_tensor(buf596, (8, 196, 1280), (250880, 1280, 1), 0); del buf596  # reuse
    cpp_fused_gelu_gelu_backward_sum_92(c_void_p(buf599.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(addmm_63.data_ptr()), c_void_p(buf598.data_ptr()))
    del addmm_63
    buf600 = buf588; del buf588  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf599, (1568, 1280), (1280, 1), 0), permute_675, out=buf600)
    del permute_675
    buf601 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf599, (1280, 1568), (1, 1280), 0), view_205, out=buf601)
    del view_205
    buf602 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf603 = buf592; del buf592  # reuse
    buf604 = buf591; del buf591  # reuse
    buf605 = empty((320, ), device='cpu', dtype=torch.float32)
    buf606 = empty((320, ), device='cpu', dtype=torch.float32)
    buf607 = buf595; del buf595  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_93(c_void_p(buf607.data_ptr()), c_void_p(buf599.data_ptr()), c_void_p(buf600.data_ptr()), c_void_p(primals_247.data_ptr()), c_void_p(mul_118.data_ptr()), c_void_p(div_45.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(buf604.data_ptr()), c_void_p(buf605.data_ptr()), c_void_p(buf606.data_ptr()))
    del div_45
    del mul_118
    del primals_247
    buf608 = buf600; del buf600  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf607, (1568, 320), (320, 1), 0), permute_679, out=buf608)
    del permute_679
    buf609 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf607, (320, 1568), (1, 320), 0), view_203, out=buf609)
    del view_203
    buf610 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_94(c_void_p(buf607.data_ptr()), c_void_p(buf610.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf611 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf608, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_135, getitem_214, getitem_215, alias_43, getitem_217, getitem_218, getitem_219, 0, 0, 0.0, False, getitem_222, getitem_223)
    del alias_43
    del getitem_214
    del getitem_215
    del getitem_217
    del getitem_218
    del getitem_219
    del getitem_222
    del getitem_223
    del permute_135
    buf612 = buf611[0]
    buf613 = buf611[1]
    buf614 = buf611[2]
    del buf611
    buf615 = buf575; del buf575  # reuse
    cpp_fused_clone_95(c_void_p(buf613.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(buf615.data_ptr()))
    del buf613
    buf616 = reinterpret_tensor(buf614, (392, 320), (320, 1), 0); del buf614  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf615, (392, 640), (640, 1), 0), permute_685, out=buf616)
    del permute_685
    buf617 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf615, (640, 392), (1, 640), 0), view_199, out=buf617)
    del view_199
    buf618 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf619 = buf580; del buf580  # reuse
    buf620 = buf579; del buf579  # reuse
    buf621 = empty((320, ), device='cpu', dtype=torch.float32)
    buf622 = empty((320, ), device='cpu', dtype=torch.float32)
    buf623 = reinterpret_tensor(buf616, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf616  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_96(c_void_p(buf623.data_ptr()), c_void_p(buf615.data_ptr()), c_void_p(primals_241.data_ptr()), c_void_p(mul_116.data_ptr()), c_void_p(div_46.data_ptr()), c_void_p(buf618.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(buf620.data_ptr()), c_void_p(buf621.data_ptr()), c_void_p(buf622.data_ptr()))
    del div_46
    del mul_116
    del primals_241
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf624 = aten.convolution_backward(buf623, view_197, primals_239, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf623
    del primals_239
    del view_197
    buf625 = buf624[0]
    buf626 = buf624[1]
    buf627 = buf624[2]
    del buf624
    buf628 = buf608; del buf608  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf612, (1568, 320), (320, 1), 0), permute_692, out=buf628)
    del permute_692
    buf629 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf612, (320, 1568), (1, 320), 0), view_194, out=buf629)
    del view_194
    buf630 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf631 = buf604; del buf604  # reuse
    buf632 = buf603; del buf603  # reuse
    buf633 = empty((320, ), device='cpu', dtype=torch.float32)
    buf634 = empty((320, ), device='cpu', dtype=torch.float32)
    buf635 = buf607; del buf607  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_97(c_void_p(buf635.data_ptr()), c_void_p(buf612.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(buf628.data_ptr()), c_void_p(primals_235.data_ptr()), c_void_p(mul_114.data_ptr()), c_void_p(div_47.data_ptr()), c_void_p(buf630.data_ptr()), c_void_p(buf631.data_ptr()), c_void_p(buf632.data_ptr()), c_void_p(buf633.data_ptr()), c_void_p(buf634.data_ptr()))
    del buf612
    del buf625
    del div_47
    del mul_114
    del primals_235
    buf636 = reinterpret_tensor(buf599, (1568, 1280), (1280, 1), 0); del buf599  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf635, (1568, 320), (320, 1), 0), permute_696, out=buf636)
    del permute_696
    buf637 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf635, (320, 1568), (1, 320), 0), view_192, out=buf637)
    del view_192
    buf638 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf639 = reinterpret_tensor(buf636, (8, 196, 1280), (250880, 1280, 1), 0); del buf636  # reuse
    cpp_fused_gelu_gelu_backward_sum_98(c_void_p(buf639.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(addmm_58.data_ptr()), c_void_p(buf638.data_ptr()))
    del addmm_58
    buf640 = buf628; del buf628  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf639, (1568, 1280), (1280, 1), 0), permute_700, out=buf640)
    del permute_700
    buf641 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf639, (1280, 1568), (1, 1280), 0), view_190, out=buf641)
    del view_190
    buf642 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf643 = buf632; del buf632  # reuse
    buf644 = buf631; del buf631  # reuse
    buf645 = empty((320, ), device='cpu', dtype=torch.float32)
    buf646 = empty((320, ), device='cpu', dtype=torch.float32)
    buf647 = buf635; del buf635  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_99(c_void_p(buf647.data_ptr()), c_void_p(buf639.data_ptr()), c_void_p(buf640.data_ptr()), c_void_p(primals_229.data_ptr()), c_void_p(mul_109.data_ptr()), c_void_p(div_48.data_ptr()), c_void_p(buf642.data_ptr()), c_void_p(buf643.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(buf645.data_ptr()), c_void_p(buf646.data_ptr()))
    del div_48
    del mul_109
    del primals_229
    buf648 = buf640; del buf640  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf647, (1568, 320), (320, 1), 0), permute_704, out=buf648)
    del permute_704
    buf649 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf647, (320, 1568), (1, 320), 0), view_188, out=buf649)
    del view_188
    buf650 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_100(c_void_p(buf647.data_ptr()), c_void_p(buf650.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf651 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf648, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_125, getitem_197, getitem_198, alias_44, getitem_200, getitem_201, getitem_202, 0, 0, 0.0, False, getitem_205, getitem_206)
    del alias_44
    del getitem_197
    del getitem_198
    del getitem_200
    del getitem_201
    del getitem_202
    del getitem_205
    del getitem_206
    del permute_125
    buf652 = buf651[0]
    buf653 = buf651[1]
    buf654 = buf651[2]
    del buf651
    buf655 = buf615; del buf615  # reuse
    cpp_fused_clone_101(c_void_p(buf653.data_ptr()), c_void_p(buf654.data_ptr()), c_void_p(buf655.data_ptr()))
    del buf653
    buf656 = reinterpret_tensor(buf654, (392, 320), (320, 1), 0); del buf654  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf655, (392, 640), (640, 1), 0), permute_710, out=buf656)
    del permute_710
    buf657 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf655, (640, 392), (1, 640), 0), view_184, out=buf657)
    del view_184
    buf658 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf659 = buf620; del buf620  # reuse
    buf660 = buf619; del buf619  # reuse
    buf661 = empty((320, ), device='cpu', dtype=torch.float32)
    buf662 = empty((320, ), device='cpu', dtype=torch.float32)
    buf663 = reinterpret_tensor(buf656, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf656  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_102(c_void_p(buf663.data_ptr()), c_void_p(buf655.data_ptr()), c_void_p(primals_223.data_ptr()), c_void_p(mul_107.data_ptr()), c_void_p(div_49.data_ptr()), c_void_p(buf658.data_ptr()), c_void_p(buf659.data_ptr()), c_void_p(buf660.data_ptr()), c_void_p(buf661.data_ptr()), c_void_p(buf662.data_ptr()))
    del div_49
    del mul_107
    del primals_223
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf664 = aten.convolution_backward(buf663, view_182, primals_221, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf663
    del primals_221
    del view_182
    buf665 = buf664[0]
    buf666 = buf664[1]
    buf667 = buf664[2]
    del buf664
    buf668 = buf648; del buf648  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf652, (1568, 320), (320, 1), 0), permute_717, out=buf668)
    del permute_717
    buf669 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf652, (320, 1568), (1, 320), 0), view_179, out=buf669)
    del view_179
    buf670 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf671 = buf644; del buf644  # reuse
    buf672 = buf643; del buf643  # reuse
    buf673 = empty((320, ), device='cpu', dtype=torch.float32)
    buf674 = empty((320, ), device='cpu', dtype=torch.float32)
    buf675 = buf647; del buf647  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_103(c_void_p(buf675.data_ptr()), c_void_p(buf652.data_ptr()), c_void_p(buf665.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(primals_217.data_ptr()), c_void_p(mul_105.data_ptr()), c_void_p(div_50.data_ptr()), c_void_p(buf670.data_ptr()), c_void_p(buf671.data_ptr()), c_void_p(buf672.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf674.data_ptr()))
    del buf652
    del buf665
    del div_50
    del mul_105
    del primals_217
    buf676 = reinterpret_tensor(buf639, (1568, 1280), (1280, 1), 0); del buf639  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf675, (1568, 320), (320, 1), 0), permute_721, out=buf676)
    del permute_721
    buf677 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf675, (320, 1568), (1, 320), 0), view_177, out=buf677)
    del view_177
    buf678 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf679 = reinterpret_tensor(buf676, (8, 196, 1280), (250880, 1280, 1), 0); del buf676  # reuse
    cpp_fused_gelu_gelu_backward_sum_104(c_void_p(buf679.data_ptr()), c_void_p(buf675.data_ptr()), c_void_p(addmm_53.data_ptr()), c_void_p(buf678.data_ptr()))
    del addmm_53
    buf680 = buf668; del buf668  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf679, (1568, 1280), (1280, 1), 0), permute_725, out=buf680)
    del permute_725
    buf681 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf679, (1280, 1568), (1, 1280), 0), view_175, out=buf681)
    del view_175
    buf682 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf683 = buf672; del buf672  # reuse
    buf684 = buf671; del buf671  # reuse
    buf685 = empty((320, ), device='cpu', dtype=torch.float32)
    buf686 = empty((320, ), device='cpu', dtype=torch.float32)
    buf687 = buf675; del buf675  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_105(c_void_p(buf687.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(primals_211.data_ptr()), c_void_p(mul_100.data_ptr()), c_void_p(div_51.data_ptr()), c_void_p(buf682.data_ptr()), c_void_p(buf683.data_ptr()), c_void_p(buf684.data_ptr()), c_void_p(buf685.data_ptr()), c_void_p(buf686.data_ptr()))
    del div_51
    del mul_100
    del primals_211
    buf688 = buf680; del buf680  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf687, (1568, 320), (320, 1), 0), permute_729, out=buf688)
    del permute_729
    buf689 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf687, (320, 1568), (1, 320), 0), view_173, out=buf689)
    del view_173
    buf690 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_106(c_void_p(buf687.data_ptr()), c_void_p(buf690.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf691 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf688, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_115, getitem_180, getitem_181, alias_45, getitem_183, getitem_184, getitem_185, 0, 0, 0.0, False, getitem_188, getitem_189)
    del alias_45
    del getitem_180
    del getitem_181
    del getitem_183
    del getitem_184
    del getitem_185
    del getitem_188
    del getitem_189
    del permute_115
    buf692 = buf691[0]
    buf693 = buf691[1]
    buf694 = buf691[2]
    del buf691
    buf695 = buf655; del buf655  # reuse
    cpp_fused_clone_107(c_void_p(buf693.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(buf695.data_ptr()))
    del buf693
    buf696 = reinterpret_tensor(buf694, (392, 320), (320, 1), 0); del buf694  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf695, (392, 640), (640, 1), 0), permute_735, out=buf696)
    del permute_735
    buf697 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf695, (640, 392), (1, 640), 0), view_169, out=buf697)
    del view_169
    buf698 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf699 = buf660; del buf660  # reuse
    buf700 = buf659; del buf659  # reuse
    buf701 = empty((320, ), device='cpu', dtype=torch.float32)
    buf702 = empty((320, ), device='cpu', dtype=torch.float32)
    buf703 = reinterpret_tensor(buf696, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf696  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_108(c_void_p(buf703.data_ptr()), c_void_p(buf695.data_ptr()), c_void_p(primals_205.data_ptr()), c_void_p(mul_98.data_ptr()), c_void_p(div_52.data_ptr()), c_void_p(buf698.data_ptr()), c_void_p(buf699.data_ptr()), c_void_p(buf700.data_ptr()), c_void_p(buf701.data_ptr()), c_void_p(buf702.data_ptr()))
    del div_52
    del mul_98
    del primals_205
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf704 = aten.convolution_backward(buf703, view_167, primals_203, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf703
    del primals_203
    del view_167
    buf705 = buf704[0]
    buf706 = buf704[1]
    buf707 = buf704[2]
    del buf704
    buf708 = buf688; del buf688  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf692, (1568, 320), (320, 1), 0), permute_742, out=buf708)
    del permute_742
    buf709 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf692, (320, 1568), (1, 320), 0), view_164, out=buf709)
    del view_164
    buf710 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf711 = buf684; del buf684  # reuse
    buf712 = buf683; del buf683  # reuse
    buf713 = empty((320, ), device='cpu', dtype=torch.float32)
    buf714 = empty((320, ), device='cpu', dtype=torch.float32)
    buf715 = buf687; del buf687  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_109(c_void_p(buf715.data_ptr()), c_void_p(buf692.data_ptr()), c_void_p(buf705.data_ptr()), c_void_p(buf708.data_ptr()), c_void_p(primals_199.data_ptr()), c_void_p(mul_96.data_ptr()), c_void_p(div_53.data_ptr()), c_void_p(buf710.data_ptr()), c_void_p(buf711.data_ptr()), c_void_p(buf712.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(buf714.data_ptr()))
    del buf692
    del buf705
    del div_53
    del mul_96
    del primals_199
    buf716 = reinterpret_tensor(buf679, (1568, 1280), (1280, 1), 0); del buf679  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf715, (1568, 320), (320, 1), 0), permute_746, out=buf716)
    del permute_746
    buf717 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf715, (320, 1568), (1, 320), 0), view_162, out=buf717)
    del view_162
    buf718 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf719 = reinterpret_tensor(buf716, (8, 196, 1280), (250880, 1280, 1), 0); del buf716  # reuse
    cpp_fused_gelu_gelu_backward_sum_110(c_void_p(buf719.data_ptr()), c_void_p(buf715.data_ptr()), c_void_p(addmm_48.data_ptr()), c_void_p(buf718.data_ptr()))
    del addmm_48
    buf720 = buf708; del buf708  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf719, (1568, 1280), (1280, 1), 0), permute_750, out=buf720)
    del permute_750
    buf721 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf719, (1280, 1568), (1, 1280), 0), view_160, out=buf721)
    del view_160
    buf722 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf723 = buf712; del buf712  # reuse
    buf724 = buf711; del buf711  # reuse
    buf725 = empty((320, ), device='cpu', dtype=torch.float32)
    buf726 = empty((320, ), device='cpu', dtype=torch.float32)
    buf727 = buf715; del buf715  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_111(c_void_p(buf727.data_ptr()), c_void_p(buf719.data_ptr()), c_void_p(buf720.data_ptr()), c_void_p(primals_193.data_ptr()), c_void_p(mul_91.data_ptr()), c_void_p(div_54.data_ptr()), c_void_p(buf722.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(buf726.data_ptr()))
    del div_54
    del mul_91
    del primals_193
    buf728 = buf720; del buf720  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf727, (1568, 320), (320, 1), 0), permute_754, out=buf728)
    del permute_754
    buf729 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf727, (320, 1568), (1, 320), 0), view_158, out=buf729)
    del view_158
    buf730 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_112(c_void_p(buf727.data_ptr()), c_void_p(buf730.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf731 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf728, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_105, getitem_163, getitem_164, alias_46, getitem_166, getitem_167, getitem_168, 0, 0, 0.0, False, getitem_171, getitem_172)
    del alias_46
    del getitem_163
    del getitem_164
    del getitem_166
    del getitem_167
    del getitem_168
    del getitem_171
    del getitem_172
    del permute_105
    buf732 = buf731[0]
    buf733 = buf731[1]
    buf734 = buf731[2]
    del buf731
    buf735 = buf695; del buf695  # reuse
    cpp_fused_clone_113(c_void_p(buf733.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf735.data_ptr()))
    del buf733
    buf736 = reinterpret_tensor(buf734, (392, 320), (320, 1), 0); del buf734  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf735, (392, 640), (640, 1), 0), permute_760, out=buf736)
    del permute_760
    buf737 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf735, (640, 392), (1, 640), 0), view_154, out=buf737)
    del view_154
    buf738 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf739 = buf700; del buf700  # reuse
    buf740 = buf699; del buf699  # reuse
    buf741 = empty((320, ), device='cpu', dtype=torch.float32)
    buf742 = empty((320, ), device='cpu', dtype=torch.float32)
    buf743 = reinterpret_tensor(buf736, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf736  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_114(c_void_p(buf743.data_ptr()), c_void_p(buf735.data_ptr()), c_void_p(primals_187.data_ptr()), c_void_p(mul_89.data_ptr()), c_void_p(div_55.data_ptr()), c_void_p(buf738.data_ptr()), c_void_p(buf739.data_ptr()), c_void_p(buf740.data_ptr()), c_void_p(buf741.data_ptr()), c_void_p(buf742.data_ptr()))
    del div_55
    del mul_89
    del primals_187
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf744 = aten.convolution_backward(buf743, view_152, primals_185, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf743
    del primals_185
    del view_152
    buf745 = buf744[0]
    buf746 = buf744[1]
    buf747 = buf744[2]
    del buf744
    buf748 = buf728; del buf728  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf732, (1568, 320), (320, 1), 0), permute_767, out=buf748)
    del permute_767
    buf749 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf732, (320, 1568), (1, 320), 0), view_149, out=buf749)
    del view_149
    buf750 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf751 = buf724; del buf724  # reuse
    buf752 = buf723; del buf723  # reuse
    buf753 = empty((320, ), device='cpu', dtype=torch.float32)
    buf754 = empty((320, ), device='cpu', dtype=torch.float32)
    buf755 = buf727; del buf727  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_115(c_void_p(buf755.data_ptr()), c_void_p(buf732.data_ptr()), c_void_p(buf745.data_ptr()), c_void_p(buf748.data_ptr()), c_void_p(primals_181.data_ptr()), c_void_p(mul_87.data_ptr()), c_void_p(div_56.data_ptr()), c_void_p(buf750.data_ptr()), c_void_p(buf751.data_ptr()), c_void_p(buf752.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(buf754.data_ptr()))
    del buf732
    del buf745
    del div_56
    del mul_87
    del primals_181
    buf756 = reinterpret_tensor(buf719, (1568, 1280), (1280, 1), 0); del buf719  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf755, (1568, 320), (320, 1), 0), permute_771, out=buf756)
    del permute_771
    buf757 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf755, (320, 1568), (1, 320), 0), view_147, out=buf757)
    del view_147
    buf758 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf759 = reinterpret_tensor(buf756, (8, 196, 1280), (250880, 1280, 1), 0); del buf756  # reuse
    cpp_fused_gelu_gelu_backward_sum_116(c_void_p(buf759.data_ptr()), c_void_p(buf755.data_ptr()), c_void_p(addmm_43.data_ptr()), c_void_p(buf758.data_ptr()))
    del addmm_43
    buf760 = buf748; del buf748  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf759, (1568, 1280), (1280, 1), 0), permute_775, out=buf760)
    del permute_775
    buf761 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf759, (1280, 1568), (1, 1280), 0), view_145, out=buf761)
    del view_145
    buf762 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf763 = buf752; del buf752  # reuse
    buf764 = buf751; del buf751  # reuse
    buf765 = empty((320, ), device='cpu', dtype=torch.float32)
    buf766 = empty((320, ), device='cpu', dtype=torch.float32)
    buf767 = buf755; del buf755  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_117(c_void_p(buf767.data_ptr()), c_void_p(buf759.data_ptr()), c_void_p(buf760.data_ptr()), c_void_p(primals_175.data_ptr()), c_void_p(mul_82.data_ptr()), c_void_p(div_57.data_ptr()), c_void_p(buf762.data_ptr()), c_void_p(buf763.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf765.data_ptr()), c_void_p(buf766.data_ptr()))
    del div_57
    del mul_82
    del primals_175
    buf768 = buf760; del buf760  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf767, (1568, 320), (320, 1), 0), permute_779, out=buf768)
    del permute_779
    buf769 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf767, (320, 1568), (1, 320), 0), view_143, out=buf769)
    del view_143
    buf770 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_118(c_void_p(buf767.data_ptr()), c_void_p(buf770.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf771 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf768, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_95, getitem_146, getitem_147, alias_47, getitem_149, getitem_150, getitem_151, 0, 0, 0.0, False, getitem_154, getitem_155)
    del alias_47
    del getitem_146
    del getitem_147
    del getitem_149
    del getitem_150
    del getitem_151
    del getitem_154
    del getitem_155
    del permute_95
    buf772 = buf771[0]
    buf773 = buf771[1]
    buf774 = buf771[2]
    del buf771
    buf775 = buf735; del buf735  # reuse
    cpp_fused_clone_119(c_void_p(buf773.data_ptr()), c_void_p(buf774.data_ptr()), c_void_p(buf775.data_ptr()))
    del buf773
    buf776 = reinterpret_tensor(buf774, (392, 320), (320, 1), 0); del buf774  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf775, (392, 640), (640, 1), 0), permute_785, out=buf776)
    del permute_785
    buf777 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf775, (640, 392), (1, 640), 0), view_139, out=buf777)
    del view_139
    buf778 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf779 = buf740; del buf740  # reuse
    buf780 = buf739; del buf739  # reuse
    buf781 = empty((320, ), device='cpu', dtype=torch.float32)
    buf782 = empty((320, ), device='cpu', dtype=torch.float32)
    buf783 = reinterpret_tensor(buf776, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf776  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_120(c_void_p(buf783.data_ptr()), c_void_p(buf775.data_ptr()), c_void_p(primals_169.data_ptr()), c_void_p(mul_80.data_ptr()), c_void_p(div_58.data_ptr()), c_void_p(buf778.data_ptr()), c_void_p(buf779.data_ptr()), c_void_p(buf780.data_ptr()), c_void_p(buf781.data_ptr()), c_void_p(buf782.data_ptr()))
    del div_58
    del mul_80
    del primals_169
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf784 = aten.convolution_backward(buf783, view_137, primals_167, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf783
    del primals_167
    del view_137
    buf785 = buf784[0]
    buf786 = buf784[1]
    buf787 = buf784[2]
    del buf784
    buf788 = buf768; del buf768  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf772, (1568, 320), (320, 1), 0), permute_792, out=buf788)
    del permute_792
    buf789 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf772, (320, 1568), (1, 320), 0), view_134, out=buf789)
    del view_134
    buf790 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf791 = buf764; del buf764  # reuse
    buf792 = buf763; del buf763  # reuse
    buf793 = empty((320, ), device='cpu', dtype=torch.float32)
    buf794 = empty((320, ), device='cpu', dtype=torch.float32)
    buf795 = buf767; del buf767  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_121(c_void_p(buf795.data_ptr()), c_void_p(buf772.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(buf788.data_ptr()), c_void_p(primals_163.data_ptr()), c_void_p(mul_78.data_ptr()), c_void_p(div_59.data_ptr()), c_void_p(buf790.data_ptr()), c_void_p(buf791.data_ptr()), c_void_p(buf792.data_ptr()), c_void_p(buf793.data_ptr()), c_void_p(buf794.data_ptr()))
    del buf772
    del div_59
    del mul_78
    del primals_163
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf796 = aten.convolution_backward(reinterpret_tensor(buf795, (8, 320, 14, 14), (62720, 1, 4480, 320), 0), view_131, primals_161, [320], [1, 1], [1, 1], [1, 1], False, [0, 0], 320, [True, True, True])
    del primals_161
    del view_131
    buf797 = buf796[0]
    buf798 = buf796[1]
    buf799 = buf796[2]
    del buf796
    buf800 = reinterpret_tensor(buf788, (8, 320, 14, 14), (62720, 196, 14, 1), 0); del buf788  # reuse
    buf801 = reinterpret_tensor(buf785, (1568, 320), (320, 1), 0); del buf785  # reuse
    cpp_fused__unsafe_view_add_122(c_void_p(buf795.data_ptr()), c_void_p(buf797.data_ptr()), c_void_p(buf800.data_ptr()), c_void_p(buf801.data_ptr()))
    del buf795
    del buf797
    buf802 = reinterpret_tensor(buf759, (1568, 1280), (1280, 1), 0); del buf759  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf801, permute_798, out=buf802)
    del permute_798
    buf803 = empty((320, 1280), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf801, (320, 1568), (1, 320), 0), view_129, out=buf803)
    del view_129
    buf804 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf805 = reinterpret_tensor(buf802, (8, 196, 1280), (250880, 1280, 1), 0); del buf802  # reuse
    cpp_fused_gelu_gelu_backward_sum_123(c_void_p(buf805.data_ptr()), c_void_p(buf801.data_ptr()), c_void_p(addmm_38.data_ptr()), c_void_p(buf804.data_ptr()))
    del addmm_38
    buf806 = buf801; del buf801  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf805, (1568, 1280), (1280, 1), 0), permute_802, out=buf806)
    del permute_802
    buf807 = empty((1280, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf805, (1280, 1568), (1, 1280), 0), view_127, out=buf807)
    del view_127
    buf808 = empty((1, 1280), device='cpu', dtype=torch.float32)
    buf809 = buf792; del buf792  # reuse
    buf810 = buf791; del buf791  # reuse
    buf811 = empty((320, ), device='cpu', dtype=torch.float32)
    buf812 = empty((320, ), device='cpu', dtype=torch.float32)
    buf813 = reinterpret_tensor(buf806, (8, 196, 320), (62720, 320, 1), 0); del buf806  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_124(c_void_p(buf813.data_ptr()), c_void_p(buf805.data_ptr()), c_void_p(primals_155.data_ptr()), c_void_p(mul_73.data_ptr()), c_void_p(buf800.data_ptr()), c_void_p(div_60.data_ptr()), c_void_p(buf808.data_ptr()), c_void_p(buf809.data_ptr()), c_void_p(buf810.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(buf812.data_ptr()))
    del buf805
    del div_60
    del mul_73
    del primals_155
    buf814 = reinterpret_tensor(buf800, (1568, 320), (320, 1), 0); del buf800  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf813, (1568, 320), (320, 1), 0), permute_806, out=buf814)
    del permute_806
    buf815 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf813, (320, 1568), (1, 320), 0), view_125, out=buf815)
    del view_125
    buf816 = empty((1, 320), device='cpu', dtype=torch.float32)
    cpp_fused_sum_125(c_void_p(buf813.data_ptr()), c_void_p(buf816.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf817 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf814, (8, 5, 196, 64), (62720, 64, 320, 1), 0), permute_82, getitem_129, getitem_130, alias_48, getitem_132, getitem_133, getitem_134, 0, 0, 0.0, False, getitem_137, getitem_138)
    del alias_48
    del getitem_129
    del getitem_130
    del getitem_132
    del getitem_133
    del getitem_134
    del getitem_137
    del getitem_138
    del permute_82
    buf818 = buf817[0]
    buf819 = buf817[1]
    buf820 = buf817[2]
    del buf817
    buf821 = buf775; del buf775  # reuse
    cpp_fused_clone_126(c_void_p(buf819.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf821.data_ptr()))
    del buf819
    buf822 = reinterpret_tensor(buf820, (392, 320), (320, 1), 0); del buf820  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf821, (392, 640), (640, 1), 0), permute_812, out=buf822)
    del permute_812
    buf823 = empty((640, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf821, (640, 392), (1, 640), 0), view_121, out=buf823)
    del view_121
    buf824 = empty((1, 640), device='cpu', dtype=torch.float32)
    buf825 = buf780; del buf780  # reuse
    buf826 = buf779; del buf779  # reuse
    buf827 = empty((320, ), device='cpu', dtype=torch.float32)
    buf828 = empty((320, ), device='cpu', dtype=torch.float32)
    buf829 = reinterpret_tensor(buf822, (8, 320, 7, 7), (15680, 1, 2240, 320), 0); del buf822  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_127(c_void_p(buf829.data_ptr()), c_void_p(buf821.data_ptr()), c_void_p(primals_149.data_ptr()), c_void_p(mul_71.data_ptr()), c_void_p(div_61.data_ptr()), c_void_p(buf824.data_ptr()), c_void_p(buf825.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(buf827.data_ptr()), c_void_p(buf828.data_ptr()))
    del buf821
    del div_61
    del mul_71
    del primals_149
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf830 = aten.convolution_backward(buf829, view_119, primals_147, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf829
    del primals_147
    del view_119
    buf831 = buf830[0]
    buf832 = buf830[1]
    buf833 = buf830[2]
    del buf830
    buf834 = buf814; del buf814  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf818, (1568, 320), (320, 1), 0), permute_819, out=buf834)
    del permute_819
    buf835 = empty((320, 320), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf818, (320, 1568), (1, 320), 0), view_116, out=buf835)
    del view_116
    buf836 = empty((1, 320), device='cpu', dtype=torch.float32)
    buf837 = buf810; del buf810  # reuse
    buf838 = buf809; del buf809  # reuse
    buf839 = empty((320, ), device='cpu', dtype=torch.float32)
    buf840 = empty((320, ), device='cpu', dtype=torch.float32)
    buf841 = buf813; del buf813  # reuse
    buf842 = empty_strided((8, 196, 1), (196, 1, 1568), device='cpu', dtype=torch.float32)
    buf843 = empty_strided((8, 196, 1), (196, 1, 1568), device='cpu', dtype=torch.float32)
    buf844 = empty((320, ), device='cpu', dtype=torch.float32)
    buf845 = empty((320, ), device='cpu', dtype=torch.float32)
    buf846 = reinterpret_tensor(buf841, (8, 320, 14, 14), (62720, 1, 4480, 320), 0); del buf841  # reuse
    cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_128(c_void_p(buf846.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf831.data_ptr()), c_void_p(buf834.data_ptr()), c_void_p(primals_143.data_ptr()), c_void_p(mul_69.data_ptr()), c_void_p(div_62.data_ptr()), c_void_p(primals_141.data_ptr()), c_void_p(mul_67.data_ptr()), c_void_p(div_63.data_ptr()), c_void_p(buf836.data_ptr()), c_void_p(buf837.data_ptr()), c_void_p(buf838.data_ptr()), c_void_p(buf839.data_ptr()), c_void_p(buf840.data_ptr()), c_void_p(buf842.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(buf844.data_ptr()), c_void_p(buf845.data_ptr()))
    del buf818
    del buf831
    del buf834
    del buf837
    del buf838
    del buf842
    del buf843
    del div_62
    del div_63
    del mul_67
    del mul_69
    del primals_141
    del primals_143
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf847 = aten.convolution_backward(buf846, clone_26, primals_139, [320], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf846
    del clone_26
    del primals_139
    buf848 = buf847[0]
    buf849 = buf847[1]
    buf850 = buf847[2]
    del buf847
    buf851 = empty((6272, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf848, (6272, 128), (128, 1), 0), permute_825, out=buf851)
    del permute_825
    buf852 = empty((128, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf848, (128, 6272), (1, 128), 0), view_112, out=buf852)
    del view_112
    buf853 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf854 = reinterpret_tensor(buf851, (8, 784, 1024), (802816, 1024, 1), 0); del buf851  # reuse
    cpp_fused_gelu_gelu_backward_sum_129(c_void_p(buf854.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(addmm_33.data_ptr()), c_void_p(buf853.data_ptr()))
    del addmm_33
    buf855 = reinterpret_tensor(buf79, (6272, 128), (128, 1), 0); del buf79  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf854, (6272, 1024), (1024, 1), 0), permute_829, out=buf855)
    del permute_829
    buf856 = empty((1024, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf854, (1024, 6272), (1, 1024), 0), view_110, out=buf856)
    del view_110
    buf857 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf858 = empty_strided((8, 784, 1), (784, 1, 6272), device='cpu', dtype=torch.float32)
    buf859 = empty_strided((8, 784, 1), (784, 1, 6272), device='cpu', dtype=torch.float32)
    buf860 = empty((128, ), device='cpu', dtype=torch.float32)
    buf861 = empty((128, ), device='cpu', dtype=torch.float32)
    buf862 = reinterpret_tensor(buf848, (8, 784, 128), (100352, 128, 1), 0); del buf848  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_130(c_void_p(buf862.data_ptr()), c_void_p(buf854.data_ptr()), c_void_p(buf855.data_ptr()), c_void_p(primals_133.data_ptr()), c_void_p(mul_62.data_ptr()), c_void_p(div_64.data_ptr()), c_void_p(buf857.data_ptr()), c_void_p(buf858.data_ptr()), c_void_p(buf859.data_ptr()), c_void_p(buf860.data_ptr()), c_void_p(buf861.data_ptr()))
    del div_64
    del mul_62
    del primals_133
    buf863 = buf855; del buf855  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf862, (6272, 128), (128, 1), 0), permute_833, out=buf863)
    del permute_833
    buf864 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf862, (128, 6272), (1, 128), 0), view_108, out=buf864)
    del view_108
    buf865 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_131(c_void_p(buf862.data_ptr()), c_void_p(buf865.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf866 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf863, (8, 2, 784, 64), (100352, 64, 128, 1), 0), permute_70, getitem_110, getitem_111, alias_49, getitem_113, getitem_114, getitem_115, 0, 0, 0.0, False, getitem_118, getitem_119)
    del alias_49
    del getitem_110
    del getitem_111
    del getitem_113
    del getitem_114
    del getitem_115
    del getitem_118
    del getitem_119
    del permute_70
    buf867 = buf866[0]
    buf868 = buf866[1]
    buf869 = buf866[2]
    del buf866
    buf870 = empty((8, 49, 2, 2, 64), device='cpu', dtype=torch.float32)
    cpp_fused_clone_132(c_void_p(buf868.data_ptr()), c_void_p(buf869.data_ptr()), c_void_p(buf870.data_ptr()))
    del buf868
    buf871 = reinterpret_tensor(buf869, (392, 128), (128, 1), 0); del buf869  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf870, (392, 256), (256, 1), 0), permute_839, out=buf871)
    del permute_839
    buf872 = empty((256, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf870, (256, 392), (1, 256), 0), view_104, out=buf872)
    del view_104
    buf873 = empty((1, 256), device='cpu', dtype=torch.float32)
    buf874 = buf826; del buf826  # reuse
    buf875 = buf825; del buf825  # reuse
    buf876 = empty((128, ), device='cpu', dtype=torch.float32)
    buf877 = empty((128, ), device='cpu', dtype=torch.float32)
    buf878 = reinterpret_tensor(buf871, (8, 128, 7, 7), (6272, 1, 896, 128), 0); del buf871  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_133(c_void_p(buf878.data_ptr()), c_void_p(buf870.data_ptr()), c_void_p(primals_127.data_ptr()), c_void_p(mul_60.data_ptr()), c_void_p(div_65.data_ptr()), c_void_p(buf873.data_ptr()), c_void_p(buf874.data_ptr()), c_void_p(buf875.data_ptr()), c_void_p(buf876.data_ptr()), c_void_p(buf877.data_ptr()))
    del div_65
    del mul_60
    del primals_127
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf879 = aten.convolution_backward(buf878, view_102, primals_125, [128], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf878
    del primals_125
    del view_102
    buf880 = buf879[0]
    buf881 = buf879[1]
    buf882 = buf879[2]
    del buf879
    buf883 = buf863; del buf863  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf867, (6272, 128), (128, 1), 0), permute_846, out=buf883)
    del permute_846
    buf884 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf867, (128, 6272), (1, 128), 0), view_99, out=buf884)
    del view_99
    buf885 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf886 = buf859; del buf859  # reuse
    buf887 = buf858; del buf858  # reuse
    buf888 = empty((128, ), device='cpu', dtype=torch.float32)
    buf889 = empty((128, ), device='cpu', dtype=torch.float32)
    buf890 = buf862; del buf862  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_134(c_void_p(buf890.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(buf880.data_ptr()), c_void_p(buf883.data_ptr()), c_void_p(primals_121.data_ptr()), c_void_p(mul_58.data_ptr()), c_void_p(div_66.data_ptr()), c_void_p(buf885.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(buf887.data_ptr()), c_void_p(buf888.data_ptr()), c_void_p(buf889.data_ptr()))
    del buf867
    del buf880
    del div_66
    del mul_58
    del primals_121
    buf891 = reinterpret_tensor(buf854, (6272, 1024), (1024, 1), 0); del buf854  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf890, (6272, 128), (128, 1), 0), permute_850, out=buf891)
    del permute_850
    buf892 = empty((128, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf890, (128, 6272), (1, 128), 0), view_97, out=buf892)
    del view_97
    buf893 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf894 = reinterpret_tensor(buf891, (8, 784, 1024), (802816, 1024, 1), 0); del buf891  # reuse
    cpp_fused_gelu_gelu_backward_sum_135(c_void_p(buf894.data_ptr()), c_void_p(buf890.data_ptr()), c_void_p(addmm_28.data_ptr()), c_void_p(buf893.data_ptr()))
    del addmm_28
    buf895 = buf883; del buf883  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf894, (6272, 1024), (1024, 1), 0), permute_854, out=buf895)
    del permute_854
    buf896 = empty((1024, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf894, (1024, 6272), (1, 1024), 0), view_95, out=buf896)
    del view_95
    buf897 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf898 = buf887; del buf887  # reuse
    buf899 = buf886; del buf886  # reuse
    buf900 = empty((128, ), device='cpu', dtype=torch.float32)
    buf901 = empty((128, ), device='cpu', dtype=torch.float32)
    buf902 = buf890; del buf890  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_136(c_void_p(buf902.data_ptr()), c_void_p(buf894.data_ptr()), c_void_p(buf895.data_ptr()), c_void_p(primals_115.data_ptr()), c_void_p(mul_53.data_ptr()), c_void_p(div_67.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(buf898.data_ptr()), c_void_p(buf899.data_ptr()), c_void_p(buf900.data_ptr()), c_void_p(buf901.data_ptr()))
    del div_67
    del mul_53
    del primals_115
    buf903 = buf895; del buf895  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf902, (6272, 128), (128, 1), 0), permute_858, out=buf903)
    del permute_858
    buf904 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf902, (128, 6272), (1, 128), 0), view_93, out=buf904)
    del view_93
    buf905 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_137(c_void_p(buf902.data_ptr()), c_void_p(buf905.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf906 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf903, (8, 2, 784, 64), (100352, 64, 128, 1), 0), permute_60, getitem_93, getitem_94, alias_50, getitem_96, getitem_97, getitem_98, 0, 0, 0.0, False, getitem_101, getitem_102)
    del alias_50
    del getitem_101
    del getitem_102
    del getitem_93
    del getitem_94
    del getitem_96
    del getitem_97
    del getitem_98
    del permute_60
    buf907 = buf906[0]
    buf908 = buf906[1]
    buf909 = buf906[2]
    del buf906
    buf910 = buf870; del buf870  # reuse
    cpp_fused_clone_138(c_void_p(buf908.data_ptr()), c_void_p(buf909.data_ptr()), c_void_p(buf910.data_ptr()))
    del buf908
    buf911 = reinterpret_tensor(buf909, (392, 128), (128, 1), 0); del buf909  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf910, (392, 256), (256, 1), 0), permute_864, out=buf911)
    del permute_864
    buf912 = empty((256, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf910, (256, 392), (1, 256), 0), view_89, out=buf912)
    del view_89
    buf913 = empty((1, 256), device='cpu', dtype=torch.float32)
    buf914 = buf875; del buf875  # reuse
    buf915 = buf874; del buf874  # reuse
    buf916 = empty((128, ), device='cpu', dtype=torch.float32)
    buf917 = empty((128, ), device='cpu', dtype=torch.float32)
    buf918 = reinterpret_tensor(buf911, (8, 128, 7, 7), (6272, 1, 896, 128), 0); del buf911  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_139(c_void_p(buf918.data_ptr()), c_void_p(buf910.data_ptr()), c_void_p(primals_109.data_ptr()), c_void_p(mul_51.data_ptr()), c_void_p(div_68.data_ptr()), c_void_p(buf913.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf915.data_ptr()), c_void_p(buf916.data_ptr()), c_void_p(buf917.data_ptr()))
    del div_68
    del mul_51
    del primals_109
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf919 = aten.convolution_backward(buf918, view_87, primals_107, [128], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf918
    del primals_107
    del view_87
    buf920 = buf919[0]
    buf921 = buf919[1]
    buf922 = buf919[2]
    del buf919
    buf923 = buf903; del buf903  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf907, (6272, 128), (128, 1), 0), permute_871, out=buf923)
    del permute_871
    buf924 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf907, (128, 6272), (1, 128), 0), view_84, out=buf924)
    del view_84
    buf925 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf926 = buf899; del buf899  # reuse
    buf927 = buf898; del buf898  # reuse
    buf928 = empty((128, ), device='cpu', dtype=torch.float32)
    buf929 = empty((128, ), device='cpu', dtype=torch.float32)
    buf930 = buf902; del buf902  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_140(c_void_p(buf930.data_ptr()), c_void_p(buf907.data_ptr()), c_void_p(buf920.data_ptr()), c_void_p(buf923.data_ptr()), c_void_p(primals_103.data_ptr()), c_void_p(mul_49.data_ptr()), c_void_p(div_69.data_ptr()), c_void_p(buf925.data_ptr()), c_void_p(buf926.data_ptr()), c_void_p(buf927.data_ptr()), c_void_p(buf928.data_ptr()), c_void_p(buf929.data_ptr()))
    del buf907
    del buf920
    del div_69
    del mul_49
    del primals_103
    buf931 = reinterpret_tensor(buf894, (6272, 1024), (1024, 1), 0); del buf894  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf930, (6272, 128), (128, 1), 0), permute_875, out=buf931)
    del permute_875
    buf932 = empty((128, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf930, (128, 6272), (1, 128), 0), view_82, out=buf932)
    del view_82
    buf933 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf934 = reinterpret_tensor(buf931, (8, 784, 1024), (802816, 1024, 1), 0); del buf931  # reuse
    cpp_fused_gelu_gelu_backward_sum_141(c_void_p(buf934.data_ptr()), c_void_p(buf930.data_ptr()), c_void_p(addmm_23.data_ptr()), c_void_p(buf933.data_ptr()))
    del addmm_23
    buf935 = buf923; del buf923  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf934, (6272, 1024), (1024, 1), 0), permute_879, out=buf935)
    del permute_879
    buf936 = empty((1024, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf934, (1024, 6272), (1, 1024), 0), view_80, out=buf936)
    del view_80
    buf937 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf938 = buf927; del buf927  # reuse
    buf939 = buf926; del buf926  # reuse
    buf940 = empty((128, ), device='cpu', dtype=torch.float32)
    buf941 = empty((128, ), device='cpu', dtype=torch.float32)
    buf942 = buf930; del buf930  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_142(c_void_p(buf942.data_ptr()), c_void_p(buf934.data_ptr()), c_void_p(buf935.data_ptr()), c_void_p(primals_97.data_ptr()), c_void_p(mul_44.data_ptr()), c_void_p(div_70.data_ptr()), c_void_p(buf937.data_ptr()), c_void_p(buf938.data_ptr()), c_void_p(buf939.data_ptr()), c_void_p(buf940.data_ptr()), c_void_p(buf941.data_ptr()))
    del div_70
    del mul_44
    del primals_97
    buf943 = buf935; del buf935  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf942, (6272, 128), (128, 1), 0), permute_883, out=buf943)
    del permute_883
    buf944 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf942, (128, 6272), (1, 128), 0), view_78, out=buf944)
    del view_78
    buf945 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_143(c_void_p(buf942.data_ptr()), c_void_p(buf945.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf946 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf943, (8, 2, 784, 64), (100352, 64, 128, 1), 0), permute_50, getitem_76, getitem_77, alias_51, getitem_79, getitem_80, getitem_81, 0, 0, 0.0, False, getitem_84, getitem_85)
    del alias_51
    del getitem_76
    del getitem_77
    del getitem_79
    del getitem_80
    del getitem_81
    del getitem_84
    del getitem_85
    del permute_50
    buf947 = buf946[0]
    buf948 = buf946[1]
    buf949 = buf946[2]
    del buf946
    buf950 = buf910; del buf910  # reuse
    cpp_fused_clone_144(c_void_p(buf948.data_ptr()), c_void_p(buf949.data_ptr()), c_void_p(buf950.data_ptr()))
    del buf948
    buf951 = reinterpret_tensor(buf949, (392, 128), (128, 1), 0); del buf949  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf950, (392, 256), (256, 1), 0), permute_889, out=buf951)
    del permute_889
    buf952 = empty((256, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf950, (256, 392), (1, 256), 0), view_74, out=buf952)
    del view_74
    buf953 = empty((1, 256), device='cpu', dtype=torch.float32)
    buf954 = buf915; del buf915  # reuse
    buf955 = buf914; del buf914  # reuse
    buf956 = empty((128, ), device='cpu', dtype=torch.float32)
    buf957 = empty((128, ), device='cpu', dtype=torch.float32)
    buf958 = reinterpret_tensor(buf951, (8, 128, 7, 7), (6272, 1, 896, 128), 0); del buf951  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_145(c_void_p(buf958.data_ptr()), c_void_p(buf950.data_ptr()), c_void_p(primals_91.data_ptr()), c_void_p(mul_42.data_ptr()), c_void_p(div_71.data_ptr()), c_void_p(buf953.data_ptr()), c_void_p(buf954.data_ptr()), c_void_p(buf955.data_ptr()), c_void_p(buf956.data_ptr()), c_void_p(buf957.data_ptr()))
    del div_71
    del mul_42
    del primals_91
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf959 = aten.convolution_backward(buf958, view_72, primals_89, [128], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf958
    del primals_89
    del view_72
    buf960 = buf959[0]
    buf961 = buf959[1]
    buf962 = buf959[2]
    del buf959
    buf963 = buf943; del buf943  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf947, (6272, 128), (128, 1), 0), permute_896, out=buf963)
    del permute_896
    buf964 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf947, (128, 6272), (1, 128), 0), view_69, out=buf964)
    del view_69
    buf965 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf966 = buf939; del buf939  # reuse
    buf967 = buf938; del buf938  # reuse
    buf968 = empty((128, ), device='cpu', dtype=torch.float32)
    buf969 = empty((128, ), device='cpu', dtype=torch.float32)
    buf970 = buf942; del buf942  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_146(c_void_p(buf970.data_ptr()), c_void_p(buf947.data_ptr()), c_void_p(buf960.data_ptr()), c_void_p(buf963.data_ptr()), c_void_p(primals_85.data_ptr()), c_void_p(mul_40.data_ptr()), c_void_p(div_72.data_ptr()), c_void_p(buf965.data_ptr()), c_void_p(buf966.data_ptr()), c_void_p(buf967.data_ptr()), c_void_p(buf968.data_ptr()), c_void_p(buf969.data_ptr()))
    del buf947
    del div_72
    del mul_40
    del primals_85
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf971 = aten.convolution_backward(reinterpret_tensor(buf970, (8, 128, 28, 28), (100352, 1, 3584, 128), 0), view_66, primals_83, [128], [1, 1], [1, 1], [1, 1], False, [0, 0], 128, [True, True, True])
    del primals_83
    del view_66
    buf972 = buf971[0]
    buf973 = buf971[1]
    buf974 = buf971[2]
    del buf971
    buf975 = reinterpret_tensor(buf963, (8, 128, 28, 28), (100352, 784, 28, 1), 0); del buf963  # reuse
    buf976 = reinterpret_tensor(buf960, (6272, 128), (128, 1), 0); del buf960  # reuse
    cpp_fused__unsafe_view_add_147(c_void_p(buf970.data_ptr()), c_void_p(buf972.data_ptr()), c_void_p(buf975.data_ptr()), c_void_p(buf976.data_ptr()))
    del buf970
    del buf972
    buf977 = reinterpret_tensor(buf934, (6272, 1024), (1024, 1), 0); del buf934  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf976, permute_902, out=buf977)
    del permute_902
    buf978 = empty((128, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf976, (128, 6272), (1, 128), 0), view_64, out=buf978)
    del view_64
    buf979 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf980 = reinterpret_tensor(buf977, (8, 784, 1024), (802816, 1024, 1), 0); del buf977  # reuse
    cpp_fused_gelu_gelu_backward_sum_148(c_void_p(buf980.data_ptr()), c_void_p(buf976.data_ptr()), c_void_p(addmm_18.data_ptr()), c_void_p(buf979.data_ptr()))
    del addmm_18
    buf981 = buf976; del buf976  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf980, (6272, 1024), (1024, 1), 0), permute_906, out=buf981)
    del permute_906
    buf982 = empty((1024, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf980, (1024, 6272), (1, 1024), 0), view_62, out=buf982)
    del view_62
    buf983 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf984 = buf967; del buf967  # reuse
    buf985 = buf966; del buf966  # reuse
    buf986 = empty((128, ), device='cpu', dtype=torch.float32)
    buf987 = empty((128, ), device='cpu', dtype=torch.float32)
    buf988 = reinterpret_tensor(buf981, (8, 784, 128), (100352, 128, 1), 0); del buf981  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_149(c_void_p(buf988.data_ptr()), c_void_p(buf980.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(mul_35.data_ptr()), c_void_p(buf975.data_ptr()), c_void_p(div_73.data_ptr()), c_void_p(buf983.data_ptr()), c_void_p(buf984.data_ptr()), c_void_p(buf985.data_ptr()), c_void_p(buf986.data_ptr()), c_void_p(buf987.data_ptr()))
    del buf980
    del div_73
    del mul_35
    del primals_77
    buf989 = reinterpret_tensor(buf975, (6272, 128), (128, 1), 0); del buf975  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf988, (6272, 128), (128, 1), 0), permute_910, out=buf989)
    del permute_910
    buf990 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf988, (128, 6272), (1, 128), 0), view_60, out=buf990)
    del view_60
    buf991 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_150(c_void_p(buf988.data_ptr()), c_void_p(buf991.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf992 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf989, (8, 2, 784, 64), (100352, 64, 128, 1), 0), permute_37, getitem_59, getitem_60, alias_52, getitem_62, getitem_63, getitem_64, 0, 0, 0.0, False, getitem_67, getitem_68)
    del alias_52
    del getitem_59
    del getitem_60
    del getitem_62
    del getitem_63
    del getitem_64
    del getitem_67
    del getitem_68
    del permute_37
    buf993 = buf992[0]
    buf994 = buf992[1]
    buf995 = buf992[2]
    del buf992
    buf996 = buf950; del buf950  # reuse
    cpp_fused_clone_151(c_void_p(buf994.data_ptr()), c_void_p(buf995.data_ptr()), c_void_p(buf996.data_ptr()))
    del buf994
    buf997 = reinterpret_tensor(buf995, (392, 128), (128, 1), 0); del buf995  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf996, (392, 256), (256, 1), 0), permute_916, out=buf997)
    del permute_916
    buf998 = empty((256, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf996, (256, 392), (1, 256), 0), view_56, out=buf998)
    del view_56
    buf999 = empty((1, 256), device='cpu', dtype=torch.float32)
    buf1000 = buf955; del buf955  # reuse
    buf1001 = buf954; del buf954  # reuse
    buf1002 = empty((128, ), device='cpu', dtype=torch.float32)
    buf1003 = empty((128, ), device='cpu', dtype=torch.float32)
    buf1004 = reinterpret_tensor(buf997, (8, 128, 7, 7), (6272, 1, 896, 128), 0); del buf997  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_152(c_void_p(buf1004.data_ptr()), c_void_p(buf996.data_ptr()), c_void_p(primals_71.data_ptr()), c_void_p(mul_33.data_ptr()), c_void_p(div_74.data_ptr()), c_void_p(buf999.data_ptr()), c_void_p(buf1000.data_ptr()), c_void_p(buf1001.data_ptr()), c_void_p(buf1002.data_ptr()), c_void_p(buf1003.data_ptr()))
    del buf996
    del div_74
    del mul_33
    del primals_71
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1005 = aten.convolution_backward(buf1004, view_54, primals_69, [128], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del primals_69
    del view_54
    buf1006 = buf1005[0]
    buf1007 = buf1005[1]
    buf1008 = buf1005[2]
    del buf1005
    buf1009 = buf989; del buf989  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf993, (6272, 128), (128, 1), 0), permute_923, out=buf1009)
    del permute_923
    buf1010 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf993, (128, 6272), (1, 128), 0), view_51, out=buf1010)
    del view_51
    buf1011 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1012 = buf985; del buf985  # reuse
    buf1013 = buf984; del buf984  # reuse
    buf1014 = empty((128, ), device='cpu', dtype=torch.float32)
    buf1015 = empty((128, ), device='cpu', dtype=torch.float32)
    buf1016 = reinterpret_tensor(buf1006, (8, 784, 128), (100352, 128, 1), 0); del buf1006  # reuse
    buf1017 = empty_strided((8, 784, 1), (784, 1, 6272), device='cpu', dtype=torch.float32)
    buf1018 = empty_strided((8, 784, 1), (784, 1, 6272), device='cpu', dtype=torch.float32)
    buf1019 = empty((128, ), device='cpu', dtype=torch.float32)
    buf1020 = empty((128, ), device='cpu', dtype=torch.float32)
    buf1021 = reinterpret_tensor(buf1016, (8, 128, 28, 28), (100352, 1, 3584, 128), 0); del buf1016  # reuse
    cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_153(c_void_p(buf1021.data_ptr()), c_void_p(buf993.data_ptr()), c_void_p(buf1009.data_ptr()), c_void_p(primals_65.data_ptr()), c_void_p(mul_31.data_ptr()), c_void_p(buf988.data_ptr()), c_void_p(div_75.data_ptr()), c_void_p(primals_63.data_ptr()), c_void_p(mul_29.data_ptr()), c_void_p(div_76.data_ptr()), c_void_p(buf1011.data_ptr()), c_void_p(buf1012.data_ptr()), c_void_p(buf1013.data_ptr()), c_void_p(buf1014.data_ptr()), c_void_p(buf1015.data_ptr()), c_void_p(buf1017.data_ptr()), c_void_p(buf1018.data_ptr()), c_void_p(buf1019.data_ptr()), c_void_p(buf1020.data_ptr()))
    del buf1009
    del buf1012
    del buf1013
    del buf1017
    del buf1018
    del buf988
    del buf993
    del div_75
    del div_76
    del mul_29
    del mul_31
    del primals_63
    del primals_65
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1022 = aten.convolution_backward(buf1021, clone_11, primals_61, [128], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf1021
    del clone_11
    del primals_61
    buf1023 = buf1022[0]
    buf1024 = buf1022[1]
    buf1025 = buf1022[2]
    del buf1022
    buf1026 = empty((25088, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1023, (25088, 64), (64, 1), 0), permute_929, out=buf1026)
    del permute_929
    buf1027 = empty((64, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1023, (64, 25088), (1, 64), 0), view_47, out=buf1027)
    del view_47
    buf1028 = empty((1, 64), device='cpu', dtype=torch.float32)
    buf1029 = reinterpret_tensor(buf1026, (8, 3136, 512), (1605632, 512, 1), 0); del buf1026  # reuse
    cpp_fused_gelu_gelu_backward_sum_154(c_void_p(buf1029.data_ptr()), c_void_p(buf1023.data_ptr()), c_void_p(addmm_13.data_ptr()), c_void_p(buf1028.data_ptr()))
    del addmm_13
    buf1030 = empty((25088, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1029, (25088, 512), (512, 1), 0), permute_933, out=buf1030)
    del permute_933
    buf1031 = empty((512, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1029, (512, 25088), (1, 512), 0), view_45, out=buf1031)
    del view_45
    buf1032 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1033 = empty_strided((8, 3136, 1), (3136, 1, 25088), device='cpu', dtype=torch.float32)
    buf1034 = empty_strided((8, 3136, 1), (3136, 1, 25088), device='cpu', dtype=torch.float32)
    buf1035 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1036 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1037 = reinterpret_tensor(buf1023, (8, 3136, 64), (200704, 64, 1), 0); del buf1023  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_155(c_void_p(buf1037.data_ptr()), c_void_p(buf1029.data_ptr()), c_void_p(buf1030.data_ptr()), c_void_p(primals_55.data_ptr()), c_void_p(mul_24.data_ptr()), c_void_p(div_77.data_ptr()), c_void_p(buf1032.data_ptr()), c_void_p(buf1033.data_ptr()), c_void_p(buf1034.data_ptr()), c_void_p(buf1035.data_ptr()), c_void_p(buf1036.data_ptr()))
    del buf1033
    del buf1034
    del div_77
    del mul_24
    del primals_55
    buf1038 = buf1030; del buf1030  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1037, (25088, 64), (64, 1), 0), permute_937, out=buf1038)
    del permute_937
    buf1039 = reinterpret_tensor(buf0, (64, 64), (64, 1), 0); del buf0  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1037, (64, 25088), (1, 64), 0), view_43, out=buf1039)
    del view_43
    buf1040 = empty((1, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_156(c_void_p(buf1037.data_ptr()), c_void_p(buf1040.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf1041 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf1038, (8, 1, 3136, 64), (200704, 64, 64, 1), 0), permute_25, getitem_40, getitem_41, alias_53, getitem_43, getitem_44, getitem_45, 0, 0, 0.0, False, getitem_48, getitem_49)
    del alias_53
    del getitem_40
    del getitem_41
    del getitem_43
    del getitem_44
    del getitem_45
    del getitem_48
    del getitem_49
    del permute_25
    buf1042 = buf1041[0]
    buf1043 = buf1041[1]
    buf1044 = buf1041[2]
    del buf1041
    buf1045 = reinterpret_tensor(buf1004, (8, 49, 2, 1, 64), (6272, 128, 64, 64, 1), 0); del buf1004  # reuse
    cpp_fused_clone_157(c_void_p(buf1043.data_ptr()), c_void_p(buf1044.data_ptr()), c_void_p(buf1045.data_ptr()))
    buf1046 = reinterpret_tensor(buf1044, (392, 64), (64, 1), 0); del buf1044  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1045, (392, 128), (128, 1), 0), permute_943, out=buf1046)
    del permute_943
    buf1047 = empty((128, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1045, (128, 392), (1, 128), 0), view_39, out=buf1047)
    del view_39
    buf1048 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1049 = buf1001; del buf1001  # reuse
    buf1050 = buf1000; del buf1000  # reuse
    buf1051 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1052 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1053 = reinterpret_tensor(buf1046, (8, 64, 7, 7), (3136, 1, 448, 64), 0); del buf1046  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_158(c_void_p(buf1053.data_ptr()), c_void_p(buf1045.data_ptr()), c_void_p(primals_49.data_ptr()), c_void_p(mul_22.data_ptr()), c_void_p(div_78.data_ptr()), c_void_p(buf1048.data_ptr()), c_void_p(buf1049.data_ptr()), c_void_p(buf1050.data_ptr()), c_void_p(buf1051.data_ptr()), c_void_p(buf1052.data_ptr()))
    del div_78
    del mul_22
    del primals_49
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1054 = aten.convolution_backward(buf1053, view_37, primals_47, [64], [8, 8], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del primals_47
    del view_37
    buf1055 = buf1054[0]
    buf1056 = buf1054[1]
    buf1057 = buf1054[2]
    del buf1054
    buf1058 = buf1038; del buf1038  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1042, (25088, 64), (64, 1), 0), permute_950, out=buf1058)
    del permute_950
    buf1059 = empty((64, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1042, (64, 25088), (1, 64), 0), view_34, out=buf1059)
    del view_34
    buf1060 = empty((1, 64), device='cpu', dtype=torch.float32)
    buf1061 = reinterpret_tensor(buf1053, (8, 3136, 1), (3136, 1, 25088), 0); del buf1053  # reuse
    buf1062 = reinterpret_tensor(buf1043, (8, 3136, 1), (3136, 1, 25088), 0); del buf1043  # reuse
    buf1063 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1064 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1065 = buf1037; del buf1037  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_159(c_void_p(buf1065.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1055.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(primals_43.data_ptr()), c_void_p(mul_20.data_ptr()), c_void_p(div_79.data_ptr()), c_void_p(buf1060.data_ptr()), c_void_p(buf1061.data_ptr()), c_void_p(buf1062.data_ptr()), c_void_p(buf1063.data_ptr()), c_void_p(buf1064.data_ptr()))
    del buf1042
    del buf1055
    del div_79
    del mul_20
    del primals_43
    buf1066 = reinterpret_tensor(buf1029, (25088, 512), (512, 1), 0); del buf1029  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1065, (25088, 64), (64, 1), 0), permute_954, out=buf1066)
    del permute_954
    buf1067 = empty((64, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1065, (64, 25088), (1, 64), 0), view_32, out=buf1067)
    del view_32
    buf1068 = empty((1, 64), device='cpu', dtype=torch.float32)
    buf1069 = reinterpret_tensor(buf1066, (8, 3136, 512), (1605632, 512, 1), 0); del buf1066  # reuse
    cpp_fused_gelu_gelu_backward_sum_160(c_void_p(buf1069.data_ptr()), c_void_p(buf1065.data_ptr()), c_void_p(addmm_8.data_ptr()), c_void_p(buf1068.data_ptr()))
    del addmm_8
    buf1070 = buf1058; del buf1058  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1069, (25088, 512), (512, 1), 0), permute_958, out=buf1070)
    del permute_958
    buf1071 = empty((512, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1069, (512, 25088), (1, 512), 0), view_30, out=buf1071)
    del view_30
    buf1072 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1073 = buf1062; del buf1062  # reuse
    buf1074 = buf1061; del buf1061  # reuse
    buf1075 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1076 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1077 = buf1065; del buf1065  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_161(c_void_p(buf1077.data_ptr()), c_void_p(buf1069.data_ptr()), c_void_p(buf1070.data_ptr()), c_void_p(primals_37.data_ptr()), c_void_p(mul_15.data_ptr()), c_void_p(div_80.data_ptr()), c_void_p(buf1072.data_ptr()), c_void_p(buf1073.data_ptr()), c_void_p(buf1074.data_ptr()), c_void_p(buf1075.data_ptr()), c_void_p(buf1076.data_ptr()))
    del buf1073
    del buf1074
    del div_80
    del mul_15
    del primals_37
    buf1078 = buf1070; del buf1070  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1077, (25088, 64), (64, 1), 0), permute_962, out=buf1078)
    del permute_962
    buf1079 = empty((64, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1077, (64, 25088), (1, 64), 0), view_28, out=buf1079)
    del view_28
    buf1080 = empty((1, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_162(c_void_p(buf1077.data_ptr()), c_void_p(buf1080.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf1081 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf1078, (8, 1, 3136, 64), (200704, 64, 64, 1), 0), permute_15, getitem_23, getitem_24, alias_54, getitem_26, getitem_27, getitem_28, 0, 0, 0.0, False, getitem_31, getitem_32)
    del alias_54
    del getitem_23
    del getitem_24
    del getitem_26
    del getitem_27
    del getitem_28
    del getitem_31
    del getitem_32
    del permute_15
    buf1082 = buf1081[0]
    buf1083 = buf1081[1]
    buf1084 = buf1081[2]
    del buf1081
    buf1085 = buf1045; del buf1045  # reuse
    cpp_fused_clone_163(c_void_p(buf1083.data_ptr()), c_void_p(buf1084.data_ptr()), c_void_p(buf1085.data_ptr()))
    buf1086 = reinterpret_tensor(buf1084, (392, 64), (64, 1), 0); del buf1084  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1085, (392, 128), (128, 1), 0), permute_968, out=buf1086)
    del permute_968
    buf1087 = empty((128, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1085, (128, 392), (1, 128), 0), view_24, out=buf1087)
    del view_24
    buf1088 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1089 = buf1050; del buf1050  # reuse
    buf1090 = buf1049; del buf1049  # reuse
    buf1091 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1092 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1093 = reinterpret_tensor(buf1086, (8, 64, 7, 7), (3136, 1, 448, 64), 0); del buf1086  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_164(c_void_p(buf1093.data_ptr()), c_void_p(buf1085.data_ptr()), c_void_p(primals_31.data_ptr()), c_void_p(mul_13.data_ptr()), c_void_p(div_81.data_ptr()), c_void_p(buf1088.data_ptr()), c_void_p(buf1089.data_ptr()), c_void_p(buf1090.data_ptr()), c_void_p(buf1091.data_ptr()), c_void_p(buf1092.data_ptr()))
    del div_81
    del mul_13
    del primals_31
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1094 = aten.convolution_backward(buf1093, view_22, primals_29, [64], [8, 8], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del primals_29
    del view_22
    buf1095 = buf1094[0]
    buf1096 = buf1094[1]
    buf1097 = buf1094[2]
    del buf1094
    buf1098 = buf1078; del buf1078  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1082, (25088, 64), (64, 1), 0), permute_975, out=buf1098)
    del permute_975
    buf1099 = empty((64, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1082, (64, 25088), (1, 64), 0), view_19, out=buf1099)
    del view_19
    buf1100 = empty((1, 64), device='cpu', dtype=torch.float32)
    buf1101 = reinterpret_tensor(buf1093, (8, 3136, 1), (3136, 1, 25088), 0); del buf1093  # reuse
    buf1102 = reinterpret_tensor(buf1083, (8, 3136, 1), (3136, 1, 25088), 0); del buf1083  # reuse
    buf1103 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1104 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1105 = buf1077; del buf1077  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_165(c_void_p(buf1105.data_ptr()), c_void_p(buf1082.data_ptr()), c_void_p(buf1095.data_ptr()), c_void_p(buf1098.data_ptr()), c_void_p(primals_25.data_ptr()), c_void_p(mul_11.data_ptr()), c_void_p(div_82.data_ptr()), c_void_p(buf1100.data_ptr()), c_void_p(buf1101.data_ptr()), c_void_p(buf1102.data_ptr()), c_void_p(buf1103.data_ptr()), c_void_p(buf1104.data_ptr()))
    del buf1082
    del div_82
    del mul_11
    del primals_25
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1106 = aten.convolution_backward(reinterpret_tensor(buf1105, (8, 64, 56, 56), (200704, 1, 3584, 64), 0), view_16, primals_23, [64], [1, 1], [1, 1], [1, 1], False, [0, 0], 64, [True, True, True])
    del primals_23
    del view_16
    buf1107 = buf1106[0]
    buf1108 = buf1106[1]
    buf1109 = buf1106[2]
    del buf1106
    buf1110 = reinterpret_tensor(buf1098, (8, 64, 56, 56), (200704, 3136, 56, 1), 0); del buf1098  # reuse
    buf1111 = reinterpret_tensor(buf1095, (25088, 64), (64, 1), 0); del buf1095  # reuse
    cpp_fused__unsafe_view_add_166(c_void_p(buf1105.data_ptr()), c_void_p(buf1107.data_ptr()), c_void_p(buf1110.data_ptr()), c_void_p(buf1111.data_ptr()))
    del buf1105
    del buf1107
    buf1112 = reinterpret_tensor(buf1069, (25088, 512), (512, 1), 0); del buf1069  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1111, permute_981, out=buf1112)
    del permute_981
    buf1113 = empty((64, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1111, (64, 25088), (1, 64), 0), view_14, out=buf1113)
    del view_14
    buf1114 = empty((1, 64), device='cpu', dtype=torch.float32)
    buf1115 = reinterpret_tensor(buf1112, (8, 3136, 512), (1605632, 512, 1), 0); del buf1112  # reuse
    cpp_fused_gelu_gelu_backward_sum_167(c_void_p(buf1115.data_ptr()), c_void_p(buf1111.data_ptr()), c_void_p(addmm_3.data_ptr()), c_void_p(buf1114.data_ptr()))
    del addmm_3
    buf1116 = buf1111; del buf1111  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1115, (25088, 512), (512, 1), 0), permute_985, out=buf1116)
    del permute_985
    buf1117 = empty((512, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1115, (512, 25088), (1, 512), 0), view_12, out=buf1117)
    del view_12
    buf1118 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1119 = buf1102; del buf1102  # reuse
    buf1120 = buf1101; del buf1101  # reuse
    buf1121 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1122 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1123 = reinterpret_tensor(buf1116, (8, 3136, 64), (200704, 64, 1), 0); del buf1116  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_168(c_void_p(buf1123.data_ptr()), c_void_p(buf1115.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(mul_6.data_ptr()), c_void_p(buf1110.data_ptr()), c_void_p(div_83.data_ptr()), c_void_p(buf1118.data_ptr()), c_void_p(buf1119.data_ptr()), c_void_p(buf1120.data_ptr()), c_void_p(buf1121.data_ptr()), c_void_p(buf1122.data_ptr()))
    del buf1115
    del div_83
    del mul_6
    del primals_17
    buf1124 = reinterpret_tensor(buf1110, (25088, 64), (64, 1), 0); del buf1110  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1123, (25088, 64), (64, 1), 0), permute_989, out=buf1124)
    del permute_989
    buf1125 = empty((64, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1123, (64, 25088), (1, 64), 0), view_10, out=buf1125)
    del view_10
    buf1126 = empty((1, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_169(c_void_p(buf1123.data_ptr()), c_void_p(buf1126.data_ptr()))
    # Source Nodes: [], Original ATen: [aten._scaled_dot_product_flash_attention_backward]
    buf1127 = aten._scaled_dot_product_flash_attention_backward(reinterpret_tensor(buf1124, (8, 1, 3136, 64), (200704, 64, 64, 1), 0), permute_2, getitem_6, getitem_7, alias_55, getitem_9, getitem_10, getitem_11, 0, 0, 0.0, False, getitem_14, getitem_15)
    del alias_55
    del getitem_10
    del getitem_11
    del getitem_14
    del getitem_15
    del getitem_6
    del getitem_7
    del getitem_9
    del permute_2
    buf1128 = buf1127[0]
    buf1129 = buf1127[1]
    buf1130 = buf1127[2]
    del buf1127
    buf1131 = buf1085; del buf1085  # reuse
    cpp_fused_clone_170(c_void_p(buf1129.data_ptr()), c_void_p(buf1130.data_ptr()), c_void_p(buf1131.data_ptr()))
    buf1132 = reinterpret_tensor(buf1130, (392, 64), (64, 1), 0); del buf1130  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1131, (392, 128), (128, 1), 0), permute_995, out=buf1132)
    del permute_995
    buf1133 = empty((128, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1131, (128, 392), (1, 128), 0), view_6, out=buf1133)
    del view_6
    buf1134 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1135 = buf1090; del buf1090  # reuse
    buf1136 = buf1089; del buf1089  # reuse
    buf1137 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1138 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1139 = reinterpret_tensor(buf1132, (8, 64, 7, 7), (3136, 1, 448, 64), 0); del buf1132  # reuse
    cpp_fused_convolution_backward_native_layer_norm_backward_sum_171(c_void_p(buf1139.data_ptr()), c_void_p(buf1131.data_ptr()), c_void_p(primals_11.data_ptr()), c_void_p(mul_4.data_ptr()), c_void_p(div_84.data_ptr()), c_void_p(buf1134.data_ptr()), c_void_p(buf1135.data_ptr()), c_void_p(buf1136.data_ptr()), c_void_p(buf1137.data_ptr()), c_void_p(buf1138.data_ptr()))
    del buf1131
    del buf1135
    del buf1136
    del div_84
    del mul_4
    del primals_11
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1140 = aten.convolution_backward(buf1139, view_4, primals_9, [64], [8, 8], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del primals_9
    del view_4
    buf1141 = buf1140[0]
    buf1142 = buf1140[1]
    buf1143 = buf1140[2]
    del buf1140
    buf1144 = buf1124; del buf1124  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1128, (25088, 64), (64, 1), 0), permute_1002, out=buf1144)
    del permute_1002
    buf1145 = empty((64, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1128, (64, 25088), (1, 64), 0), view_1, out=buf1145)
    del view_1
    buf1146 = empty((1, 64), device='cpu', dtype=torch.float32)
    buf1147 = reinterpret_tensor(buf1139, (8, 3136, 1), (3136, 1, 25088), 0); del buf1139  # reuse
    buf1148 = reinterpret_tensor(buf1129, (8, 3136, 1), (3136, 1, 25088), 0); del buf1129  # reuse
    buf1149 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1150 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1151 = buf1123; del buf1123  # reuse
    buf1152 = buf1120; del buf1120  # reuse
    buf1153 = buf1119; del buf1119  # reuse
    buf1154 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1155 = empty((64, ), device='cpu', dtype=torch.float32)
    buf1156 = reinterpret_tensor(buf1151, (8, 64, 56, 56), (200704, 1, 3584, 64), 0); del buf1151  # reuse
    cpp_fused_add_convolution_backward_native_layer_norm_backward_sum_172(c_void_p(buf1156.data_ptr()), c_void_p(buf1128.data_ptr()), c_void_p(buf1141.data_ptr()), c_void_p(buf1144.data_ptr()), c_void_p(primals_5.data_ptr()), c_void_p(mul_2.data_ptr()), c_void_p(div_85.data_ptr()), c_void_p(primals_3.data_ptr()), c_void_p(mul.data_ptr()), c_void_p(div_86.data_ptr()), c_void_p(buf1146.data_ptr()), c_void_p(buf1147.data_ptr()), c_void_p(buf1148.data_ptr()), c_void_p(buf1149.data_ptr()), c_void_p(buf1150.data_ptr()), c_void_p(buf1152.data_ptr()), c_void_p(buf1153.data_ptr()), c_void_p(buf1154.data_ptr()), c_void_p(buf1155.data_ptr()))
    del buf1128
    del buf1141
    del buf1144
    del buf1147
    del buf1148
    del buf1152
    del buf1153
    del div_85
    del div_86
    del mul
    del mul_2
    del primals_3
    del primals_5
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1157 = aten.convolution_backward(buf1156, primals_521, primals_1, [64], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [False, True, True])
    del buf1156
    del primals_1
    del primals_521
    buf1158 = buf1157[1]
    buf1159 = buf1157[2]
    return (buf1158, buf1159, buf1154, buf1155, buf1149, buf1150, reinterpret_tensor(buf1145, (64, 64), (64, 1), 0), reinterpret_tensor(buf1146, (64, ), (1, ), 0), buf1142, buf1143, buf1137, buf1138, reinterpret_tensor(buf1133, (128, 64), (64, 1), 0), reinterpret_tensor(buf1134, (128, ), (1, ), 0), reinterpret_tensor(buf1125, (64, 64), (64, 1), 0), reinterpret_tensor(buf1126, (64, ), (1, ), 0), buf1121, buf1122, reinterpret_tensor(buf1117, (512, 64), (64, 1), 0), reinterpret_tensor(buf1118, (512, ), (1, ), 0), reinterpret_tensor(buf1113, (64, 512), (512, 1), 0), reinterpret_tensor(buf1114, (64, ), (1, ), 0), buf1108, buf1109, buf1103, buf1104, reinterpret_tensor(buf1099, (64, 64), (64, 1), 0), reinterpret_tensor(buf1100, (64, ), (1, ), 0), buf1096, buf1097, buf1091, buf1092, reinterpret_tensor(buf1087, (128, 64), (64, 1), 0), reinterpret_tensor(buf1088, (128, ), (1, ), 0), reinterpret_tensor(buf1079, (64, 64), (64, 1), 0), reinterpret_tensor(buf1080, (64, ), (1, ), 0), buf1075, buf1076, reinterpret_tensor(buf1071, (512, 64), (64, 1), 0), reinterpret_tensor(buf1072, (512, ), (1, ), 0), reinterpret_tensor(buf1067, (64, 512), (512, 1), 0), reinterpret_tensor(buf1068, (64, ), (1, ), 0), buf1063, buf1064, reinterpret_tensor(buf1059, (64, 64), (64, 1), 0), reinterpret_tensor(buf1060, (64, ), (1, ), 0), buf1056, buf1057, buf1051, buf1052, reinterpret_tensor(buf1047, (128, 64), (64, 1), 0), reinterpret_tensor(buf1048, (128, ), (1, ), 0), reinterpret_tensor(buf1039, (64, 64), (64, 1), 0), reinterpret_tensor(buf1040, (64, ), (1, ), 0), buf1035, buf1036, reinterpret_tensor(buf1031, (512, 64), (64, 1), 0), reinterpret_tensor(buf1032, (512, ), (1, ), 0), reinterpret_tensor(buf1027, (64, 512), (512, 1), 0), reinterpret_tensor(buf1028, (64, ), (1, ), 0), buf1024, buf1025, buf1019, buf1020, buf1014, buf1015, reinterpret_tensor(buf1010, (128, 128), (128, 1), 0), reinterpret_tensor(buf1011, (128, ), (1, ), 0), buf1007, buf1008, buf1002, buf1003, reinterpret_tensor(buf998, (256, 128), (128, 1), 0), reinterpret_tensor(buf999, (256, ), (1, ), 0), reinterpret_tensor(buf990, (128, 128), (128, 1), 0), reinterpret_tensor(buf991, (128, ), (1, ), 0), buf986, buf987, reinterpret_tensor(buf982, (1024, 128), (128, 1), 0), reinterpret_tensor(buf983, (1024, ), (1, ), 0), reinterpret_tensor(buf978, (128, 1024), (1024, 1), 0), reinterpret_tensor(buf979, (128, ), (1, ), 0), buf973, buf974, buf968, buf969, reinterpret_tensor(buf964, (128, 128), (128, 1), 0), reinterpret_tensor(buf965, (128, ), (1, ), 0), buf961, buf962, buf956, buf957, reinterpret_tensor(buf952, (256, 128), (128, 1), 0), reinterpret_tensor(buf953, (256, ), (1, ), 0), reinterpret_tensor(buf944, (128, 128), (128, 1), 0), reinterpret_tensor(buf945, (128, ), (1, ), 0), buf940, buf941, reinterpret_tensor(buf936, (1024, 128), (128, 1), 0), reinterpret_tensor(buf937, (1024, ), (1, ), 0), reinterpret_tensor(buf932, (128, 1024), (1024, 1), 0), reinterpret_tensor(buf933, (128, ), (1, ), 0), buf928, buf929, reinterpret_tensor(buf924, (128, 128), (128, 1), 0), reinterpret_tensor(buf925, (128, ), (1, ), 0), buf921, buf922, buf916, buf917, reinterpret_tensor(buf912, (256, 128), (128, 1), 0), reinterpret_tensor(buf913, (256, ), (1, ), 0), reinterpret_tensor(buf904, (128, 128), (128, 1), 0), reinterpret_tensor(buf905, (128, ), (1, ), 0), buf900, buf901, reinterpret_tensor(buf896, (1024, 128), (128, 1), 0), reinterpret_tensor(buf897, (1024, ), (1, ), 0), reinterpret_tensor(buf892, (128, 1024), (1024, 1), 0), reinterpret_tensor(buf893, (128, ), (1, ), 0), buf888, buf889, reinterpret_tensor(buf884, (128, 128), (128, 1), 0), reinterpret_tensor(buf885, (128, ), (1, ), 0), buf881, buf882, buf876, buf877, reinterpret_tensor(buf872, (256, 128), (128, 1), 0), reinterpret_tensor(buf873, (256, ), (1, ), 0), reinterpret_tensor(buf864, (128, 128), (128, 1), 0), reinterpret_tensor(buf865, (128, ), (1, ), 0), buf860, buf861, reinterpret_tensor(buf856, (1024, 128), (128, 1), 0), reinterpret_tensor(buf857, (1024, ), (1, ), 0), reinterpret_tensor(buf852, (128, 1024), (1024, 1), 0), reinterpret_tensor(buf853, (128, ), (1, ), 0), buf849, buf850, buf844, buf845, buf839, buf840, reinterpret_tensor(buf835, (320, 320), (320, 1), 0), reinterpret_tensor(buf836, (320, ), (1, ), 0), buf832, buf833, buf827, buf828, reinterpret_tensor(buf823, (640, 320), (320, 1), 0), reinterpret_tensor(buf824, (640, ), (1, ), 0), reinterpret_tensor(buf815, (320, 320), (320, 1), 0), reinterpret_tensor(buf816, (320, ), (1, ), 0), buf811, buf812, reinterpret_tensor(buf807, (1280, 320), (320, 1), 0), reinterpret_tensor(buf808, (1280, ), (1, ), 0), reinterpret_tensor(buf803, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf804, (320, ), (1, ), 0), buf798, buf799, buf793, buf794, reinterpret_tensor(buf789, (320, 320), (320, 1), 0), reinterpret_tensor(buf790, (320, ), (1, ), 0), buf786, buf787, buf781, buf782, reinterpret_tensor(buf777, (640, 320), (320, 1), 0), reinterpret_tensor(buf778, (640, ), (1, ), 0), reinterpret_tensor(buf769, (320, 320), (320, 1), 0), reinterpret_tensor(buf770, (320, ), (1, ), 0), buf765, buf766, reinterpret_tensor(buf761, (1280, 320), (320, 1), 0), reinterpret_tensor(buf762, (1280, ), (1, ), 0), reinterpret_tensor(buf757, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf758, (320, ), (1, ), 0), buf753, buf754, reinterpret_tensor(buf749, (320, 320), (320, 1), 0), reinterpret_tensor(buf750, (320, ), (1, ), 0), buf746, buf747, buf741, buf742, reinterpret_tensor(buf737, (640, 320), (320, 1), 0), reinterpret_tensor(buf738, (640, ), (1, ), 0), reinterpret_tensor(buf729, (320, 320), (320, 1), 0), reinterpret_tensor(buf730, (320, ), (1, ), 0), buf725, buf726, reinterpret_tensor(buf721, (1280, 320), (320, 1), 0), reinterpret_tensor(buf722, (1280, ), (1, ), 0), reinterpret_tensor(buf717, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf718, (320, ), (1, ), 0), buf713, buf714, reinterpret_tensor(buf709, (320, 320), (320, 1), 0), reinterpret_tensor(buf710, (320, ), (1, ), 0), buf706, buf707, buf701, buf702, reinterpret_tensor(buf697, (640, 320), (320, 1), 0), reinterpret_tensor(buf698, (640, ), (1, ), 0), reinterpret_tensor(buf689, (320, 320), (320, 1), 0), reinterpret_tensor(buf690, (320, ), (1, ), 0), buf685, buf686, reinterpret_tensor(buf681, (1280, 320), (320, 1), 0), reinterpret_tensor(buf682, (1280, ), (1, ), 0), reinterpret_tensor(buf677, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf678, (320, ), (1, ), 0), buf673, buf674, reinterpret_tensor(buf669, (320, 320), (320, 1), 0), reinterpret_tensor(buf670, (320, ), (1, ), 0), buf666, buf667, buf661, buf662, reinterpret_tensor(buf657, (640, 320), (320, 1), 0), reinterpret_tensor(buf658, (640, ), (1, ), 0), reinterpret_tensor(buf649, (320, 320), (320, 1), 0), reinterpret_tensor(buf650, (320, ), (1, ), 0), buf645, buf646, reinterpret_tensor(buf641, (1280, 320), (320, 1), 0), reinterpret_tensor(buf642, (1280, ), (1, ), 0), reinterpret_tensor(buf637, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf638, (320, ), (1, ), 0), buf633, buf634, reinterpret_tensor(buf629, (320, 320), (320, 1), 0), reinterpret_tensor(buf630, (320, ), (1, ), 0), buf626, buf627, buf621, buf622, reinterpret_tensor(buf617, (640, 320), (320, 1), 0), reinterpret_tensor(buf618, (640, ), (1, ), 0), reinterpret_tensor(buf609, (320, 320), (320, 1), 0), reinterpret_tensor(buf610, (320, ), (1, ), 0), buf605, buf606, reinterpret_tensor(buf601, (1280, 320), (320, 1), 0), reinterpret_tensor(buf602, (1280, ), (1, ), 0), reinterpret_tensor(buf597, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf598, (320, ), (1, ), 0), buf593, buf594, reinterpret_tensor(buf589, (320, 320), (320, 1), 0), reinterpret_tensor(buf590, (320, ), (1, ), 0), buf586, buf587, buf581, buf582, reinterpret_tensor(buf577, (640, 320), (320, 1), 0), reinterpret_tensor(buf578, (640, ), (1, ), 0), reinterpret_tensor(buf569, (320, 320), (320, 1), 0), reinterpret_tensor(buf570, (320, ), (1, ), 0), buf565, buf566, reinterpret_tensor(buf561, (1280, 320), (320, 1), 0), reinterpret_tensor(buf562, (1280, ), (1, ), 0), reinterpret_tensor(buf557, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf558, (320, ), (1, ), 0), buf553, buf554, reinterpret_tensor(buf549, (320, 320), (320, 1), 0), reinterpret_tensor(buf550, (320, ), (1, ), 0), buf546, buf547, buf541, buf542, reinterpret_tensor(buf537, (640, 320), (320, 1), 0), reinterpret_tensor(buf538, (640, ), (1, ), 0), reinterpret_tensor(buf529, (320, 320), (320, 1), 0), reinterpret_tensor(buf530, (320, ), (1, ), 0), buf525, buf526, reinterpret_tensor(buf521, (1280, 320), (320, 1), 0), reinterpret_tensor(buf522, (1280, ), (1, ), 0), reinterpret_tensor(buf517, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf518, (320, ), (1, ), 0), buf513, buf514, reinterpret_tensor(buf509, (320, 320), (320, 1), 0), reinterpret_tensor(buf510, (320, ), (1, ), 0), buf506, buf507, buf501, buf502, reinterpret_tensor(buf497, (640, 320), (320, 1), 0), reinterpret_tensor(buf498, (640, ), (1, ), 0), reinterpret_tensor(buf489, (320, 320), (320, 1), 0), reinterpret_tensor(buf490, (320, ), (1, ), 0), buf485, buf486, reinterpret_tensor(buf481, (1280, 320), (320, 1), 0), reinterpret_tensor(buf482, (1280, ), (1, ), 0), reinterpret_tensor(buf477, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf478, (320, ), (1, ), 0), buf473, buf474, reinterpret_tensor(buf469, (320, 320), (320, 1), 0), reinterpret_tensor(buf470, (320, ), (1, ), 0), buf466, buf467, buf461, buf462, reinterpret_tensor(buf457, (640, 320), (320, 1), 0), reinterpret_tensor(buf458, (640, ), (1, ), 0), reinterpret_tensor(buf449, (320, 320), (320, 1), 0), reinterpret_tensor(buf450, (320, ), (1, ), 0), buf445, buf446, reinterpret_tensor(buf441, (1280, 320), (320, 1), 0), reinterpret_tensor(buf442, (1280, ), (1, ), 0), reinterpret_tensor(buf437, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf438, (320, ), (1, ), 0), buf433, buf434, reinterpret_tensor(buf429, (320, 320), (320, 1), 0), reinterpret_tensor(buf430, (320, ), (1, ), 0), buf426, buf427, buf421, buf422, reinterpret_tensor(buf417, (640, 320), (320, 1), 0), reinterpret_tensor(buf418, (640, ), (1, ), 0), reinterpret_tensor(buf409, (320, 320), (320, 1), 0), reinterpret_tensor(buf410, (320, ), (1, ), 0), buf405, buf406, reinterpret_tensor(buf401, (1280, 320), (320, 1), 0), reinterpret_tensor(buf402, (1280, ), (1, ), 0), reinterpret_tensor(buf397, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf398, (320, ), (1, ), 0), buf393, buf394, reinterpret_tensor(buf389, (320, 320), (320, 1), 0), reinterpret_tensor(buf390, (320, ), (1, ), 0), buf386, buf387, buf381, buf382, reinterpret_tensor(buf377, (640, 320), (320, 1), 0), reinterpret_tensor(buf378, (640, ), (1, ), 0), reinterpret_tensor(buf369, (320, 320), (320, 1), 0), reinterpret_tensor(buf370, (320, ), (1, ), 0), buf365, buf366, reinterpret_tensor(buf361, (1280, 320), (320, 1), 0), reinterpret_tensor(buf362, (1280, ), (1, ), 0), reinterpret_tensor(buf357, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf358, (320, ), (1, ), 0), buf353, buf354, reinterpret_tensor(buf349, (320, 320), (320, 1), 0), reinterpret_tensor(buf350, (320, ), (1, ), 0), buf346, buf347, buf341, buf342, reinterpret_tensor(buf337, (640, 320), (320, 1), 0), reinterpret_tensor(buf338, (640, ), (1, ), 0), reinterpret_tensor(buf329, (320, 320), (320, 1), 0), reinterpret_tensor(buf330, (320, ), (1, ), 0), buf325, buf326, reinterpret_tensor(buf321, (1280, 320), (320, 1), 0), reinterpret_tensor(buf322, (1280, ), (1, ), 0), reinterpret_tensor(buf317, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf318, (320, ), (1, ), 0), buf313, buf314, reinterpret_tensor(buf309, (320, 320), (320, 1), 0), reinterpret_tensor(buf310, (320, ), (1, ), 0), buf306, buf307, buf301, buf302, reinterpret_tensor(buf297, (640, 320), (320, 1), 0), reinterpret_tensor(buf298, (640, ), (1, ), 0), reinterpret_tensor(buf289, (320, 320), (320, 1), 0), reinterpret_tensor(buf290, (320, ), (1, ), 0), buf285, buf286, reinterpret_tensor(buf281, (1280, 320), (320, 1), 0), reinterpret_tensor(buf282, (1280, ), (1, ), 0), reinterpret_tensor(buf277, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf278, (320, ), (1, ), 0), buf273, buf274, reinterpret_tensor(buf269, (320, 320), (320, 1), 0), reinterpret_tensor(buf270, (320, ), (1, ), 0), buf266, buf267, buf261, buf262, reinterpret_tensor(buf257, (640, 320), (320, 1), 0), reinterpret_tensor(buf258, (640, ), (1, ), 0), reinterpret_tensor(buf249, (320, 320), (320, 1), 0), reinterpret_tensor(buf250, (320, ), (1, ), 0), buf245, buf246, reinterpret_tensor(buf241, (1280, 320), (320, 1), 0), reinterpret_tensor(buf242, (1280, ), (1, ), 0), reinterpret_tensor(buf237, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf238, (320, ), (1, ), 0), buf233, buf234, reinterpret_tensor(buf229, (320, 320), (320, 1), 0), reinterpret_tensor(buf230, (320, ), (1, ), 0), buf226, buf227, buf221, buf222, reinterpret_tensor(buf217, (640, 320), (320, 1), 0), reinterpret_tensor(buf218, (640, ), (1, ), 0), reinterpret_tensor(buf209, (320, 320), (320, 1), 0), reinterpret_tensor(buf210, (320, ), (1, ), 0), buf205, buf206, reinterpret_tensor(buf201, (1280, 320), (320, 1), 0), reinterpret_tensor(buf202, (1280, ), (1, ), 0), reinterpret_tensor(buf197, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf198, (320, ), (1, ), 0), buf193, buf194, reinterpret_tensor(buf189, (320, 320), (320, 1), 0), reinterpret_tensor(buf190, (320, ), (1, ), 0), buf186, buf187, buf181, buf182, reinterpret_tensor(buf177, (640, 320), (320, 1), 0), reinterpret_tensor(buf178, (640, ), (1, ), 0), reinterpret_tensor(buf169, (320, 320), (320, 1), 0), reinterpret_tensor(buf170, (320, ), (1, ), 0), buf165, buf166, reinterpret_tensor(buf161, (1280, 320), (320, 1), 0), reinterpret_tensor(buf162, (1280, ), (1, ), 0), reinterpret_tensor(buf157, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf158, (320, ), (1, ), 0), buf153, buf154, reinterpret_tensor(buf149, (320, 320), (320, 1), 0), reinterpret_tensor(buf150, (320, ), (1, ), 0), buf146, buf147, buf141, buf142, reinterpret_tensor(buf137, (640, 320), (320, 1), 0), reinterpret_tensor(buf138, (640, ), (1, ), 0), reinterpret_tensor(buf129, (320, 320), (320, 1), 0), reinterpret_tensor(buf130, (320, ), (1, ), 0), buf125, buf126, reinterpret_tensor(buf121, (1280, 320), (320, 1), 0), reinterpret_tensor(buf122, (1280, ), (1, ), 0), reinterpret_tensor(buf117, (320, 1280), (1280, 1), 0), reinterpret_tensor(buf118, (320, ), (1, ), 0), buf114, buf115, buf109, buf110, buf104, buf105, reinterpret_tensor(buf100, (512, 512), (512, 1), 0), reinterpret_tensor(buf101, (512, ), (1, ), 0), reinterpret_tensor(buf97, (1024, 512), (512, 1), 0), reinterpret_tensor(buf98, (1024, ), (1, ), 0), reinterpret_tensor(buf89, (512, 512), (512, 1), 0), reinterpret_tensor(buf90, (512, ), (1, ), 0), buf85, buf86, reinterpret_tensor(buf81, (2048, 512), (512, 1), 0), reinterpret_tensor(buf82, (2048, ), (1, ), 0), reinterpret_tensor(buf77, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf78, (512, ), (1, ), 0), buf72, buf73, buf67, buf68, reinterpret_tensor(buf63, (512, 512), (512, 1), 0), reinterpret_tensor(buf64, (512, ), (1, ), 0), reinterpret_tensor(buf60, (1024, 512), (512, 1), 0), reinterpret_tensor(buf61, (1024, ), (1, ), 0), reinterpret_tensor(buf52, (512, 512), (512, 1), 0), reinterpret_tensor(buf53, (512, ), (1, ), 0), buf48, buf49, reinterpret_tensor(buf44, (2048, 512), (512, 1), 0), reinterpret_tensor(buf45, (2048, ), (1, ), 0), reinterpret_tensor(buf40, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf41, (512, ), (1, ), 0), buf36, buf37, reinterpret_tensor(buf32, (512, 512), (512, 1), 0), reinterpret_tensor(buf33, (512, ), (1, ), 0), reinterpret_tensor(buf29, (1024, 512), (512, 1), 0), reinterpret_tensor(buf30, (1024, ), (1, ), 0), reinterpret_tensor(buf21, (512, 512), (512, 1), 0), reinterpret_tensor(buf22, (512, ), (1, ), 0), buf17, buf18, reinterpret_tensor(buf13, (2048, 512), (512, 1), 0), reinterpret_tensor(buf14, (2048, ), (1, ), 0), reinterpret_tensor(buf9, (512, 2048), (2048, 1), 0), reinterpret_tensor(buf10, (512, ), (1, ), 0), buf6, buf7, reinterpret_tensor(buf1, (1000, 512), (512, 1), 0), reinterpret_tensor(buf2, (1000, ), (1, ), 0), None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((64, 3, 4, 4), (48, 1, 12, 3), device='cpu', dtype=torch.float32)
    primals_3 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_5 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_9 = rand_strided((64, 64, 8, 8), (4096, 1, 512, 64), device='cpu', dtype=torch.float32)
    primals_11 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_17 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_23 = rand_strided((64, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_25 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_29 = rand_strided((64, 64, 8, 8), (4096, 1, 512, 64), device='cpu', dtype=torch.float32)
    primals_31 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_37 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_43 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_47 = rand_strided((64, 64, 8, 8), (4096, 1, 512, 64), device='cpu', dtype=torch.float32)
    primals_49 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_55 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_61 = rand_strided((128, 64, 2, 2), (256, 1, 128, 64), device='cpu', dtype=torch.float32)
    primals_63 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_65 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_69 = rand_strided((128, 128, 4, 4), (2048, 1, 512, 128), device='cpu', dtype=torch.float32)
    primals_71 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_77 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_83 = rand_strided((128, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_85 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_89 = rand_strided((128, 128, 4, 4), (2048, 1, 512, 128), device='cpu', dtype=torch.float32)
    primals_91 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_97 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_103 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_107 = rand_strided((128, 128, 4, 4), (2048, 1, 512, 128), device='cpu', dtype=torch.float32)
    primals_109 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_115 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_121 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_125 = rand_strided((128, 128, 4, 4), (2048, 1, 512, 128), device='cpu', dtype=torch.float32)
    primals_127 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_133 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((320, 128, 2, 2), (512, 1, 256, 128), device='cpu', dtype=torch.float32)
    primals_141 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_143 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_147 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_149 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_155 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_161 = rand_strided((320, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_163 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_167 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_169 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_175 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_181 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_185 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_187 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_193 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_199 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_203 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_211 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_217 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_221 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_223 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_229 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_235 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_239 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_241 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_247 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_253 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_257 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_259 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_265 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_271 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_275 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_277 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_283 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_289 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_293 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_295 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_301 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_307 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_311 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_313 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_319 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_325 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_329 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_331 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_337 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_343 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_347 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_349 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_355 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_361 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_367 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_373 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_379 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_383 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_385 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_391 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_397 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_401 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_403 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_409 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_415 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_419 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_421 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_427 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_433 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_437 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_439 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_445 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_451 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_455 = rand_strided((320, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_457 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_463 = rand_strided((320, ), (1, ), device='cpu', dtype=torch.float32)
    primals_469 = rand_strided((512, 320, 2, 2), (1280, 1, 640, 320), device='cpu', dtype=torch.float32)
    primals_471 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_473 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_481 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_487 = rand_strided((512, 1, 3, 3), (9, 9, 3, 1), device='cpu', dtype=torch.float32)
    primals_489 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_497 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_503 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_511 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_517 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_521 = rand_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    mul = rand_strided((8, 3136, 64), (200704, 64, 1), device='cpu', dtype=torch.float32)
    mul_2 = rand_strided((8, 3136, 64), (200704, 64, 1), device='cpu', dtype=torch.float32)
    view_1 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    permute_2 = rand_strided((8, 1, 3136, 64), (200704, 64, 64, 1), device='cpu', dtype=torch.float32)
    view_4 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    mul_4 = rand_strided((8, 49, 64), (3136, 64, 1), device='cpu', dtype=torch.float32)
    view_6 = rand_strided((392, 64), (64, 1), device='cpu', dtype=torch.float32)
    getitem_6 = rand_strided((8, 1, 49, 64), (6272, 0, 128, 1), device='cpu', dtype=torch.float32)
    getitem_7 = rand_strided((8, 1, 49, 64), (6272, 0, 128, 1), device='cpu', dtype=torch.float32)
    getitem_9 = rand_strided((8, 1, 3136), (3136, 1, 1), device='cpu', dtype=torch.float32)
    getitem_10 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_11 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_14 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_15 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_10 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    mul_6 = rand_strided((8, 3136, 64), (200704, 64, 1), device='cpu', dtype=torch.float32)
    view_12 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    addmm_3 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_14 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_16 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    mul_11 = rand_strided((8, 3136, 64), (200704, 64, 1), device='cpu', dtype=torch.float32)
    view_19 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    permute_15 = rand_strided((8, 1, 3136, 64), (200704, 64, 64, 1), device='cpu', dtype=torch.float32)
    view_22 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    mul_13 = rand_strided((8, 49, 64), (3136, 64, 1), device='cpu', dtype=torch.float32)
    view_24 = rand_strided((392, 64), (64, 1), device='cpu', dtype=torch.float32)
    getitem_23 = rand_strided((8, 1, 49, 64), (6272, 0, 128, 1), device='cpu', dtype=torch.float32)
    getitem_24 = rand_strided((8, 1, 49, 64), (6272, 0, 128, 1), device='cpu', dtype=torch.float32)
    getitem_26 = rand_strided((8, 1, 3136), (3136, 1, 1), device='cpu', dtype=torch.float32)
    getitem_27 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_28 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_31 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_32 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_28 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    mul_15 = rand_strided((8, 3136, 64), (200704, 64, 1), device='cpu', dtype=torch.float32)
    view_30 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    addmm_8 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_32 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    mul_20 = rand_strided((8, 3136, 64), (200704, 64, 1), device='cpu', dtype=torch.float32)
    view_34 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    permute_25 = rand_strided((8, 1, 3136, 64), (200704, 64, 64, 1), device='cpu', dtype=torch.float32)
    view_37 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    mul_22 = rand_strided((8, 49, 64), (3136, 64, 1), device='cpu', dtype=torch.float32)
    view_39 = rand_strided((392, 64), (64, 1), device='cpu', dtype=torch.float32)
    getitem_40 = rand_strided((8, 1, 49, 64), (6272, 0, 128, 1), device='cpu', dtype=torch.float32)
    getitem_41 = rand_strided((8, 1, 49, 64), (6272, 0, 128, 1), device='cpu', dtype=torch.float32)
    getitem_43 = rand_strided((8, 1, 3136), (3136, 1, 1), device='cpu', dtype=torch.float32)
    getitem_44 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_45 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_48 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_49 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_43 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    mul_24 = rand_strided((8, 3136, 64), (200704, 64, 1), device='cpu', dtype=torch.float32)
    view_45 = rand_strided((25088, 64), (64, 1), device='cpu', dtype=torch.float32)
    addmm_13 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_47 = rand_strided((25088, 512), (512, 1), device='cpu', dtype=torch.float32)
    clone_11 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    mul_29 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    mul_31 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    view_51 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_37 = rand_strided((8, 2, 784, 64), (100352, 1, 128, 2), device='cpu', dtype=torch.float32)
    view_54 = rand_strided((8, 128, 28, 28), (100352, 1, 3584, 128), device='cpu', dtype=torch.float32)
    mul_33 = rand_strided((8, 49, 128), (6272, 128, 1), device='cpu', dtype=torch.float32)
    view_56 = rand_strided((392, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_59 = rand_strided((8, 2, 49, 64), (12544, 64, 256, 1), device='cpu', dtype=torch.float32)
    getitem_60 = rand_strided((8, 2, 49, 64), (12544, 64, 256, 1), device='cpu', dtype=torch.float32)
    getitem_62 = rand_strided((8, 2, 784), (1568, 1, 2), device='cpu', dtype=torch.float32)
    getitem_63 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_64 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_67 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_68 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_60 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    mul_35 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    view_62 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_18 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    view_64 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    view_66 = rand_strided((8, 128, 28, 28), (100352, 1, 3584, 128), device='cpu', dtype=torch.float32)
    mul_40 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    view_69 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_50 = rand_strided((8, 2, 784, 64), (100352, 1, 128, 2), device='cpu', dtype=torch.float32)
    view_72 = rand_strided((8, 128, 28, 28), (100352, 1, 3584, 128), device='cpu', dtype=torch.float32)
    mul_42 = rand_strided((8, 49, 128), (6272, 128, 1), device='cpu', dtype=torch.float32)
    view_74 = rand_strided((392, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_76 = rand_strided((8, 2, 49, 64), (12544, 64, 256, 1), device='cpu', dtype=torch.float32)
    getitem_77 = rand_strided((8, 2, 49, 64), (12544, 64, 256, 1), device='cpu', dtype=torch.float32)
    getitem_79 = rand_strided((8, 2, 784), (1568, 1, 2), device='cpu', dtype=torch.float32)
    getitem_80 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_81 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_84 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_85 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_78 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    mul_44 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    view_80 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_23 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    view_82 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    mul_49 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    view_84 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_60 = rand_strided((8, 2, 784, 64), (100352, 1, 128, 2), device='cpu', dtype=torch.float32)
    view_87 = rand_strided((8, 128, 28, 28), (100352, 1, 3584, 128), device='cpu', dtype=torch.float32)
    mul_51 = rand_strided((8, 49, 128), (6272, 128, 1), device='cpu', dtype=torch.float32)
    view_89 = rand_strided((392, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_93 = rand_strided((8, 2, 49, 64), (12544, 64, 256, 1), device='cpu', dtype=torch.float32)
    getitem_94 = rand_strided((8, 2, 49, 64), (12544, 64, 256, 1), device='cpu', dtype=torch.float32)
    getitem_96 = rand_strided((8, 2, 784), (1568, 1, 2), device='cpu', dtype=torch.float32)
    getitem_97 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_98 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_101 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_102 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_93 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    mul_53 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    view_95 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_28 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    view_97 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    mul_58 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    view_99 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_70 = rand_strided((8, 2, 784, 64), (100352, 1, 128, 2), device='cpu', dtype=torch.float32)
    view_102 = rand_strided((8, 128, 28, 28), (100352, 1, 3584, 128), device='cpu', dtype=torch.float32)
    mul_60 = rand_strided((8, 49, 128), (6272, 128, 1), device='cpu', dtype=torch.float32)
    view_104 = rand_strided((392, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_110 = rand_strided((8, 2, 49, 64), (12544, 64, 256, 1), device='cpu', dtype=torch.float32)
    getitem_111 = rand_strided((8, 2, 49, 64), (12544, 64, 256, 1), device='cpu', dtype=torch.float32)
    getitem_113 = rand_strided((8, 2, 784), (1568, 1, 2), device='cpu', dtype=torch.float32)
    getitem_114 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_115 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_118 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_119 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_108 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    mul_62 = rand_strided((8, 784, 128), (100352, 128, 1), device='cpu', dtype=torch.float32)
    view_110 = rand_strided((6272, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_33 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    view_112 = rand_strided((6272, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    clone_26 = rand_strided((8, 128, 28, 28), (100352, 1, 3584, 128), device='cpu', dtype=torch.float32)
    mul_67 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    mul_69 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_116 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_82 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_119 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_71 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_121 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_129 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_130 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_132 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_133 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_134 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_137 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_138 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_125 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_73 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_127 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_38 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_129 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_131 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_78 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_134 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_95 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_137 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_80 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_139 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_146 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_147 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_149 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_150 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_151 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_154 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_155 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_143 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_82 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_145 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_43 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_147 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_87 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_149 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_105 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_152 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_89 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_154 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_163 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_164 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_166 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_167 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_168 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_171 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_172 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_158 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_91 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_160 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_48 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_162 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_96 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_164 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_115 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_167 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_98 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_169 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_180 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_181 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_183 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_184 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_185 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_188 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_189 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_173 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_100 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_175 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_53 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_177 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_105 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_179 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_125 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_182 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_107 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_184 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_197 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_198 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_200 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_201 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_202 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_205 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_206 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_188 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_109 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_190 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_58 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_192 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_114 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_194 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_135 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_197 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_116 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_199 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_214 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_215 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_217 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_218 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_219 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_222 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_223 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_203 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_118 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_205 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_63 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_207 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_123 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_209 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_145 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_212 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_125 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_214 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_231 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_232 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_234 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_235 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_236 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_239 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_240 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_218 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_127 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_220 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_68 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_222 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_132 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_224 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_155 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_227 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_134 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_229 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_248 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_249 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_251 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_252 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_253 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_256 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_257 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_233 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_136 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_235 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_73 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_237 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_141 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_239 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_165 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_242 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_143 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_244 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_265 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_266 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_268 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_269 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_270 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_273 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_274 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_248 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_145 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_250 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_78 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_252 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_150 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_254 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_175 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_257 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_152 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_259 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_282 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_283 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_285 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_286 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_287 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_290 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_291 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_263 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_154 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_265 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_83 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_267 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_159 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_269 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_185 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_272 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_161 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_274 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_299 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_300 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_302 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_303 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_304 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_307 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_308 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_278 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_163 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_280 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_88 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_282 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_168 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_284 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_195 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_287 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_170 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_289 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_316 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_317 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_319 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_320 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_321 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_324 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_325 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_293 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_172 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_295 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_93 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_297 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_177 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_299 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_205 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_302 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_179 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_304 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_333 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_334 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_336 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_337 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_338 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_341 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_342 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_308 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_181 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_310 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_98 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_312 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_186 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_314 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_215 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_317 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_188 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_319 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_350 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_351 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_353 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_354 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_355 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_358 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_359 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_323 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_190 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_325 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_103 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_327 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_195 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_329 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_225 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_332 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_197 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_334 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_367 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_368 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_370 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_371 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_372 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_375 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_376 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_338 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_199 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_340 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_108 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_342 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_204 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_344 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_235 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_347 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_206 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_349 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_384 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_385 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_387 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_388 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_389 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_392 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_393 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_353 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_208 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_355 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_113 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_357 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_213 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_359 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_245 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_362 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_215 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_364 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_401 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_402 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_404 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_405 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_406 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_409 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_410 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_368 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_217 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_370 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_118 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_372 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    mul_222 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_374 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    permute_255 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    view_377 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_224 = rand_strided((8, 49, 320), (15680, 320, 1), device='cpu', dtype=torch.float32)
    view_379 = rand_strided((392, 320), (320, 1), device='cpu', dtype=torch.float32)
    getitem_418 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_419 = rand_strided((8, 5, 49, 64), (31360, 64, 640, 1), device='cpu', dtype=torch.float32)
    getitem_421 = rand_strided((8, 5, 196), (980, 1, 5), device='cpu', dtype=torch.float32)
    getitem_422 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_423 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_426 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_427 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_383 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    mul_226 = rand_strided((8, 196, 320), (62720, 320, 1), device='cpu', dtype=torch.float32)
    view_385 = rand_strided((1568, 320), (320, 1), device='cpu', dtype=torch.float32)
    addmm_123 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    view_387 = rand_strided((1568, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    clone_83 = rand_strided((8, 320, 14, 14), (62720, 1, 4480, 320), device='cpu', dtype=torch.float32)
    mul_231 = rand_strided((8, 49, 512), (25088, 512, 1), device='cpu', dtype=torch.float32)
    mul_233 = rand_strided((8, 49, 512), (25088, 512, 1), device='cpu', dtype=torch.float32)
    view_391 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_267 = rand_strided((8, 8, 49, 64), (25088, 1, 512, 8), device='cpu', dtype=torch.float32)
    getitem_435 = rand_strided((8, 8, 49, 64), (50176, 64, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_436 = rand_strided((8, 8, 49, 64), (50176, 64, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_438 = rand_strided((8, 8, 49), (392, 1, 8), device='cpu', dtype=torch.float32)
    getitem_439 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_440 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_443 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_444 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_398 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    mul_235 = rand_strided((8, 49, 512), (25088, 512, 1), device='cpu', dtype=torch.float32)
    view_400 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_128 = rand_strided((392, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_402 = rand_strided((392, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_404 = rand_strided((8, 512, 7, 7), (25088, 1, 3584, 512), device='cpu', dtype=torch.float32)
    mul_240 = rand_strided((8, 49, 512), (25088, 512, 1), device='cpu', dtype=torch.float32)
    view_407 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_278 = rand_strided((8, 8, 49, 64), (25088, 1, 512, 8), device='cpu', dtype=torch.float32)
    getitem_450 = rand_strided((8, 8, 49, 64), (50176, 64, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_451 = rand_strided((8, 8, 49, 64), (50176, 64, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_453 = rand_strided((8, 8, 49), (392, 1, 8), device='cpu', dtype=torch.float32)
    getitem_454 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_455 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_458 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_459 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_414 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    mul_242 = rand_strided((8, 49, 512), (25088, 512, 1), device='cpu', dtype=torch.float32)
    view_416 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_133 = rand_strided((392, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_418 = rand_strided((392, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    mul_247 = rand_strided((8, 49, 512), (25088, 512, 1), device='cpu', dtype=torch.float32)
    view_420 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_286 = rand_strided((8, 8, 49, 64), (25088, 1, 512, 8), device='cpu', dtype=torch.float32)
    getitem_465 = rand_strided((8, 8, 49, 64), (50176, 64, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_466 = rand_strided((8, 8, 49, 64), (50176, 64, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_468 = rand_strided((8, 8, 49), (392, 1, 8), device='cpu', dtype=torch.float32)
    getitem_469 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_470 = rand_strided((), (), device='cpu', dtype=torch.int32)
    getitem_473 = rand_strided((), (), device='cpu', dtype=torch.int64)
    getitem_474 = rand_strided((), (), device='cpu', dtype=torch.int64)
    view_427 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    mul_249 = rand_strided((8, 49, 512), (25088, 512, 1), device='cpu', dtype=torch.float32)
    view_429 = rand_strided((392, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_138 = rand_strided((392, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    view_431 = rand_strided((392, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    mul_254 = rand_strided((8, 49, 512), (25088, 512, 1), device='cpu', dtype=torch.float32)
    clone_95 = rand_strided((8, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_294 = rand_strided((1000, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_1 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_298 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_302 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_2 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_306 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    alias_28 = rand_strided((8, 8, 49, 64), (25088, 1, 512, 8), device='cpu', dtype=torch.float32)
    permute_312 = rand_strided((1024, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_317 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_3 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_321 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_325 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_4 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_329 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    alias_29 = rand_strided((8, 8, 49, 64), (25088, 1, 512, 8), device='cpu', dtype=torch.float32)
    permute_335 = rand_strided((1024, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_340 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_5 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_346 = rand_strided((512, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_350 = rand_strided((2048, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_6 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_354 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    alias_30 = rand_strided((8, 8, 49, 64), (25088, 1, 512, 8), device='cpu', dtype=torch.float32)
    permute_360 = rand_strided((1024, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_365 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    div_7 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    div_8 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_371 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_375 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_9 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_379 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_31 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_385 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_10 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_392 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_11 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_396 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_400 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_12 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_404 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_32 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_410 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_13 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_417 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_14 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_421 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_425 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_15 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_429 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_33 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_435 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_16 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_442 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_17 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_446 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_450 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_18 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_454 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_34 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_460 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_19 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_467 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_20 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_471 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_475 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_21 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_479 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_35 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_485 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_22 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_492 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_23 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_496 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_500 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_24 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_504 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_36 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_510 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_25 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_517 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_26 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_521 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_525 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_27 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_529 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_37 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_535 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_28 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_542 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_29 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_546 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_550 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_30 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_554 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_38 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_560 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_31 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_567 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_32 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_571 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_575 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_33 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_579 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_39 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_585 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_34 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_592 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_35 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_596 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_600 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_36 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_604 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_40 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_610 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_37 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_617 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_38 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_621 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_625 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_39 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_629 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_41 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_635 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_40 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_642 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_41 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_646 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_650 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_42 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_654 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_42 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_660 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_43 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_667 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_44 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_671 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_675 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_45 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_679 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_43 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_685 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_46 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_692 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_47 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_696 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_700 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_48 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_704 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_44 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_710 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_49 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_717 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_50 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_721 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_725 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_51 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_729 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_45 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_735 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_52 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_742 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_53 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_746 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_750 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_54 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_754 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_46 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_760 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_55 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_767 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_56 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_771 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_775 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_57 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_779 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_47 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_785 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_58 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_792 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_59 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_798 = rand_strided((320, 1280), (1280, 1), device='cpu', dtype=torch.float32)
    permute_802 = rand_strided((1280, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_60 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_806 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    alias_48 = rand_strided((8, 5, 196, 64), (62720, 1, 320, 5), device='cpu', dtype=torch.float32)
    permute_812 = rand_strided((640, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_61 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_819 = rand_strided((320, 320), (320, 1), device='cpu', dtype=torch.float32)
    div_62 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    div_63 = rand_strided((8, 196, 1), (196, 1, 1), device='cpu', dtype=torch.float32)
    permute_825 = rand_strided((128, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    permute_829 = rand_strided((1024, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_64 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    permute_833 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    alias_49 = rand_strided((8, 2, 784, 64), (100352, 1, 128, 2), device='cpu', dtype=torch.float32)
    permute_839 = rand_strided((256, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_65 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_846 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_66 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    permute_850 = rand_strided((128, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    permute_854 = rand_strided((1024, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_67 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    permute_858 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    alias_50 = rand_strided((8, 2, 784, 64), (100352, 1, 128, 2), device='cpu', dtype=torch.float32)
    permute_864 = rand_strided((256, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_68 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_871 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_69 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    permute_875 = rand_strided((128, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    permute_879 = rand_strided((1024, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_70 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    permute_883 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    alias_51 = rand_strided((8, 2, 784, 64), (100352, 1, 128, 2), device='cpu', dtype=torch.float32)
    permute_889 = rand_strided((256, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_71 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_896 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_72 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    permute_902 = rand_strided((128, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    permute_906 = rand_strided((1024, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_73 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    permute_910 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    alias_52 = rand_strided((8, 2, 784, 64), (100352, 1, 128, 2), device='cpu', dtype=torch.float32)
    permute_916 = rand_strided((256, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_74 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_923 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    div_75 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    div_76 = rand_strided((8, 784, 1), (784, 1, 1), device='cpu', dtype=torch.float32)
    permute_929 = rand_strided((64, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_933 = rand_strided((512, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_77 = rand_strided((8, 3136, 1), (3136, 1, 1), device='cpu', dtype=torch.float32)
    permute_937 = rand_strided((64, 64), (64, 1), device='cpu', dtype=torch.float32)
    alias_53 = rand_strided((8, 1, 3136, 64), (200704, 64, 64, 1), device='cpu', dtype=torch.float32)
    permute_943 = rand_strided((128, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_78 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_950 = rand_strided((64, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_79 = rand_strided((8, 3136, 1), (3136, 1, 1), device='cpu', dtype=torch.float32)
    permute_954 = rand_strided((64, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_958 = rand_strided((512, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_80 = rand_strided((8, 3136, 1), (3136, 1, 1), device='cpu', dtype=torch.float32)
    permute_962 = rand_strided((64, 64), (64, 1), device='cpu', dtype=torch.float32)
    alias_54 = rand_strided((8, 1, 3136, 64), (200704, 64, 64, 1), device='cpu', dtype=torch.float32)
    permute_968 = rand_strided((128, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_81 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_975 = rand_strided((64, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_82 = rand_strided((8, 3136, 1), (3136, 1, 1), device='cpu', dtype=torch.float32)
    permute_981 = rand_strided((64, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_985 = rand_strided((512, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_83 = rand_strided((8, 3136, 1), (3136, 1, 1), device='cpu', dtype=torch.float32)
    permute_989 = rand_strided((64, 64), (64, 1), device='cpu', dtype=torch.float32)
    alias_55 = rand_strided((8, 1, 3136, 64), (200704, 64, 64, 1), device='cpu', dtype=torch.float32)
    permute_995 = rand_strided((128, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_84 = rand_strided((8, 49, 1), (49, 1, 1), device='cpu', dtype=torch.float32)
    permute_1002 = rand_strided((64, 64), (64, 1), device='cpu', dtype=torch.float32)
    div_85 = rand_strided((8, 3136, 1), (3136, 1, 1), device='cpu', dtype=torch.float32)
    div_86 = rand_strided((8, 3136, 1), (3136, 1, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_3, primals_5, primals_9, primals_11, primals_17, primals_23, primals_25, primals_29, primals_31, primals_37, primals_43, primals_47, primals_49, primals_55, primals_61, primals_63, primals_65, primals_69, primals_71, primals_77, primals_83, primals_85, primals_89, primals_91, primals_97, primals_103, primals_107, primals_109, primals_115, primals_121, primals_125, primals_127, primals_133, primals_139, primals_141, primals_143, primals_147, primals_149, primals_155, primals_161, primals_163, primals_167, primals_169, primals_175, primals_181, primals_185, primals_187, primals_193, primals_199, primals_203, primals_205, primals_211, primals_217, primals_221, primals_223, primals_229, primals_235, primals_239, primals_241, primals_247, primals_253, primals_257, primals_259, primals_265, primals_271, primals_275, primals_277, primals_283, primals_289, primals_293, primals_295, primals_301, primals_307, primals_311, primals_313, primals_319, primals_325, primals_329, primals_331, primals_337, primals_343, primals_347, primals_349, primals_355, primals_361, primals_365, primals_367, primals_373, primals_379, primals_383, primals_385, primals_391, primals_397, primals_401, primals_403, primals_409, primals_415, primals_419, primals_421, primals_427, primals_433, primals_437, primals_439, primals_445, primals_451, primals_455, primals_457, primals_463, primals_469, primals_471, primals_473, primals_481, primals_487, primals_489, primals_497, primals_503, primals_511, primals_517, primals_521, mul, mul_2, view_1, permute_2, view_4, mul_4, view_6, getitem_6, getitem_7, getitem_9, getitem_10, getitem_11, getitem_14, getitem_15, view_10, mul_6, view_12, addmm_3, view_14, view_16, mul_11, view_19, permute_15, view_22, mul_13, view_24, getitem_23, getitem_24, getitem_26, getitem_27, getitem_28, getitem_31, getitem_32, view_28, mul_15, view_30, addmm_8, view_32, mul_20, view_34, permute_25, view_37, mul_22, view_39, getitem_40, getitem_41, getitem_43, getitem_44, getitem_45, getitem_48, getitem_49, view_43, mul_24, view_45, addmm_13, view_47, clone_11, mul_29, mul_31, view_51, permute_37, view_54, mul_33, view_56, getitem_59, getitem_60, getitem_62, getitem_63, getitem_64, getitem_67, getitem_68, view_60, mul_35, view_62, addmm_18, view_64, view_66, mul_40, view_69, permute_50, view_72, mul_42, view_74, getitem_76, getitem_77, getitem_79, getitem_80, getitem_81, getitem_84, getitem_85, view_78, mul_44, view_80, addmm_23, view_82, mul_49, view_84, permute_60, view_87, mul_51, view_89, getitem_93, getitem_94, getitem_96, getitem_97, getitem_98, getitem_101, getitem_102, view_93, mul_53, view_95, addmm_28, view_97, mul_58, view_99, permute_70, view_102, mul_60, view_104, getitem_110, getitem_111, getitem_113, getitem_114, getitem_115, getitem_118, getitem_119, view_108, mul_62, view_110, addmm_33, view_112, clone_26, mul_67, mul_69, view_116, permute_82, view_119, mul_71, view_121, getitem_129, getitem_130, getitem_132, getitem_133, getitem_134, getitem_137, getitem_138, view_125, mul_73, view_127, addmm_38, view_129, view_131, mul_78, view_134, permute_95, view_137, mul_80, view_139, getitem_146, getitem_147, getitem_149, getitem_150, getitem_151, getitem_154, getitem_155, view_143, mul_82, view_145, addmm_43, view_147, mul_87, view_149, permute_105, view_152, mul_89, view_154, getitem_163, getitem_164, getitem_166, getitem_167, getitem_168, getitem_171, getitem_172, view_158, mul_91, view_160, addmm_48, view_162, mul_96, view_164, permute_115, view_167, mul_98, view_169, getitem_180, getitem_181, getitem_183, getitem_184, getitem_185, getitem_188, getitem_189, view_173, mul_100, view_175, addmm_53, view_177, mul_105, view_179, permute_125, view_182, mul_107, view_184, getitem_197, getitem_198, getitem_200, getitem_201, getitem_202, getitem_205, getitem_206, view_188, mul_109, view_190, addmm_58, view_192, mul_114, view_194, permute_135, view_197, mul_116, view_199, getitem_214, getitem_215, getitem_217, getitem_218, getitem_219, getitem_222, getitem_223, view_203, mul_118, view_205, addmm_63, view_207, mul_123, view_209, permute_145, view_212, mul_125, view_214, getitem_231, getitem_232, getitem_234, getitem_235, getitem_236, getitem_239, getitem_240, view_218, mul_127, view_220, addmm_68, view_222, mul_132, view_224, permute_155, view_227, mul_134, view_229, getitem_248, getitem_249, getitem_251, getitem_252, getitem_253, getitem_256, getitem_257, view_233, mul_136, view_235, addmm_73, view_237, mul_141, view_239, permute_165, view_242, mul_143, view_244, getitem_265, getitem_266, getitem_268, getitem_269, getitem_270, getitem_273, getitem_274, view_248, mul_145, view_250, addmm_78, view_252, mul_150, view_254, permute_175, view_257, mul_152, view_259, getitem_282, getitem_283, getitem_285, getitem_286, getitem_287, getitem_290, getitem_291, view_263, mul_154, view_265, addmm_83, view_267, mul_159, view_269, permute_185, view_272, mul_161, view_274, getitem_299, getitem_300, getitem_302, getitem_303, getitem_304, getitem_307, getitem_308, view_278, mul_163, view_280, addmm_88, view_282, mul_168, view_284, permute_195, view_287, mul_170, view_289, getitem_316, getitem_317, getitem_319, getitem_320, getitem_321, getitem_324, getitem_325, view_293, mul_172, view_295, addmm_93, view_297, mul_177, view_299, permute_205, view_302, mul_179, view_304, getitem_333, getitem_334, getitem_336, getitem_337, getitem_338, getitem_341, getitem_342, view_308, mul_181, view_310, addmm_98, view_312, mul_186, view_314, permute_215, view_317, mul_188, view_319, getitem_350, getitem_351, getitem_353, getitem_354, getitem_355, getitem_358, getitem_359, view_323, mul_190, view_325, addmm_103, view_327, mul_195, view_329, permute_225, view_332, mul_197, view_334, getitem_367, getitem_368, getitem_370, getitem_371, getitem_372, getitem_375, getitem_376, view_338, mul_199, view_340, addmm_108, view_342, mul_204, view_344, permute_235, view_347, mul_206, view_349, getitem_384, getitem_385, getitem_387, getitem_388, getitem_389, getitem_392, getitem_393, view_353, mul_208, view_355, addmm_113, view_357, mul_213, view_359, permute_245, view_362, mul_215, view_364, getitem_401, getitem_402, getitem_404, getitem_405, getitem_406, getitem_409, getitem_410, view_368, mul_217, view_370, addmm_118, view_372, mul_222, view_374, permute_255, view_377, mul_224, view_379, getitem_418, getitem_419, getitem_421, getitem_422, getitem_423, getitem_426, getitem_427, view_383, mul_226, view_385, addmm_123, view_387, clone_83, mul_231, mul_233, view_391, permute_267, getitem_435, getitem_436, getitem_438, getitem_439, getitem_440, getitem_443, getitem_444, view_398, mul_235, view_400, addmm_128, view_402, view_404, mul_240, view_407, permute_278, getitem_450, getitem_451, getitem_453, getitem_454, getitem_455, getitem_458, getitem_459, view_414, mul_242, view_416, addmm_133, view_418, mul_247, view_420, permute_286, getitem_465, getitem_466, getitem_468, getitem_469, getitem_470, getitem_473, getitem_474, view_427, mul_249, view_429, addmm_138, view_431, mul_254, clone_95, permute_294, div_1, permute_298, permute_302, div_2, permute_306, alias_28, permute_312, permute_317, div_3, permute_321, permute_325, div_4, permute_329, alias_29, permute_335, permute_340, div_5, permute_346, permute_350, div_6, permute_354, alias_30, permute_360, permute_365, div_7, div_8, permute_371, permute_375, div_9, permute_379, alias_31, permute_385, div_10, permute_392, div_11, permute_396, permute_400, div_12, permute_404, alias_32, permute_410, div_13, permute_417, div_14, permute_421, permute_425, div_15, permute_429, alias_33, permute_435, div_16, permute_442, div_17, permute_446, permute_450, div_18, permute_454, alias_34, permute_460, div_19, permute_467, div_20, permute_471, permute_475, div_21, permute_479, alias_35, permute_485, div_22, permute_492, div_23, permute_496, permute_500, div_24, permute_504, alias_36, permute_510, div_25, permute_517, div_26, permute_521, permute_525, div_27, permute_529, alias_37, permute_535, div_28, permute_542, div_29, permute_546, permute_550, div_30, permute_554, alias_38, permute_560, div_31, permute_567, div_32, permute_571, permute_575, div_33, permute_579, alias_39, permute_585, div_34, permute_592, div_35, permute_596, permute_600, div_36, permute_604, alias_40, permute_610, div_37, permute_617, div_38, permute_621, permute_625, div_39, permute_629, alias_41, permute_635, div_40, permute_642, div_41, permute_646, permute_650, div_42, permute_654, alias_42, permute_660, div_43, permute_667, div_44, permute_671, permute_675, div_45, permute_679, alias_43, permute_685, div_46, permute_692, div_47, permute_696, permute_700, div_48, permute_704, alias_44, permute_710, div_49, permute_717, div_50, permute_721, permute_725, div_51, permute_729, alias_45, permute_735, div_52, permute_742, div_53, permute_746, permute_750, div_54, permute_754, alias_46, permute_760, div_55, permute_767, div_56, permute_771, permute_775, div_57, permute_779, alias_47, permute_785, div_58, permute_792, div_59, permute_798, permute_802, div_60, permute_806, alias_48, permute_812, div_61, permute_819, div_62, div_63, permute_825, permute_829, div_64, permute_833, alias_49, permute_839, div_65, permute_846, div_66, permute_850, permute_854, div_67, permute_858, alias_50, permute_864, div_68, permute_871, div_69, permute_875, permute_879, div_70, permute_883, alias_51, permute_889, div_71, permute_896, div_72, permute_902, permute_906, div_73, permute_910, alias_52, permute_916, div_74, permute_923, div_75, div_76, permute_929, permute_933, div_77, permute_937, alias_53, permute_943, div_78, permute_950, div_79, permute_954, permute_958, div_80, permute_962, alias_54, permute_968, div_81, permute_975, div_82, permute_981, permute_985, div_83, permute_989, alias_55, permute_995, div_84, permute_1002, div_85, div_86, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('twins_pcpvt_base', benchmark_compiled_module)
