
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_mul_scatter_zeros_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568000L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr0 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8000L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.5);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 * tmp2;
                    tmp3.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_sum_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_select_backward_slice_backward_sum_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    {
                        float tmp_acc0 = 0;
                        float tmp_acc1 = 0;
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(1L))
                        {
                            auto tmp11 = in_ptr2[static_cast<long>(x2 + (384L*x0))];
                            auto tmp14 = in_ptr3[static_cast<long>(x2)];
                            auto tmp22 = in_ptr4[static_cast<long>(x2 + (384L*x1) + (75648L*x0))];
                            auto tmp23 = in_ptr5[static_cast<long>(x1 + (197L*x0))];
                            auto tmp25 = in_ptr6[static_cast<long>(x1 + (197L*x0))];
                            auto tmp0 = c10::convert<long>(x1);
                            auto tmp1 = static_cast<long>(1);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = in_ptr1[static_cast<long>((-384L) + x2 + (384L*x1) + (75264L*x0))];
                                return tmp4;
                            }
                            ;
                            auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = tmp2 ? tmp5 : tmp6;
                            auto tmp8 = c10::convert<int>(x1);
                            auto tmp9 = static_cast<int>(0);
                            auto tmp10 = tmp8 == tmp9;
                            auto tmp12 = tmp10 ? tmp11 : tmp6;
                            auto tmp13 = decltype(tmp7)(tmp7 + tmp12);
                            auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                            auto tmp16 = [&]
                            {
                                auto tmp17 = in_ptr1[static_cast<long>((-384L) + x2 + (384L*x1) + (75264L*x0))];
                                return tmp17;
                            }
                            ;
                            auto tmp18 = tmp2 ? tmp16() : static_cast<decltype(tmp16())>(0.0);
                            auto tmp19 = tmp2 ? tmp18 : tmp6;
                            auto tmp20 = decltype(tmp19)(tmp19 + tmp12);
                            auto tmp21 = decltype(tmp20)(tmp20 * tmp14);
                            auto tmp24 = decltype(tmp22)(tmp22 - tmp23);
                            auto tmp26 = decltype(tmp24)(tmp24 * tmp25);
                            auto tmp27 = decltype(tmp21)(tmp21 * tmp26);
                            tmp_acc0 = tmp_acc0 + tmp15;
                            tmp_acc1 = tmp_acc1 + tmp27;
                        }
                        out_ptr1[static_cast<long>(x1 + (197L*x0))] = tmp_acc0;
                        out_ptr2[static_cast<long>(x1 + (197L*x0))] = tmp_acc1;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr6[static_cast<long>(x1 + (197L*x0))];
                        auto tmp14 = in_ptr2[static_cast<long>(x2 + (384L*x0))];
                        auto tmp17 = in_ptr3[static_cast<long>(x2)];
                        auto tmp20 = out_ptr1[static_cast<long>(x1 + (197L*x0))];
                        auto tmp22 = in_ptr4[static_cast<long>(x2 + (384L*x1) + (75648L*x0))];
                        auto tmp23 = in_ptr5[static_cast<long>(x1 + (197L*x0))];
                        auto tmp26 = out_ptr2[static_cast<long>(x1 + (197L*x0))];
                        auto tmp1 = static_cast<float>(384.0);
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<long>(x1);
                        auto tmp4 = static_cast<long>(1);
                        auto tmp5 = tmp3 >= tmp4;
                        auto tmp6 = [&]
                        {
                            auto tmp7 = in_ptr1[static_cast<long>((-384L) + x2 + (384L*x1) + (75264L*x0))];
                            return tmp7;
                        }
                        ;
                        auto tmp8 = tmp5 ? tmp6() : static_cast<decltype(tmp6())>(0.0);
                        auto tmp9 = static_cast<float>(0.0);
                        auto tmp10 = tmp5 ? tmp8 : tmp9;
                        auto tmp11 = c10::convert<int>(x1);
                        auto tmp12 = static_cast<int>(0);
                        auto tmp13 = tmp11 == tmp12;
                        auto tmp15 = tmp13 ? tmp14 : tmp9;
                        auto tmp16 = decltype(tmp10)(tmp10 + tmp15);
                        auto tmp18 = decltype(tmp16)(tmp16 * tmp17);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp21 = decltype(tmp19)(tmp19 - tmp20);
                        auto tmp24 = decltype(tmp22)(tmp22 - tmp23);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp0);
                        auto tmp27 = decltype(tmp25)(tmp25 * tmp26);
                        auto tmp28 = decltype(tmp21)(tmp21 - tmp27);
                        auto tmp29 = decltype(tmp2)(tmp2 * tmp28);
                        out_ptr3[static_cast<long>(x2 + (384L*x1) + (75648L*x0))] = tmp29;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                        {
                            auto tmp11 = in_ptr2[static_cast<long>(x0 + (384L*x1))];
                            auto tmp14 = in_ptr4[static_cast<long>(x0 + (384L*x2) + (75648L*x1))];
                            auto tmp15 = in_ptr5[static_cast<long>(x2 + (197L*x1))];
                            auto tmp17 = in_ptr6[static_cast<long>(x2 + (197L*x1))];
                            auto tmp0 = c10::convert<long>(x2);
                            auto tmp1 = static_cast<long>(1);
                            auto tmp2 = tmp0 >= tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = in_ptr1[static_cast<long>((-384L) + x0 + (384L*x2) + (75264L*x1))];
                                return tmp4;
                            }
                            ;
                            auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = tmp2 ? tmp5 : tmp6;
                            auto tmp8 = c10::convert<int>(x2);
                            auto tmp9 = static_cast<int>(0);
                            auto tmp10 = tmp8 == tmp9;
                            auto tmp12 = tmp10 ? tmp11 : tmp6;
                            auto tmp13 = decltype(tmp7)(tmp7 + tmp12);
                            auto tmp16 = decltype(tmp14)(tmp14 - tmp15);
                            auto tmp18 = decltype(tmp16)(tmp16 * tmp17);
                            auto tmp19 = decltype(tmp13)(tmp13 * tmp18);
                            auto tmp20 = [&]
                            {
                                auto tmp21 = in_ptr1[static_cast<long>((-384L) + x0 + (384L*x2) + (75264L*x1))];
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp2 ? tmp20() : static_cast<decltype(tmp20())>(0.0);
                            auto tmp23 = tmp2 ? tmp22 : tmp6;
                            auto tmp24 = decltype(tmp23)(tmp23 + tmp12);
                            tmp_acc0 = tmp_acc0 + tmp19;
                            tmp_acc1 = tmp_acc1 + tmp24;
                        }
                    }
                    out_ptr4[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr5[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (75648L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(9216L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.7071067811865476);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = tmp1 * tmp3;
            auto tmp5 = tmp4.erf();
            auto tmp6 = static_cast<float>(1.0);
            auto tmp7 = at::vec::Vectorized<float>(tmp6);
            auto tmp8 = tmp5 + tmp7;
            auto tmp9 = static_cast<float>(0.5);
            auto tmp10 = at::vec::Vectorized<float>(tmp9);
            auto tmp11 = tmp8 * tmp10;
            auto tmp12 = tmp1 * tmp1;
            auto tmp13 = static_cast<float>(-0.5);
            auto tmp14 = at::vec::Vectorized<float>(tmp13);
            auto tmp15 = tmp12 * tmp14;
            auto tmp16 = tmp15.exp();
            auto tmp17 = static_cast<float>(0.3989422804014327);
            auto tmp18 = at::vec::Vectorized<float>(tmp17);
            auto tmp19 = tmp16 * tmp18;
            auto tmp20 = tmp1 * tmp19;
            auto tmp21 = tmp11 + tmp20;
            auto tmp22 = tmp0 * tmp21;
            tmp22.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (75648L*x0)));
                auto tmp1 = in_ptr5[static_cast<long>(x0)];
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp8 = out_ptr1[static_cast<long>(x0)];
                auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                auto tmp12 = out_ptr2[static_cast<long>(x0)];
                auto tmp4 = tmp2 * tmp3;
                auto tmp5 = static_cast<float>(384.0);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 - tmp9;
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp10 - tmp14;
                auto tmp16 = at::vec::Vectorized<float>(tmp1);
                auto tmp17 = tmp16 * tmp15;
                auto tmp18 = tmp0 + tmp17;
                tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (197L*x1) + (2364L*x0)), static_cast<long>(197L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (12L*x2_inner) + (2364L*x0)));
                            auto tmp3 = tmp1 * tmp2;
                            tmp_acc0_vec = tmp_acc0_vec + tmp3;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (2364L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (12L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(8L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (197L*x1) + (2364L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x2) + (2364L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    out_ptr0[static_cast<long>(x1 + (12L*x0))] = tmp_acc0;
                }
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (2364L*x0)), static_cast<long>(12L), tmp1, 8);
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (2364L*x0)), static_cast<long>(12L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + x1_inner + (12L*x0))];
                        auto tmp3 = tmp0 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        tmp7.store(in_out_ptr0 + static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_out_ptr0[static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (2364L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (12L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp5 = tmp2 - tmp4;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp5.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(8L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x2 + (197L*x1) + (2364L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x2) + (2364L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x1 + (12L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x2 + (197L*x1) + (2364L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_view_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.1767766952966369);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_clone_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp6[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x3 + (197L*x4) + (6304L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp6, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp7 = at::vec::Vectorized<float>::loadu(tmp6 + static_cast<long>(8L*x3_inner));
                                        return tmp7;
                                    }
                                    ;
                                    auto tmp8 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp9 = tmp0 >= tmp3;
                                    auto tmp10 = static_cast<int>(16);
                                    auto tmp11 = tmp0 < tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp13 = masked_load(in_ptr1 + static_cast<long>((-605184L) + x4 + (32L*x3) + (32L*x3_inner) + (6304L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp9));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp9));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp8)::blendv(tmp14, tmp8, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x3 + (197L*x4) + (6304L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x4 + (32L*x3) + (6304L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_slice_backward_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                        {
                            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                            auto tmp21 = in_ptr4[static_cast<long>(x1 + (197L*x0))];
                            auto tmp24 = in_ptr5[static_cast<long>(x1 + (197L*x0))];
                            auto tmp0 = c10::convert<int>(x1);
                            auto tmp1 = static_cast<int>(1);
                            auto tmp2 = tmp0 < tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp2));
                                return tmp4;
                            }
                            ;
                            auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = to_float_mask(tmp2);
                            auto tmp8 = at::vec::Vectorized<float>(tmp6);
                            auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                            auto tmp11 = tmp9 + tmp10;
                            auto tmp13 = tmp11 * tmp12;
                            auto tmp14 = [&]
                            {
                                auto tmp15 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp2));
                                return tmp15;
                            }
                            ;
                            auto tmp16 = decltype(tmp14())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp14(), to_float_mask(tmp2));
                            auto tmp17 = decltype(tmp16)::blendv(tmp8, tmp16, tmp7);
                            auto tmp18 = tmp17 + tmp10;
                            auto tmp19 = tmp18 * tmp12;
                            auto tmp22 = at::vec::Vectorized<float>(tmp21);
                            auto tmp23 = tmp20 - tmp22;
                            auto tmp25 = at::vec::Vectorized<float>(tmp24);
                            auto tmp26 = tmp23 * tmp25;
                            auto tmp27 = tmp19 * tmp26;
                            tmp_acc0_vec = tmp_acc0_vec + tmp13;
                            tmp_acc1_vec = tmp_acc1_vec + tmp27;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr0[static_cast<long>(x1 + (197L*x0))] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr1[static_cast<long>(x1 + (197L*x0))] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                        {
                            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x2) + (75648L*x1)));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75648L*x1)));
                            auto tmp13 = in_ptr4[static_cast<long>(x2 + (197L*x1))];
                            auto tmp16 = in_ptr5[static_cast<long>(x2 + (197L*x1))];
                            auto tmp0 = c10::convert<int>(x2);
                            auto tmp1 = static_cast<int>(1);
                            auto tmp2 = tmp0 < tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x0 + (384L*x1)), to_float_mask(tmp2));
                                return tmp4;
                            }
                            ;
                            auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = to_float_mask(tmp2);
                            auto tmp8 = at::vec::Vectorized<float>(tmp6);
                            auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                            auto tmp11 = tmp9 + tmp10;
                            auto tmp14 = at::vec::Vectorized<float>(tmp13);
                            auto tmp15 = tmp12 - tmp14;
                            auto tmp17 = at::vec::Vectorized<float>(tmp16);
                            auto tmp18 = tmp15 * tmp17;
                            auto tmp19 = tmp11 * tmp18;
                            auto tmp20 = [&]
                            {
                                auto tmp21 = masked_load(in_ptr0 + static_cast<long>(x0 + (384L*x1)), to_float_mask(tmp2));
                                return tmp21;
                            }
                            ;
                            auto tmp22 = decltype(tmp20())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp20(), to_float_mask(tmp2));
                            auto tmp23 = decltype(tmp22)::blendv(tmp8, tmp22, tmp7);
                            auto tmp24 = tmp23 + tmp10;
                            tmp_acc0_vec = tmp_acc0_vec + tmp19;
                            tmp_acc1_vec = tmp_acc1_vec + tmp24;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp10 = in_ptr5[static_cast<long>(x1 + (197L*x0))];
                        auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                        auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                        auto tmp25 = out_ptr0[static_cast<long>(x1 + (197L*x0))];
                        auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                        auto tmp29 = in_ptr4[static_cast<long>(x1 + (197L*x0))];
                        auto tmp34 = out_ptr1[static_cast<long>(x1 + (197L*x0))];
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        auto tmp11 = static_cast<float>(384.0);
                        auto tmp12 = tmp10 / tmp11;
                        auto tmp13 = tmp0 < tmp1;
                        auto tmp14 = [&]
                        {
                            auto tmp15 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp13));
                            return tmp15;
                        }
                        ;
                        auto tmp16 = decltype(tmp14())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp14(), to_float_mask(tmp13));
                        auto tmp17 = to_float_mask(tmp13);
                        auto tmp18 = decltype(tmp16)::blendv(tmp8, tmp16, tmp17);
                        auto tmp20 = tmp18 + tmp19;
                        auto tmp22 = tmp20 * tmp21;
                        auto tmp23 = at::vec::Vectorized<float>(tmp11);
                        auto tmp24 = tmp22 * tmp23;
                        auto tmp26 = at::vec::Vectorized<float>(tmp25);
                        auto tmp27 = tmp24 - tmp26;
                        auto tmp30 = at::vec::Vectorized<float>(tmp29);
                        auto tmp31 = tmp28 - tmp30;
                        auto tmp32 = at::vec::Vectorized<float>(tmp10);
                        auto tmp33 = tmp31 * tmp32;
                        auto tmp35 = at::vec::Vectorized<float>(tmp34);
                        auto tmp36 = tmp33 * tmp35;
                        auto tmp37 = tmp27 - tmp36;
                        auto tmp38 = at::vec::Vectorized<float>(tmp12);
                        auto tmp39 = tmp38 * tmp37;
                        auto tmp40 = tmp9 + tmp39;
                        auto tmp41 = [&]
                        {
                            auto tmp42 = masked_load(in_ptr6 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp13));
                            return tmp42;
                        }
                        ;
                        auto tmp43 = decltype(tmp41())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp41(), to_float_mask(tmp13));
                        auto tmp44 = decltype(tmp43)::blendv(tmp8, tmp43, tmp17);
                        auto tmp45 = tmp40 + tmp44;
                        tmp40.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                        tmp45.store(out_ptr4 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (75648L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(9216L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.7071067811865476);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = tmp1 * tmp3;
            auto tmp5 = tmp4.erf();
            auto tmp6 = static_cast<float>(1.0);
            auto tmp7 = at::vec::Vectorized<float>(tmp6);
            auto tmp8 = tmp5 + tmp7;
            auto tmp9 = static_cast<float>(0.5);
            auto tmp10 = at::vec::Vectorized<float>(tmp9);
            auto tmp11 = tmp8 * tmp10;
            auto tmp12 = tmp1 * tmp1;
            auto tmp13 = static_cast<float>(-0.5);
            auto tmp14 = at::vec::Vectorized<float>(tmp13);
            auto tmp15 = tmp12 * tmp14;
            auto tmp16 = tmp15.exp();
            auto tmp17 = static_cast<float>(0.3989422804014327);
            auto tmp18 = at::vec::Vectorized<float>(tmp17);
            auto tmp19 = tmp16 * tmp18;
            auto tmp20 = tmp1 * tmp19;
            auto tmp21 = tmp11 + tmp20;
            auto tmp22 = tmp0 * tmp21;
            tmp22.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (75648L*x0)));
                auto tmp1 = in_ptr5[static_cast<long>(x0)];
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp8 = out_ptr1[static_cast<long>(x0)];
                auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x0)));
                auto tmp12 = out_ptr2[static_cast<long>(x0)];
                auto tmp4 = tmp2 * tmp3;
                auto tmp5 = static_cast<float>(384.0);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp7 - tmp9;
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = tmp10 - tmp14;
                auto tmp16 = at::vec::Vectorized<float>(tmp1);
                auto tmp17 = tmp16 * tmp15;
                auto tmp18 = tmp0 + tmp17;
                tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (384L*x0)));
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (197L*x1) + (2364L*x0)), static_cast<long>(197L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (12L*x2_inner) + (2364L*x0)));
                            auto tmp3 = tmp1 * tmp2;
                            tmp_acc0_vec = tmp_acc0_vec + tmp3;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (2364L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (12L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(8L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (197L*x1) + (2364L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x2) + (2364L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    out_ptr0[static_cast<long>(x1 + (12L*x0))] = tmp_acc0;
                }
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (2364L*x0)), static_cast<long>(12L), tmp1, 8);
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (2364L*x0)), static_cast<long>(12L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + x1_inner + (12L*x0))];
                        auto tmp3 = tmp0 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        tmp7.store(in_out_ptr0 + static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_out_ptr0[static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (12L*x2) + (2364L*x0)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (12L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp5 = tmp2 - tmp4;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp5.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (197L*x1) + (197L*x1_inner) + (2364L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(8L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x2 + (197L*x1) + (2364L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x2) + (2364L*x0))];
                    auto tmp3 = out_ptr0[static_cast<long>(x1 + (12L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                    auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                    in_out_ptr0[static_cast<long>(x2 + (197L*x1) + (2364L*x0))] = tmp5;
                }
            }
        }
    }
}
''')


cpp_fused_view_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.1767766952966369);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_clone_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp6[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x3 + (197L*x4) + (6304L*x2) + (75648L*x1) + (605184L*x0)), static_cast<long>(197L), tmp6, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp7 = at::vec::Vectorized<float>::loadu(tmp6 + static_cast<long>(8L*x3_inner));
                                        return tmp7;
                                    }
                                    ;
                                    auto tmp8 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp9 = tmp0 >= tmp3;
                                    auto tmp10 = static_cast<int>(16);
                                    auto tmp11 = tmp0 < tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp13 = masked_load(in_ptr1 + static_cast<long>((-605184L) + x4 + (32L*x3) + (32L*x3_inner) + (6304L*x2) + (75648L*x1) + (605184L*x0)), to_float_mask(tmp9));
                                        return tmp13;
                                    }
                                    ;
                                    auto tmp14 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp9));
                                    auto tmp15 = to_float_mask(tmp4);
                                    auto tmp16 = decltype(tmp8)::blendv(tmp14, tmp8, tmp15);
                                    tmp16.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (768L*x3) + (768L*x3_inner) + (151296L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(197L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x3 + (197L*x4) + (6304L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = [&]
                                {
                                    auto tmp12 = in_ptr1[static_cast<long>((-605184L) + x4 + (32L*x3) + (6304L*x2) + (75648L*x1) + (605184L*x0))];
                                    return tmp12;
                                }
                                ;
                                auto tmp13 = tmp8 ? tmp11() : static_cast<decltype(tmp11())>(0.0);
                                auto tmp14 = tmp4 ? tmp7 : tmp13;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (768L*x3) + (151296L*x1))] = tmp14;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_native_layer_norm_backward_slice_backward_sum_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                        {
                            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                            auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                            auto tmp21 = in_ptr4[static_cast<long>(x1 + (197L*x0))];
                            auto tmp24 = in_ptr5[static_cast<long>(x1 + (197L*x0))];
                            auto tmp0 = c10::convert<int>(x1);
                            auto tmp1 = static_cast<int>(1);
                            auto tmp2 = tmp0 < tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp2));
                                return tmp4;
                            }
                            ;
                            auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = to_float_mask(tmp2);
                            auto tmp8 = at::vec::Vectorized<float>(tmp6);
                            auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                            auto tmp11 = tmp9 + tmp10;
                            auto tmp13 = tmp11 * tmp12;
                            auto tmp14 = [&]
                            {
                                auto tmp15 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp2));
                                return tmp15;
                            }
                            ;
                            auto tmp16 = decltype(tmp14())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp14(), to_float_mask(tmp2));
                            auto tmp17 = decltype(tmp16)::blendv(tmp8, tmp16, tmp7);
                            auto tmp18 = tmp17 + tmp10;
                            auto tmp19 = tmp18 * tmp12;
                            auto tmp22 = at::vec::Vectorized<float>(tmp21);
                            auto tmp23 = tmp20 - tmp22;
                            auto tmp25 = at::vec::Vectorized<float>(tmp24);
                            auto tmp26 = tmp23 * tmp25;
                            auto tmp27 = tmp19 * tmp26;
                            tmp_acc0_vec = tmp_acc0_vec + tmp13;
                            tmp_acc1_vec = tmp_acc1_vec + tmp27;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr0[static_cast<long>(x1 + (197L*x0))] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr1[static_cast<long>(x1 + (197L*x0))] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(197L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp22 = in_ptr5[static_cast<long>(x1 + (197L*x0))];
                        auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                        auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2));
                        auto tmp37 = out_ptr0[static_cast<long>(x1 + (197L*x0))];
                        auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                        auto tmp41 = in_ptr4[static_cast<long>(x1 + (197L*x0))];
                        auto tmp46 = out_ptr1[static_cast<long>(x1 + (197L*x0))];
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)), to_float_mask(tmp2));
                            auto tmp5 = c10::convert<int>(x1);
                            auto tmp6 = static_cast<int>(1);
                            auto tmp7 = tmp5 < tmp6;
                            auto tmp9 = tmp7 & tmp2;
                            auto tmp8 = [&]
                            {
                                auto tmp10 = masked_load(in_ptr6 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp9));
                                return tmp10;
                            }
                            ;
                            auto tmp11 = decltype(tmp8())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp8(), to_float_mask(tmp9));
                            auto tmp12 = static_cast<float>(0.0);
                            auto tmp13 = to_float_mask(tmp7);
                            auto tmp14 = at::vec::Vectorized<float>(tmp12);
                            auto tmp15 = decltype(tmp11)::blendv(tmp14, tmp11, tmp13);
                            auto tmp16 = tmp4 + tmp15;
                            return tmp16;
                        }
                        ;
                        auto tmp17 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp18 = static_cast<float>(0.0);
                        auto tmp19 = to_float_mask(tmp2);
                        auto tmp20 = at::vec::Vectorized<float>(tmp18);
                        auto tmp21 = decltype(tmp17)::blendv(tmp20, tmp17, tmp19);
                        auto tmp23 = static_cast<float>(384.0);
                        auto tmp24 = tmp22 / tmp23;
                        auto tmp25 = tmp0 < tmp1;
                        auto tmp26 = [&]
                        {
                            auto tmp27 = masked_load(in_ptr0 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp25));
                            return tmp27;
                        }
                        ;
                        auto tmp28 = decltype(tmp26())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp26(), to_float_mask(tmp25));
                        auto tmp29 = to_float_mask(tmp25);
                        auto tmp30 = decltype(tmp28)::blendv(tmp20, tmp28, tmp29);
                        auto tmp32 = tmp30 + tmp31;
                        auto tmp34 = tmp32 * tmp33;
                        auto tmp35 = at::vec::Vectorized<float>(tmp23);
                        auto tmp36 = tmp34 * tmp35;
                        auto tmp38 = at::vec::Vectorized<float>(tmp37);
                        auto tmp39 = tmp36 - tmp38;
                        auto tmp42 = at::vec::Vectorized<float>(tmp41);
                        auto tmp43 = tmp40 - tmp42;
                        auto tmp44 = at::vec::Vectorized<float>(tmp22);
                        auto tmp45 = tmp43 * tmp44;
                        auto tmp47 = at::vec::Vectorized<float>(tmp46);
                        auto tmp48 = tmp45 * tmp47;
                        auto tmp49 = tmp39 - tmp48;
                        auto tmp50 = at::vec::Vectorized<float>(tmp24);
                        auto tmp51 = tmp50 * tmp49;
                        auto tmp52 = tmp21 + tmp51;
                        tmp52.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75648L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (75648L*x1)));
                            auto tmp2 = static_cast<int>(0);
                            auto tmp3 = static_cast<int>(1);
                            auto tmp4 = tmp2 < tmp3;
                            auto tmp5 = [&]
                            {
                                auto tmp6 = masked_load(in_ptr7 + static_cast<long>(x0 + (384L*x1)), to_float_mask(tmp4));
                                return tmp6;
                            }
                            ;
                            auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = to_float_mask(tmp4);
                            auto tmp10 = at::vec::Vectorized<float>(tmp8);
                            auto tmp11 = decltype(tmp7)::blendv(tmp10, tmp7, tmp9);
                            auto tmp12 = tmp1 + tmp11;
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                            tmp_acc1_vec = tmp_acc1_vec + tmp12;
                        }
                        tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_clone_native_layer_norm_native_layer_norm_backward_slice_backward_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(197L); x2+=static_cast<long>(1L))
                        {
                            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x2) + (75648L*x1)));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75648L*x1)));
                            auto tmp13 = in_ptr3[static_cast<long>(x2 + (197L*x1))];
                            auto tmp16 = in_ptr4[static_cast<long>(x2 + (197L*x1))];
                            auto tmp0 = c10::convert<int>(x2);
                            auto tmp1 = static_cast<int>(1);
                            auto tmp2 = tmp0 < tmp1;
                            auto tmp3 = [&]
                            {
                                auto tmp4 = masked_load(in_ptr0 + static_cast<long>(x0 + (384L*x1)), to_float_mask(tmp2));
                                return tmp4;
                            }
                            ;
                            auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                            auto tmp6 = static_cast<float>(0.0);
                            auto tmp7 = to_float_mask(tmp2);
                            auto tmp8 = at::vec::Vectorized<float>(tmp6);
                            auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                            auto tmp11 = tmp9 + tmp10;
                            auto tmp14 = at::vec::Vectorized<float>(tmp13);
                            auto tmp15 = tmp12 - tmp14;
                            auto tmp17 = at::vec::Vectorized<float>(tmp16);
                            auto tmp18 = tmp15 * tmp17;
                            auto tmp19 = tmp11 * tmp18;
                            auto tmp20 = [&]
                            {
                                auto tmp21 = masked_load(in_ptr0 + static_cast<long>(x0 + (384L*x1)), to_float_mask(tmp2));
                                return tmp21;
                            }
                            ;
                            auto tmp22 = decltype(tmp20())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp20(), to_float_mask(tmp2));
                            auto tmp23 = decltype(tmp22)::blendv(tmp8, tmp22, tmp7);
                            auto tmp24 = tmp23 + tmp10;
                            tmp_acc0_vec = tmp_acc0_vec + tmp19;
                            tmp_acc1_vec = tmp_acc1_vec + tmp24;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(384L + x2 + (384L*x1) + (75648L*x0)));
                        auto tmp1 = c10::convert<int>(1L + x1);
                        auto tmp2 = static_cast<int>(1);
                        auto tmp3 = tmp1 < tmp2;
                        auto tmp4 = [&]
                        {
                            auto tmp5 = masked_load(in_ptr6 + static_cast<long>(x2 + (384L*x0)), to_float_mask(tmp3));
                            return tmp5;
                        }
                        ;
                        auto tmp6 = decltype(tmp4())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp4(), to_float_mask(tmp3));
                        auto tmp7 = static_cast<float>(0.0);
                        auto tmp8 = to_float_mask(tmp3);
                        auto tmp9 = at::vec::Vectorized<float>(tmp7);
                        auto tmp10 = decltype(tmp6)::blendv(tmp9, tmp6, tmp8);
                        auto tmp11 = tmp0 + tmp10;
                        tmp11.store(out_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(384L + x3 + (384L*x2) + (5376L*x1) + (75648L*x0)));
                            auto tmp12 = in_ptr6[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp13 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp19 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp22 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp23 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp1 = c10::convert<int>(1L + x2 + (14L*x1));
                            auto tmp2 = static_cast<int>(1);
                            auto tmp3 = tmp1 < tmp2;
                            auto tmp4 = [&]
                            {
                                auto tmp5 = masked_load(in_ptr5 + static_cast<long>(x3 + (384L*x0)), to_float_mask(tmp3));
                                return tmp5;
                            }
                            ;
                            auto tmp6 = decltype(tmp4())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp4(), to_float_mask(tmp3));
                            auto tmp7 = static_cast<float>(0.0);
                            auto tmp8 = to_float_mask(tmp3);
                            auto tmp9 = at::vec::Vectorized<float>(tmp7);
                            auto tmp10 = decltype(tmp6)::blendv(tmp9, tmp6, tmp8);
                            auto tmp11 = tmp0 + tmp10;
                            auto tmp15 = tmp13 * tmp14;
                            auto tmp16 = static_cast<float>(384.0);
                            auto tmp17 = at::vec::Vectorized<float>(tmp16);
                            auto tmp18 = tmp15 * tmp17;
                            auto tmp20 = at::vec::Vectorized<float>(tmp19);
                            auto tmp21 = tmp18 - tmp20;
                            auto tmp24 = at::vec::Vectorized<float>(tmp23);
                            auto tmp25 = tmp22 * tmp24;
                            auto tmp26 = tmp21 - tmp25;
                            auto tmp27 = at::vec::Vectorized<float>(tmp12);
                            auto tmp28 = tmp27 * tmp26;
                            auto tmp29 = tmp11 + tmp28;
                            tmp29.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1806336L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1152L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1152L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_sum_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(32L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (32L*x1) + (384L*x2) + (75264L*x0)));
                            tmp0.store(out_ptr1 + static_cast<long>(x3 + (32L*x2) + (6272L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                            #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                            for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                tmp_acc0 = tmp_acc0 + tmp2;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(12L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr1[static_cast<long>(x1 + (12L*x3) + (12L*x3_inner) + (2352L*x2) + (460992L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = at::vec::Vectorized<float>(tmp3);
                            auto tmp5 = tmp1 * tmp4;
                            auto tmp6 = tmp2 - tmp5;
                            auto tmp7 = static_cast<float>(0.1767766952966369);
                            auto tmp8 = at::vec::Vectorized<float>(tmp7);
                            auto tmp9 = tmp6 * tmp8;
                            tmp9.store(in_out_ptr0 + static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0)));
                        }
                        #pragma omp simd simdlen(4) 
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))];
                            auto tmp1 = in_ptr1[static_cast<long>(x1 + (12L*x3) + (2352L*x2) + (460992L*x0))];
                            auto tmp3 = out_ptr0[static_cast<long>(x2 + (196L*x1) + (2352L*x0))];
                            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                            auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                            auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                            auto tmp6 = static_cast<float>(0.1767766952966369);
                            auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                            in_out_ptr0[static_cast<long>(x3 + (196L*x2) + (38416L*x1) + (460992L*x0))] = tmp7;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(12L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(8L))
                            {
                                float tmp13[8*8] __attribute__ ((aligned (8)));
                                at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0)), static_cast<long>(196L), tmp13, 8);
                                for (long x3_inner = 0; x3_inner < 8; x3_inner++)
                                {
                                    auto tmp0 = c10::convert<int>(x1 + (8L*x0));
                                    auto tmp1 = static_cast<int>(0);
                                    auto tmp2 = tmp0 >= tmp1;
                                    auto tmp3 = static_cast<int>(8);
                                    auto tmp4 = tmp0 < tmp3;
                                    auto tmp5 = [&]
                                    {
                                        auto tmp6 = masked_load(in_ptr0 + static_cast<long>(x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp4));
                                        return tmp6;
                                    }
                                    ;
                                    auto tmp7 = decltype(tmp5())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp5(), to_float_mask(tmp4));
                                    auto tmp8 = tmp0 >= tmp3;
                                    auto tmp9 = static_cast<int>(16);
                                    auto tmp10 = tmp0 < tmp9;
                                    auto tmp11 = tmp8 & tmp10;
                                    auto tmp12 = [&]
                                    {
                                        auto tmp14 = at::vec::Vectorized<float>::loadu(tmp13 + static_cast<long>(8L*x3_inner));
                                        return tmp14;
                                    }
                                    ;
                                    auto tmp15 = decltype(tmp12())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp12(), to_float_mask(tmp11));
                                    auto tmp16 = tmp0 >= tmp9;
                                    auto tmp17 = static_cast<int>(24);
                                    auto tmp18 = tmp0 < tmp17;
                                    auto tmp19 = [&]
                                    {
                                        auto tmp20 = masked_load(in_ptr2 + static_cast<long>((-1204224L) + x4 + (32L*x3) + (32L*x3_inner) + (6272L*x2) + (75264L*x1) + (602112L*x0)), to_float_mask(tmp16));
                                        return tmp20;
                                    }
                                    ;
                                    auto tmp21 = decltype(tmp19())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp19(), to_float_mask(tmp16));
                                    auto tmp22 = to_float_mask(tmp11);
                                    auto tmp23 = decltype(tmp15)::blendv(tmp21, tmp15, tmp22);
                                    auto tmp24 = to_float_mask(tmp4);
                                    auto tmp25 = decltype(tmp7)::blendv(tmp23, tmp7, tmp24);
                                    tmp25.store(out_ptr0 + static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (1152L*x3_inner) + (225792L*x1)));
                                }
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = c10::convert<long>(x1 + (8L*x0));
                                auto tmp1 = static_cast<long>(0);
                                auto tmp2 = tmp0 >= tmp1;
                                auto tmp3 = static_cast<long>(8);
                                auto tmp4 = tmp0 < tmp3;
                                auto tmp5 = [&]
                                {
                                    auto tmp6 = in_ptr0[static_cast<long>(x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp6;
                                }
                                ;
                                auto tmp7 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                                auto tmp8 = tmp0 >= tmp3;
                                auto tmp9 = static_cast<long>(16);
                                auto tmp10 = tmp0 < tmp9;
                                auto tmp11 = tmp8 & tmp10;
                                auto tmp12 = [&]
                                {
                                    auto tmp13 = in_ptr1[static_cast<long>((-602112L) + x3 + (196L*x4) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp13;
                                }
                                ;
                                auto tmp14 = tmp11 ? tmp12() : static_cast<decltype(tmp12())>(0.0);
                                auto tmp15 = tmp0 >= tmp9;
                                auto tmp16 = static_cast<long>(24);
                                auto tmp17 = tmp0 < tmp16;
                                auto tmp18 = [&]
                                {
                                    auto tmp19 = in_ptr2[static_cast<long>((-1204224L) + x4 + (32L*x3) + (6272L*x2) + (75264L*x1) + (602112L*x0))];
                                    return tmp19;
                                }
                                ;
                                auto tmp20 = tmp15 ? tmp18() : static_cast<decltype(tmp18())>(0.0);
                                auto tmp21 = tmp11 ? tmp14 : tmp20;
                                auto tmp22 = tmp4 ? tmp7 : tmp21;
                                out_ptr0[static_cast<long>(x4 + (32L*x2) + (384L*x0) + (1152L*x3) + (225792L*x1))] = tmp22;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x3) + (5376L*x2) + (75264L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr2[static_cast<long>(x2 + (14L*x0) + (14L*x0_inner) + (5376L*x3) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(384L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp1 = in_ptr3[static_cast<long>(x1 + (14L*x2) + (196L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3));
                            auto tmp8 = out_ptr0[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr2[static_cast<long>(x1 + (14L*x3) + (14L*x3_inner) + (5376L*x2) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr1[static_cast<long>(x2 + (14L*x1) + (196L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(384.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (384L*x2) + (5376L*x1) + (75264L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(75264L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (75264L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3612672L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(576L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (576L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (192L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (28L*x3) + (28L*x3_inner) + (5376L*x2) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x3) + (5376L*x2) + (150528L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (28L*x0) + (28L*x0_inner) + (5376L*x3) + (150528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (28L*x3) + (28L*x3_inner) + (5376L*x2) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(192.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const long* in_ptr0,
                       const long* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(9L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>((14L*(c10::div_floor_integer(x3, 3L))) + (c10::div_floor_integer(x2, 14L)))];
                                auto tmp4 = in_ptr1[static_cast<long>((14L*(static_cast<long>(x3) % static_cast<long>(3L))) + (static_cast<long>(x2) % static_cast<long>(14L)))];
                                auto tmp1 = decltype(tmp0)(tmp0 + 30);
                                auto tmp2 = tmp0 < 0;
                                auto tmp3 = tmp2 ? tmp1 : tmp0;
                                TORCH_CHECK((0 <= tmp3) & (tmp3 < 30L), "index out of bounds: 0 <= tmp3 < 30L")
                                auto tmp5 = decltype(tmp4)(tmp4 + 30);
                                auto tmp6 = tmp4 < 0;
                                auto tmp7 = tmp6 ? tmp5 : tmp4;
                                TORCH_CHECK((0 <= tmp7) & (tmp7 < 30L), "index out of bounds: 0 <= tmp7 < 30L")
                                auto tmp8 = c10::convert<long>((-1L) + tmp3);
                                auto tmp9 = static_cast<long>(0);
                                auto tmp10 = tmp8 >= tmp9;
                                auto tmp11 = static_cast<long>(28);
                                auto tmp12 = tmp8 < tmp11;
                                auto tmp13 = c10::convert<long>((-1L) + tmp7);
                                auto tmp14 = tmp13 >= tmp9;
                                auto tmp15 = tmp13 < tmp11;
                                auto tmp16 = tmp10 & tmp12;
                                auto tmp17 = tmp16 & tmp14;
                                auto tmp18 = tmp17 & tmp15;
                                auto tmp19 = [&]
                                {
                                    auto tmp20 = in_ptr2[static_cast<long>((-5568L) + x4 + (32L*x1) + (192L*tmp7) + (5376L*tmp3) + (150528L*x0))];
                                    return tmp20;
                                }
                                ;
                                auto tmp21 = tmp18 ? tmp19() : static_cast<decltype(tmp19())>(0.0);
                                out_ptr0[static_cast<long>(x4 + (32L*x3) + (288L*x2) + (56448L*x1) + (338688L*x0))] = tmp21;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_clone_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(84672L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (9L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (9L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(8L); x1<static_cast<long>(9L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (9L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (9L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(9L); x3+=static_cast<long>(1L))
                        {
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(8L); x4+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0)));
                                auto tmp3 = out_ptr0[static_cast<long>(x3 + (9L*x2) + (1764L*x1) + (10584L*x0))];
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = at::vec::Vectorized<float>(tmp3);
                                auto tmp5 = tmp1 * tmp4;
                                auto tmp6 = tmp2 - tmp5;
                                auto tmp7 = static_cast<float>(0.1767766952966369);
                                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                auto tmp9 = tmp6 * tmp8;
                                tmp9.store(out_ptr1 + static_cast<long>(x4 + (9L*x3) + (81L*x1) + (486L*x2) + (95256L*x0)));
                            }
                            #pragma omp simd simdlen(4) 
                            for(long x4=static_cast<long>(8L); x4<static_cast<long>(9L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0))];
                                auto tmp3 = out_ptr0[static_cast<long>(x3 + (9L*x2) + (1764L*x1) + (10584L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                                auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                                auto tmp6 = static_cast<float>(0.1767766952966369);
                                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                                out_ptr1[static_cast<long>(x4 + (9L*x3) + (81L*x1) + (486L*x2) + (95256L*x0))] = tmp7;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_col2im_sum_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto out_ptr3 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(480L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (486L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(480L); x0<static_cast<long>(486L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (486L*x1))];
                        tmp_acc0 = tmp_acc0 + tmp0;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1382400L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                tmp0.store(out_ptr1 + static_cast<long>(x0));
                tmp0.store(out_ptr2 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr2 + static_cast<long>(x1 + (32L*x2) + (288L*x3) + (56448L*x0)), static_cast<long>(288L), tmp0, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                                tmp1.store(out_ptr3 + static_cast<long>(x3 + (196L*x2) + (1764L*x1) + (1764L*x1_inner) + (56448L*x0)));
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (32L*x2) + (288L*x3) + (56448L*x0)));
                            { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp0.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) out_ptr3[static_cast<long>(x3 + (196L*x2) + (1764L*x1) + (1764L*x1_inner) + (56448L*x0))] = tmpbuf[x1_inner]; }
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(9L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x2 + (196L*x1) + (1764L*x0)));
                        tmp0.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (1764L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr3[static_cast<long>(x2 + (196L*x1) + (1764L*x0))];
                        in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (1764L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = c10::convert<int>(1L + (static_cast<long>(c10::div_floor_integer(x0, 28L)) % static_cast<long>(28L)));
                    auto tmp1 = static_cast<int>(0);
                    auto tmp2 = tmp0 >= tmp1;
                    auto tmp3 = static_cast<int>(30);
                    auto tmp4 = tmp0 < tmp3;
                    auto tmp5 = c10::convert<int>(1L + (static_cast<long>(x0) % static_cast<long>(28L)));
                    auto tmp6 = tmp5 >= tmp1;
                    auto tmp7 = tmp5 < tmp3;
                    auto tmp8 = tmp2 & tmp4;
                    auto tmp9 = tmp8 & tmp6;
                    auto tmp10 = tmp9 & tmp7;
                    auto tmp11 = [&]
                    {
                        auto tmp12 = masked_load(in_ptr0 + static_cast<long>(5952L + x1 + (192L*(static_cast<long>(x0) % static_cast<long>(28L))) + (5760L*(static_cast<long>(c10::div_floor_integer(x0, 28L)) % static_cast<long>(28L))) + (172800L*(c10::div_floor_integer(x0, 784L)))), to_float_mask(tmp10));
                        return tmp12;
                    }
                    ;
                    auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                    tmp13.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            float tmp_acc0 = 0;
                            float tmp_acc1 = 0;
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x0))];
                                auto tmp11 = in_ptr1[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                                auto tmp13 = in_ptr2[static_cast<long>(x3)];
                                auto tmp15 = in_ptr3[static_cast<long>(x1 + (28L*x3) + (5376L*x2) + (150528L*x0))];
                                auto tmp1 = tmp0 / 4;
                                auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                                auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))));
                                auto tmp4 = tmp2 < tmp3;
                                auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                                auto tmp7 = tmp5 < tmp6;
                                auto tmp8 = tmp4 & tmp7;
                                auto tmp9 = static_cast<float>(0.0);
                                auto tmp10 = tmp8 ? tmp1 : tmp9;
                                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                                auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                                tmp_acc0 = tmp_acc0 + tmp14;
                                tmp_acc1 = tmp_acc1 + tmp16;
                            }
                            out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp_acc0;
                            out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp_acc1;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x0 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x3, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x3, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x1))];
                                auto tmp11 = in_ptr1[static_cast<long>(x0 + (192L*x3) + (5376L*x2) + (150528L*x1))];
                                auto tmp13 = in_ptr3[static_cast<long>(x2 + (28L*x0) + (5376L*x3) + (150528L*x1))];
                                auto tmp1 = tmp0 / 4;
                                auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                                auto tmp4 = tmp2 < tmp3;
                                auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                                auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x3, 2L))));
                                auto tmp7 = tmp5 < tmp6;
                                auto tmp8 = tmp4 & tmp7;
                                auto tmp9 = static_cast<float>(0.0);
                                auto tmp10 = tmp8 ? tmp1 : tmp9;
                                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                                auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                                tmp_acc0 = tmp_acc0 + tmp14;
                                tmp_acc1 = tmp_acc1 + tmp12;
                            }
                        }
                    }
                    out_ptr2[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr3[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp2 = in_ptr0[static_cast<long>(x3 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x0))];
                            auto tmp13 = in_ptr1[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                            auto tmp15 = in_ptr2[static_cast<long>(x3)];
                            auto tmp19 = out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp21 = in_ptr3[static_cast<long>(x1 + (28L*x3) + (5376L*x2) + (150528L*x0))];
                            auto tmp22 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp3 = tmp2 / 4;
                            auto tmp4 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                            auto tmp5 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))));
                            auto tmp6 = tmp4 < tmp5;
                            auto tmp7 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp8 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                            auto tmp9 = tmp7 < tmp8;
                            auto tmp10 = tmp6 & tmp9;
                            auto tmp11 = static_cast<float>(0.0);
                            auto tmp12 = tmp10 ? tmp3 : tmp11;
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                            auto tmp17 = static_cast<float>(192.0);
                            auto tmp18 = decltype(tmp16)(tmp16 * tmp17);
                            auto tmp20 = decltype(tmp18)(tmp18 - tmp19);
                            auto tmp23 = decltype(tmp21)(tmp21 * tmp22);
                            auto tmp24 = decltype(tmp20)(tmp20 - tmp23);
                            auto tmp25 = decltype(tmp1)(tmp1 * tmp24);
                            auto tmp26 = decltype(tmp0)(tmp0 + tmp25);
                            in_out_ptr0[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))] = tmp26;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3612672L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(576L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (576L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (192L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (28L*x3) + (28L*x3_inner) + (5376L*x2) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x3) + (5376L*x2) + (150528L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (28L*x0) + (28L*x0_inner) + (5376L*x3) + (150528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (28L*x3) + (28L*x3_inner) + (5376L*x2) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(192.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const long* in_ptr0,
                       const long* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(9L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>((14L*(c10::div_floor_integer(x3, 3L))) + (c10::div_floor_integer(x2, 14L)))];
                                auto tmp4 = in_ptr1[static_cast<long>((14L*(static_cast<long>(x3) % static_cast<long>(3L))) + (static_cast<long>(x2) % static_cast<long>(14L)))];
                                auto tmp1 = decltype(tmp0)(tmp0 + 30);
                                auto tmp2 = tmp0 < 0;
                                auto tmp3 = tmp2 ? tmp1 : tmp0;
                                TORCH_CHECK((0 <= tmp3) & (tmp3 < 30L), "index out of bounds: 0 <= tmp3 < 30L")
                                auto tmp5 = decltype(tmp4)(tmp4 + 30);
                                auto tmp6 = tmp4 < 0;
                                auto tmp7 = tmp6 ? tmp5 : tmp4;
                                TORCH_CHECK((0 <= tmp7) & (tmp7 < 30L), "index out of bounds: 0 <= tmp7 < 30L")
                                auto tmp8 = c10::convert<long>((-1L) + tmp3);
                                auto tmp9 = static_cast<long>(0);
                                auto tmp10 = tmp8 >= tmp9;
                                auto tmp11 = static_cast<long>(28);
                                auto tmp12 = tmp8 < tmp11;
                                auto tmp13 = c10::convert<long>((-1L) + tmp7);
                                auto tmp14 = tmp13 >= tmp9;
                                auto tmp15 = tmp13 < tmp11;
                                auto tmp16 = tmp10 & tmp12;
                                auto tmp17 = tmp16 & tmp14;
                                auto tmp18 = tmp17 & tmp15;
                                auto tmp19 = [&]
                                {
                                    auto tmp20 = in_ptr2[static_cast<long>((-5568L) + x4 + (32L*x1) + (192L*tmp7) + (5376L*tmp3) + (150528L*x0))];
                                    return tmp20;
                                }
                                ;
                                auto tmp21 = tmp18 ? tmp19() : static_cast<decltype(tmp19())>(0.0);
                                out_ptr0[static_cast<long>(x4 + (32L*x3) + (288L*x2) + (56448L*x1) + (338688L*x0))] = tmp21;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_clone_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(84672L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (9L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (9L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(8L); x1<static_cast<long>(9L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (9L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (9L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(9L); x3+=static_cast<long>(1L))
                        {
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(8L); x4+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0)));
                                auto tmp3 = out_ptr0[static_cast<long>(x3 + (9L*x2) + (1764L*x1) + (10584L*x0))];
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = at::vec::Vectorized<float>(tmp3);
                                auto tmp5 = tmp1 * tmp4;
                                auto tmp6 = tmp2 - tmp5;
                                auto tmp7 = static_cast<float>(0.1767766952966369);
                                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                auto tmp9 = tmp6 * tmp8;
                                tmp9.store(out_ptr1 + static_cast<long>(x4 + (9L*x3) + (81L*x1) + (486L*x2) + (95256L*x0)));
                            }
                            #pragma omp simd simdlen(4) 
                            for(long x4=static_cast<long>(8L); x4<static_cast<long>(9L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0))];
                                auto tmp3 = out_ptr0[static_cast<long>(x3 + (9L*x2) + (1764L*x1) + (10584L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                                auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                                auto tmp6 = static_cast<float>(0.1767766952966369);
                                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                                out_ptr1[static_cast<long>(x4 + (9L*x3) + (81L*x1) + (486L*x2) + (95256L*x0))] = tmp7;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_col2im_sum_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(480L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (486L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(480L); x0<static_cast<long>(486L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (486L*x1))];
                        tmp_acc0 = tmp_acc0 + tmp0;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (32L*x2) + (288L*x3) + (56448L*x0)), static_cast<long>(288L), tmp0, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                                tmp1.store(out_ptr1 + static_cast<long>(x3 + (196L*x2) + (1764L*x1) + (1764L*x1_inner) + (56448L*x0)));
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (32L*x2) + (288L*x3) + (56448L*x0)));
                            { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp0.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) out_ptr1[static_cast<long>(x3 + (196L*x2) + (1764L*x1) + (1764L*x1_inner) + (56448L*x0))] = tmpbuf[x1_inner]; }
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(9L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x2 + (196L*x1) + (1764L*x0)));
                        tmp0.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (1764L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (1764L*x0))];
                        in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (1764L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = c10::convert<int>(1L + (static_cast<long>(c10::div_floor_integer(x0, 28L)) % static_cast<long>(28L)));
                    auto tmp1 = static_cast<int>(0);
                    auto tmp2 = tmp0 >= tmp1;
                    auto tmp3 = static_cast<int>(30);
                    auto tmp4 = tmp0 < tmp3;
                    auto tmp5 = c10::convert<int>(1L + (static_cast<long>(x0) % static_cast<long>(28L)));
                    auto tmp6 = tmp5 >= tmp1;
                    auto tmp7 = tmp5 < tmp3;
                    auto tmp8 = tmp2 & tmp4;
                    auto tmp9 = tmp8 & tmp6;
                    auto tmp10 = tmp9 & tmp7;
                    auto tmp11 = [&]
                    {
                        auto tmp12 = masked_load(in_ptr0 + static_cast<long>(5952L + x1 + (192L*(static_cast<long>(x0) % static_cast<long>(28L))) + (5760L*(static_cast<long>(c10::div_floor_integer(x0, 28L)) % static_cast<long>(28L))) + (172800L*(c10::div_floor_integer(x0, 784L)))), to_float_mask(tmp10));
                        return tmp12;
                    }
                    ;
                    auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                    tmp13.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            float tmp_acc0 = 0;
                            float tmp_acc1 = 0;
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x0))];
                                auto tmp11 = in_ptr1[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                                auto tmp13 = in_ptr2[static_cast<long>(x3)];
                                auto tmp15 = in_ptr3[static_cast<long>(x1 + (28L*x3) + (5376L*x2) + (150528L*x0))];
                                auto tmp1 = tmp0 / 4;
                                auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                                auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))));
                                auto tmp4 = tmp2 < tmp3;
                                auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                                auto tmp7 = tmp5 < tmp6;
                                auto tmp8 = tmp4 & tmp7;
                                auto tmp9 = static_cast<float>(0.0);
                                auto tmp10 = tmp8 ? tmp1 : tmp9;
                                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                                auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                                tmp_acc0 = tmp_acc0 + tmp14;
                                tmp_acc1 = tmp_acc1 + tmp16;
                            }
                            out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp_acc0;
                            out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp_acc1;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x0 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x3, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x3, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x1))];
                                auto tmp11 = in_ptr1[static_cast<long>(x0 + (192L*x3) + (5376L*x2) + (150528L*x1))];
                                auto tmp13 = in_ptr3[static_cast<long>(x2 + (28L*x0) + (5376L*x3) + (150528L*x1))];
                                auto tmp1 = tmp0 / 4;
                                auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                                auto tmp4 = tmp2 < tmp3;
                                auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                                auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x3, 2L))));
                                auto tmp7 = tmp5 < tmp6;
                                auto tmp8 = tmp4 & tmp7;
                                auto tmp9 = static_cast<float>(0.0);
                                auto tmp10 = tmp8 ? tmp1 : tmp9;
                                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                                auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                                tmp_acc0 = tmp_acc0 + tmp14;
                                tmp_acc1 = tmp_acc1 + tmp12;
                            }
                        }
                    }
                    out_ptr2[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr3[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp2 = in_ptr0[static_cast<long>(x3 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x0))];
                            auto tmp13 = in_ptr1[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                            auto tmp15 = in_ptr2[static_cast<long>(x3)];
                            auto tmp19 = out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp21 = in_ptr3[static_cast<long>(x1 + (28L*x3) + (5376L*x2) + (150528L*x0))];
                            auto tmp22 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp3 = tmp2 / 4;
                            auto tmp4 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                            auto tmp5 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))));
                            auto tmp6 = tmp4 < tmp5;
                            auto tmp7 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp8 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                            auto tmp9 = tmp7 < tmp8;
                            auto tmp10 = tmp6 & tmp9;
                            auto tmp11 = static_cast<float>(0.0);
                            auto tmp12 = tmp10 ? tmp3 : tmp11;
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                            auto tmp17 = static_cast<float>(192.0);
                            auto tmp18 = decltype(tmp16)(tmp16 * tmp17);
                            auto tmp20 = decltype(tmp18)(tmp18 - tmp19);
                            auto tmp23 = decltype(tmp21)(tmp21 * tmp22);
                            auto tmp24 = decltype(tmp20)(tmp20 - tmp23);
                            auto tmp25 = decltype(tmp1)(tmp1 * tmp24);
                            auto tmp26 = decltype(tmp0)(tmp0 + tmp25);
                            in_out_ptr0[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))] = tmp26;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3612672L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(576L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (576L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (192L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (28L*x3) + (28L*x3_inner) + (5376L*x2) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x3) + (5376L*x2) + (150528L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (28L*x0) + (28L*x0_inner) + (5376L*x3) + (150528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (28L*x3) + (28L*x3_inner) + (5376L*x2) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(192.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const long* in_ptr0,
                       const long* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(9L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>((14L*(c10::div_floor_integer(x3, 3L))) + (c10::div_floor_integer(x2, 14L)))];
                                auto tmp4 = in_ptr1[static_cast<long>((14L*(static_cast<long>(x3) % static_cast<long>(3L))) + (static_cast<long>(x2) % static_cast<long>(14L)))];
                                auto tmp1 = decltype(tmp0)(tmp0 + 30);
                                auto tmp2 = tmp0 < 0;
                                auto tmp3 = tmp2 ? tmp1 : tmp0;
                                TORCH_CHECK((0 <= tmp3) & (tmp3 < 30L), "index out of bounds: 0 <= tmp3 < 30L")
                                auto tmp5 = decltype(tmp4)(tmp4 + 30);
                                auto tmp6 = tmp4 < 0;
                                auto tmp7 = tmp6 ? tmp5 : tmp4;
                                TORCH_CHECK((0 <= tmp7) & (tmp7 < 30L), "index out of bounds: 0 <= tmp7 < 30L")
                                auto tmp8 = c10::convert<long>((-1L) + tmp3);
                                auto tmp9 = static_cast<long>(0);
                                auto tmp10 = tmp8 >= tmp9;
                                auto tmp11 = static_cast<long>(28);
                                auto tmp12 = tmp8 < tmp11;
                                auto tmp13 = c10::convert<long>((-1L) + tmp7);
                                auto tmp14 = tmp13 >= tmp9;
                                auto tmp15 = tmp13 < tmp11;
                                auto tmp16 = tmp10 & tmp12;
                                auto tmp17 = tmp16 & tmp14;
                                auto tmp18 = tmp17 & tmp15;
                                auto tmp19 = [&]
                                {
                                    auto tmp20 = in_ptr2[static_cast<long>((-5568L) + x4 + (32L*x1) + (192L*tmp7) + (5376L*tmp3) + (150528L*x0))];
                                    return tmp20;
                                }
                                ;
                                auto tmp21 = tmp18 ? tmp19() : static_cast<decltype(tmp19())>(0.0);
                                out_ptr0[static_cast<long>(x4 + (32L*x3) + (288L*x2) + (56448L*x1) + (338688L*x0))] = tmp21;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_clone_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(84672L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (9L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (9L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(8L); x1<static_cast<long>(9L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (9L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (9L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(9L); x3+=static_cast<long>(1L))
                        {
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(8L); x4+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0)));
                                auto tmp3 = out_ptr0[static_cast<long>(x3 + (9L*x2) + (1764L*x1) + (10584L*x0))];
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = at::vec::Vectorized<float>(tmp3);
                                auto tmp5 = tmp1 * tmp4;
                                auto tmp6 = tmp2 - tmp5;
                                auto tmp7 = static_cast<float>(0.1767766952966369);
                                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                auto tmp9 = tmp6 * tmp8;
                                tmp9.store(out_ptr1 + static_cast<long>(x4 + (9L*x3) + (81L*x1) + (486L*x2) + (95256L*x0)));
                            }
                            #pragma omp simd simdlen(4) 
                            for(long x4=static_cast<long>(8L); x4<static_cast<long>(9L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0))];
                                auto tmp3 = out_ptr0[static_cast<long>(x3 + (9L*x2) + (1764L*x1) + (10584L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                                auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                                auto tmp6 = static_cast<float>(0.1767766952966369);
                                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                                out_ptr1[static_cast<long>(x4 + (9L*x3) + (81L*x1) + (486L*x2) + (95256L*x0))] = tmp7;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_col2im_sum_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto out_ptr3 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(480L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (486L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(480L); x0<static_cast<long>(486L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (486L*x1))];
                        tmp_acc0 = tmp_acc0 + tmp0;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1382400L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                tmp0.store(out_ptr1 + static_cast<long>(x0));
                tmp0.store(out_ptr2 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr2 + static_cast<long>(x1 + (32L*x2) + (288L*x3) + (56448L*x0)), static_cast<long>(288L), tmp0, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                                tmp1.store(out_ptr3 + static_cast<long>(x3 + (196L*x2) + (1764L*x1) + (1764L*x1_inner) + (56448L*x0)));
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (32L*x2) + (288L*x3) + (56448L*x0)));
                            { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp0.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) out_ptr3[static_cast<long>(x3 + (196L*x2) + (1764L*x1) + (1764L*x1_inner) + (56448L*x0))] = tmpbuf[x1_inner]; }
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(9L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x2 + (196L*x1) + (1764L*x0)));
                        tmp0.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (1764L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr3[static_cast<long>(x2 + (196L*x1) + (1764L*x0))];
                        in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (1764L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = c10::convert<int>(1L + (static_cast<long>(c10::div_floor_integer(x0, 28L)) % static_cast<long>(28L)));
                    auto tmp1 = static_cast<int>(0);
                    auto tmp2 = tmp0 >= tmp1;
                    auto tmp3 = static_cast<int>(30);
                    auto tmp4 = tmp0 < tmp3;
                    auto tmp5 = c10::convert<int>(1L + (static_cast<long>(x0) % static_cast<long>(28L)));
                    auto tmp6 = tmp5 >= tmp1;
                    auto tmp7 = tmp5 < tmp3;
                    auto tmp8 = tmp2 & tmp4;
                    auto tmp9 = tmp8 & tmp6;
                    auto tmp10 = tmp9 & tmp7;
                    auto tmp11 = [&]
                    {
                        auto tmp12 = masked_load(in_ptr0 + static_cast<long>(5952L + x1 + (192L*(static_cast<long>(x0) % static_cast<long>(28L))) + (5760L*(static_cast<long>(c10::div_floor_integer(x0, 28L)) % static_cast<long>(28L))) + (172800L*(c10::div_floor_integer(x0, 784L)))), to_float_mask(tmp10));
                        return tmp12;
                    }
                    ;
                    auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                    tmp13.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            float tmp_acc0 = 0;
                            float tmp_acc1 = 0;
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x0))];
                                auto tmp11 = in_ptr1[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                                auto tmp13 = in_ptr2[static_cast<long>(x3)];
                                auto tmp15 = in_ptr3[static_cast<long>(x1 + (28L*x3) + (5376L*x2) + (150528L*x0))];
                                auto tmp1 = tmp0 / 4;
                                auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                                auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))));
                                auto tmp4 = tmp2 < tmp3;
                                auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                                auto tmp7 = tmp5 < tmp6;
                                auto tmp8 = tmp4 & tmp7;
                                auto tmp9 = static_cast<float>(0.0);
                                auto tmp10 = tmp8 ? tmp1 : tmp9;
                                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                                auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                                tmp_acc0 = tmp_acc0 + tmp14;
                                tmp_acc1 = tmp_acc1 + tmp16;
                            }
                            out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp_acc0;
                            out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp_acc1;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x0 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x3, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x3, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x1))];
                                auto tmp11 = in_ptr1[static_cast<long>(x0 + (192L*x3) + (5376L*x2) + (150528L*x1))];
                                auto tmp13 = in_ptr3[static_cast<long>(x2 + (28L*x0) + (5376L*x3) + (150528L*x1))];
                                auto tmp1 = tmp0 / 4;
                                auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                                auto tmp4 = tmp2 < tmp3;
                                auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                                auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x3, 2L))));
                                auto tmp7 = tmp5 < tmp6;
                                auto tmp8 = tmp4 & tmp7;
                                auto tmp9 = static_cast<float>(0.0);
                                auto tmp10 = tmp8 ? tmp1 : tmp9;
                                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                                auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                                tmp_acc0 = tmp_acc0 + tmp14;
                                tmp_acc1 = tmp_acc1 + tmp12;
                            }
                        }
                    }
                    out_ptr2[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr3[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp2 = in_ptr0[static_cast<long>(x3 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x0))];
                            auto tmp13 = in_ptr1[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                            auto tmp15 = in_ptr2[static_cast<long>(x3)];
                            auto tmp19 = out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp21 = in_ptr3[static_cast<long>(x1 + (28L*x3) + (5376L*x2) + (150528L*x0))];
                            auto tmp22 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp3 = tmp2 / 4;
                            auto tmp4 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                            auto tmp5 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))));
                            auto tmp6 = tmp4 < tmp5;
                            auto tmp7 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp8 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                            auto tmp9 = tmp7 < tmp8;
                            auto tmp10 = tmp6 & tmp9;
                            auto tmp11 = static_cast<float>(0.0);
                            auto tmp12 = tmp10 ? tmp3 : tmp11;
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                            auto tmp17 = static_cast<float>(192.0);
                            auto tmp18 = decltype(tmp16)(tmp16 * tmp17);
                            auto tmp20 = decltype(tmp18)(tmp18 - tmp19);
                            auto tmp23 = decltype(tmp21)(tmp21 * tmp22);
                            auto tmp24 = decltype(tmp20)(tmp20 - tmp23);
                            auto tmp25 = decltype(tmp1)(tmp1 * tmp24);
                            auto tmp26 = decltype(tmp0)(tmp0 + tmp25);
                            in_out_ptr0[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))] = tmp26;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_sum_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3612672L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_sum_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(576L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (576L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (192L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                            float tmp_acc0 = 0;
                            at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                                auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (28L*x3) + (28L*x3_inner) + (5376L*x2) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = tmp2 * tmp3;
                                tmp_acc0_vec = tmp_acc0_vec + tmp4;
                            }
                            tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                            out_ptr2[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = static_cast<float>(tmp_acc0);
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x3) + (5376L*x2) + (150528L*x1)));
                                auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr3[static_cast<long>(x2 + (28L*x0) + (28L*x0_inner) + (5376L*x3) + (150528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                                auto tmp2 = tmp0 * tmp1;
                                tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x3));
                            auto tmp8 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp11 = ([&]() { __at_align__ float tmpbuf[8]; for (long x3_inner = 0; x3_inner < 8; x3_inner++) tmpbuf[x3_inner] = in_ptr3[static_cast<long>(x1 + (28L*x3) + (28L*x3_inner) + (5376L*x2) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp12 = out_ptr2[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp4 = tmp2 * tmp3;
                            auto tmp5 = static_cast<float>(192.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = tmp4 * tmp6;
                            auto tmp9 = at::vec::Vectorized<float>(tmp8);
                            auto tmp10 = tmp7 - tmp9;
                            auto tmp13 = at::vec::Vectorized<float>(tmp12);
                            auto tmp14 = tmp11 * tmp13;
                            auto tmp15 = tmp10 - tmp14;
                            auto tmp16 = at::vec::Vectorized<float>(tmp1);
                            auto tmp17 = tmp16 * tmp15;
                            auto tmp18 = tmp0 + tmp17;
                            tmp18.store(in_out_ptr0 + static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0)));
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_clone_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const long* in_ptr0,
                       const long* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(9L); x3+=static_cast<long>(1L))
                        {
                            #pragma GCC ivdep
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(32L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>((14L*(c10::div_floor_integer(x3, 3L))) + (c10::div_floor_integer(x2, 14L)))];
                                auto tmp4 = in_ptr1[static_cast<long>((14L*(static_cast<long>(x3) % static_cast<long>(3L))) + (static_cast<long>(x2) % static_cast<long>(14L)))];
                                auto tmp1 = decltype(tmp0)(tmp0 + 30);
                                auto tmp2 = tmp0 < 0;
                                auto tmp3 = tmp2 ? tmp1 : tmp0;
                                TORCH_CHECK((0 <= tmp3) & (tmp3 < 30L), "index out of bounds: 0 <= tmp3 < 30L")
                                auto tmp5 = decltype(tmp4)(tmp4 + 30);
                                auto tmp6 = tmp4 < 0;
                                auto tmp7 = tmp6 ? tmp5 : tmp4;
                                TORCH_CHECK((0 <= tmp7) & (tmp7 < 30L), "index out of bounds: 0 <= tmp7 < 30L")
                                auto tmp8 = c10::convert<long>((-1L) + tmp3);
                                auto tmp9 = static_cast<long>(0);
                                auto tmp10 = tmp8 >= tmp9;
                                auto tmp11 = static_cast<long>(28);
                                auto tmp12 = tmp8 < tmp11;
                                auto tmp13 = c10::convert<long>((-1L) + tmp7);
                                auto tmp14 = tmp13 >= tmp9;
                                auto tmp15 = tmp13 < tmp11;
                                auto tmp16 = tmp10 & tmp12;
                                auto tmp17 = tmp16 & tmp14;
                                auto tmp18 = tmp17 & tmp15;
                                auto tmp19 = [&]
                                {
                                    auto tmp20 = in_ptr2[static_cast<long>((-5568L) + x4 + (32L*x1) + (192L*tmp7) + (5376L*tmp3) + (150528L*x0))];
                                    return tmp20;
                                }
                                ;
                                auto tmp21 = tmp18 ? tmp19() : static_cast<decltype(tmp19())>(0.0);
                                out_ptr0[static_cast<long>(x4 + (32L*x3) + (288L*x2) + (56448L*x1) + (338688L*x0))] = tmp21;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_clone_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(84672L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (9L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (9L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(8L); x1<static_cast<long>(9L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (9L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (9L*x0))];
                        auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                        tmp_acc0 = tmp_acc0 + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(9L); x3+=static_cast<long>(1L))
                        {
                            for(long x4=static_cast<long>(0L); x4<static_cast<long>(8L); x4+=static_cast<long>(8L))
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0)));
                                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0)));
                                auto tmp3 = out_ptr0[static_cast<long>(x3 + (9L*x2) + (1764L*x1) + (10584L*x0))];
                                auto tmp2 = tmp0 * tmp1;
                                auto tmp4 = at::vec::Vectorized<float>(tmp3);
                                auto tmp5 = tmp1 * tmp4;
                                auto tmp6 = tmp2 - tmp5;
                                auto tmp7 = static_cast<float>(0.1767766952966369);
                                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                                auto tmp9 = tmp6 * tmp8;
                                tmp9.store(out_ptr1 + static_cast<long>(x4 + (9L*x3) + (81L*x1) + (486L*x2) + (95256L*x0)));
                            }
                            #pragma omp simd simdlen(4) 
                            for(long x4=static_cast<long>(8L); x4<static_cast<long>(9L); x4+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0))];
                                auto tmp1 = in_ptr1[static_cast<long>(x4 + (9L*x3) + (81L*x2) + (15876L*x1) + (95256L*x0))];
                                auto tmp3 = out_ptr0[static_cast<long>(x3 + (9L*x2) + (1764L*x1) + (10584L*x0))];
                                auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                                auto tmp4 = decltype(tmp1)(tmp1 * tmp3);
                                auto tmp5 = decltype(tmp2)(tmp2 - tmp4);
                                auto tmp6 = static_cast<float>(0.1767766952966369);
                                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                                out_ptr1[static_cast<long>(x4 + (9L*x3) + (81L*x1) + (486L*x2) + (95256L*x0))] = tmp7;
                            }
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_col2im_sum_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(480L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (486L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(480L); x0<static_cast<long>(486L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (486L*x1))];
                        tmp_acc0 = tmp_acc0 + tmp0;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(48L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (32L*x2) + (288L*x3) + (56448L*x0)), static_cast<long>(288L), tmp0, 8);
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x1_inner));
                                tmp1.store(out_ptr1 + static_cast<long>(x3 + (196L*x2) + (1764L*x1) + (1764L*x1_inner) + (56448L*x0)));
                            }
                        }
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(192L); x3<static_cast<long>(196L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (32L*x2) + (288L*x3) + (56448L*x0)));
                            { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp0.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) out_ptr1[static_cast<long>(x3 + (196L*x2) + (1764L*x1) + (1764L*x1_inner) + (56448L*x0))] = tmpbuf[x1_inner]; }
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(9L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x2 + (196L*x1) + (1764L*x0)));
                        tmp0.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (1764L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr1[static_cast<long>(x2 + (196L*x1) + (1764L*x0))];
                        in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (1764L*x0))] = tmp0;
                    }
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_view_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = c10::convert<int>(1L + (static_cast<long>(c10::div_floor_integer(x0, 28L)) % static_cast<long>(28L)));
                    auto tmp1 = static_cast<int>(0);
                    auto tmp2 = tmp0 >= tmp1;
                    auto tmp3 = static_cast<int>(30);
                    auto tmp4 = tmp0 < tmp3;
                    auto tmp5 = c10::convert<int>(1L + (static_cast<long>(x0) % static_cast<long>(28L)));
                    auto tmp6 = tmp5 >= tmp1;
                    auto tmp7 = tmp5 < tmp3;
                    auto tmp8 = tmp2 & tmp4;
                    auto tmp9 = tmp8 & tmp6;
                    auto tmp10 = tmp9 & tmp7;
                    auto tmp11 = [&]
                    {
                        auto tmp12 = masked_load(in_ptr0 + static_cast<long>(5952L + x1 + (192L*(static_cast<long>(x0) % static_cast<long>(28L))) + (5760L*(static_cast<long>(c10::div_floor_integer(x0, 28L)) % static_cast<long>(28L))) + (172800L*(c10::div_floor_integer(x0, 784L)))), to_float_mask(tmp10));
                        return tmp12;
                    }
                    ;
                    auto tmp13 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp10));
                    tmp13.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_layer_norm_backward_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        {
                            float tmp_acc0 = 0;
                            float tmp_acc1 = 0;
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x3 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x0))];
                                auto tmp11 = in_ptr1[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                                auto tmp13 = in_ptr2[static_cast<long>(x3)];
                                auto tmp15 = in_ptr3[static_cast<long>(x1 + (28L*x3) + (5376L*x2) + (150528L*x0))];
                                auto tmp1 = tmp0 / 4;
                                auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                                auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))));
                                auto tmp4 = tmp2 < tmp3;
                                auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                                auto tmp7 = tmp5 < tmp6;
                                auto tmp8 = tmp4 & tmp7;
                                auto tmp9 = static_cast<float>(0.0);
                                auto tmp10 = tmp8 ? tmp1 : tmp9;
                                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                                auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                                tmp_acc0 = tmp_acc0 + tmp14;
                                tmp_acc1 = tmp_acc1 + tmp16;
                            }
                            out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp_acc0;
                            out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp_acc1;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                        {
                            for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                            {
                                auto tmp0 = in_ptr0[static_cast<long>(x0 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x3, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x3, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x3, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x1))];
                                auto tmp11 = in_ptr1[static_cast<long>(x0 + (192L*x3) + (5376L*x2) + (150528L*x1))];
                                auto tmp13 = in_ptr3[static_cast<long>(x2 + (28L*x0) + (5376L*x3) + (150528L*x1))];
                                auto tmp1 = tmp0 / 4;
                                auto tmp2 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                                auto tmp3 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                                auto tmp4 = tmp2 < tmp3;
                                auto tmp5 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x3, 2L)));
                                auto tmp6 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x3, 2L))));
                                auto tmp7 = tmp5 < tmp6;
                                auto tmp8 = tmp4 & tmp7;
                                auto tmp9 = static_cast<float>(0.0);
                                auto tmp10 = tmp8 ? tmp1 : tmp9;
                                auto tmp12 = decltype(tmp10)(tmp10 + tmp11);
                                auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                                tmp_acc0 = tmp_acc0 + tmp14;
                                tmp_acc1 = tmp_acc1 + tmp12;
                            }
                        }
                    }
                    out_ptr2[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr3[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(192L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                            auto tmp1 = in_ptr4[static_cast<long>(x1 + (28L*x2) + (784L*x0))];
                            auto tmp2 = in_ptr0[static_cast<long>(x3 + (192L*(std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))))))) + (192L*(((std::min(std::max(0L, c10::div_floor_integer(x2, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x2, 2L)))))) >= 0L) ? 0L : 14L)) + (2688L*(std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))))))) + (2688L*(((std::min(std::max(0L, c10::div_floor_integer(x1, 2L)), (-1L) + (std::min(14L, 1L + (c10::div_floor_integer(x1, 2L)))))) >= 0L) ? 0L : 14L)) + (37632L*x0))];
                            auto tmp13 = in_ptr1[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))];
                            auto tmp15 = in_ptr2[static_cast<long>(x3)];
                            auto tmp19 = out_ptr0[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp21 = in_ptr3[static_cast<long>(x1 + (28L*x3) + (5376L*x2) + (150528L*x0))];
                            auto tmp22 = out_ptr1[static_cast<long>(x2 + (28L*x1) + (784L*x0))];
                            auto tmp3 = tmp2 / 4;
                            auto tmp4 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x1, 2L)));
                            auto tmp5 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x1, 2L))));
                            auto tmp6 = tmp4 < tmp5;
                            auto tmp7 = c10::convert<int>(std::max(0L, c10::div_floor_integer(x2, 2L)));
                            auto tmp8 = c10::convert<int>(std::min(14L, 1L + (c10::div_floor_integer(x2, 2L))));
                            auto tmp9 = tmp7 < tmp8;
                            auto tmp10 = tmp6 & tmp9;
                            auto tmp11 = static_cast<float>(0.0);
                            auto tmp12 = tmp10 ? tmp3 : tmp11;
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                            auto tmp17 = static_cast<float>(192.0);
                            auto tmp18 = decltype(tmp16)(tmp16 * tmp17);
                            auto tmp20 = decltype(tmp18)(tmp18 - tmp19);
                            auto tmp23 = decltype(tmp21)(tmp21 * tmp22);
                            auto tmp24 = decltype(tmp20)(tmp20 - tmp23);
                            auto tmp25 = decltype(tmp1)(tmp1 * tmp24);
                            auto tmp26 = decltype(tmp0)(tmp0 + tmp25);
                            in_out_ptr0[static_cast<long>(x3 + (192L*x2) + (5376L*x1) + (150528L*x0))] = tmp26;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(9.964923469387754e-06);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(9.964923469387754e-06);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(9.964923469387754e-06);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_3, primals_4, primals_6, primals_7, primals_9, primals_10, primals_12, primals_14, primals_21, primals_27, primals_34, primals_40, primals_47, primals_53, primals_60, primals_66, primals_68, primals_73, primals_79, primals_84, primals_90, primals_95, primals_101, primals_106, primals_112, primals_117, primals_123, primals_128, primals_134, primals_139, primals_145, primals_150, primals_156, primals_161, primals_167, primals_172, primals_178, primals_183, primals_189, primals_194, primals_200, primals_205, primals_211, primals_216, primals_222, primals_228, primals_234, primals_240, primals_246, primals_261, convolution, squeeze_1, relu, convolution_1, squeeze_4, relu_1, convolution_2, squeeze_7, relu_2, mul_21, view, add_17, unsqueeze_17, permute_5, view_4, full_default, view_12, mul_24, view_14, addmm_1, view_16, mul_29, view_18, permute_19, view_22, view_30, mul_32, view_32, addmm_4, view_34, mul_37, view_36, permute_33, view_40, view_48, mul_40, view_50, addmm_7, view_52, mul_45, view_54, permute_47, view_58, view_66, mul_48, view_68, addmm_10, view_70, permute_57, mul_53, view_72, view_82, mul_56, view_84, addmm_13, view_86, mul_61, view_88, view_98, mul_64, view_100, addmm_16, view_102, mul_69, view_104, view_114, mul_72, view_116, addmm_19, view_118, mul_77, view_120, view_130, mul_80, view_132, addmm_22, view_134, mul_85, view_136, view_146, mul_88, view_148, addmm_25, view_150, mul_93, view_152, view_162, mul_96, view_164, addmm_28, view_166, mul_101, view_168, view_178, mul_104, view_180, addmm_31, view_182, mul_109, view_184, view_194, mul_112, view_196, addmm_34, view_198, mul_117, view_200, view_210, mul_120, view_212, addmm_37, view_214, mul_125, view_216, view_226, mul_128, view_228, addmm_40, view_230, mul_133, view_232, view_242, mul_136, view_244, addmm_43, view_246, mul_141, view_248, view_258, mul_144, view_260, addmm_46, view_262, mul_149, view_264, view_274, mul_152, view_276, addmm_49, view_278, mul_157, view_280, view_290, mul_160, view_292, addmm_52, view_294, cat, getitem_121, rsqrt_39, view_297, view_300, view_310, mul_168, view_312, addmm_55, view_314, cat_1, getitem_127, rsqrt_41, view_316, view_319, view_329, mul_176, view_331, addmm_58, view_333, cat_2, getitem_133, rsqrt_43, select, view_335, unsqueeze_61, permute_177, permute_179, permute_183, permute_187, div_21, permute_191, permute_196, permute_197, alias_23, permute_198, permute_199, permute_203, permute_208, permute_210, permute_214, div_23, permute_218, permute_223, permute_224, alias_24, permute_225, permute_226, permute_230, permute_235, permute_237, permute_241, div_25, permute_245, permute_250, permute_251, alias_25, permute_252, permute_253, permute_258, div_26, permute_260, permute_264, div_27, permute_268, permute_273, permute_274, alias_26, permute_275, permute_276, permute_281, div_28, permute_283, permute_287, div_29, permute_291, permute_296, permute_297, alias_27, permute_298, permute_299, permute_304, div_30, permute_306, permute_310, div_31, permute_314, permute_319, permute_320, alias_28, permute_321, permute_322, permute_327, div_32, permute_329, permute_333, div_33, permute_337, permute_342, permute_343, alias_29, permute_344, permute_345, permute_350, div_34, permute_352, permute_356, div_35, permute_360, permute_365, permute_366, alias_30, permute_367, permute_368, permute_373, div_36, permute_375, permute_379, div_37, permute_383, permute_388, permute_389, alias_31, permute_390, permute_391, permute_396, div_38, permute_398, permute_402, div_39, permute_406, permute_411, permute_412, alias_32, permute_413, permute_414, permute_419, div_40, permute_421, permute_425, div_41, permute_429, permute_434, permute_435, alias_33, permute_436, permute_437, permute_442, div_42, permute_444, permute_448, div_43, permute_452, permute_457, permute_458, alias_34, permute_459, permute_460, permute_465, div_44, permute_467, permute_471, div_45, permute_475, permute_480, permute_481, alias_35, permute_482, permute_483, permute_488, div_46, permute_490, permute_494, div_47, permute_498, permute_503, permute_504, alias_36, permute_505, permute_506, permute_511, div_48, permute_513, permute_517, div_49, permute_521, permute_526, permute_527, alias_37, permute_528, permute_529, permute_534, div_50, permute_536, permute_540, div_51, permute_544, permute_549, permute_550, alias_38, permute_551, permute_552, permute_557, div_52, permute_561, permute_565, div_53, permute_571, permute_576, permute_577, alias_39, permute_579, permute_590, div_54, permute_592, permute_596, div_55, permute_602, permute_607, permute_608, alias_40, permute_610, permute_621, div_56, permute_623, permute_627, div_57, permute_633, permute_638, permute_639, alias_41, permute_641, permute_652, div_58, permute_654, permute_658, div_59, permute_664, permute_669, permute_670, alias_42, permute_672, permute_683, div_60, unsqueeze_112, unsqueeze_124, unsqueeze_136, tangents_1 = args
    args.clear()
    assert_size_stride(primals_3, (64, 3, 7, 7), (147, 1, 21, 3))
    assert_size_stride(primals_4, (64, ), (1, ))
    assert_size_stride(primals_6, (64, 64, 3, 3), (576, 1, 192, 64))
    assert_size_stride(primals_7, (64, ), (1, ))
    assert_size_stride(primals_9, (64, 64, 3, 3), (576, 1, 192, 64))
    assert_size_stride(primals_10, (64, ), (1, ))
    assert_size_stride(primals_12, (192, 64, 4, 4), (1024, 1, 256, 64))
    assert_size_stride(primals_14, (192, ), (1, ))
    assert_size_stride(primals_21, (192, ), (1, ))
    assert_size_stride(primals_27, (192, ), (1, ))
    assert_size_stride(primals_34, (192, ), (1, ))
    assert_size_stride(primals_40, (192, ), (1, ))
    assert_size_stride(primals_47, (192, ), (1, ))
    assert_size_stride(primals_53, (192, ), (1, ))
    assert_size_stride(primals_60, (192, ), (1, ))
    assert_size_stride(primals_66, (384, 192, 2, 2), (768, 1, 384, 192))
    assert_size_stride(primals_68, (384, ), (1, ))
    assert_size_stride(primals_73, (384, ), (1, ))
    assert_size_stride(primals_79, (384, ), (1, ))
    assert_size_stride(primals_84, (384, ), (1, ))
    assert_size_stride(primals_90, (384, ), (1, ))
    assert_size_stride(primals_95, (384, ), (1, ))
    assert_size_stride(primals_101, (384, ), (1, ))
    assert_size_stride(primals_106, (384, ), (1, ))
    assert_size_stride(primals_112, (384, ), (1, ))
    assert_size_stride(primals_117, (384, ), (1, ))
    assert_size_stride(primals_123, (384, ), (1, ))
    assert_size_stride(primals_128, (384, ), (1, ))
    assert_size_stride(primals_134, (384, ), (1, ))
    assert_size_stride(primals_139, (384, ), (1, ))
    assert_size_stride(primals_145, (384, ), (1, ))
    assert_size_stride(primals_150, (384, ), (1, ))
    assert_size_stride(primals_156, (384, ), (1, ))
    assert_size_stride(primals_161, (384, ), (1, ))
    assert_size_stride(primals_167, (384, ), (1, ))
    assert_size_stride(primals_172, (384, ), (1, ))
    assert_size_stride(primals_178, (384, ), (1, ))
    assert_size_stride(primals_183, (384, ), (1, ))
    assert_size_stride(primals_189, (384, ), (1, ))
    assert_size_stride(primals_194, (384, ), (1, ))
    assert_size_stride(primals_200, (384, ), (1, ))
    assert_size_stride(primals_205, (384, ), (1, ))
    assert_size_stride(primals_211, (384, ), (1, ))
    assert_size_stride(primals_216, (384, ), (1, ))
    assert_size_stride(primals_222, (384, ), (1, ))
    assert_size_stride(primals_228, (384, ), (1, ))
    assert_size_stride(primals_234, (384, ), (1, ))
    assert_size_stride(primals_240, (384, ), (1, ))
    assert_size_stride(primals_246, (384, ), (1, ))
    assert_size_stride(primals_261, (8, 3, 224, 224), (150528, 1, 672, 3))
    assert_size_stride(convolution, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(squeeze_1, (64, ), (1, ))
    assert_size_stride(relu, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(convolution_1, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(squeeze_4, (64, ), (1, ))
    assert_size_stride(relu_1, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(convolution_2, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(squeeze_7, (64, ), (1, ))
    assert_size_stride(relu_2, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(mul_21, (8, 28, 28, 192), (150528, 1, 5376, 28))
    assert_size_stride(view, (6272, 192), (192, 1))
    assert_size_stride(add_17, (3, 14), (14, 1))
    assert_size_stride(unsqueeze_17, (3, 14, 1, 1), (14, 1, 1, 1))
    assert_size_stride(permute_5, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(view_4, (1568, 192), (192, 1))
    assert_size_stride(full_default, (8, 192, 30, 30), (172800, 1, 5760, 192))
    assert_size_stride(view_12, (6272, 192), (192, 1))
    assert_size_stride(mul_24, (8, 28, 28, 192), (150528, 1, 5376, 28))
    assert_size_stride(view_14, (6272, 192), (192, 1))
    assert_size_stride(addmm_1, (6272, 576), (576, 1))
    assert_size_stride(view_16, (6272, 576), (576, 1))
    assert_size_stride(mul_29, (8, 28, 28, 192), (150528, 1, 5376, 28))
    assert_size_stride(view_18, (6272, 192), (192, 1))
    assert_size_stride(permute_19, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(view_22, (1568, 192), (192, 1))
    assert_size_stride(view_30, (6272, 192), (192, 1))
    assert_size_stride(mul_32, (8, 28, 28, 192), (150528, 1, 5376, 28))
    assert_size_stride(view_32, (6272, 192), (192, 1))
    assert_size_stride(addmm_4, (6272, 576), (576, 1))
    assert_size_stride(view_34, (6272, 576), (576, 1))
    assert_size_stride(mul_37, (8, 28, 28, 192), (150528, 1, 5376, 28))
    assert_size_stride(view_36, (6272, 192), (192, 1))
    assert_size_stride(permute_33, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(view_40, (1568, 192), (192, 1))
    assert_size_stride(view_48, (6272, 192), (192, 1))
    assert_size_stride(mul_40, (8, 28, 28, 192), (150528, 1, 5376, 28))
    assert_size_stride(view_50, (6272, 192), (192, 1))
    assert_size_stride(addmm_7, (6272, 576), (576, 1))
    assert_size_stride(view_52, (6272, 576), (576, 1))
    assert_size_stride(mul_45, (8, 28, 28, 192), (150528, 1, 5376, 28))
    assert_size_stride(view_54, (6272, 192), (192, 1))
    assert_size_stride(permute_47, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(view_58, (1568, 192), (192, 1))
    assert_size_stride(view_66, (6272, 192), (192, 1))
    assert_size_stride(mul_48, (8, 28, 28, 192), (150528, 1, 5376, 28))
    assert_size_stride(view_68, (6272, 192), (192, 1))
    assert_size_stride(addmm_10, (6272, 576), (576, 1))
    assert_size_stride(view_70, (6272, 576), (576, 1))
    assert_size_stride(permute_57, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(mul_53, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_72, (1568, 384), (384, 1))
    assert_size_stride(view_82, (1568, 384), (384, 1))
    assert_size_stride(mul_56, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_84, (1568, 384), (384, 1))
    assert_size_stride(addmm_13, (1568, 1152), (1152, 1))
    assert_size_stride(view_86, (1568, 1152), (1152, 1))
    assert_size_stride(mul_61, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_88, (1568, 384), (384, 1))
    assert_size_stride(view_98, (1568, 384), (384, 1))
    assert_size_stride(mul_64, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_100, (1568, 384), (384, 1))
    assert_size_stride(addmm_16, (1568, 1152), (1152, 1))
    assert_size_stride(view_102, (1568, 1152), (1152, 1))
    assert_size_stride(mul_69, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_104, (1568, 384), (384, 1))
    assert_size_stride(view_114, (1568, 384), (384, 1))
    assert_size_stride(mul_72, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_116, (1568, 384), (384, 1))
    assert_size_stride(addmm_19, (1568, 1152), (1152, 1))
    assert_size_stride(view_118, (1568, 1152), (1152, 1))
    assert_size_stride(mul_77, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_120, (1568, 384), (384, 1))
    assert_size_stride(view_130, (1568, 384), (384, 1))
    assert_size_stride(mul_80, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_132, (1568, 384), (384, 1))
    assert_size_stride(addmm_22, (1568, 1152), (1152, 1))
    assert_size_stride(view_134, (1568, 1152), (1152, 1))
    assert_size_stride(mul_85, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_136, (1568, 384), (384, 1))
    assert_size_stride(view_146, (1568, 384), (384, 1))
    assert_size_stride(mul_88, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_148, (1568, 384), (384, 1))
    assert_size_stride(addmm_25, (1568, 1152), (1152, 1))
    assert_size_stride(view_150, (1568, 1152), (1152, 1))
    assert_size_stride(mul_93, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_152, (1568, 384), (384, 1))
    assert_size_stride(view_162, (1568, 384), (384, 1))
    assert_size_stride(mul_96, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_164, (1568, 384), (384, 1))
    assert_size_stride(addmm_28, (1568, 1152), (1152, 1))
    assert_size_stride(view_166, (1568, 1152), (1152, 1))
    assert_size_stride(mul_101, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_168, (1568, 384), (384, 1))
    assert_size_stride(view_178, (1568, 384), (384, 1))
    assert_size_stride(mul_104, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_180, (1568, 384), (384, 1))
    assert_size_stride(addmm_31, (1568, 1152), (1152, 1))
    assert_size_stride(view_182, (1568, 1152), (1152, 1))
    assert_size_stride(mul_109, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_184, (1568, 384), (384, 1))
    assert_size_stride(view_194, (1568, 384), (384, 1))
    assert_size_stride(mul_112, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_196, (1568, 384), (384, 1))
    assert_size_stride(addmm_34, (1568, 1152), (1152, 1))
    assert_size_stride(view_198, (1568, 1152), (1152, 1))
    assert_size_stride(mul_117, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_200, (1568, 384), (384, 1))
    assert_size_stride(view_210, (1568, 384), (384, 1))
    assert_size_stride(mul_120, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_212, (1568, 384), (384, 1))
    assert_size_stride(addmm_37, (1568, 1152), (1152, 1))
    assert_size_stride(view_214, (1568, 1152), (1152, 1))
    assert_size_stride(mul_125, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_216, (1568, 384), (384, 1))
    assert_size_stride(view_226, (1568, 384), (384, 1))
    assert_size_stride(mul_128, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_228, (1568, 384), (384, 1))
    assert_size_stride(addmm_40, (1568, 1152), (1152, 1))
    assert_size_stride(view_230, (1568, 1152), (1152, 1))
    assert_size_stride(mul_133, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_232, (1568, 384), (384, 1))
    assert_size_stride(view_242, (1568, 384), (384, 1))
    assert_size_stride(mul_136, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_244, (1568, 384), (384, 1))
    assert_size_stride(addmm_43, (1568, 1152), (1152, 1))
    assert_size_stride(view_246, (1568, 1152), (1152, 1))
    assert_size_stride(mul_141, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_248, (1568, 384), (384, 1))
    assert_size_stride(view_258, (1568, 384), (384, 1))
    assert_size_stride(mul_144, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_260, (1568, 384), (384, 1))
    assert_size_stride(addmm_46, (1568, 1152), (1152, 1))
    assert_size_stride(view_262, (1568, 1152), (1152, 1))
    assert_size_stride(mul_149, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_264, (1568, 384), (384, 1))
    assert_size_stride(view_274, (1568, 384), (384, 1))
    assert_size_stride(mul_152, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_276, (1568, 384), (384, 1))
    assert_size_stride(addmm_49, (1568, 1152), (1152, 1))
    assert_size_stride(view_278, (1568, 1152), (1152, 1))
    assert_size_stride(mul_157, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_280, (1568, 384), (384, 1))
    assert_size_stride(view_290, (1568, 384), (384, 1))
    assert_size_stride(mul_160, (8, 14, 14, 384), (75264, 1, 5376, 14))
    assert_size_stride(view_292, (1568, 384), (384, 1))
    assert_size_stride(addmm_52, (1568, 1152), (1152, 1))
    assert_size_stride(view_294, (1568, 1152), (1152, 1))
    assert_size_stride(cat, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_121, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_39, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_297, (1576, 384), (384, 1))
    assert_size_stride(view_300, (8, 384), (75648, 1))
    assert_size_stride(view_310, (8, 384), (384, 1))
    assert_size_stride(mul_168, (8, 1, 384), (384, 384, 1))
    assert_size_stride(view_312, (8, 384), (384, 1))
    assert_size_stride(addmm_55, (8, 1152), (1152, 1))
    assert_size_stride(view_314, (8, 1152), (1152, 1))
    assert_size_stride(cat_1, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_127, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_41, (8, 197, 1), (197, 1, 1))
    assert_size_stride(view_316, (1576, 384), (384, 1))
    assert_size_stride(view_319, (8, 384), (75648, 1))
    assert_size_stride(view_329, (8, 384), (384, 1))
    assert_size_stride(mul_176, (8, 1, 384), (384, 384, 1))
    assert_size_stride(view_331, (8, 384), (384, 1))
    assert_size_stride(addmm_58, (8, 1152), (1152, 1))
    assert_size_stride(view_333, (8, 1152), (1152, 1))
    assert_size_stride(cat_2, (8, 197, 384), (75648, 384, 1))
    assert_size_stride(getitem_133, (8, 197, 1), (197, 1, 1))
    assert_size_stride(rsqrt_43, (8, 197, 1), (197, 1, 1))
    assert_size_stride(select, (8, 384), (75648, 1))
    assert_size_stride(view_335, (1568, 384), (384, 1))
    assert_size_stride(unsqueeze_61, (8, 1, 1000), (1000, 1000, 1))
    assert_size_stride(permute_177, (1000, 384), (384, 1))
    assert_size_stride(permute_179, (1000, 384), (384, 1))
    assert_size_stride(permute_183, (384, 1152), (1152, 1))
    assert_size_stride(permute_187, (1152, 384), (384, 1))
    assert_size_stride(div_21, (8, 1, 1), (1, 1, 1))
    assert_size_stride(permute_191, (384, 384), (384, 1))
    assert_size_stride(permute_196, (96, 197, 1), (197, 1, 0))
    assert_size_stride(permute_197, (96, 32, 197), (6304, 1, 32))
    assert_size_stride(alias_23, (8, 12, 1, 197), (2364, 1, 2364, 12))
    assert_size_stride(permute_198, (96, 32, 1), (32, 1, 0))
    assert_size_stride(permute_199, (96, 197, 32), (6304, 1, 197))
    assert_size_stride(permute_203, (384, 384), (384, 1))
    assert_size_stride(permute_208, (768, 384), (384, 1))
    assert_size_stride(permute_210, (384, 1152), (1152, 1))
    assert_size_stride(permute_214, (1152, 384), (384, 1))
    assert_size_stride(div_23, (8, 1, 1), (1, 1, 1))
    assert_size_stride(permute_218, (384, 384), (384, 1))
    assert_size_stride(permute_223, (96, 197, 1), (197, 1, 0))
    assert_size_stride(permute_224, (96, 32, 197), (6304, 1, 32))
    assert_size_stride(alias_24, (8, 12, 1, 197), (2364, 1, 2364, 12))
    assert_size_stride(permute_225, (96, 32, 1), (32, 1, 0))
    assert_size_stride(permute_226, (96, 197, 32), (6304, 1, 197))
    assert_size_stride(permute_230, (384, 384), (384, 1))
    assert_size_stride(permute_235, (768, 384), (384, 1))
    assert_size_stride(permute_237, (384, 1152), (1152, 1))
    assert_size_stride(permute_241, (1152, 384), (384, 1))
    assert_size_stride(div_25, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_245, (384, 384), (384, 1))
    assert_size_stride(permute_250, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_251, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_25, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_252, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_253, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_258, (1152, 384), (384, 1))
    assert_size_stride(div_26, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_260, (384, 1152), (1152, 1))
    assert_size_stride(permute_264, (1152, 384), (384, 1))
    assert_size_stride(div_27, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_268, (384, 384), (384, 1))
    assert_size_stride(permute_273, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_274, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_26, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_275, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_276, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_281, (1152, 384), (384, 1))
    assert_size_stride(div_28, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_283, (384, 1152), (1152, 1))
    assert_size_stride(permute_287, (1152, 384), (384, 1))
    assert_size_stride(div_29, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_291, (384, 384), (384, 1))
    assert_size_stride(permute_296, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_297, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_27, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_298, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_299, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_304, (1152, 384), (384, 1))
    assert_size_stride(div_30, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_306, (384, 1152), (1152, 1))
    assert_size_stride(permute_310, (1152, 384), (384, 1))
    assert_size_stride(div_31, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_314, (384, 384), (384, 1))
    assert_size_stride(permute_319, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_320, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_28, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_321, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_322, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_327, (1152, 384), (384, 1))
    assert_size_stride(div_32, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_329, (384, 1152), (1152, 1))
    assert_size_stride(permute_333, (1152, 384), (384, 1))
    assert_size_stride(div_33, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_337, (384, 384), (384, 1))
    assert_size_stride(permute_342, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_343, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_29, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_344, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_345, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_350, (1152, 384), (384, 1))
    assert_size_stride(div_34, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_352, (384, 1152), (1152, 1))
    assert_size_stride(permute_356, (1152, 384), (384, 1))
    assert_size_stride(div_35, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_360, (384, 384), (384, 1))
    assert_size_stride(permute_365, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_366, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_30, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_367, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_368, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_373, (1152, 384), (384, 1))
    assert_size_stride(div_36, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_375, (384, 1152), (1152, 1))
    assert_size_stride(permute_379, (1152, 384), (384, 1))
    assert_size_stride(div_37, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_383, (384, 384), (384, 1))
    assert_size_stride(permute_388, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_389, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_31, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_390, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_391, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_396, (1152, 384), (384, 1))
    assert_size_stride(div_38, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_398, (384, 1152), (1152, 1))
    assert_size_stride(permute_402, (1152, 384), (384, 1))
    assert_size_stride(div_39, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_406, (384, 384), (384, 1))
    assert_size_stride(permute_411, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_412, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_32, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_413, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_414, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_419, (1152, 384), (384, 1))
    assert_size_stride(div_40, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_421, (384, 1152), (1152, 1))
    assert_size_stride(permute_425, (1152, 384), (384, 1))
    assert_size_stride(div_41, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_429, (384, 384), (384, 1))
    assert_size_stride(permute_434, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_435, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_33, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_436, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_437, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_442, (1152, 384), (384, 1))
    assert_size_stride(div_42, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_444, (384, 1152), (1152, 1))
    assert_size_stride(permute_448, (1152, 384), (384, 1))
    assert_size_stride(div_43, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_452, (384, 384), (384, 1))
    assert_size_stride(permute_457, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_458, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_34, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_459, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_460, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_465, (1152, 384), (384, 1))
    assert_size_stride(div_44, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_467, (384, 1152), (1152, 1))
    assert_size_stride(permute_471, (1152, 384), (384, 1))
    assert_size_stride(div_45, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_475, (384, 384), (384, 1))
    assert_size_stride(permute_480, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_481, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_35, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_482, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_483, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_488, (1152, 384), (384, 1))
    assert_size_stride(div_46, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_490, (384, 1152), (1152, 1))
    assert_size_stride(permute_494, (1152, 384), (384, 1))
    assert_size_stride(div_47, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_498, (384, 384), (384, 1))
    assert_size_stride(permute_503, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_504, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_36, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_505, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_506, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_511, (1152, 384), (384, 1))
    assert_size_stride(div_48, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_513, (384, 1152), (1152, 1))
    assert_size_stride(permute_517, (1152, 384), (384, 1))
    assert_size_stride(div_49, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_521, (384, 384), (384, 1))
    assert_size_stride(permute_526, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_527, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_37, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_528, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_529, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_534, (1152, 384), (384, 1))
    assert_size_stride(div_50, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_536, (384, 1152), (1152, 1))
    assert_size_stride(permute_540, (1152, 384), (384, 1))
    assert_size_stride(div_51, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_544, (384, 384), (384, 1))
    assert_size_stride(permute_549, (96, 196, 196), (38416, 1, 196))
    assert_size_stride(permute_550, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(alias_38, (8, 12, 196, 196), (460992, 1, 2352, 12))
    assert_size_stride(permute_551, (96, 32, 196), (6272, 1, 32))
    assert_size_stride(permute_552, (96, 196, 32), (6272, 1, 196))
    assert_size_stride(permute_557, (1152, 384), (384, 1))
    assert_size_stride(div_52, (8, 14, 14, 1), (196, 1, 14, 14))
    assert_size_stride(permute_561, (192, 576), (576, 1))
    assert_size_stride(permute_565, (576, 192), (192, 1))
    assert_size_stride(div_53, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(permute_571, (192, 192), (192, 1))
    assert_size_stride(permute_576, (9408, 9, 9), (81, 1, 9))
    assert_size_stride(permute_577, (9408, 32, 9), (288, 1, 32))
    assert_size_stride(alias_39, (8, 6, 196, 9, 9), (95256, 15876, 81, 9, 1))
    assert_size_stride(permute_579, (486, 192), (192, 1))
    assert_size_stride(permute_590, (192, 192), (192, 1))
    assert_size_stride(div_54, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(permute_592, (192, 576), (576, 1))
    assert_size_stride(permute_596, (576, 192), (192, 1))
    assert_size_stride(div_55, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(permute_602, (192, 192), (192, 1))
    assert_size_stride(permute_607, (9408, 9, 9), (81, 1, 9))
    assert_size_stride(permute_608, (9408, 32, 9), (288, 1, 32))
    assert_size_stride(alias_40, (8, 6, 196, 9, 9), (95256, 15876, 81, 9, 1))
    assert_size_stride(permute_610, (486, 192), (192, 1))
    assert_size_stride(permute_621, (192, 192), (192, 1))
    assert_size_stride(div_56, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(permute_623, (192, 576), (576, 1))
    assert_size_stride(permute_627, (576, 192), (192, 1))
    assert_size_stride(div_57, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(permute_633, (192, 192), (192, 1))
    assert_size_stride(permute_638, (9408, 9, 9), (81, 1, 9))
    assert_size_stride(permute_639, (9408, 32, 9), (288, 1, 32))
    assert_size_stride(alias_41, (8, 6, 196, 9, 9), (95256, 15876, 81, 9, 1))
    assert_size_stride(permute_641, (486, 192), (192, 1))
    assert_size_stride(permute_652, (192, 192), (192, 1))
    assert_size_stride(div_58, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(permute_654, (192, 576), (576, 1))
    assert_size_stride(permute_658, (576, 192), (192, 1))
    assert_size_stride(div_59, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(permute_664, (192, 192), (192, 1))
    assert_size_stride(permute_669, (9408, 9, 9), (81, 1, 9))
    assert_size_stride(permute_670, (9408, 32, 9), (288, 1, 32))
    assert_size_stride(alias_42, (8, 6, 196, 9, 9), (95256, 15876, 81, 9, 1))
    assert_size_stride(permute_672, (486, 192), (192, 1))
    assert_size_stride(permute_683, (192, 192), (192, 1))
    assert_size_stride(div_60, (8, 28, 28, 1), (784, 1, 28, 28))
    assert_size_stride(unsqueeze_112, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_124, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_136, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 196, 1000), device='cpu', dtype=torch.float32)
    buf1 = empty((8, 1000), device='cpu', dtype=torch.float32)
    cpp_fused_mul_scatter_zeros_0(c_void_p(tangents_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    aten.scatter_(buf0,1,unsqueeze_61,reinterpret_tensor(buf1, (8, 1, 1000), (1000, 0, 1), 0))
    del buf1
    del unsqueeze_61
    buf4 = empty((1, 1, 1000), device='cpu', dtype=torch.float32)
    cpp_fused_sum_1(c_void_p(buf0.data_ptr()), c_void_p(buf4.data_ptr()))
    buf5 = empty((1000, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf0, (1000, 1568), (1, 1000), 0), view_335, out=buf5)
    del view_335
    buf6 = empty((1568, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf0, (1568, 1000), (1000, 1), 0), permute_177, out=buf6)
    del buf0
    del permute_177
    buf7 = empty((8, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_179, out=buf7)
    del permute_179
    buf8 = empty((1000, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), select, out=buf8)
    del select
    buf9 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf10 = empty_strided((8, 197, 1), (197, 1, 1576), device='cpu', dtype=torch.float32)
    buf11 = empty_strided((8, 197, 1), (197, 1, 1576), device='cpu', dtype=torch.float32)
    buf12 = empty((8, 197, 384), device='cpu', dtype=torch.float32)
    buf13 = empty((384, ), device='cpu', dtype=torch.float32)
    buf14 = empty((384, ), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_select_backward_slice_backward_sum_2(c_void_p(tangents_1.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(primals_246.data_ptr()), c_void_p(cat_2.data_ptr()), c_void_p(getitem_133.data_ptr()), c_void_p(rsqrt_43.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(buf14.data_ptr()))
    del cat_2
    del getitem_133
    del primals_246
    del rsqrt_43
    del tangents_1
    buf15 = empty((8, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf12, (8, 384), (75648, 1), 0), permute_183, out=buf15)
    del permute_183
    buf16 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf12, (384, 8), (1, 75648), 0), view_333, out=buf16)
    del view_333
    buf17 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf18 = reinterpret_tensor(buf15, (8, 1, 1152), (1152, 1152, 1), 0); del buf15  # reuse
    cpp_fused_gelu_gelu_backward_sum_3(c_void_p(buf18.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(addmm_58.data_ptr()), c_void_p(buf17.data_ptr()))
    del addmm_58
    buf19 = buf7; del buf7  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf18, (8, 1152), (1152, 1), 0), permute_187, out=buf19)
    del permute_187
    buf20 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf18, (1152, 8), (1, 1152), 0), view_331, out=buf20)
    del view_331
    buf21 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf22 = empty_strided((8, 1, 1), (1, 8, 8), device='cpu', dtype=torch.float32)
    buf23 = empty_strided((8, 1, 1), (1, 8, 8), device='cpu', dtype=torch.float32)
    buf24 = empty((384, ), device='cpu', dtype=torch.float32)
    buf25 = empty((384, ), device='cpu', dtype=torch.float32)
    buf26 = reinterpret_tensor(buf19, (8, 1, 384), (384, 384, 1), 0); del buf19  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_4(c_void_p(buf26.data_ptr()), c_void_p(buf18.data_ptr()), c_void_p(primals_240.data_ptr()), c_void_p(mul_176.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(div_21.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf23.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf25.data_ptr()))
    del div_21
    del mul_176
    del primals_240
    buf27 = empty((8, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf26, (8, 384), (384, 1), 0), permute_191, out=buf27)
    del permute_191
    buf28 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf26, (384, 8), (1, 384), 0), view_329, out=buf28)
    del view_329
    buf29 = empty((1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_5(c_void_p(buf26.data_ptr()), c_void_p(buf29.data_ptr()))
    buf30 = empty((96, 197, 32), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_196, reinterpret_tensor(buf27, (96, 1, 32), (32, 32, 1), 0), out=buf30)
    del permute_196
    buf31 = empty((96, 1, 197), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf27, (96, 1, 32), (32, 32, 1), 0), permute_197, out=buf31)
    del permute_197
    buf32 = empty_strided((8, 12, 1, 1), (12, 1, 96, 96), device='cpu', dtype=torch.float32)
    buf33 = reinterpret_tensor(buf31, (8, 12, 1, 197), (2364, 197, 197, 1), 0); del buf31  # reuse
    cpp_fused__softmax_backward_data_6(c_void_p(buf33.data_ptr()), c_void_p(alias_23.data_ptr()), c_void_p(buf32.data_ptr()))
    del alias_23
    buf34 = empty((96, 32, 197), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_198, reinterpret_tensor(buf33, (96, 1, 197), (197, 0, 1), 0), out=buf34)
    del permute_198
    buf35 = reinterpret_tensor(buf27, (96, 1, 32), (32, 32, 1), 0); del buf27  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf33, (96, 1, 197), (197, 0, 1), 0), permute_199, out=buf35)
    del permute_199
    buf36 = reinterpret_tensor(buf35, (8, 384), (384, 1), 0); del buf35  # reuse
    cpp_fused_view_7(c_void_p(buf36.data_ptr()))
    buf37 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf36, (384, 8), (1, 384), 0), view_319, out=buf37)
    del view_319
    buf38 = empty((8, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf36, permute_203, out=buf38)
    del permute_203
    buf39 = empty((8, 197, 2, 12, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_8(c_void_p(buf34.data_ptr()), c_void_p(buf30.data_ptr()), c_void_p(buf39.data_ptr()))
    buf40 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf39, (768, 1576), (1, 768), 0), view_316, out=buf40)
    del view_316
    buf41 = reinterpret_tensor(buf34, (1576, 384), (384, 1), 0); del buf34  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf39, (1576, 768), (768, 1), 0), permute_208, out=buf41)
    del permute_208
    buf42 = buf11; del buf11  # reuse
    buf43 = buf10; del buf10  # reuse
    buf44 = empty((384, ), device='cpu', dtype=torch.float32)
    buf45 = empty((384, ), device='cpu', dtype=torch.float32)
    buf46 = buf12; del buf12  # reuse
    buf47 = reinterpret_tensor(buf30, (8, 197, 384), (75648, 384, 1), 0); del buf30  # reuse
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_slice_backward_9(c_void_p(buf46.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(buf41.data_ptr()), c_void_p(primals_234.data_ptr()), c_void_p(cat_1.data_ptr()), c_void_p(getitem_127.data_ptr()), c_void_p(rsqrt_41.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf42.data_ptr()), c_void_p(buf43.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(buf47.data_ptr()))
    del cat_1
    del getitem_127
    del primals_234
    del rsqrt_41
    buf48 = reinterpret_tensor(buf18, (8, 1152), (1152, 1), 0); del buf18  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf47, (8, 384), (75648, 1), 0), permute_210, out=buf48)
    del permute_210
    buf49 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf47, (384, 8), (1, 75648), 0), view_314, out=buf49)
    del view_314
    buf50 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf51 = reinterpret_tensor(buf48, (8, 1, 1152), (1152, 1152, 1), 0); del buf48  # reuse
    cpp_fused_gelu_gelu_backward_sum_10(c_void_p(buf51.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(addmm_55.data_ptr()), c_void_p(buf50.data_ptr()))
    del addmm_55
    buf52 = buf38; del buf38  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf51, (8, 1152), (1152, 1), 0), permute_214, out=buf52)
    del permute_214
    buf53 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf51, (1152, 8), (1, 1152), 0), view_312, out=buf53)
    del view_312
    buf54 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf55 = buf23; del buf23  # reuse
    buf56 = buf22; del buf22  # reuse
    buf57 = empty((384, ), device='cpu', dtype=torch.float32)
    buf58 = empty((384, ), device='cpu', dtype=torch.float32)
    buf59 = reinterpret_tensor(buf52, (8, 1, 384), (384, 384, 1), 0); del buf52  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_11(c_void_p(buf59.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(primals_228.data_ptr()), c_void_p(mul_168.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(div_23.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(buf55.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf58.data_ptr()))
    del buf51
    del buf55
    del buf56
    del div_23
    del mul_168
    del primals_228
    buf60 = buf36; del buf36  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf59, (8, 384), (384, 1), 0), permute_218, out=buf60)
    del permute_218
    buf61 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf59, (384, 8), (1, 384), 0), view_310, out=buf61)
    del view_310
    buf64 = reinterpret_tensor(buf33, (96, 1, 197), (197, 197, 1), 0); del buf33  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf60, (96, 1, 32), (32, 32, 1), 0), permute_224, out=buf64)
    del permute_224
    buf65 = buf32; del buf32  # reuse
    buf66 = reinterpret_tensor(buf64, (8, 12, 1, 197), (2364, 197, 197, 1), 0); del buf64  # reuse
    cpp_fused__softmax_backward_data_12(c_void_p(buf66.data_ptr()), c_void_p(alias_24.data_ptr()), c_void_p(buf65.data_ptr()))
    del alias_24
    del buf65
    buf68 = empty((96, 1, 32), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf66, (96, 1, 197), (197, 0, 1), 0), permute_226, out=buf68)
    del permute_226
    buf69 = reinterpret_tensor(buf68, (8, 384), (384, 1), 0); del buf68  # reuse
    cpp_fused_view_13(c_void_p(buf69.data_ptr()))
    buf71 = empty((8, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf69, permute_230, out=buf71)
    del permute_230
    buf63 = reinterpret_tensor(buf47, (96, 197, 32), (6304, 32, 1), 0); del buf47  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_223, reinterpret_tensor(buf60, (96, 1, 32), (32, 32, 1), 0), out=buf63)
    del buf60
    del permute_223
    buf67 = reinterpret_tensor(buf41, (96, 32, 197), (6304, 197, 1), 0); del buf41  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_225, reinterpret_tensor(buf66, (96, 1, 197), (197, 0, 1), 0), out=buf67)
    del buf66
    del permute_225
    buf72 = buf39; del buf39  # reuse
    cpp_fused_clone_14(c_void_p(buf67.data_ptr()), c_void_p(buf63.data_ptr()), c_void_p(buf72.data_ptr()))
    del buf63
    buf74 = reinterpret_tensor(buf67, (1576, 384), (384, 1), 0); del buf67  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf72, (1576, 768), (768, 1), 0), permute_235, out=buf74)
    del permute_235
    buf75 = buf43; del buf43  # reuse
    buf76 = buf42; del buf42  # reuse
    buf79 = buf46; del buf46  # reuse
    buf62 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf80 = empty((1, 1, 384), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_native_layer_norm_backward_slice_backward_sum_15(c_void_p(buf79.data_ptr()), c_void_p(buf71.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(primals_222.data_ptr()), c_void_p(cat.data_ptr()), c_void_p(getitem_121.data_ptr()), c_void_p(rsqrt_39.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf75.data_ptr()), c_void_p(buf76.data_ptr()), c_void_p(buf62.data_ptr()), c_void_p(buf80.data_ptr()))
    del buf26
    del buf75
    del buf76
    del primals_222
    buf70 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf69, (384, 8), (1, 384), 0), view_300, out=buf70)
    del buf69
    del view_300
    buf73 = empty((768, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf72, (768, 1576), (1, 768), 0), view_297, out=buf73)
    del buf72
    del view_297
    buf77 = empty((384, ), device='cpu', dtype=torch.float32)
    buf78 = empty((384, ), device='cpu', dtype=torch.float32)
    buf81 = reinterpret_tensor(buf6, (8, 14, 14, 384), (75264, 5376, 384, 1), 0); del buf6  # reuse
    cpp_fused_add_clone_native_layer_norm_native_layer_norm_backward_slice_backward_16(c_void_p(buf71.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(cat.data_ptr()), c_void_p(getitem_121.data_ptr()), c_void_p(rsqrt_39.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf77.data_ptr()), c_void_p(buf78.data_ptr()), c_void_p(buf81.data_ptr()))
    del buf71
    del buf74
    del cat
    del getitem_121
    del rsqrt_39
    buf82 = empty((1568, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf81, (1568, 384), (384, 1), 0), permute_237, out=buf82)
    del permute_237
    buf83 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf81, (384, 1568), (1, 384), 0), view_294, out=buf83)
    del view_294
    buf84 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf85 = reinterpret_tensor(buf82, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf82  # reuse
    cpp_fused_gelu_gelu_backward_sum_17(c_void_p(buf85.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(addmm_52.data_ptr()), c_void_p(buf84.data_ptr()))
    del addmm_52
    buf86 = reinterpret_tensor(buf81, (1568, 384), (384, 1), 0); del buf81  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf85, (1568, 1152), (1152, 1), 0), permute_241, out=buf86)
    del permute_241
    buf87 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf85, (1152, 1568), (1, 1152), 0), view_292, out=buf87)
    del view_292
    buf88 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf89 = empty_strided((8, 14, 14, 1), (196, 14, 1, 1568), device='cpu', dtype=torch.float32)
    buf90 = empty_strided((8, 14, 14, 1), (196, 14, 1, 1568), device='cpu', dtype=torch.float32)
    buf91 = empty((384, ), device='cpu', dtype=torch.float32)
    buf92 = empty((384, ), device='cpu', dtype=torch.float32)
    buf93 = reinterpret_tensor(buf86, (8, 14, 14, 384), (75264, 5376, 384, 1), 0); del buf86  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_18(c_void_p(buf93.data_ptr()), c_void_p(buf85.data_ptr()), c_void_p(primals_216.data_ptr()), c_void_p(mul_160.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(div_25.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(buf89.data_ptr()), c_void_p(buf90.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(buf92.data_ptr()))
    del buf59
    del buf79
    del div_25
    del mul_160
    del primals_216
    buf94 = empty((1568, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf93, (1568, 384), (384, 1), 0), permute_245, out=buf94)
    del permute_245
    buf95 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf93, (384, 1568), (1, 384), 0), view_290, out=buf95)
    del view_290
    buf96 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf97 = empty((8, 12, 196, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_sum_19(c_void_p(buf93.data_ptr()), c_void_p(buf94.data_ptr()), c_void_p(buf96.data_ptr()), c_void_p(buf97.data_ptr()))
    buf98 = reinterpret_tensor(buf94, (96, 196, 32), (6272, 32, 1), 0); del buf94  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_250, reinterpret_tensor(buf97, (96, 196, 32), (6272, 32, 1), 0), out=buf98)
    del permute_250
    buf99 = empty((96, 196, 196), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf97, (96, 196, 32), (6272, 32, 1), 0), permute_251, out=buf99)
    del permute_251
    buf100 = empty_strided((8, 12, 196, 1), (2352, 196, 1, 18816), device='cpu', dtype=torch.float32)
    buf101 = reinterpret_tensor(buf99, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf99  # reuse
    cpp_fused__softmax_backward_data_mul_20(c_void_p(buf101.data_ptr()), c_void_p(alias_25.data_ptr()), c_void_p(buf100.data_ptr()))
    del alias_25
    buf102 = reinterpret_tensor(buf97, (96, 32, 196), (6272, 196, 1), 0); del buf97  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_252, reinterpret_tensor(buf101, (96, 196, 196), (38416, 196, 1), 0), out=buf102)
    del permute_252
    buf103 = empty((96, 196, 32), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf101, (96, 196, 196), (38416, 196, 1), 0), permute_253, out=buf103)
    del permute_253
    buf104 = reinterpret_tensor(buf85, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf85  # reuse
    cpp_fused_clone_21(c_void_p(buf103.data_ptr()), c_void_p(buf102.data_ptr()), c_void_p(buf98.data_ptr()), c_void_p(buf104.data_ptr()))
    buf105 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf104, (1152, 1568), (1, 1152), 0), view_280, out=buf105)
    del view_280
    buf106 = reinterpret_tensor(buf98, (1568, 384), (384, 1), 0); del buf98  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf104, (1568, 1152), (1152, 1), 0), permute_258, out=buf106)
    del permute_258
    buf107 = buf90; del buf90  # reuse
    buf108 = buf89; del buf89  # reuse
    buf109 = empty((384, ), device='cpu', dtype=torch.float32)
    buf110 = empty((384, ), device='cpu', dtype=torch.float32)
    buf111 = reinterpret_tensor(buf106, (8, 14, 14, 384), (75264, 5376, 384, 1), 0); del buf106  # reuse
    cpp_fused_add_native_layer_norm_backward_22(c_void_p(buf111.data_ptr()), c_void_p(primals_211.data_ptr()), c_void_p(mul_157.data_ptr()), c_void_p(buf93.data_ptr()), c_void_p(div_26.data_ptr()), c_void_p(buf107.data_ptr()), c_void_p(buf108.data_ptr()), c_void_p(buf109.data_ptr()), c_void_p(buf110.data_ptr()))
    del div_26
    del mul_157
    del primals_211
    buf112 = reinterpret_tensor(buf104, (1568, 1152), (1152, 1), 0); del buf104  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf111, (1568, 384), (384, 1), 0), permute_260, out=buf112)
    del permute_260
    buf113 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf111, (384, 1568), (1, 384), 0), view_278, out=buf113)
    del view_278
    buf114 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf115 = reinterpret_tensor(buf112, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf112  # reuse
    cpp_fused_gelu_gelu_backward_sum_23(c_void_p(buf115.data_ptr()), c_void_p(buf111.data_ptr()), c_void_p(addmm_49.data_ptr()), c_void_p(buf114.data_ptr()))
    del addmm_49
    buf116 = reinterpret_tensor(buf93, (1568, 384), (384, 1), 0); del buf93  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf115, (1568, 1152), (1152, 1), 0), permute_264, out=buf116)
    del permute_264
    buf117 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf115, (1152, 1568), (1, 1152), 0), view_276, out=buf117)
    del view_276
    buf118 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf119 = buf108; del buf108  # reuse
    buf120 = buf107; del buf107  # reuse
    buf121 = empty((384, ), device='cpu', dtype=torch.float32)
    buf122 = empty((384, ), device='cpu', dtype=torch.float32)
    buf123 = buf111; del buf111  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_24(c_void_p(buf123.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(buf116.data_ptr()), c_void_p(primals_205.data_ptr()), c_void_p(mul_152.data_ptr()), c_void_p(div_27.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf121.data_ptr()), c_void_p(buf122.data_ptr()))
    del div_27
    del mul_152
    del primals_205
    buf124 = buf116; del buf116  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf123, (1568, 384), (384, 1), 0), permute_268, out=buf124)
    del permute_268
    buf125 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf123, (384, 1568), (1, 384), 0), view_274, out=buf125)
    del view_274
    buf126 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf127 = reinterpret_tensor(buf103, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf103  # reuse
    cpp_fused_clone_sum_25(c_void_p(buf123.data_ptr()), c_void_p(buf124.data_ptr()), c_void_p(buf126.data_ptr()), c_void_p(buf127.data_ptr()))
    buf128 = reinterpret_tensor(buf124, (96, 196, 32), (6272, 32, 1), 0); del buf124  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_273, reinterpret_tensor(buf127, (96, 196, 32), (6272, 32, 1), 0), out=buf128)
    del permute_273
    buf129 = reinterpret_tensor(buf101, (96, 196, 196), (38416, 196, 1), 0); del buf101  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf127, (96, 196, 32), (6272, 32, 1), 0), permute_274, out=buf129)
    del permute_274
    buf130 = buf100; del buf100  # reuse
    buf131 = reinterpret_tensor(buf129, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf129  # reuse
    cpp_fused__softmax_backward_data_mul_26(c_void_p(buf131.data_ptr()), c_void_p(alias_26.data_ptr()), c_void_p(buf130.data_ptr()))
    del alias_26
    buf132 = reinterpret_tensor(buf127, (96, 32, 196), (6272, 196, 1), 0); del buf127  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_275, reinterpret_tensor(buf131, (96, 196, 196), (38416, 196, 1), 0), out=buf132)
    del permute_275
    buf133 = reinterpret_tensor(buf102, (96, 196, 32), (6272, 32, 1), 0); del buf102  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf131, (96, 196, 196), (38416, 196, 1), 0), permute_276, out=buf133)
    del permute_276
    buf134 = reinterpret_tensor(buf115, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf115  # reuse
    cpp_fused_clone_27(c_void_p(buf133.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(buf128.data_ptr()), c_void_p(buf134.data_ptr()))
    buf135 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf134, (1152, 1568), (1, 1152), 0), view_264, out=buf135)
    del view_264
    buf136 = reinterpret_tensor(buf133, (1568, 384), (384, 1), 0); del buf133  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf134, (1568, 1152), (1152, 1), 0), permute_281, out=buf136)
    del permute_281
    buf137 = buf120; del buf120  # reuse
    buf138 = buf119; del buf119  # reuse
    buf139 = empty((384, ), device='cpu', dtype=torch.float32)
    buf140 = empty((384, ), device='cpu', dtype=torch.float32)
    buf141 = buf123; del buf123  # reuse
    cpp_fused_add_native_layer_norm_backward_28(c_void_p(buf141.data_ptr()), c_void_p(buf136.data_ptr()), c_void_p(primals_200.data_ptr()), c_void_p(mul_149.data_ptr()), c_void_p(div_28.data_ptr()), c_void_p(buf137.data_ptr()), c_void_p(buf138.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf140.data_ptr()))
    del div_28
    del mul_149
    del primals_200
    buf142 = reinterpret_tensor(buf134, (1568, 1152), (1152, 1), 0); del buf134  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf141, (1568, 384), (384, 1), 0), permute_283, out=buf142)
    del permute_283
    buf143 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf141, (384, 1568), (1, 384), 0), view_262, out=buf143)
    del view_262
    buf144 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf145 = reinterpret_tensor(buf142, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf142  # reuse
    cpp_fused_gelu_gelu_backward_sum_29(c_void_p(buf145.data_ptr()), c_void_p(buf141.data_ptr()), c_void_p(addmm_46.data_ptr()), c_void_p(buf144.data_ptr()))
    del addmm_46
    buf146 = buf136; del buf136  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf145, (1568, 1152), (1152, 1), 0), permute_287, out=buf146)
    del permute_287
    buf147 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf145, (1152, 1568), (1, 1152), 0), view_260, out=buf147)
    del view_260
    buf148 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf149 = buf138; del buf138  # reuse
    buf150 = buf137; del buf137  # reuse
    buf151 = empty((384, ), device='cpu', dtype=torch.float32)
    buf152 = empty((384, ), device='cpu', dtype=torch.float32)
    buf153 = buf141; del buf141  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_30(c_void_p(buf153.data_ptr()), c_void_p(buf145.data_ptr()), c_void_p(buf146.data_ptr()), c_void_p(primals_194.data_ptr()), c_void_p(mul_144.data_ptr()), c_void_p(div_29.data_ptr()), c_void_p(buf148.data_ptr()), c_void_p(buf149.data_ptr()), c_void_p(buf150.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf152.data_ptr()))
    del div_29
    del mul_144
    del primals_194
    buf154 = buf146; del buf146  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf153, (1568, 384), (384, 1), 0), permute_291, out=buf154)
    del permute_291
    buf155 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf153, (384, 1568), (1, 384), 0), view_258, out=buf155)
    del view_258
    buf156 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf157 = reinterpret_tensor(buf132, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf132  # reuse
    cpp_fused_clone_sum_31(c_void_p(buf153.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf156.data_ptr()), c_void_p(buf157.data_ptr()))
    buf158 = reinterpret_tensor(buf154, (96, 196, 32), (6272, 32, 1), 0); del buf154  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_296, reinterpret_tensor(buf157, (96, 196, 32), (6272, 32, 1), 0), out=buf158)
    del permute_296
    buf159 = reinterpret_tensor(buf131, (96, 196, 196), (38416, 196, 1), 0); del buf131  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf157, (96, 196, 32), (6272, 32, 1), 0), permute_297, out=buf159)
    del permute_297
    buf160 = buf130; del buf130  # reuse
    buf161 = reinterpret_tensor(buf159, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf159  # reuse
    cpp_fused__softmax_backward_data_mul_32(c_void_p(buf161.data_ptr()), c_void_p(alias_27.data_ptr()), c_void_p(buf160.data_ptr()))
    del alias_27
    buf162 = reinterpret_tensor(buf157, (96, 32, 196), (6272, 196, 1), 0); del buf157  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_298, reinterpret_tensor(buf161, (96, 196, 196), (38416, 196, 1), 0), out=buf162)
    del permute_298
    buf163 = buf128; del buf128  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf161, (96, 196, 196), (38416, 196, 1), 0), permute_299, out=buf163)
    del permute_299
    buf164 = reinterpret_tensor(buf145, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf145  # reuse
    cpp_fused_clone_33(c_void_p(buf163.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(buf158.data_ptr()), c_void_p(buf164.data_ptr()))
    buf165 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf164, (1152, 1568), (1, 1152), 0), view_248, out=buf165)
    del view_248
    buf166 = reinterpret_tensor(buf163, (1568, 384), (384, 1), 0); del buf163  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf164, (1568, 1152), (1152, 1), 0), permute_304, out=buf166)
    del permute_304
    buf167 = buf150; del buf150  # reuse
    buf168 = buf149; del buf149  # reuse
    buf169 = empty((384, ), device='cpu', dtype=torch.float32)
    buf170 = empty((384, ), device='cpu', dtype=torch.float32)
    buf171 = buf153; del buf153  # reuse
    cpp_fused_add_native_layer_norm_backward_34(c_void_p(buf171.data_ptr()), c_void_p(buf166.data_ptr()), c_void_p(primals_189.data_ptr()), c_void_p(mul_141.data_ptr()), c_void_p(div_30.data_ptr()), c_void_p(buf167.data_ptr()), c_void_p(buf168.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(buf170.data_ptr()))
    del div_30
    del mul_141
    del primals_189
    buf172 = reinterpret_tensor(buf164, (1568, 1152), (1152, 1), 0); del buf164  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf171, (1568, 384), (384, 1), 0), permute_306, out=buf172)
    del permute_306
    buf173 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf171, (384, 1568), (1, 384), 0), view_246, out=buf173)
    del view_246
    buf174 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf175 = reinterpret_tensor(buf172, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf172  # reuse
    cpp_fused_gelu_gelu_backward_sum_35(c_void_p(buf175.data_ptr()), c_void_p(buf171.data_ptr()), c_void_p(addmm_43.data_ptr()), c_void_p(buf174.data_ptr()))
    del addmm_43
    buf176 = buf166; del buf166  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf175, (1568, 1152), (1152, 1), 0), permute_310, out=buf176)
    del permute_310
    buf177 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf175, (1152, 1568), (1, 1152), 0), view_244, out=buf177)
    del view_244
    buf178 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf179 = buf168; del buf168  # reuse
    buf180 = buf167; del buf167  # reuse
    buf181 = empty((384, ), device='cpu', dtype=torch.float32)
    buf182 = empty((384, ), device='cpu', dtype=torch.float32)
    buf183 = buf171; del buf171  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_36(c_void_p(buf183.data_ptr()), c_void_p(buf175.data_ptr()), c_void_p(buf176.data_ptr()), c_void_p(primals_183.data_ptr()), c_void_p(mul_136.data_ptr()), c_void_p(div_31.data_ptr()), c_void_p(buf178.data_ptr()), c_void_p(buf179.data_ptr()), c_void_p(buf180.data_ptr()), c_void_p(buf181.data_ptr()), c_void_p(buf182.data_ptr()))
    del div_31
    del mul_136
    del primals_183
    buf184 = buf176; del buf176  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf183, (1568, 384), (384, 1), 0), permute_314, out=buf184)
    del permute_314
    buf185 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf183, (384, 1568), (1, 384), 0), view_242, out=buf185)
    del view_242
    buf186 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf187 = reinterpret_tensor(buf162, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf162  # reuse
    cpp_fused_clone_sum_37(c_void_p(buf183.data_ptr()), c_void_p(buf184.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(buf187.data_ptr()))
    buf188 = reinterpret_tensor(buf184, (96, 196, 32), (6272, 32, 1), 0); del buf184  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_319, reinterpret_tensor(buf187, (96, 196, 32), (6272, 32, 1), 0), out=buf188)
    del permute_319
    buf189 = reinterpret_tensor(buf161, (96, 196, 196), (38416, 196, 1), 0); del buf161  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf187, (96, 196, 32), (6272, 32, 1), 0), permute_320, out=buf189)
    del permute_320
    buf190 = buf160; del buf160  # reuse
    buf191 = reinterpret_tensor(buf189, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf189  # reuse
    cpp_fused__softmax_backward_data_mul_38(c_void_p(buf191.data_ptr()), c_void_p(alias_28.data_ptr()), c_void_p(buf190.data_ptr()))
    del alias_28
    buf192 = reinterpret_tensor(buf187, (96, 32, 196), (6272, 196, 1), 0); del buf187  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_321, reinterpret_tensor(buf191, (96, 196, 196), (38416, 196, 1), 0), out=buf192)
    del permute_321
    buf193 = buf158; del buf158  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf191, (96, 196, 196), (38416, 196, 1), 0), permute_322, out=buf193)
    del permute_322
    buf194 = reinterpret_tensor(buf175, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf175  # reuse
    cpp_fused_clone_39(c_void_p(buf193.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(buf188.data_ptr()), c_void_p(buf194.data_ptr()))
    buf195 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf194, (1152, 1568), (1, 1152), 0), view_232, out=buf195)
    del view_232
    buf196 = reinterpret_tensor(buf193, (1568, 384), (384, 1), 0); del buf193  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf194, (1568, 1152), (1152, 1), 0), permute_327, out=buf196)
    del permute_327
    buf197 = buf180; del buf180  # reuse
    buf198 = buf179; del buf179  # reuse
    buf199 = empty((384, ), device='cpu', dtype=torch.float32)
    buf200 = empty((384, ), device='cpu', dtype=torch.float32)
    buf201 = buf183; del buf183  # reuse
    cpp_fused_add_native_layer_norm_backward_40(c_void_p(buf201.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(primals_178.data_ptr()), c_void_p(mul_133.data_ptr()), c_void_p(div_32.data_ptr()), c_void_p(buf197.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf200.data_ptr()))
    del div_32
    del mul_133
    del primals_178
    buf202 = reinterpret_tensor(buf194, (1568, 1152), (1152, 1), 0); del buf194  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf201, (1568, 384), (384, 1), 0), permute_329, out=buf202)
    del permute_329
    buf203 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf201, (384, 1568), (1, 384), 0), view_230, out=buf203)
    del view_230
    buf204 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf205 = reinterpret_tensor(buf202, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf202  # reuse
    cpp_fused_gelu_gelu_backward_sum_41(c_void_p(buf205.data_ptr()), c_void_p(buf201.data_ptr()), c_void_p(addmm_40.data_ptr()), c_void_p(buf204.data_ptr()))
    del addmm_40
    buf206 = buf196; del buf196  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf205, (1568, 1152), (1152, 1), 0), permute_333, out=buf206)
    del permute_333
    buf207 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf205, (1152, 1568), (1, 1152), 0), view_228, out=buf207)
    del view_228
    buf208 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf209 = buf198; del buf198  # reuse
    buf210 = buf197; del buf197  # reuse
    buf211 = empty((384, ), device='cpu', dtype=torch.float32)
    buf212 = empty((384, ), device='cpu', dtype=torch.float32)
    buf213 = buf201; del buf201  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_42(c_void_p(buf213.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(buf206.data_ptr()), c_void_p(primals_172.data_ptr()), c_void_p(mul_128.data_ptr()), c_void_p(div_33.data_ptr()), c_void_p(buf208.data_ptr()), c_void_p(buf209.data_ptr()), c_void_p(buf210.data_ptr()), c_void_p(buf211.data_ptr()), c_void_p(buf212.data_ptr()))
    del div_33
    del mul_128
    del primals_172
    buf214 = buf206; del buf206  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf213, (1568, 384), (384, 1), 0), permute_337, out=buf214)
    del permute_337
    buf215 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf213, (384, 1568), (1, 384), 0), view_226, out=buf215)
    del view_226
    buf216 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf217 = reinterpret_tensor(buf192, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf192  # reuse
    cpp_fused_clone_sum_43(c_void_p(buf213.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf216.data_ptr()), c_void_p(buf217.data_ptr()))
    buf218 = reinterpret_tensor(buf214, (96, 196, 32), (6272, 32, 1), 0); del buf214  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_342, reinterpret_tensor(buf217, (96, 196, 32), (6272, 32, 1), 0), out=buf218)
    del permute_342
    buf219 = reinterpret_tensor(buf191, (96, 196, 196), (38416, 196, 1), 0); del buf191  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf217, (96, 196, 32), (6272, 32, 1), 0), permute_343, out=buf219)
    del permute_343
    buf220 = buf190; del buf190  # reuse
    buf221 = reinterpret_tensor(buf219, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf219  # reuse
    cpp_fused__softmax_backward_data_mul_44(c_void_p(buf221.data_ptr()), c_void_p(alias_29.data_ptr()), c_void_p(buf220.data_ptr()))
    del alias_29
    buf222 = reinterpret_tensor(buf217, (96, 32, 196), (6272, 196, 1), 0); del buf217  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_344, reinterpret_tensor(buf221, (96, 196, 196), (38416, 196, 1), 0), out=buf222)
    del permute_344
    buf223 = buf188; del buf188  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf221, (96, 196, 196), (38416, 196, 1), 0), permute_345, out=buf223)
    del permute_345
    buf224 = reinterpret_tensor(buf205, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf205  # reuse
    cpp_fused_clone_45(c_void_p(buf223.data_ptr()), c_void_p(buf222.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(buf224.data_ptr()))
    buf225 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf224, (1152, 1568), (1, 1152), 0), view_216, out=buf225)
    del view_216
    buf226 = reinterpret_tensor(buf223, (1568, 384), (384, 1), 0); del buf223  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf224, (1568, 1152), (1152, 1), 0), permute_350, out=buf226)
    del permute_350
    buf227 = buf210; del buf210  # reuse
    buf228 = buf209; del buf209  # reuse
    buf229 = empty((384, ), device='cpu', dtype=torch.float32)
    buf230 = empty((384, ), device='cpu', dtype=torch.float32)
    buf231 = buf213; del buf213  # reuse
    cpp_fused_add_native_layer_norm_backward_46(c_void_p(buf231.data_ptr()), c_void_p(buf226.data_ptr()), c_void_p(primals_167.data_ptr()), c_void_p(mul_125.data_ptr()), c_void_p(div_34.data_ptr()), c_void_p(buf227.data_ptr()), c_void_p(buf228.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf230.data_ptr()))
    del div_34
    del mul_125
    del primals_167
    buf232 = reinterpret_tensor(buf224, (1568, 1152), (1152, 1), 0); del buf224  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf231, (1568, 384), (384, 1), 0), permute_352, out=buf232)
    del permute_352
    buf233 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf231, (384, 1568), (1, 384), 0), view_214, out=buf233)
    del view_214
    buf234 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf235 = reinterpret_tensor(buf232, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf232  # reuse
    cpp_fused_gelu_gelu_backward_sum_47(c_void_p(buf235.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(addmm_37.data_ptr()), c_void_p(buf234.data_ptr()))
    del addmm_37
    buf236 = buf226; del buf226  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf235, (1568, 1152), (1152, 1), 0), permute_356, out=buf236)
    del permute_356
    buf237 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf235, (1152, 1568), (1, 1152), 0), view_212, out=buf237)
    del view_212
    buf238 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf239 = buf228; del buf228  # reuse
    buf240 = buf227; del buf227  # reuse
    buf241 = empty((384, ), device='cpu', dtype=torch.float32)
    buf242 = empty((384, ), device='cpu', dtype=torch.float32)
    buf243 = buf231; del buf231  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_48(c_void_p(buf243.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(buf236.data_ptr()), c_void_p(primals_161.data_ptr()), c_void_p(mul_120.data_ptr()), c_void_p(div_35.data_ptr()), c_void_p(buf238.data_ptr()), c_void_p(buf239.data_ptr()), c_void_p(buf240.data_ptr()), c_void_p(buf241.data_ptr()), c_void_p(buf242.data_ptr()))
    del div_35
    del mul_120
    del primals_161
    buf244 = buf236; del buf236  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf243, (1568, 384), (384, 1), 0), permute_360, out=buf244)
    del permute_360
    buf245 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf243, (384, 1568), (1, 384), 0), view_210, out=buf245)
    del view_210
    buf246 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf247 = reinterpret_tensor(buf222, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf222  # reuse
    cpp_fused_clone_sum_49(c_void_p(buf243.data_ptr()), c_void_p(buf244.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(buf247.data_ptr()))
    buf248 = reinterpret_tensor(buf244, (96, 196, 32), (6272, 32, 1), 0); del buf244  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_365, reinterpret_tensor(buf247, (96, 196, 32), (6272, 32, 1), 0), out=buf248)
    del permute_365
    buf249 = reinterpret_tensor(buf221, (96, 196, 196), (38416, 196, 1), 0); del buf221  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf247, (96, 196, 32), (6272, 32, 1), 0), permute_366, out=buf249)
    del permute_366
    buf250 = buf220; del buf220  # reuse
    buf251 = reinterpret_tensor(buf249, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf249  # reuse
    cpp_fused__softmax_backward_data_mul_50(c_void_p(buf251.data_ptr()), c_void_p(alias_30.data_ptr()), c_void_p(buf250.data_ptr()))
    del alias_30
    buf252 = reinterpret_tensor(buf247, (96, 32, 196), (6272, 196, 1), 0); del buf247  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_367, reinterpret_tensor(buf251, (96, 196, 196), (38416, 196, 1), 0), out=buf252)
    del permute_367
    buf253 = buf218; del buf218  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf251, (96, 196, 196), (38416, 196, 1), 0), permute_368, out=buf253)
    del permute_368
    buf254 = reinterpret_tensor(buf235, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf235  # reuse
    cpp_fused_clone_51(c_void_p(buf253.data_ptr()), c_void_p(buf252.data_ptr()), c_void_p(buf248.data_ptr()), c_void_p(buf254.data_ptr()))
    buf255 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf254, (1152, 1568), (1, 1152), 0), view_200, out=buf255)
    del view_200
    buf256 = reinterpret_tensor(buf253, (1568, 384), (384, 1), 0); del buf253  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf254, (1568, 1152), (1152, 1), 0), permute_373, out=buf256)
    del permute_373
    buf257 = buf240; del buf240  # reuse
    buf258 = buf239; del buf239  # reuse
    buf259 = empty((384, ), device='cpu', dtype=torch.float32)
    buf260 = empty((384, ), device='cpu', dtype=torch.float32)
    buf261 = buf243; del buf243  # reuse
    cpp_fused_add_native_layer_norm_backward_52(c_void_p(buf261.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(primals_156.data_ptr()), c_void_p(mul_117.data_ptr()), c_void_p(div_36.data_ptr()), c_void_p(buf257.data_ptr()), c_void_p(buf258.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf260.data_ptr()))
    del div_36
    del mul_117
    del primals_156
    buf262 = reinterpret_tensor(buf254, (1568, 1152), (1152, 1), 0); del buf254  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf261, (1568, 384), (384, 1), 0), permute_375, out=buf262)
    del permute_375
    buf263 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf261, (384, 1568), (1, 384), 0), view_198, out=buf263)
    del view_198
    buf264 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf265 = reinterpret_tensor(buf262, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf262  # reuse
    cpp_fused_gelu_gelu_backward_sum_53(c_void_p(buf265.data_ptr()), c_void_p(buf261.data_ptr()), c_void_p(addmm_34.data_ptr()), c_void_p(buf264.data_ptr()))
    del addmm_34
    buf266 = buf256; del buf256  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf265, (1568, 1152), (1152, 1), 0), permute_379, out=buf266)
    del permute_379
    buf267 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf265, (1152, 1568), (1, 1152), 0), view_196, out=buf267)
    del view_196
    buf268 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf269 = buf258; del buf258  # reuse
    buf270 = buf257; del buf257  # reuse
    buf271 = empty((384, ), device='cpu', dtype=torch.float32)
    buf272 = empty((384, ), device='cpu', dtype=torch.float32)
    buf273 = buf261; del buf261  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_54(c_void_p(buf273.data_ptr()), c_void_p(buf265.data_ptr()), c_void_p(buf266.data_ptr()), c_void_p(primals_150.data_ptr()), c_void_p(mul_112.data_ptr()), c_void_p(div_37.data_ptr()), c_void_p(buf268.data_ptr()), c_void_p(buf269.data_ptr()), c_void_p(buf270.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf272.data_ptr()))
    del div_37
    del mul_112
    del primals_150
    buf274 = buf266; del buf266  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf273, (1568, 384), (384, 1), 0), permute_383, out=buf274)
    del permute_383
    buf275 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf273, (384, 1568), (1, 384), 0), view_194, out=buf275)
    del view_194
    buf276 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf277 = reinterpret_tensor(buf252, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf252  # reuse
    cpp_fused_clone_sum_55(c_void_p(buf273.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(buf276.data_ptr()), c_void_p(buf277.data_ptr()))
    buf278 = reinterpret_tensor(buf274, (96, 196, 32), (6272, 32, 1), 0); del buf274  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_388, reinterpret_tensor(buf277, (96, 196, 32), (6272, 32, 1), 0), out=buf278)
    del permute_388
    buf279 = reinterpret_tensor(buf251, (96, 196, 196), (38416, 196, 1), 0); del buf251  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf277, (96, 196, 32), (6272, 32, 1), 0), permute_389, out=buf279)
    del permute_389
    buf280 = buf250; del buf250  # reuse
    buf281 = reinterpret_tensor(buf279, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf279  # reuse
    cpp_fused__softmax_backward_data_mul_56(c_void_p(buf281.data_ptr()), c_void_p(alias_31.data_ptr()), c_void_p(buf280.data_ptr()))
    del alias_31
    buf282 = reinterpret_tensor(buf277, (96, 32, 196), (6272, 196, 1), 0); del buf277  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_390, reinterpret_tensor(buf281, (96, 196, 196), (38416, 196, 1), 0), out=buf282)
    del permute_390
    buf283 = buf248; del buf248  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf281, (96, 196, 196), (38416, 196, 1), 0), permute_391, out=buf283)
    del permute_391
    buf284 = reinterpret_tensor(buf265, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf265  # reuse
    cpp_fused_clone_57(c_void_p(buf283.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(buf278.data_ptr()), c_void_p(buf284.data_ptr()))
    buf285 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf284, (1152, 1568), (1, 1152), 0), view_184, out=buf285)
    del view_184
    buf286 = reinterpret_tensor(buf283, (1568, 384), (384, 1), 0); del buf283  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf284, (1568, 1152), (1152, 1), 0), permute_396, out=buf286)
    del permute_396
    buf287 = buf270; del buf270  # reuse
    buf288 = buf269; del buf269  # reuse
    buf289 = empty((384, ), device='cpu', dtype=torch.float32)
    buf290 = empty((384, ), device='cpu', dtype=torch.float32)
    buf291 = buf273; del buf273  # reuse
    cpp_fused_add_native_layer_norm_backward_58(c_void_p(buf291.data_ptr()), c_void_p(buf286.data_ptr()), c_void_p(primals_145.data_ptr()), c_void_p(mul_109.data_ptr()), c_void_p(div_38.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(buf288.data_ptr()), c_void_p(buf289.data_ptr()), c_void_p(buf290.data_ptr()))
    del div_38
    del mul_109
    del primals_145
    buf292 = reinterpret_tensor(buf284, (1568, 1152), (1152, 1), 0); del buf284  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf291, (1568, 384), (384, 1), 0), permute_398, out=buf292)
    del permute_398
    buf293 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf291, (384, 1568), (1, 384), 0), view_182, out=buf293)
    del view_182
    buf294 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf295 = reinterpret_tensor(buf292, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf292  # reuse
    cpp_fused_gelu_gelu_backward_sum_59(c_void_p(buf295.data_ptr()), c_void_p(buf291.data_ptr()), c_void_p(addmm_31.data_ptr()), c_void_p(buf294.data_ptr()))
    del addmm_31
    buf296 = buf286; del buf286  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf295, (1568, 1152), (1152, 1), 0), permute_402, out=buf296)
    del permute_402
    buf297 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf295, (1152, 1568), (1, 1152), 0), view_180, out=buf297)
    del view_180
    buf298 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf299 = buf288; del buf288  # reuse
    buf300 = buf287; del buf287  # reuse
    buf301 = empty((384, ), device='cpu', dtype=torch.float32)
    buf302 = empty((384, ), device='cpu', dtype=torch.float32)
    buf303 = buf291; del buf291  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_60(c_void_p(buf303.data_ptr()), c_void_p(buf295.data_ptr()), c_void_p(buf296.data_ptr()), c_void_p(primals_139.data_ptr()), c_void_p(mul_104.data_ptr()), c_void_p(div_39.data_ptr()), c_void_p(buf298.data_ptr()), c_void_p(buf299.data_ptr()), c_void_p(buf300.data_ptr()), c_void_p(buf301.data_ptr()), c_void_p(buf302.data_ptr()))
    del div_39
    del mul_104
    del primals_139
    buf304 = buf296; del buf296  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf303, (1568, 384), (384, 1), 0), permute_406, out=buf304)
    del permute_406
    buf305 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf303, (384, 1568), (1, 384), 0), view_178, out=buf305)
    del view_178
    buf306 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf307 = reinterpret_tensor(buf282, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf282  # reuse
    cpp_fused_clone_sum_61(c_void_p(buf303.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf306.data_ptr()), c_void_p(buf307.data_ptr()))
    buf308 = reinterpret_tensor(buf304, (96, 196, 32), (6272, 32, 1), 0); del buf304  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_411, reinterpret_tensor(buf307, (96, 196, 32), (6272, 32, 1), 0), out=buf308)
    del permute_411
    buf309 = reinterpret_tensor(buf281, (96, 196, 196), (38416, 196, 1), 0); del buf281  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf307, (96, 196, 32), (6272, 32, 1), 0), permute_412, out=buf309)
    del permute_412
    buf310 = buf280; del buf280  # reuse
    buf311 = reinterpret_tensor(buf309, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf309  # reuse
    cpp_fused__softmax_backward_data_mul_62(c_void_p(buf311.data_ptr()), c_void_p(alias_32.data_ptr()), c_void_p(buf310.data_ptr()))
    del alias_32
    buf312 = reinterpret_tensor(buf307, (96, 32, 196), (6272, 196, 1), 0); del buf307  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_413, reinterpret_tensor(buf311, (96, 196, 196), (38416, 196, 1), 0), out=buf312)
    del permute_413
    buf313 = buf278; del buf278  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf311, (96, 196, 196), (38416, 196, 1), 0), permute_414, out=buf313)
    del permute_414
    buf314 = reinterpret_tensor(buf295, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf295  # reuse
    cpp_fused_clone_63(c_void_p(buf313.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(buf314.data_ptr()))
    buf315 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf314, (1152, 1568), (1, 1152), 0), view_168, out=buf315)
    del view_168
    buf316 = reinterpret_tensor(buf313, (1568, 384), (384, 1), 0); del buf313  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf314, (1568, 1152), (1152, 1), 0), permute_419, out=buf316)
    del permute_419
    buf317 = buf300; del buf300  # reuse
    buf318 = buf299; del buf299  # reuse
    buf319 = empty((384, ), device='cpu', dtype=torch.float32)
    buf320 = empty((384, ), device='cpu', dtype=torch.float32)
    buf321 = buf303; del buf303  # reuse
    cpp_fused_add_native_layer_norm_backward_64(c_void_p(buf321.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(primals_134.data_ptr()), c_void_p(mul_101.data_ptr()), c_void_p(div_40.data_ptr()), c_void_p(buf317.data_ptr()), c_void_p(buf318.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(buf320.data_ptr()))
    del div_40
    del mul_101
    del primals_134
    buf322 = reinterpret_tensor(buf314, (1568, 1152), (1152, 1), 0); del buf314  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf321, (1568, 384), (384, 1), 0), permute_421, out=buf322)
    del permute_421
    buf323 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf321, (384, 1568), (1, 384), 0), view_166, out=buf323)
    del view_166
    buf324 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf325 = reinterpret_tensor(buf322, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf322  # reuse
    cpp_fused_gelu_gelu_backward_sum_65(c_void_p(buf325.data_ptr()), c_void_p(buf321.data_ptr()), c_void_p(addmm_28.data_ptr()), c_void_p(buf324.data_ptr()))
    del addmm_28
    buf326 = buf316; del buf316  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf325, (1568, 1152), (1152, 1), 0), permute_425, out=buf326)
    del permute_425
    buf327 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf325, (1152, 1568), (1, 1152), 0), view_164, out=buf327)
    del view_164
    buf328 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf329 = buf318; del buf318  # reuse
    buf330 = buf317; del buf317  # reuse
    buf331 = empty((384, ), device='cpu', dtype=torch.float32)
    buf332 = empty((384, ), device='cpu', dtype=torch.float32)
    buf333 = buf321; del buf321  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_66(c_void_p(buf333.data_ptr()), c_void_p(buf325.data_ptr()), c_void_p(buf326.data_ptr()), c_void_p(primals_128.data_ptr()), c_void_p(mul_96.data_ptr()), c_void_p(div_41.data_ptr()), c_void_p(buf328.data_ptr()), c_void_p(buf329.data_ptr()), c_void_p(buf330.data_ptr()), c_void_p(buf331.data_ptr()), c_void_p(buf332.data_ptr()))
    del div_41
    del mul_96
    del primals_128
    buf334 = buf326; del buf326  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf333, (1568, 384), (384, 1), 0), permute_429, out=buf334)
    del permute_429
    buf335 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf333, (384, 1568), (1, 384), 0), view_162, out=buf335)
    del view_162
    buf336 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf337 = reinterpret_tensor(buf312, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf312  # reuse
    cpp_fused_clone_sum_67(c_void_p(buf333.data_ptr()), c_void_p(buf334.data_ptr()), c_void_p(buf336.data_ptr()), c_void_p(buf337.data_ptr()))
    buf338 = reinterpret_tensor(buf334, (96, 196, 32), (6272, 32, 1), 0); del buf334  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_434, reinterpret_tensor(buf337, (96, 196, 32), (6272, 32, 1), 0), out=buf338)
    del permute_434
    buf339 = reinterpret_tensor(buf311, (96, 196, 196), (38416, 196, 1), 0); del buf311  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf337, (96, 196, 32), (6272, 32, 1), 0), permute_435, out=buf339)
    del permute_435
    buf340 = buf310; del buf310  # reuse
    buf341 = reinterpret_tensor(buf339, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf339  # reuse
    cpp_fused__softmax_backward_data_mul_68(c_void_p(buf341.data_ptr()), c_void_p(alias_33.data_ptr()), c_void_p(buf340.data_ptr()))
    del alias_33
    buf342 = reinterpret_tensor(buf337, (96, 32, 196), (6272, 196, 1), 0); del buf337  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_436, reinterpret_tensor(buf341, (96, 196, 196), (38416, 196, 1), 0), out=buf342)
    del permute_436
    buf343 = buf308; del buf308  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf341, (96, 196, 196), (38416, 196, 1), 0), permute_437, out=buf343)
    del permute_437
    buf344 = reinterpret_tensor(buf325, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf325  # reuse
    cpp_fused_clone_69(c_void_p(buf343.data_ptr()), c_void_p(buf342.data_ptr()), c_void_p(buf338.data_ptr()), c_void_p(buf344.data_ptr()))
    buf345 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf344, (1152, 1568), (1, 1152), 0), view_152, out=buf345)
    del view_152
    buf346 = reinterpret_tensor(buf343, (1568, 384), (384, 1), 0); del buf343  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf344, (1568, 1152), (1152, 1), 0), permute_442, out=buf346)
    del permute_442
    buf347 = buf330; del buf330  # reuse
    buf348 = buf329; del buf329  # reuse
    buf349 = empty((384, ), device='cpu', dtype=torch.float32)
    buf350 = empty((384, ), device='cpu', dtype=torch.float32)
    buf351 = buf333; del buf333  # reuse
    cpp_fused_add_native_layer_norm_backward_70(c_void_p(buf351.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(primals_123.data_ptr()), c_void_p(mul_93.data_ptr()), c_void_p(div_42.data_ptr()), c_void_p(buf347.data_ptr()), c_void_p(buf348.data_ptr()), c_void_p(buf349.data_ptr()), c_void_p(buf350.data_ptr()))
    del div_42
    del mul_93
    del primals_123
    buf352 = reinterpret_tensor(buf344, (1568, 1152), (1152, 1), 0); del buf344  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf351, (1568, 384), (384, 1), 0), permute_444, out=buf352)
    del permute_444
    buf353 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf351, (384, 1568), (1, 384), 0), view_150, out=buf353)
    del view_150
    buf354 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf355 = reinterpret_tensor(buf352, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf352  # reuse
    cpp_fused_gelu_gelu_backward_sum_71(c_void_p(buf355.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(addmm_25.data_ptr()), c_void_p(buf354.data_ptr()))
    del addmm_25
    buf356 = buf346; del buf346  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf355, (1568, 1152), (1152, 1), 0), permute_448, out=buf356)
    del permute_448
    buf357 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf355, (1152, 1568), (1, 1152), 0), view_148, out=buf357)
    del view_148
    buf358 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf359 = buf348; del buf348  # reuse
    buf360 = buf347; del buf347  # reuse
    buf361 = empty((384, ), device='cpu', dtype=torch.float32)
    buf362 = empty((384, ), device='cpu', dtype=torch.float32)
    buf363 = buf351; del buf351  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_72(c_void_p(buf363.data_ptr()), c_void_p(buf355.data_ptr()), c_void_p(buf356.data_ptr()), c_void_p(primals_117.data_ptr()), c_void_p(mul_88.data_ptr()), c_void_p(div_43.data_ptr()), c_void_p(buf358.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(buf360.data_ptr()), c_void_p(buf361.data_ptr()), c_void_p(buf362.data_ptr()))
    del div_43
    del mul_88
    del primals_117
    buf364 = buf356; del buf356  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf363, (1568, 384), (384, 1), 0), permute_452, out=buf364)
    del permute_452
    buf365 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf363, (384, 1568), (1, 384), 0), view_146, out=buf365)
    del view_146
    buf366 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf367 = reinterpret_tensor(buf342, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf342  # reuse
    cpp_fused_clone_sum_73(c_void_p(buf363.data_ptr()), c_void_p(buf364.data_ptr()), c_void_p(buf366.data_ptr()), c_void_p(buf367.data_ptr()))
    buf368 = reinterpret_tensor(buf364, (96, 196, 32), (6272, 32, 1), 0); del buf364  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_457, reinterpret_tensor(buf367, (96, 196, 32), (6272, 32, 1), 0), out=buf368)
    del permute_457
    buf369 = reinterpret_tensor(buf341, (96, 196, 196), (38416, 196, 1), 0); del buf341  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf367, (96, 196, 32), (6272, 32, 1), 0), permute_458, out=buf369)
    del permute_458
    buf370 = buf340; del buf340  # reuse
    buf371 = reinterpret_tensor(buf369, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf369  # reuse
    cpp_fused__softmax_backward_data_mul_74(c_void_p(buf371.data_ptr()), c_void_p(alias_34.data_ptr()), c_void_p(buf370.data_ptr()))
    del alias_34
    buf372 = reinterpret_tensor(buf367, (96, 32, 196), (6272, 196, 1), 0); del buf367  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_459, reinterpret_tensor(buf371, (96, 196, 196), (38416, 196, 1), 0), out=buf372)
    del permute_459
    buf373 = buf338; del buf338  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf371, (96, 196, 196), (38416, 196, 1), 0), permute_460, out=buf373)
    del permute_460
    buf374 = reinterpret_tensor(buf355, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf355  # reuse
    cpp_fused_clone_75(c_void_p(buf373.data_ptr()), c_void_p(buf372.data_ptr()), c_void_p(buf368.data_ptr()), c_void_p(buf374.data_ptr()))
    buf375 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf374, (1152, 1568), (1, 1152), 0), view_136, out=buf375)
    del view_136
    buf376 = reinterpret_tensor(buf373, (1568, 384), (384, 1), 0); del buf373  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf374, (1568, 1152), (1152, 1), 0), permute_465, out=buf376)
    del permute_465
    buf377 = buf360; del buf360  # reuse
    buf378 = buf359; del buf359  # reuse
    buf379 = empty((384, ), device='cpu', dtype=torch.float32)
    buf380 = empty((384, ), device='cpu', dtype=torch.float32)
    buf381 = buf363; del buf363  # reuse
    cpp_fused_add_native_layer_norm_backward_76(c_void_p(buf381.data_ptr()), c_void_p(buf376.data_ptr()), c_void_p(primals_112.data_ptr()), c_void_p(mul_85.data_ptr()), c_void_p(div_44.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf378.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(buf380.data_ptr()))
    del div_44
    del mul_85
    del primals_112
    buf382 = reinterpret_tensor(buf374, (1568, 1152), (1152, 1), 0); del buf374  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf381, (1568, 384), (384, 1), 0), permute_467, out=buf382)
    del permute_467
    buf383 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf381, (384, 1568), (1, 384), 0), view_134, out=buf383)
    del view_134
    buf384 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf385 = reinterpret_tensor(buf382, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf382  # reuse
    cpp_fused_gelu_gelu_backward_sum_77(c_void_p(buf385.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(addmm_22.data_ptr()), c_void_p(buf384.data_ptr()))
    del addmm_22
    buf386 = buf376; del buf376  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf385, (1568, 1152), (1152, 1), 0), permute_471, out=buf386)
    del permute_471
    buf387 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf385, (1152, 1568), (1, 1152), 0), view_132, out=buf387)
    del view_132
    buf388 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf389 = buf378; del buf378  # reuse
    buf390 = buf377; del buf377  # reuse
    buf391 = empty((384, ), device='cpu', dtype=torch.float32)
    buf392 = empty((384, ), device='cpu', dtype=torch.float32)
    buf393 = buf381; del buf381  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_78(c_void_p(buf393.data_ptr()), c_void_p(buf385.data_ptr()), c_void_p(buf386.data_ptr()), c_void_p(primals_106.data_ptr()), c_void_p(mul_80.data_ptr()), c_void_p(div_45.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(buf389.data_ptr()), c_void_p(buf390.data_ptr()), c_void_p(buf391.data_ptr()), c_void_p(buf392.data_ptr()))
    del div_45
    del mul_80
    del primals_106
    buf394 = buf386; del buf386  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf393, (1568, 384), (384, 1), 0), permute_475, out=buf394)
    del permute_475
    buf395 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf393, (384, 1568), (1, 384), 0), view_130, out=buf395)
    del view_130
    buf396 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf397 = reinterpret_tensor(buf372, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf372  # reuse
    cpp_fused_clone_sum_79(c_void_p(buf393.data_ptr()), c_void_p(buf394.data_ptr()), c_void_p(buf396.data_ptr()), c_void_p(buf397.data_ptr()))
    buf398 = reinterpret_tensor(buf394, (96, 196, 32), (6272, 32, 1), 0); del buf394  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_480, reinterpret_tensor(buf397, (96, 196, 32), (6272, 32, 1), 0), out=buf398)
    del permute_480
    buf399 = reinterpret_tensor(buf371, (96, 196, 196), (38416, 196, 1), 0); del buf371  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf397, (96, 196, 32), (6272, 32, 1), 0), permute_481, out=buf399)
    del permute_481
    buf400 = buf370; del buf370  # reuse
    buf401 = reinterpret_tensor(buf399, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf399  # reuse
    cpp_fused__softmax_backward_data_mul_80(c_void_p(buf401.data_ptr()), c_void_p(alias_35.data_ptr()), c_void_p(buf400.data_ptr()))
    del alias_35
    buf402 = reinterpret_tensor(buf397, (96, 32, 196), (6272, 196, 1), 0); del buf397  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_482, reinterpret_tensor(buf401, (96, 196, 196), (38416, 196, 1), 0), out=buf402)
    del permute_482
    buf403 = buf368; del buf368  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf401, (96, 196, 196), (38416, 196, 1), 0), permute_483, out=buf403)
    del permute_483
    buf404 = reinterpret_tensor(buf385, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf385  # reuse
    cpp_fused_clone_81(c_void_p(buf403.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(buf398.data_ptr()), c_void_p(buf404.data_ptr()))
    buf405 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf404, (1152, 1568), (1, 1152), 0), view_120, out=buf405)
    del view_120
    buf406 = reinterpret_tensor(buf403, (1568, 384), (384, 1), 0); del buf403  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf404, (1568, 1152), (1152, 1), 0), permute_488, out=buf406)
    del permute_488
    buf407 = buf390; del buf390  # reuse
    buf408 = buf389; del buf389  # reuse
    buf409 = empty((384, ), device='cpu', dtype=torch.float32)
    buf410 = empty((384, ), device='cpu', dtype=torch.float32)
    buf411 = buf393; del buf393  # reuse
    cpp_fused_add_native_layer_norm_backward_82(c_void_p(buf411.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(primals_101.data_ptr()), c_void_p(mul_77.data_ptr()), c_void_p(div_46.data_ptr()), c_void_p(buf407.data_ptr()), c_void_p(buf408.data_ptr()), c_void_p(buf409.data_ptr()), c_void_p(buf410.data_ptr()))
    del div_46
    del mul_77
    del primals_101
    buf412 = reinterpret_tensor(buf404, (1568, 1152), (1152, 1), 0); del buf404  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf411, (1568, 384), (384, 1), 0), permute_490, out=buf412)
    del permute_490
    buf413 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf411, (384, 1568), (1, 384), 0), view_118, out=buf413)
    del view_118
    buf414 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf415 = reinterpret_tensor(buf412, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf412  # reuse
    cpp_fused_gelu_gelu_backward_sum_83(c_void_p(buf415.data_ptr()), c_void_p(buf411.data_ptr()), c_void_p(addmm_19.data_ptr()), c_void_p(buf414.data_ptr()))
    del addmm_19
    buf416 = buf406; del buf406  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf415, (1568, 1152), (1152, 1), 0), permute_494, out=buf416)
    del permute_494
    buf417 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf415, (1152, 1568), (1, 1152), 0), view_116, out=buf417)
    del view_116
    buf418 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf419 = buf408; del buf408  # reuse
    buf420 = buf407; del buf407  # reuse
    buf421 = empty((384, ), device='cpu', dtype=torch.float32)
    buf422 = empty((384, ), device='cpu', dtype=torch.float32)
    buf423 = buf411; del buf411  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_84(c_void_p(buf423.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(buf416.data_ptr()), c_void_p(primals_95.data_ptr()), c_void_p(mul_72.data_ptr()), c_void_p(div_47.data_ptr()), c_void_p(buf418.data_ptr()), c_void_p(buf419.data_ptr()), c_void_p(buf420.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf422.data_ptr()))
    del div_47
    del mul_72
    del primals_95
    buf424 = buf416; del buf416  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf423, (1568, 384), (384, 1), 0), permute_498, out=buf424)
    del permute_498
    buf425 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf423, (384, 1568), (1, 384), 0), view_114, out=buf425)
    del view_114
    buf426 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf427 = reinterpret_tensor(buf402, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf402  # reuse
    cpp_fused_clone_sum_85(c_void_p(buf423.data_ptr()), c_void_p(buf424.data_ptr()), c_void_p(buf426.data_ptr()), c_void_p(buf427.data_ptr()))
    buf428 = reinterpret_tensor(buf424, (96, 196, 32), (6272, 32, 1), 0); del buf424  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_503, reinterpret_tensor(buf427, (96, 196, 32), (6272, 32, 1), 0), out=buf428)
    del permute_503
    buf429 = reinterpret_tensor(buf401, (96, 196, 196), (38416, 196, 1), 0); del buf401  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf427, (96, 196, 32), (6272, 32, 1), 0), permute_504, out=buf429)
    del permute_504
    buf430 = buf400; del buf400  # reuse
    buf431 = reinterpret_tensor(buf429, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf429  # reuse
    cpp_fused__softmax_backward_data_mul_86(c_void_p(buf431.data_ptr()), c_void_p(alias_36.data_ptr()), c_void_p(buf430.data_ptr()))
    del alias_36
    buf432 = reinterpret_tensor(buf427, (96, 32, 196), (6272, 196, 1), 0); del buf427  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_505, reinterpret_tensor(buf431, (96, 196, 196), (38416, 196, 1), 0), out=buf432)
    del permute_505
    buf433 = buf398; del buf398  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf431, (96, 196, 196), (38416, 196, 1), 0), permute_506, out=buf433)
    del permute_506
    buf434 = reinterpret_tensor(buf415, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf415  # reuse
    cpp_fused_clone_87(c_void_p(buf433.data_ptr()), c_void_p(buf432.data_ptr()), c_void_p(buf428.data_ptr()), c_void_p(buf434.data_ptr()))
    buf435 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf434, (1152, 1568), (1, 1152), 0), view_104, out=buf435)
    del view_104
    buf436 = reinterpret_tensor(buf433, (1568, 384), (384, 1), 0); del buf433  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf434, (1568, 1152), (1152, 1), 0), permute_511, out=buf436)
    del permute_511
    buf437 = buf420; del buf420  # reuse
    buf438 = buf419; del buf419  # reuse
    buf439 = empty((384, ), device='cpu', dtype=torch.float32)
    buf440 = empty((384, ), device='cpu', dtype=torch.float32)
    buf441 = buf423; del buf423  # reuse
    cpp_fused_add_native_layer_norm_backward_88(c_void_p(buf441.data_ptr()), c_void_p(buf436.data_ptr()), c_void_p(primals_90.data_ptr()), c_void_p(mul_69.data_ptr()), c_void_p(div_48.data_ptr()), c_void_p(buf437.data_ptr()), c_void_p(buf438.data_ptr()), c_void_p(buf439.data_ptr()), c_void_p(buf440.data_ptr()))
    del div_48
    del mul_69
    del primals_90
    buf442 = reinterpret_tensor(buf434, (1568, 1152), (1152, 1), 0); del buf434  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf441, (1568, 384), (384, 1), 0), permute_513, out=buf442)
    del permute_513
    buf443 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf441, (384, 1568), (1, 384), 0), view_102, out=buf443)
    del view_102
    buf444 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf445 = reinterpret_tensor(buf442, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf442  # reuse
    cpp_fused_gelu_gelu_backward_sum_89(c_void_p(buf445.data_ptr()), c_void_p(buf441.data_ptr()), c_void_p(addmm_16.data_ptr()), c_void_p(buf444.data_ptr()))
    del addmm_16
    buf446 = buf436; del buf436  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf445, (1568, 1152), (1152, 1), 0), permute_517, out=buf446)
    del permute_517
    buf447 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf445, (1152, 1568), (1, 1152), 0), view_100, out=buf447)
    del view_100
    buf448 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf449 = buf438; del buf438  # reuse
    buf450 = buf437; del buf437  # reuse
    buf451 = empty((384, ), device='cpu', dtype=torch.float32)
    buf452 = empty((384, ), device='cpu', dtype=torch.float32)
    buf453 = buf441; del buf441  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_90(c_void_p(buf453.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(buf446.data_ptr()), c_void_p(primals_84.data_ptr()), c_void_p(mul_64.data_ptr()), c_void_p(div_49.data_ptr()), c_void_p(buf448.data_ptr()), c_void_p(buf449.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(buf452.data_ptr()))
    del div_49
    del mul_64
    del primals_84
    buf454 = buf446; del buf446  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf453, (1568, 384), (384, 1), 0), permute_521, out=buf454)
    del permute_521
    buf455 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf453, (384, 1568), (1, 384), 0), view_98, out=buf455)
    del view_98
    buf456 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf457 = reinterpret_tensor(buf432, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf432  # reuse
    cpp_fused_clone_sum_91(c_void_p(buf453.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf456.data_ptr()), c_void_p(buf457.data_ptr()))
    buf458 = reinterpret_tensor(buf454, (96, 196, 32), (6272, 32, 1), 0); del buf454  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_526, reinterpret_tensor(buf457, (96, 196, 32), (6272, 32, 1), 0), out=buf458)
    del permute_526
    buf459 = reinterpret_tensor(buf431, (96, 196, 196), (38416, 196, 1), 0); del buf431  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf457, (96, 196, 32), (6272, 32, 1), 0), permute_527, out=buf459)
    del permute_527
    buf460 = buf430; del buf430  # reuse
    buf461 = reinterpret_tensor(buf459, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf459  # reuse
    cpp_fused__softmax_backward_data_mul_92(c_void_p(buf461.data_ptr()), c_void_p(alias_37.data_ptr()), c_void_p(buf460.data_ptr()))
    del alias_37
    buf462 = reinterpret_tensor(buf457, (96, 32, 196), (6272, 196, 1), 0); del buf457  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_528, reinterpret_tensor(buf461, (96, 196, 196), (38416, 196, 1), 0), out=buf462)
    del permute_528
    buf463 = buf428; del buf428  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf461, (96, 196, 196), (38416, 196, 1), 0), permute_529, out=buf463)
    del permute_529
    buf464 = reinterpret_tensor(buf445, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf445  # reuse
    cpp_fused_clone_93(c_void_p(buf463.data_ptr()), c_void_p(buf462.data_ptr()), c_void_p(buf458.data_ptr()), c_void_p(buf464.data_ptr()))
    buf465 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf464, (1152, 1568), (1, 1152), 0), view_88, out=buf465)
    del view_88
    buf466 = reinterpret_tensor(buf463, (1568, 384), (384, 1), 0); del buf463  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf464, (1568, 1152), (1152, 1), 0), permute_534, out=buf466)
    del permute_534
    buf467 = buf450; del buf450  # reuse
    buf468 = buf449; del buf449  # reuse
    buf469 = empty((384, ), device='cpu', dtype=torch.float32)
    buf470 = empty((384, ), device='cpu', dtype=torch.float32)
    buf471 = buf453; del buf453  # reuse
    cpp_fused_add_native_layer_norm_backward_94(c_void_p(buf471.data_ptr()), c_void_p(buf466.data_ptr()), c_void_p(primals_79.data_ptr()), c_void_p(mul_61.data_ptr()), c_void_p(div_50.data_ptr()), c_void_p(buf467.data_ptr()), c_void_p(buf468.data_ptr()), c_void_p(buf469.data_ptr()), c_void_p(buf470.data_ptr()))
    del div_50
    del mul_61
    del primals_79
    buf472 = reinterpret_tensor(buf464, (1568, 1152), (1152, 1), 0); del buf464  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf471, (1568, 384), (384, 1), 0), permute_536, out=buf472)
    del permute_536
    buf473 = empty((384, 1152), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf471, (384, 1568), (1, 384), 0), view_86, out=buf473)
    del view_86
    buf474 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf475 = reinterpret_tensor(buf472, (8, 14, 14, 1152), (225792, 16128, 1152, 1), 0); del buf472  # reuse
    cpp_fused_gelu_gelu_backward_sum_95(c_void_p(buf475.data_ptr()), c_void_p(buf471.data_ptr()), c_void_p(addmm_13.data_ptr()), c_void_p(buf474.data_ptr()))
    del addmm_13
    buf476 = buf466; del buf466  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf475, (1568, 1152), (1152, 1), 0), permute_540, out=buf476)
    del permute_540
    buf477 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf475, (1152, 1568), (1, 1152), 0), view_84, out=buf477)
    del view_84
    buf478 = empty((1, 1152), device='cpu', dtype=torch.float32)
    buf479 = buf468; del buf468  # reuse
    buf480 = buf467; del buf467  # reuse
    buf481 = empty((384, ), device='cpu', dtype=torch.float32)
    buf482 = empty((384, ), device='cpu', dtype=torch.float32)
    buf483 = buf471; del buf471  # reuse
    cpp_fused_add_native_layer_norm_backward_sum_96(c_void_p(buf483.data_ptr()), c_void_p(buf475.data_ptr()), c_void_p(buf476.data_ptr()), c_void_p(primals_73.data_ptr()), c_void_p(mul_56.data_ptr()), c_void_p(div_51.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(buf479.data_ptr()), c_void_p(buf480.data_ptr()), c_void_p(buf481.data_ptr()), c_void_p(buf482.data_ptr()))
    del div_51
    del mul_56
    del primals_73
    buf484 = buf476; del buf476  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf483, (1568, 384), (384, 1), 0), permute_544, out=buf484)
    del permute_544
    buf485 = empty((384, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf483, (384, 1568), (1, 384), 0), view_82, out=buf485)
    del view_82
    buf486 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf487 = reinterpret_tensor(buf462, (8, 12, 196, 32), (75264, 6272, 32, 1), 0); del buf462  # reuse
    cpp_fused_clone_sum_97(c_void_p(buf483.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(buf486.data_ptr()), c_void_p(buf487.data_ptr()))
    buf488 = reinterpret_tensor(buf484, (96, 196, 32), (6272, 32, 1), 0); del buf484  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_549, reinterpret_tensor(buf487, (96, 196, 32), (6272, 32, 1), 0), out=buf488)
    del permute_549
    buf489 = reinterpret_tensor(buf461, (96, 196, 196), (38416, 196, 1), 0); del buf461  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf487, (96, 196, 32), (6272, 32, 1), 0), permute_550, out=buf489)
    del permute_550
    buf490 = buf460; del buf460  # reuse
    buf491 = reinterpret_tensor(buf489, (8, 12, 196, 196), (460992, 38416, 196, 1), 0); del buf489  # reuse
    cpp_fused__softmax_backward_data_mul_98(c_void_p(buf491.data_ptr()), c_void_p(alias_38.data_ptr()), c_void_p(buf490.data_ptr()))
    del alias_38
    del buf490
    buf492 = reinterpret_tensor(buf487, (96, 32, 196), (6272, 196, 1), 0); del buf487  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_551, reinterpret_tensor(buf491, (96, 196, 196), (38416, 196, 1), 0), out=buf492)
    del permute_551
    buf493 = buf458; del buf458  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf491, (96, 196, 196), (38416, 196, 1), 0), permute_552, out=buf493)
    del buf491
    del permute_552
    buf494 = reinterpret_tensor(buf475, (8, 196, 3, 12, 32), (225792, 1152, 384, 32, 1), 0); del buf475  # reuse
    cpp_fused_clone_99(c_void_p(buf493.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(buf488.data_ptr()), c_void_p(buf494.data_ptr()))
    del buf488
    del buf492
    buf495 = empty((1152, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf494, (1152, 1568), (1, 1152), 0), view_72, out=buf495)
    del view_72
    buf496 = reinterpret_tensor(buf493, (1568, 384), (384, 1), 0); del buf493  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf494, (1568, 1152), (1152, 1), 0), permute_557, out=buf496)
    del buf494
    del permute_557
    buf497 = buf480; del buf480  # reuse
    buf498 = buf479; del buf479  # reuse
    buf499 = empty((384, ), device='cpu', dtype=torch.float32)
    buf500 = empty((384, ), device='cpu', dtype=torch.float32)
    buf501 = buf483; del buf483  # reuse
    buf502 = empty((1, 14, 14, 384), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_sum_100(c_void_p(buf501.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(mul_53.data_ptr()), c_void_p(div_52.data_ptr()), c_void_p(buf497.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf500.data_ptr()), c_void_p(buf502.data_ptr()))
    del buf496
    del buf497
    del buf498
    del div_52
    del mul_53
    del primals_68
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf503 = aten.convolution_backward(reinterpret_tensor(buf501, (8, 384, 14, 14), (75264, 1, 5376, 384), 0), permute_57, primals_66, [384], [2, 2], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf501
    del permute_57
    del primals_66
    buf504 = buf503[0]
    buf505 = buf503[1]
    buf506 = buf503[2]
    del buf503
    buf507 = empty((6272, 576), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf504, (6272, 192), (192, 1), 0), permute_561, out=buf507)
    del permute_561
    buf508 = empty((192, 576), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf504, (192, 6272), (1, 192), 0), view_70, out=buf508)
    del view_70
    buf509 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf510 = reinterpret_tensor(buf507, (8, 28, 28, 576), (451584, 16128, 576, 1), 0); del buf507  # reuse
    cpp_fused_gelu_gelu_backward_sum_101(c_void_p(buf510.data_ptr()), c_void_p(buf504.data_ptr()), c_void_p(addmm_10.data_ptr()), c_void_p(buf509.data_ptr()))
    del addmm_10
    buf511 = empty((6272, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf510, (6272, 576), (576, 1), 0), permute_565, out=buf511)
    del permute_565
    buf512 = empty((576, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf510, (576, 6272), (1, 576), 0), view_68, out=buf512)
    del view_68
    buf513 = empty((1, 576), device='cpu', dtype=torch.float32)
    buf514 = empty_strided((8, 28, 28, 1), (784, 28, 1, 6272), device='cpu', dtype=torch.float32)
    buf515 = empty_strided((8, 28, 28, 1), (784, 28, 1, 6272), device='cpu', dtype=torch.float32)
    buf516 = empty((192, ), device='cpu', dtype=torch.float32)
    buf517 = empty((192, ), device='cpu', dtype=torch.float32)
    buf518 = reinterpret_tensor(buf504, (8, 28, 28, 192), (150528, 5376, 192, 1), 0); del buf504  # reuse
    buf519 = empty((1, 1, 1, 192), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_sum_102(c_void_p(buf518.data_ptr()), c_void_p(buf510.data_ptr()), c_void_p(buf511.data_ptr()), c_void_p(primals_60.data_ptr()), c_void_p(mul_48.data_ptr()), c_void_p(div_53.data_ptr()), c_void_p(buf513.data_ptr()), c_void_p(buf514.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(buf516.data_ptr()), c_void_p(buf517.data_ptr()), c_void_p(buf519.data_ptr()))
    del div_53
    del mul_48
    del primals_60
    buf520 = empty((192, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf518, (192, 6272), (1, 192), 0), view_66, out=buf520)
    del view_66
    buf521 = buf511; del buf511  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf518, (6272, 192), (192, 1), 0), permute_571, out=buf521)
    del permute_571
    buf522 = empty((8, 6, 196, 9, 32), device='cpu', dtype=torch.float32)
    cpp_fused_clone_103(c_void_p(unsqueeze_17.data_ptr()), c_void_p(add_17.data_ptr()), c_void_p(buf521.data_ptr()), c_void_p(buf522.data_ptr()))
    buf523 = empty((9408, 9, 32), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_576, reinterpret_tensor(buf522, (9408, 9, 32), (288, 32, 1), 0), out=buf523)
    del permute_576
    buf524 = empty((9408, 9, 9), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf522, (9408, 9, 32), (288, 32, 1), 0), permute_577, out=buf524)
    del permute_577
    buf525 = empty_strided((8, 6, 196, 9, 1), (10584, 1764, 9, 1, 84672), device='cpu', dtype=torch.float32)
    buf526 = empty((8, 196, 6, 9, 9), device='cpu', dtype=torch.float32)
    cpp_fused__softmax_backward_data_clone_104(c_void_p(buf524.data_ptr()), c_void_p(alias_39.data_ptr()), c_void_p(buf525.data_ptr()), c_void_p(buf526.data_ptr()))
    del alias_39
    buf527 = empty((1568, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf526, (1568, 486), (486, 1), 0), permute_579, out=buf527)
    del permute_579
    buf528 = empty((486, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf526, (486, 1568), (1, 486), 0), view_58, out=buf528)
    del view_58
    buf529 = empty((1, 486), device='cpu', dtype=torch.float32)
    buf530 = empty_strided((8, 192, 30, 30), (172800, 1, 5760, 192), device='cpu', dtype=torch.float32)
    buf566 = empty_strided((8, 192, 30, 30), (172800, 1, 5760, 192), device='cpu', dtype=torch.float32)
    buf531 = reinterpret_tensor(buf522, (8, 6, 32, 9, 196), (338688, 56448, 1764, 196, 1), 0); del buf522  # reuse
    buf532 = reinterpret_tensor(buf531, (8, 192, 3, 14, 3, 14), (338688, 1764, 588, 14, 196, 1), 0); del buf531  # reuse
    cpp_fused_clone_col2im_sum_105(c_void_p(buf532.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(full_default.data_ptr()), c_void_p(buf523.data_ptr()), c_void_p(buf529.data_ptr()), c_void_p(buf530.data_ptr()), c_void_p(buf566.data_ptr()))
    aten.index_put_(buf530, [None, None, unsqueeze_17, add_17], buf532, True)
    buf535 = buf521; del buf521  # reuse
    cpp_fused__unsafe_view_106(c_void_p(buf530.data_ptr()), c_void_p(buf535.data_ptr()))
    buf536 = empty((192, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf535, (192, 6272), (1, 192), 0), view_54, out=buf536)
    del view_54
    buf537 = empty((6272, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf535, permute_590, out=buf537)
    del permute_590
    buf538 = buf515; del buf515  # reuse
    buf539 = buf514; del buf514  # reuse
    buf540 = empty((192, ), device='cpu', dtype=torch.float32)
    buf541 = empty((192, ), device='cpu', dtype=torch.float32)
    buf542 = buf518; del buf518  # reuse
    cpp_fused_add_native_layer_norm_backward_107(c_void_p(buf542.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(buf537.data_ptr()), c_void_p(primals_53.data_ptr()), c_void_p(mul_45.data_ptr()), c_void_p(div_54.data_ptr()), c_void_p(buf538.data_ptr()), c_void_p(buf539.data_ptr()), c_void_p(buf540.data_ptr()), c_void_p(buf541.data_ptr()))
    del div_54
    del mul_45
    del primals_53
    buf543 = reinterpret_tensor(buf510, (6272, 576), (576, 1), 0); del buf510  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf542, (6272, 192), (192, 1), 0), permute_592, out=buf543)
    del permute_592
    buf544 = empty((192, 576), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf542, (192, 6272), (1, 192), 0), view_52, out=buf544)
    del view_52
    buf545 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf546 = reinterpret_tensor(buf543, (8, 28, 28, 576), (451584, 16128, 576, 1), 0); del buf543  # reuse
    cpp_fused_gelu_gelu_backward_sum_108(c_void_p(buf546.data_ptr()), c_void_p(buf542.data_ptr()), c_void_p(addmm_7.data_ptr()), c_void_p(buf545.data_ptr()))
    del addmm_7
    buf547 = buf537; del buf537  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf546, (6272, 576), (576, 1), 0), permute_596, out=buf547)
    del permute_596
    buf548 = empty((576, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf546, (576, 6272), (1, 576), 0), view_50, out=buf548)
    del view_50
    buf549 = empty((1, 576), device='cpu', dtype=torch.float32)
    buf550 = buf539; del buf539  # reuse
    buf551 = buf538; del buf538  # reuse
    buf552 = empty((192, ), device='cpu', dtype=torch.float32)
    buf553 = empty((192, ), device='cpu', dtype=torch.float32)
    buf554 = buf542; del buf542  # reuse
    buf555 = empty((1, 1, 1, 192), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_sum_109(c_void_p(buf554.data_ptr()), c_void_p(buf546.data_ptr()), c_void_p(buf547.data_ptr()), c_void_p(primals_47.data_ptr()), c_void_p(mul_40.data_ptr()), c_void_p(div_55.data_ptr()), c_void_p(buf549.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(buf551.data_ptr()), c_void_p(buf552.data_ptr()), c_void_p(buf553.data_ptr()), c_void_p(buf555.data_ptr()))
    del div_55
    del mul_40
    del primals_47
    buf556 = empty((192, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf554, (192, 6272), (1, 192), 0), view_48, out=buf556)
    del view_48
    buf557 = buf547; del buf547  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf554, (6272, 192), (192, 1), 0), permute_602, out=buf557)
    del permute_602
    buf558 = reinterpret_tensor(buf532, (8, 6, 196, 9, 32), (338688, 56448, 288, 32, 1), 0); del buf532  # reuse
    cpp_fused_clone_110(c_void_p(unsqueeze_17.data_ptr()), c_void_p(add_17.data_ptr()), c_void_p(buf557.data_ptr()), c_void_p(buf558.data_ptr()))
    buf559 = buf523; del buf523  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_607, reinterpret_tensor(buf558, (9408, 9, 32), (288, 32, 1), 0), out=buf559)
    del permute_607
    buf560 = reinterpret_tensor(buf526, (9408, 9, 9), (81, 9, 1), 0); del buf526  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf558, (9408, 9, 32), (288, 32, 1), 0), permute_608, out=buf560)
    del permute_608
    buf561 = buf525; del buf525  # reuse
    buf562 = reinterpret_tensor(buf524, (8, 196, 6, 9, 9), (95256, 486, 81, 9, 1), 0); del buf524  # reuse
    cpp_fused__softmax_backward_data_clone_111(c_void_p(buf560.data_ptr()), c_void_p(alias_40.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(buf562.data_ptr()))
    del alias_40
    buf563 = buf527; del buf527  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf562, (1568, 486), (486, 1), 0), permute_610, out=buf563)
    del permute_610
    buf564 = empty((486, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf562, (486, 1568), (1, 486), 0), view_40, out=buf564)
    del view_40
    buf565 = empty((1, 486), device='cpu', dtype=torch.float32)
    buf567 = reinterpret_tensor(buf558, (8, 6, 32, 9, 196), (338688, 56448, 1764, 196, 1), 0); del buf558  # reuse
    buf568 = reinterpret_tensor(buf567, (8, 192, 3, 14, 3, 14), (338688, 1764, 588, 14, 196, 1), 0); del buf567  # reuse
    cpp_fused_clone_col2im_sum_112(c_void_p(buf568.data_ptr()), c_void_p(buf562.data_ptr()), c_void_p(buf559.data_ptr()), c_void_p(buf565.data_ptr()))
    aten.index_put_(buf566, [None, None, unsqueeze_17, add_17], buf568, True)
    buf571 = buf557; del buf557  # reuse
    cpp_fused__unsafe_view_113(c_void_p(buf566.data_ptr()), c_void_p(buf571.data_ptr()))
    buf572 = empty((192, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf571, (192, 6272), (1, 192), 0), view_36, out=buf572)
    del view_36
    buf573 = buf535; del buf535  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf571, permute_621, out=buf573)
    del permute_621
    buf574 = buf551; del buf551  # reuse
    buf575 = buf550; del buf550  # reuse
    buf576 = empty((192, ), device='cpu', dtype=torch.float32)
    buf577 = empty((192, ), device='cpu', dtype=torch.float32)
    buf578 = buf554; del buf554  # reuse
    cpp_fused_add_native_layer_norm_backward_114(c_void_p(buf578.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(buf573.data_ptr()), c_void_p(primals_40.data_ptr()), c_void_p(mul_37.data_ptr()), c_void_p(div_56.data_ptr()), c_void_p(buf574.data_ptr()), c_void_p(buf575.data_ptr()), c_void_p(buf576.data_ptr()), c_void_p(buf577.data_ptr()))
    del div_56
    del mul_37
    del primals_40
    buf579 = reinterpret_tensor(buf546, (6272, 576), (576, 1), 0); del buf546  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf578, (6272, 192), (192, 1), 0), permute_623, out=buf579)
    del permute_623
    buf580 = empty((192, 576), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf578, (192, 6272), (1, 192), 0), view_34, out=buf580)
    del view_34
    buf581 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf582 = reinterpret_tensor(buf579, (8, 28, 28, 576), (451584, 16128, 576, 1), 0); del buf579  # reuse
    cpp_fused_gelu_gelu_backward_sum_115(c_void_p(buf582.data_ptr()), c_void_p(buf578.data_ptr()), c_void_p(addmm_4.data_ptr()), c_void_p(buf581.data_ptr()))
    del addmm_4
    buf583 = buf573; del buf573  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf582, (6272, 576), (576, 1), 0), permute_627, out=buf583)
    del permute_627
    buf584 = empty((576, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf582, (576, 6272), (1, 576), 0), view_32, out=buf584)
    del view_32
    buf585 = empty((1, 576), device='cpu', dtype=torch.float32)
    buf586 = buf575; del buf575  # reuse
    buf587 = buf574; del buf574  # reuse
    buf588 = empty((192, ), device='cpu', dtype=torch.float32)
    buf589 = empty((192, ), device='cpu', dtype=torch.float32)
    buf590 = buf578; del buf578  # reuse
    buf591 = empty((1, 1, 1, 192), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_sum_116(c_void_p(buf590.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(primals_34.data_ptr()), c_void_p(mul_32.data_ptr()), c_void_p(div_57.data_ptr()), c_void_p(buf585.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf587.data_ptr()), c_void_p(buf588.data_ptr()), c_void_p(buf589.data_ptr()), c_void_p(buf591.data_ptr()))
    del div_57
    del mul_32
    del primals_34
    buf592 = empty((192, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf590, (192, 6272), (1, 192), 0), view_30, out=buf592)
    del view_30
    buf593 = buf583; del buf583  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf590, (6272, 192), (192, 1), 0), permute_633, out=buf593)
    del permute_633
    buf594 = reinterpret_tensor(buf568, (8, 6, 196, 9, 32), (338688, 56448, 288, 32, 1), 0); del buf568  # reuse
    cpp_fused_clone_117(c_void_p(unsqueeze_17.data_ptr()), c_void_p(add_17.data_ptr()), c_void_p(buf593.data_ptr()), c_void_p(buf594.data_ptr()))
    buf595 = buf559; del buf559  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_638, reinterpret_tensor(buf594, (9408, 9, 32), (288, 32, 1), 0), out=buf595)
    del permute_638
    buf596 = reinterpret_tensor(buf562, (9408, 9, 9), (81, 9, 1), 0); del buf562  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf594, (9408, 9, 32), (288, 32, 1), 0), permute_639, out=buf596)
    del permute_639
    buf597 = buf561; del buf561  # reuse
    buf598 = reinterpret_tensor(buf560, (8, 196, 6, 9, 9), (95256, 486, 81, 9, 1), 0); del buf560  # reuse
    cpp_fused__softmax_backward_data_clone_118(c_void_p(buf596.data_ptr()), c_void_p(alias_41.data_ptr()), c_void_p(buf597.data_ptr()), c_void_p(buf598.data_ptr()))
    del alias_41
    buf599 = buf563; del buf563  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf598, (1568, 486), (486, 1), 0), permute_641, out=buf599)
    del permute_641
    buf600 = empty((486, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf598, (486, 1568), (1, 486), 0), view_22, out=buf600)
    del view_22
    buf601 = empty((1, 486), device='cpu', dtype=torch.float32)
    buf602 = buf566; del buf566  # reuse
    buf638 = buf530; del buf530  # reuse
    buf603 = reinterpret_tensor(buf594, (8, 6, 32, 9, 196), (338688, 56448, 1764, 196, 1), 0); del buf594  # reuse
    buf604 = reinterpret_tensor(buf603, (8, 192, 3, 14, 3, 14), (338688, 1764, 588, 14, 196, 1), 0); del buf603  # reuse
    cpp_fused_clone_col2im_sum_119(c_void_p(buf604.data_ptr()), c_void_p(buf598.data_ptr()), c_void_p(full_default.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(buf638.data_ptr()))
    del full_default
    aten.index_put_(buf602, [None, None, unsqueeze_17, add_17], buf604, True)
    buf607 = buf593; del buf593  # reuse
    cpp_fused__unsafe_view_120(c_void_p(buf602.data_ptr()), c_void_p(buf607.data_ptr()))
    del buf602
    buf608 = empty((192, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf607, (192, 6272), (1, 192), 0), view_18, out=buf608)
    del view_18
    buf609 = buf571; del buf571  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf607, permute_652, out=buf609)
    del permute_652
    buf610 = buf587; del buf587  # reuse
    buf611 = buf586; del buf586  # reuse
    buf612 = empty((192, ), device='cpu', dtype=torch.float32)
    buf613 = empty((192, ), device='cpu', dtype=torch.float32)
    buf614 = buf590; del buf590  # reuse
    cpp_fused_add_native_layer_norm_backward_121(c_void_p(buf614.data_ptr()), c_void_p(buf599.data_ptr()), c_void_p(buf609.data_ptr()), c_void_p(primals_27.data_ptr()), c_void_p(mul_29.data_ptr()), c_void_p(div_58.data_ptr()), c_void_p(buf610.data_ptr()), c_void_p(buf611.data_ptr()), c_void_p(buf612.data_ptr()), c_void_p(buf613.data_ptr()))
    del div_58
    del mul_29
    del primals_27
    buf615 = reinterpret_tensor(buf582, (6272, 576), (576, 1), 0); del buf582  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf614, (6272, 192), (192, 1), 0), permute_654, out=buf615)
    del permute_654
    buf616 = empty((192, 576), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf614, (192, 6272), (1, 192), 0), view_16, out=buf616)
    del view_16
    buf617 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf618 = reinterpret_tensor(buf615, (8, 28, 28, 576), (451584, 16128, 576, 1), 0); del buf615  # reuse
    cpp_fused_gelu_gelu_backward_sum_122(c_void_p(buf618.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(addmm_1.data_ptr()), c_void_p(buf617.data_ptr()))
    del addmm_1
    buf619 = buf609; del buf609  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf618, (6272, 576), (576, 1), 0), permute_658, out=buf619)
    del permute_658
    buf620 = empty((576, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf618, (576, 6272), (1, 576), 0), view_14, out=buf620)
    del view_14
    buf621 = empty((1, 576), device='cpu', dtype=torch.float32)
    buf622 = buf611; del buf611  # reuse
    buf623 = buf610; del buf610  # reuse
    buf624 = empty((192, ), device='cpu', dtype=torch.float32)
    buf625 = empty((192, ), device='cpu', dtype=torch.float32)
    buf626 = buf614; del buf614  # reuse
    buf627 = empty((1, 1, 1, 192), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_layer_norm_backward_sum_123(c_void_p(buf626.data_ptr()), c_void_p(buf618.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(primals_21.data_ptr()), c_void_p(mul_24.data_ptr()), c_void_p(div_59.data_ptr()), c_void_p(buf621.data_ptr()), c_void_p(buf622.data_ptr()), c_void_p(buf623.data_ptr()), c_void_p(buf624.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(buf627.data_ptr()))
    del buf618
    del div_59
    del mul_24
    del primals_21
    buf628 = empty((192, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf626, (192, 6272), (1, 192), 0), view_12, out=buf628)
    del view_12
    buf629 = buf619; del buf619  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf626, (6272, 192), (192, 1), 0), permute_664, out=buf629)
    del permute_664
    buf630 = reinterpret_tensor(buf604, (8, 6, 196, 9, 32), (338688, 56448, 288, 32, 1), 0); del buf604  # reuse
    cpp_fused_clone_124(c_void_p(unsqueeze_17.data_ptr()), c_void_p(add_17.data_ptr()), c_void_p(buf629.data_ptr()), c_void_p(buf630.data_ptr()))
    buf631 = buf595; del buf595  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_669, reinterpret_tensor(buf630, (9408, 9, 32), (288, 32, 1), 0), out=buf631)
    del permute_669
    buf632 = reinterpret_tensor(buf598, (9408, 9, 9), (81, 9, 1), 0); del buf598  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf630, (9408, 9, 32), (288, 32, 1), 0), permute_670, out=buf632)
    del permute_670
    buf633 = buf597; del buf597  # reuse
    buf634 = reinterpret_tensor(buf596, (8, 196, 6, 9, 9), (95256, 486, 81, 9, 1), 0); del buf596  # reuse
    cpp_fused__softmax_backward_data_clone_125(c_void_p(buf632.data_ptr()), c_void_p(alias_42.data_ptr()), c_void_p(buf633.data_ptr()), c_void_p(buf634.data_ptr()))
    del alias_42
    del buf632
    del buf633
    buf635 = buf599; del buf599  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf634, (1568, 486), (486, 1), 0), permute_672, out=buf635)
    del permute_672
    buf636 = empty((486, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf634, (486, 1568), (1, 486), 0), view_4, out=buf636)
    del view_4
    buf637 = empty((1, 486), device='cpu', dtype=torch.float32)
    buf639 = reinterpret_tensor(buf630, (8, 6, 32, 9, 196), (338688, 56448, 1764, 196, 1), 0); del buf630  # reuse
    buf640 = reinterpret_tensor(buf639, (8, 192, 3, 14, 3, 14), (338688, 1764, 588, 14, 196, 1), 0); del buf639  # reuse
    cpp_fused_clone_col2im_sum_126(c_void_p(buf640.data_ptr()), c_void_p(buf634.data_ptr()), c_void_p(buf631.data_ptr()), c_void_p(buf637.data_ptr()))
    del buf631
    del buf634
    aten.index_put_(buf638, [None, None, unsqueeze_17, add_17], buf640, True)
    del add_17
    del buf640
    del unsqueeze_17
    buf643 = buf629; del buf629  # reuse
    cpp_fused__unsafe_view_127(c_void_p(buf638.data_ptr()), c_void_p(buf643.data_ptr()))
    del buf638
    buf644 = empty((192, 192), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf643, (192, 6272), (1, 192), 0), view, out=buf644)
    del view
    buf645 = buf607; del buf607  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf643, permute_683, out=buf645)
    del buf643
    del permute_683
    buf646 = buf623; del buf623  # reuse
    buf647 = buf622; del buf622  # reuse
    buf648 = empty((192, ), device='cpu', dtype=torch.float32)
    buf649 = empty((192, ), device='cpu', dtype=torch.float32)
    buf650 = reinterpret_tensor(buf626, (8, 192, 28, 28), (150528, 1, 5376, 192), 0); del buf626  # reuse
    cpp_fused_add_convolution_backward_native_layer_norm_backward_128(c_void_p(buf650.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(buf645.data_ptr()), c_void_p(primals_14.data_ptr()), c_void_p(mul_21.data_ptr()), c_void_p(div_60.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf647.data_ptr()), c_void_p(buf648.data_ptr()), c_void_p(buf649.data_ptr()))
    del buf635
    del buf645
    del buf646
    del buf647
    del div_60
    del mul_21
    del primals_14
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf651 = aten.convolution_backward(buf650, relu_2, primals_12, [192], [4, 4], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf650
    del primals_12
    buf652 = buf651[0]
    buf653 = buf651[1]
    buf654 = buf651[2]
    del buf651
    buf655 = empty((64, ), device='cpu', dtype=torch.float32)
    buf656 = empty((64, ), device='cpu', dtype=torch.float32)
    buf657 = empty((64, ), device='cpu', dtype=torch.float32)
    buf658 = buf652; del buf652  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_129(c_void_p(buf658.data_ptr()), c_void_p(relu_2.data_ptr()), c_void_p(convolution_2.data_ptr()), c_void_p(unsqueeze_112.data_ptr()), c_void_p(squeeze_7.data_ptr()), c_void_p(primals_10.data_ptr()), c_void_p(buf655.data_ptr()), c_void_p(buf656.data_ptr()), c_void_p(buf657.data_ptr()))
    del convolution_2
    del primals_10
    del relu_2
    del squeeze_7
    del unsqueeze_112
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf659 = aten.convolution_backward(buf658, relu_1, primals_9, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf658
    del primals_9
    buf660 = buf659[0]
    buf661 = buf659[1]
    del buf659
    buf662 = buf656; del buf656  # reuse
    buf663 = empty((64, ), device='cpu', dtype=torch.float32)
    buf664 = empty((64, ), device='cpu', dtype=torch.float32)
    buf665 = buf660; del buf660  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_130(c_void_p(buf665.data_ptr()), c_void_p(relu_1.data_ptr()), c_void_p(convolution_1.data_ptr()), c_void_p(unsqueeze_124.data_ptr()), c_void_p(squeeze_4.data_ptr()), c_void_p(primals_7.data_ptr()), c_void_p(buf662.data_ptr()), c_void_p(buf663.data_ptr()), c_void_p(buf664.data_ptr()))
    del convolution_1
    del primals_7
    del relu_1
    del squeeze_4
    del unsqueeze_124
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf666 = aten.convolution_backward(buf665, relu, primals_6, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf665
    del primals_6
    buf667 = buf666[0]
    buf668 = buf666[1]
    del buf666
    buf669 = buf663; del buf663  # reuse
    buf670 = empty((64, ), device='cpu', dtype=torch.float32)
    buf671 = empty((64, ), device='cpu', dtype=torch.float32)
    buf672 = buf667; del buf667  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_131(c_void_p(buf672.data_ptr()), c_void_p(relu.data_ptr()), c_void_p(convolution.data_ptr()), c_void_p(unsqueeze_136.data_ptr()), c_void_p(squeeze_1.data_ptr()), c_void_p(primals_4.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(buf670.data_ptr()), c_void_p(buf671.data_ptr()))
    del buf670
    del convolution
    del primals_4
    del relu
    del squeeze_1
    del unsqueeze_136
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf673 = aten.convolution_backward(buf672, primals_261, primals_3, [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False])
    del buf672
    del primals_261
    del primals_3
    buf674 = buf673[1]
    return (buf502, buf80, buf674, buf671, buf669, buf668, buf664, buf662, buf661, buf657, buf655, buf653, buf654, buf648, buf649, reinterpret_tensor(buf644, (192, 192), (192, 1), 0), reinterpret_tensor(buf636, (486, 192), (192, 1), 0), reinterpret_tensor(buf637, (486, ), (1, ), 0), reinterpret_tensor(buf628, (192, 192), (192, 1), 0), reinterpret_tensor(buf627, (192, ), (1, ), 0), buf624, buf625, reinterpret_tensor(buf620, (576, 192), (192, 1), 0), reinterpret_tensor(buf621, (576, ), (1, ), 0), reinterpret_tensor(buf616, (192, 576), (576, 1), 0), reinterpret_tensor(buf617, (192, ), (1, ), 0), buf612, buf613, reinterpret_tensor(buf608, (192, 192), (192, 1), 0), reinterpret_tensor(buf600, (486, 192), (192, 1), 0), reinterpret_tensor(buf601, (486, ), (1, ), 0), reinterpret_tensor(buf592, (192, 192), (192, 1), 0), reinterpret_tensor(buf591, (192, ), (1, ), 0), buf588, buf589, reinterpret_tensor(buf584, (576, 192), (192, 1), 0), reinterpret_tensor(buf585, (576, ), (1, ), 0), reinterpret_tensor(buf580, (192, 576), (576, 1), 0), reinterpret_tensor(buf581, (192, ), (1, ), 0), buf576, buf577, reinterpret_tensor(buf572, (192, 192), (192, 1), 0), reinterpret_tensor(buf564, (486, 192), (192, 1), 0), reinterpret_tensor(buf565, (486, ), (1, ), 0), reinterpret_tensor(buf556, (192, 192), (192, 1), 0), reinterpret_tensor(buf555, (192, ), (1, ), 0), buf552, buf553, reinterpret_tensor(buf548, (576, 192), (192, 1), 0), reinterpret_tensor(buf549, (576, ), (1, ), 0), reinterpret_tensor(buf544, (192, 576), (576, 1), 0), reinterpret_tensor(buf545, (192, ), (1, ), 0), buf540, buf541, reinterpret_tensor(buf536, (192, 192), (192, 1), 0), reinterpret_tensor(buf528, (486, 192), (192, 1), 0), reinterpret_tensor(buf529, (486, ), (1, ), 0), reinterpret_tensor(buf520, (192, 192), (192, 1), 0), reinterpret_tensor(buf519, (192, ), (1, ), 0), buf516, buf517, reinterpret_tensor(buf512, (576, 192), (192, 1), 0), reinterpret_tensor(buf513, (576, ), (1, ), 0), reinterpret_tensor(buf508, (192, 576), (576, 1), 0), reinterpret_tensor(buf509, (192, ), (1, ), 0), buf505, buf506, buf499, buf500, reinterpret_tensor(buf495, (1152, 384), (384, 1), 0), reinterpret_tensor(buf485, (384, 384), (384, 1), 0), reinterpret_tensor(buf486, (384, ), (1, ), 0), buf481, buf482, reinterpret_tensor(buf477, (1152, 384), (384, 1), 0), reinterpret_tensor(buf478, (1152, ), (1, ), 0), reinterpret_tensor(buf473, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf474, (384, ), (1, ), 0), buf469, buf470, reinterpret_tensor(buf465, (1152, 384), (384, 1), 0), reinterpret_tensor(buf455, (384, 384), (384, 1), 0), reinterpret_tensor(buf456, (384, ), (1, ), 0), buf451, buf452, reinterpret_tensor(buf447, (1152, 384), (384, 1), 0), reinterpret_tensor(buf448, (1152, ), (1, ), 0), reinterpret_tensor(buf443, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf444, (384, ), (1, ), 0), buf439, buf440, reinterpret_tensor(buf435, (1152, 384), (384, 1), 0), reinterpret_tensor(buf425, (384, 384), (384, 1), 0), reinterpret_tensor(buf426, (384, ), (1, ), 0), buf421, buf422, reinterpret_tensor(buf417, (1152, 384), (384, 1), 0), reinterpret_tensor(buf418, (1152, ), (1, ), 0), reinterpret_tensor(buf413, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf414, (384, ), (1, ), 0), buf409, buf410, reinterpret_tensor(buf405, (1152, 384), (384, 1), 0), reinterpret_tensor(buf395, (384, 384), (384, 1), 0), reinterpret_tensor(buf396, (384, ), (1, ), 0), buf391, buf392, reinterpret_tensor(buf387, (1152, 384), (384, 1), 0), reinterpret_tensor(buf388, (1152, ), (1, ), 0), reinterpret_tensor(buf383, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf384, (384, ), (1, ), 0), buf379, buf380, reinterpret_tensor(buf375, (1152, 384), (384, 1), 0), reinterpret_tensor(buf365, (384, 384), (384, 1), 0), reinterpret_tensor(buf366, (384, ), (1, ), 0), buf361, buf362, reinterpret_tensor(buf357, (1152, 384), (384, 1), 0), reinterpret_tensor(buf358, (1152, ), (1, ), 0), reinterpret_tensor(buf353, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf354, (384, ), (1, ), 0), buf349, buf350, reinterpret_tensor(buf345, (1152, 384), (384, 1), 0), reinterpret_tensor(buf335, (384, 384), (384, 1), 0), reinterpret_tensor(buf336, (384, ), (1, ), 0), buf331, buf332, reinterpret_tensor(buf327, (1152, 384), (384, 1), 0), reinterpret_tensor(buf328, (1152, ), (1, ), 0), reinterpret_tensor(buf323, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf324, (384, ), (1, ), 0), buf319, buf320, reinterpret_tensor(buf315, (1152, 384), (384, 1), 0), reinterpret_tensor(buf305, (384, 384), (384, 1), 0), reinterpret_tensor(buf306, (384, ), (1, ), 0), buf301, buf302, reinterpret_tensor(buf297, (1152, 384), (384, 1), 0), reinterpret_tensor(buf298, (1152, ), (1, ), 0), reinterpret_tensor(buf293, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf294, (384, ), (1, ), 0), buf289, buf290, reinterpret_tensor(buf285, (1152, 384), (384, 1), 0), reinterpret_tensor(buf275, (384, 384), (384, 1), 0), reinterpret_tensor(buf276, (384, ), (1, ), 0), buf271, buf272, reinterpret_tensor(buf267, (1152, 384), (384, 1), 0), reinterpret_tensor(buf268, (1152, ), (1, ), 0), reinterpret_tensor(buf263, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf264, (384, ), (1, ), 0), buf259, buf260, reinterpret_tensor(buf255, (1152, 384), (384, 1), 0), reinterpret_tensor(buf245, (384, 384), (384, 1), 0), reinterpret_tensor(buf246, (384, ), (1, ), 0), buf241, buf242, reinterpret_tensor(buf237, (1152, 384), (384, 1), 0), reinterpret_tensor(buf238, (1152, ), (1, ), 0), reinterpret_tensor(buf233, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf234, (384, ), (1, ), 0), buf229, buf230, reinterpret_tensor(buf225, (1152, 384), (384, 1), 0), reinterpret_tensor(buf215, (384, 384), (384, 1), 0), reinterpret_tensor(buf216, (384, ), (1, ), 0), buf211, buf212, reinterpret_tensor(buf207, (1152, 384), (384, 1), 0), reinterpret_tensor(buf208, (1152, ), (1, ), 0), reinterpret_tensor(buf203, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf204, (384, ), (1, ), 0), buf199, buf200, reinterpret_tensor(buf195, (1152, 384), (384, 1), 0), reinterpret_tensor(buf185, (384, 384), (384, 1), 0), reinterpret_tensor(buf186, (384, ), (1, ), 0), buf181, buf182, reinterpret_tensor(buf177, (1152, 384), (384, 1), 0), reinterpret_tensor(buf178, (1152, ), (1, ), 0), reinterpret_tensor(buf173, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf174, (384, ), (1, ), 0), buf169, buf170, reinterpret_tensor(buf165, (1152, 384), (384, 1), 0), reinterpret_tensor(buf155, (384, 384), (384, 1), 0), reinterpret_tensor(buf156, (384, ), (1, ), 0), buf151, buf152, reinterpret_tensor(buf147, (1152, 384), (384, 1), 0), reinterpret_tensor(buf148, (1152, ), (1, ), 0), reinterpret_tensor(buf143, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf144, (384, ), (1, ), 0), buf139, buf140, reinterpret_tensor(buf135, (1152, 384), (384, 1), 0), reinterpret_tensor(buf125, (384, 384), (384, 1), 0), reinterpret_tensor(buf126, (384, ), (1, ), 0), buf121, buf122, reinterpret_tensor(buf117, (1152, 384), (384, 1), 0), reinterpret_tensor(buf118, (1152, ), (1, ), 0), reinterpret_tensor(buf113, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf114, (384, ), (1, ), 0), buf109, buf110, reinterpret_tensor(buf105, (1152, 384), (384, 1), 0), reinterpret_tensor(buf95, (384, 384), (384, 1), 0), reinterpret_tensor(buf96, (384, ), (1, ), 0), buf91, buf92, reinterpret_tensor(buf87, (1152, 384), (384, 1), 0), reinterpret_tensor(buf88, (1152, ), (1, ), 0), reinterpret_tensor(buf83, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf84, (384, ), (1, ), 0), buf77, buf78, reinterpret_tensor(buf73, (768, 384), (384, 1), 0), reinterpret_tensor(buf70, (384, 384), (384, 1), 0), reinterpret_tensor(buf61, (384, 384), (384, 1), 0), reinterpret_tensor(buf62, (384, ), (1, ), 0), buf57, buf58, reinterpret_tensor(buf53, (1152, 384), (384, 1), 0), reinterpret_tensor(buf54, (1152, ), (1, ), 0), reinterpret_tensor(buf49, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf50, (384, ), (1, ), 0), buf44, buf45, reinterpret_tensor(buf40, (768, 384), (384, 1), 0), reinterpret_tensor(buf37, (384, 384), (384, 1), 0), reinterpret_tensor(buf28, (384, 384), (384, 1), 0), reinterpret_tensor(buf29, (384, ), (1, ), 0), buf24, buf25, reinterpret_tensor(buf20, (1152, 384), (384, 1), 0), reinterpret_tensor(buf21, (1152, ), (1, ), 0), reinterpret_tensor(buf16, (384, 1152), (1152, 1), 0), reinterpret_tensor(buf17, (384, ), (1, ), 0), buf13, buf14, reinterpret_tensor(buf8, (1000, 384), (384, 1), 0), reinterpret_tensor(buf9, (1000, ), (1, ), 0), reinterpret_tensor(buf5, (1000, 384), (384, 1), 0), reinterpret_tensor(buf4, (1000, ), (1, ), 0), None, None, None, None, None, None, None, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_3 = rand_strided((64, 3, 7, 7), (147, 1, 21, 3), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_6 = rand_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    primals_7 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_9 = rand_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_12 = rand_strided((192, 64, 4, 4), (1024, 1, 256, 64), device='cpu', dtype=torch.float32)
    primals_14 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_21 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_27 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_47 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_53 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_60 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_66 = rand_strided((384, 192, 2, 2), (768, 1, 384, 192), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_73 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_79 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_84 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_90 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_95 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_101 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_106 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_117 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_123 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_128 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_134 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_145 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_150 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_156 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_161 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_167 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_183 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_189 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_194 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_200 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_211 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_216 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_222 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_228 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_234 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_240 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_246 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_261 = rand_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    convolution = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    squeeze_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    convolution_1 = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    squeeze_4 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_1 = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    convolution_2 = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    squeeze_7 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_2 = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    mul_21 = rand_strided((8, 28, 28, 192), (150528, 1, 5376, 28), device='cpu', dtype=torch.float32)
    view = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    add_17 = rand_strided((3, 14), (14, 1), device='cpu', dtype=torch.int64)
    unsqueeze_17 = rand_strided((3, 14, 1, 1), (14, 1, 1, 1), device='cpu', dtype=torch.int64)
    permute_5 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    view_4 = rand_strided((1568, 192), (192, 1), device='cpu', dtype=torch.float32)
    full_default = rand_strided((8, 192, 30, 30), (172800, 1, 5760, 192), device='cpu', dtype=torch.float32)
    view_12 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    mul_24 = rand_strided((8, 28, 28, 192), (150528, 1, 5376, 28), device='cpu', dtype=torch.float32)
    view_14 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    addmm_1 = rand_strided((6272, 576), (576, 1), device='cpu', dtype=torch.float32)
    view_16 = rand_strided((6272, 576), (576, 1), device='cpu', dtype=torch.float32)
    mul_29 = rand_strided((8, 28, 28, 192), (150528, 1, 5376, 28), device='cpu', dtype=torch.float32)
    view_18 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_19 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    view_22 = rand_strided((1568, 192), (192, 1), device='cpu', dtype=torch.float32)
    view_30 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    mul_32 = rand_strided((8, 28, 28, 192), (150528, 1, 5376, 28), device='cpu', dtype=torch.float32)
    view_32 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    addmm_4 = rand_strided((6272, 576), (576, 1), device='cpu', dtype=torch.float32)
    view_34 = rand_strided((6272, 576), (576, 1), device='cpu', dtype=torch.float32)
    mul_37 = rand_strided((8, 28, 28, 192), (150528, 1, 5376, 28), device='cpu', dtype=torch.float32)
    view_36 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_33 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    view_40 = rand_strided((1568, 192), (192, 1), device='cpu', dtype=torch.float32)
    view_48 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    mul_40 = rand_strided((8, 28, 28, 192), (150528, 1, 5376, 28), device='cpu', dtype=torch.float32)
    view_50 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    addmm_7 = rand_strided((6272, 576), (576, 1), device='cpu', dtype=torch.float32)
    view_52 = rand_strided((6272, 576), (576, 1), device='cpu', dtype=torch.float32)
    mul_45 = rand_strided((8, 28, 28, 192), (150528, 1, 5376, 28), device='cpu', dtype=torch.float32)
    view_54 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_47 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    view_58 = rand_strided((1568, 192), (192, 1), device='cpu', dtype=torch.float32)
    view_66 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    mul_48 = rand_strided((8, 28, 28, 192), (150528, 1, 5376, 28), device='cpu', dtype=torch.float32)
    view_68 = rand_strided((6272, 192), (192, 1), device='cpu', dtype=torch.float32)
    addmm_10 = rand_strided((6272, 576), (576, 1), device='cpu', dtype=torch.float32)
    view_70 = rand_strided((6272, 576), (576, 1), device='cpu', dtype=torch.float32)
    permute_57 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    mul_53 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_72 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_82 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_56 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_84 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_13 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_86 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_61 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_88 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_98 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_64 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_100 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_16 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_102 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_69 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_104 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_114 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_72 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_116 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_19 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_118 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_77 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_120 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_130 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_80 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_132 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_22 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_134 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_85 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_136 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_146 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_88 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_148 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_25 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_150 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_93 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_152 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_162 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_96 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_164 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_28 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_166 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_101 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_168 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_178 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_104 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_180 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_31 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_182 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_109 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_184 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_194 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_112 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_196 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_34 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_198 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_117 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_200 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_210 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_120 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_212 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_37 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_214 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_125 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_216 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_226 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_128 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_228 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_40 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_230 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_133 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_232 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_242 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_136 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_244 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_43 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_246 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_141 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_248 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_258 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_144 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_260 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_46 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_262 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_149 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_264 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_274 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_152 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_276 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_49 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_278 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    mul_157 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_280 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_290 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_160 = rand_strided((8, 14, 14, 384), (75264, 1, 5376, 14), device='cpu', dtype=torch.float32)
    view_292 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_52 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_294 = rand_strided((1568, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    cat = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_121 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_39 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_297 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_300 = rand_strided((8, 384), (75648, 1), device='cpu', dtype=torch.float32)
    view_310 = rand_strided((8, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_168 = rand_strided((8, 1, 384), (384, 384, 1), device='cpu', dtype=torch.float32)
    view_312 = rand_strided((8, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_55 = rand_strided((8, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_314 = rand_strided((8, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    cat_1 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_127 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_41 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    view_316 = rand_strided((1576, 384), (384, 1), device='cpu', dtype=torch.float32)
    view_319 = rand_strided((8, 384), (75648, 1), device='cpu', dtype=torch.float32)
    view_329 = rand_strided((8, 384), (384, 1), device='cpu', dtype=torch.float32)
    mul_176 = rand_strided((8, 1, 384), (384, 384, 1), device='cpu', dtype=torch.float32)
    view_331 = rand_strided((8, 384), (384, 1), device='cpu', dtype=torch.float32)
    addmm_58 = rand_strided((8, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    view_333 = rand_strided((8, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    cat_2 = rand_strided((8, 197, 384), (75648, 384, 1), device='cpu', dtype=torch.float32)
    getitem_133 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt_43 = rand_strided((8, 197, 1), (197, 1, 1), device='cpu', dtype=torch.float32)
    select = rand_strided((8, 384), (75648, 1), device='cpu', dtype=torch.float32)
    view_335 = rand_strided((1568, 384), (384, 1), device='cpu', dtype=torch.float32)
    unsqueeze_61 = rand_strided((8, 1, 1000), (1000, 1000, 1), device='cpu', dtype=torch.int64)
    permute_177 = rand_strided((1000, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_179 = rand_strided((1000, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_183 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_187 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_21 = rand_strided((8, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_191 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_196 = rand_strided((96, 197, 1), (197, 1, 0), device='cpu', dtype=torch.float32)
    permute_197 = rand_strided((96, 32, 197), (6304, 1, 32), device='cpu', dtype=torch.float32)
    alias_23 = rand_strided((8, 12, 1, 197), (2364, 1, 2364, 12), device='cpu', dtype=torch.float32)
    permute_198 = rand_strided((96, 32, 1), (32, 1, 0), device='cpu', dtype=torch.float32)
    permute_199 = rand_strided((96, 197, 32), (6304, 1, 197), device='cpu', dtype=torch.float32)
    permute_203 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_208 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_210 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_214 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_23 = rand_strided((8, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_218 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_223 = rand_strided((96, 197, 1), (197, 1, 0), device='cpu', dtype=torch.float32)
    permute_224 = rand_strided((96, 32, 197), (6304, 1, 32), device='cpu', dtype=torch.float32)
    alias_24 = rand_strided((8, 12, 1, 197), (2364, 1, 2364, 12), device='cpu', dtype=torch.float32)
    permute_225 = rand_strided((96, 32, 1), (32, 1, 0), device='cpu', dtype=torch.float32)
    permute_226 = rand_strided((96, 197, 32), (6304, 1, 197), device='cpu', dtype=torch.float32)
    permute_230 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_235 = rand_strided((768, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_237 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_241 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_25 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_245 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_250 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_251 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_25 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_252 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_253 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_258 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_26 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_260 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_264 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_27 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_268 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_273 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_274 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_26 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_275 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_276 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_281 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_28 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_283 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_287 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_29 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_291 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_296 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_297 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_27 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_298 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_299 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_304 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_30 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_306 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_310 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_31 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_314 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_319 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_320 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_28 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_321 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_322 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_327 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_32 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_329 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_333 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_33 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_337 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_342 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_343 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_29 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_344 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_345 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_350 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_34 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_352 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_356 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_35 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_360 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_365 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_366 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_30 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_367 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_368 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_373 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_36 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_375 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_379 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_37 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_383 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_388 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_389 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_31 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_390 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_391 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_396 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_38 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_398 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_402 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_39 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_406 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_411 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_412 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_32 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_413 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_414 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_419 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_40 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_421 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_425 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_41 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_429 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_434 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_435 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_33 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_436 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_437 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_442 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_42 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_444 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_448 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_43 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_452 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_457 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_458 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_34 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_459 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_460 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_465 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_44 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_467 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_471 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_45 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_475 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_480 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_481 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_35 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_482 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_483 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_488 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_46 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_490 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_494 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_47 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_498 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_503 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_504 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_36 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_505 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_506 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_511 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_48 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_513 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_517 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_49 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_521 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_526 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_527 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_37 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_528 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_529 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_534 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_50 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_536 = rand_strided((384, 1152), (1152, 1), device='cpu', dtype=torch.float32)
    permute_540 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_51 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_544 = rand_strided((384, 384), (384, 1), device='cpu', dtype=torch.float32)
    permute_549 = rand_strided((96, 196, 196), (38416, 1, 196), device='cpu', dtype=torch.float32)
    permute_550 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    alias_38 = rand_strided((8, 12, 196, 196), (460992, 1, 2352, 12), device='cpu', dtype=torch.float32)
    permute_551 = rand_strided((96, 32, 196), (6272, 1, 32), device='cpu', dtype=torch.float32)
    permute_552 = rand_strided((96, 196, 32), (6272, 1, 196), device='cpu', dtype=torch.float32)
    permute_557 = rand_strided((1152, 384), (384, 1), device='cpu', dtype=torch.float32)
    div_52 = rand_strided((8, 14, 14, 1), (196, 1, 14, 14), device='cpu', dtype=torch.float32)
    permute_561 = rand_strided((192, 576), (576, 1), device='cpu', dtype=torch.float32)
    permute_565 = rand_strided((576, 192), (192, 1), device='cpu', dtype=torch.float32)
    div_53 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    permute_571 = rand_strided((192, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_576 = rand_strided((9408, 9, 9), (81, 1, 9), device='cpu', dtype=torch.float32)
    permute_577 = rand_strided((9408, 32, 9), (288, 1, 32), device='cpu', dtype=torch.float32)
    alias_39 = rand_strided((8, 6, 196, 9, 9), (95256, 15876, 81, 9, 1), device='cpu', dtype=torch.float32)
    permute_579 = rand_strided((486, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_590 = rand_strided((192, 192), (192, 1), device='cpu', dtype=torch.float32)
    div_54 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    permute_592 = rand_strided((192, 576), (576, 1), device='cpu', dtype=torch.float32)
    permute_596 = rand_strided((576, 192), (192, 1), device='cpu', dtype=torch.float32)
    div_55 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    permute_602 = rand_strided((192, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_607 = rand_strided((9408, 9, 9), (81, 1, 9), device='cpu', dtype=torch.float32)
    permute_608 = rand_strided((9408, 32, 9), (288, 1, 32), device='cpu', dtype=torch.float32)
    alias_40 = rand_strided((8, 6, 196, 9, 9), (95256, 15876, 81, 9, 1), device='cpu', dtype=torch.float32)
    permute_610 = rand_strided((486, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_621 = rand_strided((192, 192), (192, 1), device='cpu', dtype=torch.float32)
    div_56 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    permute_623 = rand_strided((192, 576), (576, 1), device='cpu', dtype=torch.float32)
    permute_627 = rand_strided((576, 192), (192, 1), device='cpu', dtype=torch.float32)
    div_57 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    permute_633 = rand_strided((192, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_638 = rand_strided((9408, 9, 9), (81, 1, 9), device='cpu', dtype=torch.float32)
    permute_639 = rand_strided((9408, 32, 9), (288, 1, 32), device='cpu', dtype=torch.float32)
    alias_41 = rand_strided((8, 6, 196, 9, 9), (95256, 15876, 81, 9, 1), device='cpu', dtype=torch.float32)
    permute_641 = rand_strided((486, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_652 = rand_strided((192, 192), (192, 1), device='cpu', dtype=torch.float32)
    div_58 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    permute_654 = rand_strided((192, 576), (576, 1), device='cpu', dtype=torch.float32)
    permute_658 = rand_strided((576, 192), (192, 1), device='cpu', dtype=torch.float32)
    div_59 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    permute_664 = rand_strided((192, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_669 = rand_strided((9408, 9, 9), (81, 1, 9), device='cpu', dtype=torch.float32)
    permute_670 = rand_strided((9408, 32, 9), (288, 1, 32), device='cpu', dtype=torch.float32)
    alias_42 = rand_strided((8, 6, 196, 9, 9), (95256, 15876, 81, 9, 1), device='cpu', dtype=torch.float32)
    permute_672 = rand_strided((486, 192), (192, 1), device='cpu', dtype=torch.float32)
    permute_683 = rand_strided((192, 192), (192, 1), device='cpu', dtype=torch.float32)
    div_60 = rand_strided((8, 28, 28, 1), (784, 1, 28, 28), device='cpu', dtype=torch.float32)
    unsqueeze_112 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_124 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_136 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_3, primals_4, primals_6, primals_7, primals_9, primals_10, primals_12, primals_14, primals_21, primals_27, primals_34, primals_40, primals_47, primals_53, primals_60, primals_66, primals_68, primals_73, primals_79, primals_84, primals_90, primals_95, primals_101, primals_106, primals_112, primals_117, primals_123, primals_128, primals_134, primals_139, primals_145, primals_150, primals_156, primals_161, primals_167, primals_172, primals_178, primals_183, primals_189, primals_194, primals_200, primals_205, primals_211, primals_216, primals_222, primals_228, primals_234, primals_240, primals_246, primals_261, convolution, squeeze_1, relu, convolution_1, squeeze_4, relu_1, convolution_2, squeeze_7, relu_2, mul_21, view, add_17, unsqueeze_17, permute_5, view_4, full_default, view_12, mul_24, view_14, addmm_1, view_16, mul_29, view_18, permute_19, view_22, view_30, mul_32, view_32, addmm_4, view_34, mul_37, view_36, permute_33, view_40, view_48, mul_40, view_50, addmm_7, view_52, mul_45, view_54, permute_47, view_58, view_66, mul_48, view_68, addmm_10, view_70, permute_57, mul_53, view_72, view_82, mul_56, view_84, addmm_13, view_86, mul_61, view_88, view_98, mul_64, view_100, addmm_16, view_102, mul_69, view_104, view_114, mul_72, view_116, addmm_19, view_118, mul_77, view_120, view_130, mul_80, view_132, addmm_22, view_134, mul_85, view_136, view_146, mul_88, view_148, addmm_25, view_150, mul_93, view_152, view_162, mul_96, view_164, addmm_28, view_166, mul_101, view_168, view_178, mul_104, view_180, addmm_31, view_182, mul_109, view_184, view_194, mul_112, view_196, addmm_34, view_198, mul_117, view_200, view_210, mul_120, view_212, addmm_37, view_214, mul_125, view_216, view_226, mul_128, view_228, addmm_40, view_230, mul_133, view_232, view_242, mul_136, view_244, addmm_43, view_246, mul_141, view_248, view_258, mul_144, view_260, addmm_46, view_262, mul_149, view_264, view_274, mul_152, view_276, addmm_49, view_278, mul_157, view_280, view_290, mul_160, view_292, addmm_52, view_294, cat, getitem_121, rsqrt_39, view_297, view_300, view_310, mul_168, view_312, addmm_55, view_314, cat_1, getitem_127, rsqrt_41, view_316, view_319, view_329, mul_176, view_331, addmm_58, view_333, cat_2, getitem_133, rsqrt_43, select, view_335, unsqueeze_61, permute_177, permute_179, permute_183, permute_187, div_21, permute_191, permute_196, permute_197, alias_23, permute_198, permute_199, permute_203, permute_208, permute_210, permute_214, div_23, permute_218, permute_223, permute_224, alias_24, permute_225, permute_226, permute_230, permute_235, permute_237, permute_241, div_25, permute_245, permute_250, permute_251, alias_25, permute_252, permute_253, permute_258, div_26, permute_260, permute_264, div_27, permute_268, permute_273, permute_274, alias_26, permute_275, permute_276, permute_281, div_28, permute_283, permute_287, div_29, permute_291, permute_296, permute_297, alias_27, permute_298, permute_299, permute_304, div_30, permute_306, permute_310, div_31, permute_314, permute_319, permute_320, alias_28, permute_321, permute_322, permute_327, div_32, permute_329, permute_333, div_33, permute_337, permute_342, permute_343, alias_29, permute_344, permute_345, permute_350, div_34, permute_352, permute_356, div_35, permute_360, permute_365, permute_366, alias_30, permute_367, permute_368, permute_373, div_36, permute_375, permute_379, div_37, permute_383, permute_388, permute_389, alias_31, permute_390, permute_391, permute_396, div_38, permute_398, permute_402, div_39, permute_406, permute_411, permute_412, alias_32, permute_413, permute_414, permute_419, div_40, permute_421, permute_425, div_41, permute_429, permute_434, permute_435, alias_33, permute_436, permute_437, permute_442, div_42, permute_444, permute_448, div_43, permute_452, permute_457, permute_458, alias_34, permute_459, permute_460, permute_465, div_44, permute_467, permute_471, div_45, permute_475, permute_480, permute_481, alias_35, permute_482, permute_483, permute_488, div_46, permute_490, permute_494, div_47, permute_498, permute_503, permute_504, alias_36, permute_505, permute_506, permute_511, div_48, permute_513, permute_517, div_49, permute_521, permute_526, permute_527, alias_37, permute_528, permute_529, permute_534, div_50, permute_536, permute_540, div_51, permute_544, permute_549, permute_550, alias_38, permute_551, permute_552, permute_557, div_52, permute_561, permute_565, div_53, permute_571, permute_576, permute_577, alias_39, permute_579, permute_590, div_54, permute_592, permute_596, div_55, permute_602, permute_607, permute_608, alias_40, permute_610, permute_621, div_56, permute_623, permute_627, div_57, permute_633, permute_638, permute_639, alias_41, permute_641, permute_652, div_58, permute_654, permute_658, div_59, permute_664, permute_669, permute_670, alias_42, permute_672, permute_683, div_60, unsqueeze_112, unsqueeze_124, unsqueeze_136, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('volo_d1_224', benchmark_compiled_module)
