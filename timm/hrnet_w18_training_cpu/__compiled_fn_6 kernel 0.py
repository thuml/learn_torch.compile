
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_convolution_backward_div_native_batch_norm_backward_sum_threshold_backward_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (2048L*x1)));
                            auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (2048L*x2) + (100352L*x1)));
                            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                            auto tmp2 = static_cast<float>(49.0);
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 / tmp3;
                            auto tmp5 = static_cast<float>(0.0);
                            auto tmp6 = at::vec::Vectorized<float>(tmp5);
                            auto tmp7 = decltype(tmp6)::blendv(tmp4, tmp6, tmp0);
                            auto tmp10 = tmp8 - tmp9;
                            auto tmp11 = tmp7 * tmp10;
                            tmp_acc0_vec = tmp_acc0_vec + tmp7;
                            tmp_acc1_vec = tmp_acc1_vec + tmp11;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(2048L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr1 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (2048L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x2));
                        auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x2));
                        auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x2));
                        auto tmp2 = static_cast<float>(49.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = tmp1 / tmp3;
                        auto tmp5 = static_cast<float>(0.0);
                        auto tmp6 = at::vec::Vectorized<float>(tmp5);
                        auto tmp7 = decltype(tmp6)::blendv(tmp4, tmp6, tmp0);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp12 = static_cast<float>(0.002551020408163265);
                        auto tmp13 = at::vec::Vectorized<float>(tmp12);
                        auto tmp14 = tmp11 * tmp13;
                        auto tmp16 = tmp15 * tmp15;
                        auto tmp17 = tmp14 * tmp16;
                        auto tmp18 = tmp10 * tmp17;
                        auto tmp19 = tmp7 - tmp18;
                        auto tmp21 = tmp20 * tmp13;
                        auto tmp22 = tmp19 - tmp21;
                        auto tmp24 = tmp15 * tmp23;
                        auto tmp25 = tmp22 * tmp24;
                        tmp25.store(out_ptr4 + static_cast<long>(x2 + (2048L*x1) + (100352L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const bool* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc4 = 0;
                    at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp9 = flag_to_float_vec(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        auto tmp10 = decltype(tmp3)::blendv(tmp1, tmp3, tmp9);
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        auto tmp17 = tmp15 - tmp16;
                        auto tmp18 = tmp10 * tmp17;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                        tmp_acc2_vec = tmp_acc2_vec + tmp10;
                        tmp_acc3_vec = tmp_acc3_vec + tmp14;
                        tmp_acc4_vec = tmp_acc4_vec + tmp18;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp23 = flag_to_float_vec(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp28 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp35 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp38 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp42 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp44 = at::vec::Vectorized<float>::loadu(out_ptr4 + static_cast<long>(x1));
                    auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                    auto tmp52 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.002551020408163265);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp24 = decltype(tmp3)::blendv(tmp1, tmp3, tmp23);
                    auto tmp27 = tmp25 - tmp26;
                    auto tmp29 = tmp28 * tmp10;
                    auto tmp31 = tmp30 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    auto tmp33 = tmp27 * tmp32;
                    auto tmp34 = tmp24 - tmp33;
                    auto tmp36 = tmp35 * tmp10;
                    auto tmp37 = tmp34 - tmp36;
                    auto tmp39 = tmp30 * tmp38;
                    auto tmp40 = tmp37 * tmp39;
                    auto tmp43 = tmp41 - tmp42;
                    auto tmp45 = tmp44 * tmp10;
                    auto tmp47 = tmp46 * tmp46;
                    auto tmp48 = tmp45 * tmp47;
                    auto tmp49 = tmp43 * tmp48;
                    auto tmp50 = tmp24 - tmp49;
                    auto tmp51 = tmp50 - tmp36;
                    auto tmp53 = tmp46 * tmp52;
                    auto tmp54 = tmp51 * tmp53;
                    tmp22.store(out_ptr6 + static_cast<long>(x1 + (1024L*x0)));
                    tmp40.store(out_ptr7 + static_cast<long>(x1 + (1024L*x0)));
                    tmp54.store(out_ptr8 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const bool* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc4 = 0;
                    at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp9 = flag_to_float_vec(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (512L*x1)));
                        auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        auto tmp10 = decltype(tmp3)::blendv(tmp1, tmp3, tmp9);
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        auto tmp17 = tmp15 - tmp16;
                        auto tmp18 = tmp10 * tmp17;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                        tmp_acc2_vec = tmp_acc2_vec + tmp10;
                        tmp_acc3_vec = tmp_acc3_vec + tmp14;
                        tmp_acc4_vec = tmp_acc4_vec + tmp18;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp23 = flag_to_float_vec(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp28 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp35 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp38 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp42 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp44 = at::vec::Vectorized<float>::loadu(out_ptr4 + static_cast<long>(x1));
                    auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                    auto tmp52 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.0006377551020408163);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp24 = decltype(tmp3)::blendv(tmp1, tmp3, tmp23);
                    auto tmp27 = tmp25 - tmp26;
                    auto tmp29 = tmp28 * tmp10;
                    auto tmp31 = tmp30 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    auto tmp33 = tmp27 * tmp32;
                    auto tmp34 = tmp24 - tmp33;
                    auto tmp36 = tmp35 * tmp10;
                    auto tmp37 = tmp34 - tmp36;
                    auto tmp39 = tmp30 * tmp38;
                    auto tmp40 = tmp37 * tmp39;
                    auto tmp43 = tmp41 - tmp42;
                    auto tmp45 = tmp44 * tmp10;
                    auto tmp47 = tmp46 * tmp46;
                    auto tmp48 = tmp45 * tmp47;
                    auto tmp49 = tmp43 * tmp48;
                    auto tmp50 = tmp24 - tmp49;
                    auto tmp51 = tmp50 - tmp36;
                    auto tmp53 = tmp46 * tmp52;
                    auto tmp54 = tmp51 * tmp53;
                    tmp22.store(out_ptr6 + static_cast<long>(x1 + (512L*x0)));
                    tmp40.store(out_ptr7 + static_cast<long>(x1 + (512L*x0)));
                    tmp54.store(out_ptr8 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0006377551020408163);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.0006377551020408163);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const bool* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const bool* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc3 = 0;
                    at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc4 = 0;
                    at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp9 = flag_to_float_vec(in_ptr4 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                        auto tmp2 = static_cast<float>(0.0);
                        auto tmp3 = at::vec::Vectorized<float>(tmp2);
                        auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp4 * tmp7;
                        auto tmp10 = decltype(tmp3)::blendv(tmp1, tmp3, tmp9);
                        auto tmp13 = tmp11 - tmp12;
                        auto tmp14 = tmp10 * tmp13;
                        auto tmp17 = tmp15 - tmp16;
                        auto tmp18 = tmp10 * tmp17;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp8;
                        tmp_acc2_vec = tmp_acc2_vec + tmp10;
                        tmp_acc3_vec = tmp_acc3_vec + tmp14;
                        tmp_acc4_vec = tmp_acc4_vec + tmp18;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                    tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp23 = flag_to_float_vec(in_ptr4 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp28 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp35 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp38 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp42 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp44 = at::vec::Vectorized<float>::loadu(out_ptr4 + static_cast<long>(x1));
                    auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                    auto tmp52 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1));
                    auto tmp2 = static_cast<float>(0.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp13 = tmp12 * tmp12;
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp16 = tmp4 - tmp15;
                    auto tmp18 = tmp17 * tmp10;
                    auto tmp19 = tmp16 - tmp18;
                    auto tmp21 = tmp12 * tmp20;
                    auto tmp22 = tmp19 * tmp21;
                    auto tmp24 = decltype(tmp3)::blendv(tmp1, tmp3, tmp23);
                    auto tmp27 = tmp25 - tmp26;
                    auto tmp29 = tmp28 * tmp10;
                    auto tmp31 = tmp30 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    auto tmp33 = tmp27 * tmp32;
                    auto tmp34 = tmp24 - tmp33;
                    auto tmp36 = tmp35 * tmp10;
                    auto tmp37 = tmp34 - tmp36;
                    auto tmp39 = tmp30 * tmp38;
                    auto tmp40 = tmp37 * tmp39;
                    auto tmp43 = tmp41 - tmp42;
                    auto tmp45 = tmp44 * tmp10;
                    auto tmp47 = tmp46 * tmp46;
                    auto tmp48 = tmp45 * tmp47;
                    auto tmp49 = tmp43 * tmp48;
                    auto tmp50 = tmp24 - tmp49;
                    auto tmp51 = tmp50 - tmp36;
                    auto tmp53 = tmp46 * tmp52;
                    auto tmp54 = tmp51 * tmp53;
                    tmp22.store(out_ptr6 + static_cast<long>(x1 + (256L*x0)));
                    tmp40.store(out_ptr7 + static_cast<long>(x1 + (256L*x0)));
                    tmp54.store(out_ptr8 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp5 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                        tmp_acc2_vec = tmp_acc2_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp27 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    auto tmp26 = tmp24 - tmp25;
                    auto tmp28 = tmp27 * tmp11;
                    auto tmp30 = tmp29 * tmp29;
                    auto tmp31 = tmp28 * tmp30;
                    auto tmp32 = tmp26 * tmp31;
                    auto tmp33 = tmp5 - tmp32;
                    auto tmp34 = tmp33 - tmp19;
                    auto tmp36 = tmp29 * tmp35;
                    auto tmp37 = tmp34 * tmp36;
                    tmp23.store(out_ptr4 + static_cast<long>(x1 + (128L*x0)));
                    tmp37.store(out_ptr5 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (32L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (32L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (32L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (32L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (32L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (32L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (32L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (32L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (32L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (32L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (32L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (32L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (32L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (32L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    auto tmp14 = tmp12 - tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    auto tmp18 = tmp16 - tmp17;
                    auto tmp19 = tmp7 * tmp18;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    tmp_acc2_vec = tmp_acc2_vec + tmp15;
                    tmp_acc3_vec = tmp_acc3_vec + tmp19;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (144L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (144L*x0)));
                auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (144L*x0)));
                auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp43 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                auto tmp45 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                auto tmp51 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.002551020408163265);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                auto tmp28 = tmp26 - tmp27;
                auto tmp30 = tmp29 * tmp13;
                auto tmp32 = tmp31 * tmp31;
                auto tmp33 = tmp30 * tmp32;
                auto tmp34 = tmp28 * tmp33;
                auto tmp35 = tmp7 - tmp34;
                auto tmp36 = tmp35 - tmp21;
                auto tmp38 = tmp31 * tmp37;
                auto tmp39 = tmp36 * tmp38;
                auto tmp42 = tmp40 - tmp41;
                auto tmp44 = tmp43 * tmp13;
                auto tmp46 = tmp45 * tmp45;
                auto tmp47 = tmp44 * tmp46;
                auto tmp48 = tmp42 * tmp47;
                auto tmp49 = tmp7 - tmp48;
                auto tmp50 = tmp49 - tmp21;
                auto tmp52 = tmp45 * tmp51;
                auto tmp53 = tmp50 * tmp52;
                tmp25.store(out_ptr4 + static_cast<long>(x1 + (144L*x0)));
                tmp39.store(out_ptr5 + static_cast<long>(x1 + (144L*x0)));
                tmp53.store(out_ptr6 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp6 = tmp4 + tmp5;
            auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
            tmp7.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (3528L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (3528L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x2) + (72L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (72L*x2) + (3528L*x0)), static_cast<long>(72L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    tmp_acc2_vec = tmp_acc2_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr3 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                auto tmp21 = tmp19 - tmp20;
                auto tmp23 = tmp22 * tmp6;
                auto tmp25 = tmp24 * tmp24;
                auto tmp26 = tmp23 * tmp25;
                auto tmp27 = tmp21 * tmp26;
                auto tmp28 = tmp0 - tmp27;
                auto tmp29 = tmp28 - tmp14;
                auto tmp31 = tmp24 * tmp30;
                auto tmp32 = tmp29 * tmp31;
                tmp18.store(out_ptr4 + static_cast<long>(x1 + (72L*x0)));
                tmp32.store(out_ptr5 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                tmp7.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (1764L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (1764L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (1764L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (1764L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (1764L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x0) + (1764L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (1764L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (1764L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (1764L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x1) + (1764L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (1764L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (1764L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (7056L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (7056L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (7056L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (7056L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (7056L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (7056L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(7056L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
                auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp9 = to_float_mask(tmp8 <= tmp2);
                auto tmp12 = tmp10 + tmp11;
                auto tmp14 = tmp12 + tmp13;
                auto tmp15 = tmp14 + tmp7;
                auto tmp16 = decltype(tmp2)::blendv(tmp15, tmp2, tmp9);
                tmp7.store(in_out_ptr0 + static_cast<long>(x0));
                tmp16.store(in_out_ptr1 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (882L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (882L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (882L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (882L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (882L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x0) + (882L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (882L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (882L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (882L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x1) + (882L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (882L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (882L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (3528L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (3528L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (3528L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (14112L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x0) + (14112L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (14112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (14112L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.00015943877551020407);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                    }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (14112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp13 = tmp11 + tmp12;
            auto tmp15 = tmp13 + tmp14;
            auto tmp16 = decltype(tmp2)::blendv(tmp15, tmp2, tmp3);
            tmp16.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (144L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.002551020408163265);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (144L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.002551020408163265);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp6 = tmp4 + tmp5;
            auto tmp8 = tmp6 + tmp7;
            auto tmp10 = tmp8 + tmp9;
            auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp3);
            tmp11.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp3);
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 - tmp10;
                    auto tmp12 = tmp0 * tmp11;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    tmp_acc3_vec = tmp_acc3_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr4 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (144L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (144L*x0)));
                auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp36 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                auto tmp38 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1));
                auto tmp44 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                auto tmp21 = tmp19 - tmp20;
                auto tmp23 = tmp22 * tmp6;
                auto tmp25 = tmp24 * tmp24;
                auto tmp26 = tmp23 * tmp25;
                auto tmp27 = tmp21 * tmp26;
                auto tmp28 = tmp0 - tmp27;
                auto tmp29 = tmp28 - tmp14;
                auto tmp31 = tmp24 * tmp30;
                auto tmp32 = tmp29 * tmp31;
                auto tmp35 = tmp33 - tmp34;
                auto tmp37 = tmp36 * tmp6;
                auto tmp39 = tmp38 * tmp38;
                auto tmp40 = tmp37 * tmp39;
                auto tmp41 = tmp35 * tmp40;
                auto tmp42 = tmp0 - tmp41;
                auto tmp43 = tmp42 - tmp14;
                auto tmp45 = tmp38 * tmp44;
                auto tmp46 = tmp43 * tmp45;
                tmp18.store(out_ptr5 + static_cast<long>(x1 + (144L*x0)));
                tmp32.store(out_ptr6 + static_cast<long>(x1 + (144L*x0)));
                tmp46.store(out_ptr7 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (3528L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (3528L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x2) + (72L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (72L*x2) + (3528L*x0)), static_cast<long>(72L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    tmp_acc2_vec = tmp_acc2_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr3 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                auto tmp21 = tmp19 - tmp20;
                auto tmp23 = tmp22 * tmp6;
                auto tmp25 = tmp24 * tmp24;
                auto tmp26 = tmp23 * tmp25;
                auto tmp27 = tmp21 * tmp26;
                auto tmp28 = tmp0 - tmp27;
                auto tmp29 = tmp28 - tmp14;
                auto tmp31 = tmp24 * tmp30;
                auto tmp32 = tmp29 * tmp31;
                tmp18.store(out_ptr4 + static_cast<long>(x1 + (72L*x0)));
                tmp32.store(out_ptr5 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = static_cast<float>(0.0);
                    auto tmp1 = at::vec::Vectorized<float>(tmp0);
                    tmp1.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (1764L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (1764L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (1764L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (1764L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (1764L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x0) + (1764L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (1764L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (1764L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (1764L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x1) + (1764L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (1764L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (1764L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (7056L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (7056L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (7056L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (7056L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (7056L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (7056L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                auto tmp14 = to_float_mask(tmp13 <= tmp2);
                auto tmp17 = tmp15 + tmp16;
                auto tmp19 = tmp17 + tmp18;
                auto tmp20 = tmp19 + tmp12;
                auto tmp21 = decltype(tmp2)::blendv(tmp20, tmp2, tmp14);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
                tmp21.store(in_out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(7056L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = static_cast<float>(0.0);
                    auto tmp1 = at::vec::Vectorized<float>(tmp0);
                    tmp1.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (882L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (882L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (882L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (882L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (882L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x0) + (882L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (882L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (882L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (882L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x1) + (882L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (882L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (882L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (3528L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (3528L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (3528L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (14112L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x0) + (14112L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (14112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (14112L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.00015943877551020407);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                    }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (14112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp6 = tmp4 + tmp5;
            auto tmp8 = tmp6 + tmp7;
            auto tmp10 = tmp8 + tmp9;
            auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp3);
            tmp11.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (144L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.002551020408163265);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (144L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.002551020408163265);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp6 = tmp4 + tmp5;
            auto tmp8 = tmp6 + tmp7;
            auto tmp10 = tmp8 + tmp9;
            auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp3);
            tmp11.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp3);
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 - tmp10;
                    auto tmp12 = tmp0 * tmp11;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    tmp_acc3_vec = tmp_acc3_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr4 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (144L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (144L*x0)));
                auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp36 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                auto tmp38 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1));
                auto tmp44 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                auto tmp21 = tmp19 - tmp20;
                auto tmp23 = tmp22 * tmp6;
                auto tmp25 = tmp24 * tmp24;
                auto tmp26 = tmp23 * tmp25;
                auto tmp27 = tmp21 * tmp26;
                auto tmp28 = tmp0 - tmp27;
                auto tmp29 = tmp28 - tmp14;
                auto tmp31 = tmp24 * tmp30;
                auto tmp32 = tmp29 * tmp31;
                auto tmp35 = tmp33 - tmp34;
                auto tmp37 = tmp36 * tmp6;
                auto tmp39 = tmp38 * tmp38;
                auto tmp40 = tmp37 * tmp39;
                auto tmp41 = tmp35 * tmp40;
                auto tmp42 = tmp0 - tmp41;
                auto tmp43 = tmp42 - tmp14;
                auto tmp45 = tmp38 * tmp44;
                auto tmp46 = tmp43 * tmp45;
                tmp18.store(out_ptr5 + static_cast<long>(x1 + (144L*x0)));
                tmp32.store(out_ptr6 + static_cast<long>(x1 + (144L*x0)));
                tmp46.store(out_ptr7 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.0006377551020408163);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_add_new_zeros_threshold_backward_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (3528L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (3528L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x2) + (72L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (72L*x2) + (3528L*x0)), static_cast<long>(72L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    tmp_acc2_vec = tmp_acc2_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr3 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                auto tmp21 = tmp19 - tmp20;
                auto tmp23 = tmp22 * tmp6;
                auto tmp25 = tmp24 * tmp24;
                auto tmp26 = tmp23 * tmp25;
                auto tmp27 = tmp21 * tmp26;
                auto tmp28 = tmp0 - tmp27;
                auto tmp29 = tmp28 - tmp14;
                auto tmp31 = tmp24 * tmp30;
                auto tmp32 = tmp29 * tmp31;
                tmp18.store(out_ptr4 + static_cast<long>(x1 + (72L*x0)));
                tmp32.store(out_ptr5 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_add_new_zeros_threshold_backward_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(14112L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = static_cast<float>(0.0);
                    auto tmp1 = at::vec::Vectorized<float>(tmp0);
                    tmp1.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (1764L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (1764L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (1764L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (1764L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (1764L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x0) + (1764L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (1764L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (1764L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (1764L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (1764L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x1) + (1764L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (1764L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (1764L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (7056L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (7056L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (7056L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (7056L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (7056L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (7056L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_new_zeros_threshold_backward_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                auto tmp14 = to_float_mask(tmp13 <= tmp2);
                auto tmp17 = tmp15 + tmp16;
                auto tmp19 = tmp17 + tmp18;
                auto tmp20 = tmp19 + tmp12;
                auto tmp21 = decltype(tmp2)::blendv(tmp20, tmp2, tmp14);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
                tmp21.store(in_out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(7056L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = static_cast<float>(0.0);
                    auto tmp1 = at::vec::Vectorized<float>(tmp0);
                    tmp1.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (882L*x1)), static_cast<long>(49L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (49L*x0) + (882L*x1)), static_cast<long>(49L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (882L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (882L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (882L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x0) + (882L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (882L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (882L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.002551020408163265);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (882L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (882L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (49L*x1) + (882L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (882L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.002551020408163265);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (49L*x1) + (882L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (3528L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (3528L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (3528L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (14112L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x0) + (14112L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (14112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (14112L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.00015943877551020407);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                    }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (14112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp6 = tmp4 + tmp5;
            auto tmp8 = tmp6 + tmp7;
            auto tmp10 = tmp8 + tmp9;
            auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp3);
            tmp11.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (144L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.002551020408163265);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (144L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.002551020408163265);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (144L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.002551020408163265);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp6 = tmp4 + tmp5;
            auto tmp8 = tmp6 + tmp7;
            auto tmp10 = tmp8 + tmp9;
            auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp3);
            tmp11.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp3);
                tmp11.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_173 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_174 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_175 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_176 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_177 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_178 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_179 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_180 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_181 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_182 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (144L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.002551020408163265);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_183 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp13 = tmp11 + tmp12;
            auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
            tmp14.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = static_cast<float>(0.0);
                    auto tmp1 = at::vec::Vectorized<float>(tmp0);
                    tmp1.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_184 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (7056L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (7056L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (7056L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (7056L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (7056L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (7056L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_185 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = static_cast<float>(0.0);
                    auto tmp1 = at::vec::Vectorized<float>(tmp0);
                    tmp1.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_186 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (3528L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (3528L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (3528L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_187 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp10 = static_cast<float>(0.0);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = to_float_mask(tmp9 <= tmp11);
                    auto tmp14 = tmp0 + tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = decltype(tmp11)::blendv(tmp16, tmp11, tmp12);
                    auto tmp20 = tmp18 - tmp19;
                    auto tmp21 = tmp17 * tmp20;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    tmp_acc3_vec = tmp_acc3_vec + tmp17;
                    tmp_acc4_vec = tmp_acc4_vec + tmp21;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr5 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (72L*x0)));
                auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (72L*x0)));
                auto tmp39 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (72L*x0)));
                auto tmp42 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (72L*x0)));
                auto tmp43 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp45 = at::vec::Vectorized<float>::loadu(out_ptr4 + static_cast<long>(x1));
                auto tmp47 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1));
                auto tmp52 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                auto tmp55 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                auto tmp21 = tmp19 - tmp20;
                auto tmp23 = tmp22 * tmp6;
                auto tmp25 = tmp24 * tmp24;
                auto tmp26 = tmp23 * tmp25;
                auto tmp27 = tmp21 * tmp26;
                auto tmp28 = tmp0 - tmp27;
                auto tmp29 = tmp28 - tmp14;
                auto tmp31 = tmp24 * tmp30;
                auto tmp32 = tmp29 * tmp31;
                auto tmp34 = static_cast<float>(0.0);
                auto tmp35 = at::vec::Vectorized<float>(tmp34);
                auto tmp36 = to_float_mask(tmp33 <= tmp35);
                auto tmp38 = tmp0 + tmp37;
                auto tmp40 = tmp38 + tmp39;
                auto tmp41 = decltype(tmp35)::blendv(tmp40, tmp35, tmp36);
                auto tmp44 = tmp42 - tmp43;
                auto tmp46 = tmp45 * tmp6;
                auto tmp48 = tmp47 * tmp47;
                auto tmp49 = tmp46 * tmp48;
                auto tmp50 = tmp44 * tmp49;
                auto tmp51 = tmp41 - tmp50;
                auto tmp53 = tmp52 * tmp6;
                auto tmp54 = tmp51 - tmp53;
                auto tmp56 = tmp47 * tmp55;
                auto tmp57 = tmp54 * tmp56;
                tmp18.store(out_ptr6 + static_cast<long>(x1 + (72L*x0)));
                tmp32.store(out_ptr7 + static_cast<long>(x1 + (72L*x0)));
                tmp57.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_188 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_189 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_190 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_191 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_192 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_193 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_194 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (14112L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x0) + (14112L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (14112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (14112L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.00015943877551020407);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                    }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (14112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_195 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_196 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_197 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp10 = tmp8 + tmp9;
            auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
            auto tmp13 = tmp11 + tmp12;
            auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
            tmp14.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_198 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_199 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_200 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_201 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_202 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_203 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(0.00015943877551020407);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(0.00015943877551020407);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_204 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_205 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_206 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_207 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_208 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_209 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_210 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_211 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(3.985969387755102e-05);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(3.985969387755102e-05);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_212 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_213 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_214 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_215 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_216 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_217 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_218 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_219 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    auto tmp14 = tmp12 - tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    tmp_acc2_vec = tmp_acc2_vec + tmp15;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (72L*x0)));
                auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                auto tmp28 = tmp26 - tmp27;
                auto tmp30 = tmp29 * tmp13;
                auto tmp32 = tmp31 * tmp31;
                auto tmp33 = tmp30 * tmp32;
                auto tmp34 = tmp28 * tmp33;
                auto tmp35 = tmp7 - tmp34;
                auto tmp36 = tmp35 - tmp21;
                auto tmp38 = tmp31 * tmp37;
                auto tmp39 = tmp36 * tmp38;
                tmp25.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
                tmp39.store(out_ptr4 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_220 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_221 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_222 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                tmp7.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_223 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (7056L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (7056L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (7056L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (7056L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (7056L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (7056L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_224 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_225 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                tmp7.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_226 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (3528L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (3528L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (3528L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_227 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_228 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (14112L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x0) + (14112L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (14112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (14112L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.00015943877551020407);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                    }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (14112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_229 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp13 = tmp11 + tmp12;
            auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
            tmp14.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_230 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_231 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_232 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_233 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_234 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_235 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_236 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_237 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(0.00015943877551020407);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(0.00015943877551020407);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_238 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_239 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_240 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_241 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_242 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_243 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_244 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_245 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(3.985969387755102e-05);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(3.985969387755102e-05);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_246 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_247 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_248 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_249 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_250 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_251 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_252 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_253 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                tmp7.store(in_out_ptr1 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_254 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (7056L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (7056L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (7056L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (7056L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (7056L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (7056L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_255 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                tmp7.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_256 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (3528L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (3528L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (3528L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_257 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    auto tmp7 = tmp5 - tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp10 = static_cast<float>(0.0);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = to_float_mask(tmp9 <= tmp11);
                    auto tmp14 = tmp0 + tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = decltype(tmp11)::blendv(tmp16, tmp11, tmp12);
                    auto tmp20 = tmp18 - tmp19;
                    auto tmp21 = tmp17 * tmp20;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    tmp_acc3_vec = tmp_acc3_vec + tmp17;
                    tmp_acc4_vec = tmp_acc4_vec + tmp21;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr5 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (72L*x0)));
                auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (72L*x0)));
                auto tmp39 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (72L*x0)));
                auto tmp42 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (72L*x0)));
                auto tmp43 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp45 = at::vec::Vectorized<float>::loadu(out_ptr4 + static_cast<long>(x1));
                auto tmp47 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1));
                auto tmp52 = at::vec::Vectorized<float>::loadu(out_ptr3 + static_cast<long>(x1));
                auto tmp55 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                auto tmp21 = tmp19 - tmp20;
                auto tmp23 = tmp22 * tmp6;
                auto tmp25 = tmp24 * tmp24;
                auto tmp26 = tmp23 * tmp25;
                auto tmp27 = tmp21 * tmp26;
                auto tmp28 = tmp0 - tmp27;
                auto tmp29 = tmp28 - tmp14;
                auto tmp31 = tmp24 * tmp30;
                auto tmp32 = tmp29 * tmp31;
                auto tmp34 = static_cast<float>(0.0);
                auto tmp35 = at::vec::Vectorized<float>(tmp34);
                auto tmp36 = to_float_mask(tmp33 <= tmp35);
                auto tmp38 = tmp0 + tmp37;
                auto tmp40 = tmp38 + tmp39;
                auto tmp41 = decltype(tmp35)::blendv(tmp40, tmp35, tmp36);
                auto tmp44 = tmp42 - tmp43;
                auto tmp46 = tmp45 * tmp6;
                auto tmp48 = tmp47 * tmp47;
                auto tmp49 = tmp46 * tmp48;
                auto tmp50 = tmp44 * tmp49;
                auto tmp51 = tmp41 - tmp50;
                auto tmp53 = tmp52 * tmp6;
                auto tmp54 = tmp51 - tmp53;
                auto tmp56 = tmp47 * tmp55;
                auto tmp57 = tmp54 * tmp56;
                tmp18.store(out_ptr6 + static_cast<long>(x1 + (72L*x0)));
                tmp32.store(out_ptr7 + static_cast<long>(x1 + (72L*x0)));
                tmp57.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_258 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_259 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_260 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_261 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_262 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = in_ptr0[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            in_out_ptr0[static_cast<long>(x0)] = tmp2;
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_263 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_264 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (14112L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x0) + (14112L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (14112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (14112L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.00015943877551020407);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                    }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (14112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_265 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_266 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_267 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp10 = tmp8 + tmp9;
            auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
            auto tmp13 = tmp11 + tmp12;
            auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
            tmp14.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_268 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_269 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_270 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_271 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_272 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_273 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(0.00015943877551020407);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(0.00015943877551020407);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_274 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_275 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_276 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_277 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_278 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_279 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_280 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_281 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(3.985969387755102e-05);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(3.985969387755102e-05);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_282 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_283 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_284 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_285 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_286 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_287 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_288 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_289 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    auto tmp14 = tmp12 - tmp13;
                    auto tmp15 = tmp7 * tmp14;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    tmp_acc2_vec = tmp_acc2_vec + tmp15;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (72L*x0)));
                auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp29 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                auto tmp28 = tmp26 - tmp27;
                auto tmp30 = tmp29 * tmp13;
                auto tmp32 = tmp31 * tmp31;
                auto tmp33 = tmp30 * tmp32;
                auto tmp34 = tmp28 * tmp33;
                auto tmp35 = tmp7 - tmp34;
                auto tmp36 = tmp35 - tmp21;
                auto tmp38 = tmp31 * tmp37;
                auto tmp39 = tmp36 * tmp38;
                tmp25.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
                tmp39.store(out_ptr4 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_290 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_291 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                    auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                    auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                    auto tmp6 = in_ptr3[static_cast<long>(x0)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                    tmp_acc0 = tmp_acc0 + tmp4;
                    tmp_acc1 = tmp_acc1 + tmp8;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr4[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.00015943877551020407);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                auto tmp6 = in_ptr3[static_cast<long>(x1)];
                auto tmp8 = out_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr4[static_cast<long>(x1)];
                auto tmp16 = out_ptr0[static_cast<long>(x1)];
                auto tmp19 = in_ptr5[static_cast<long>(x1)];
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = tmp0 <= tmp1;
                auto tmp4 = tmp2 ? tmp1 : tmp3;
                auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                auto tmp9 = static_cast<float>(0.00015943877551020407);
                auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
            }
        }
    }
}
''')


cpp_fused_add_new_zeros_threshold_backward_292 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(56448L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                tmp7.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_293 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (7056L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (36L*x2_inner) + (7056L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (7056L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x2) + (7056L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (7056L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x2) + (7056L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)), static_cast<long>(36L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x2) + (7056L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (7056L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x2) + (7056L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (7056L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_294 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr3[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_new_zeros_threshold_backward_295 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(28224L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                tmp7.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_296 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (196L*x0) + (3528L*x1)), static_cast<long>(196L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (3528L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr0[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (3528L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (3528L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x0) + (3528L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (3528L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.0006377551020408163);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0)));
                    }
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (3528L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp18.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (3528L*x0))] = tmpbuf[x1_inner]; }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (3528L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.0006377551020408163);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (196L*x1) + (3528L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused__unsafe_index_put_new_zeros_297 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_298 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (14112L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x0) + (14112L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (14112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (14112L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.00015943877551020407);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                    }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (14112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_299 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp13 = tmp11 + tmp12;
            auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
            tmp14.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_300 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_301 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_302 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_303 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(out_ptr3 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_304 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_305 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp11 = tmp7 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp7;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (72L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (72L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                auto tmp10 = tmp8 - tmp9;
                auto tmp12 = static_cast<float>(0.0006377551020408163);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp16 = tmp15 * tmp15;
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp10 * tmp17;
                auto tmp19 = tmp7 - tmp18;
                auto tmp21 = tmp20 * tmp13;
                auto tmp22 = tmp19 - tmp21;
                auto tmp24 = tmp15 * tmp23;
                auto tmp25 = tmp22 * tmp24;
                tmp25.store(out_ptr2 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_306 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp9 = tmp5 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp5;
                    tmp_acc1_vec = tmp_acc1_vec + tmp9;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (72L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                auto tmp8 = tmp6 - tmp7;
                auto tmp10 = static_cast<float>(0.0006377551020408163);
                auto tmp11 = at::vec::Vectorized<float>(tmp10);
                auto tmp12 = tmp9 * tmp11;
                auto tmp14 = tmp13 * tmp13;
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp8 * tmp15;
                auto tmp17 = tmp5 - tmp16;
                auto tmp19 = tmp18 * tmp11;
                auto tmp20 = tmp17 - tmp19;
                auto tmp22 = tmp13 * tmp21;
                auto tmp23 = tmp20 * tmp22;
                tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_307 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(0.00015943877551020407);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(0.00015943877551020407);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_308 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_309 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_310 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_311 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_312 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_313 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_314 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_315 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(3.985969387755102e-05);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(3.985969387755102e-05);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_316 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_317 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_318 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_319 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_320 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_321 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_322 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_323 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
            auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
            auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.0);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = to_float_mask(tmp0 <= tmp2);
            auto tmp5 = to_float_mask(tmp4 <= tmp2);
            auto tmp8 = tmp6 + tmp7;
            auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
            auto tmp11 = tmp9 + tmp10;
            auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
            tmp12.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (72L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp4 = tmp0 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp3 = tmp1 - tmp2;
                auto tmp5 = static_cast<float>(0.0006377551020408163);
                auto tmp6 = at::vec::Vectorized<float>(tmp5);
                auto tmp7 = tmp4 * tmp6;
                auto tmp9 = tmp8 * tmp8;
                auto tmp10 = tmp7 * tmp9;
                auto tmp11 = tmp3 * tmp10;
                auto tmp12 = tmp0 - tmp11;
                auto tmp14 = tmp13 * tmp6;
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = tmp8 * tmp16;
                auto tmp18 = tmp15 * tmp17;
                tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_324 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0)
{
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 + tmp7;
                        auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                        auto tmp12 = tmp10 - tmp11;
                        auto tmp13 = tmp9 * tmp12;
                        tmp_acc0_vec = tmp_acc0_vec + tmp9;
                        tmp_acc1_vec = tmp_acc1_vec + tmp13;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp9 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp10 = in_ptr5[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                        auto tmp8 = tmp2 ? tmp1 : tmp7;
                        auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                        auto tmp12 = decltype(tmp8)(tmp8 * tmp11);
                        tmp_acc0 = tmp_acc0 + tmp8;
                        tmp_acc1 = tmp_acc1 + tmp12;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp3);
                    auto tmp12 = tmp10 - tmp11;
                    auto tmp14 = static_cast<float>(0.00015943877551020407);
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp18 = tmp17 * tmp17;
                    auto tmp19 = tmp16 * tmp18;
                    auto tmp20 = tmp12 * tmp19;
                    auto tmp21 = tmp9 - tmp20;
                    auto tmp23 = tmp22 * tmp15;
                    auto tmp24 = tmp21 - tmp23;
                    auto tmp26 = tmp17 * tmp25;
                    auto tmp27 = tmp24 * tmp26;
                    tmp27.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp9 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp10 = in_ptr5[static_cast<long>(x1)];
                    auto tmp12 = out_ptr1[static_cast<long>(x1)];
                    auto tmp15 = in_ptr6[static_cast<long>(x1)];
                    auto tmp20 = out_ptr0[static_cast<long>(x1)];
                    auto tmp23 = in_ptr7[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp8 = tmp2 ? tmp1 : tmp7;
                    auto tmp11 = decltype(tmp9)(tmp9 - tmp10);
                    auto tmp13 = static_cast<float>(0.00015943877551020407);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    auto tmp18 = decltype(tmp11)(tmp11 * tmp17);
                    auto tmp19 = decltype(tmp8)(tmp8 - tmp18);
                    auto tmp21 = decltype(tmp20)(tmp20 * tmp13);
                    auto tmp22 = decltype(tmp19)(tmp19 - tmp21);
                    auto tmp24 = decltype(tmp15)(tmp15 * tmp23);
                    auto tmp25 = decltype(tmp22)(tmp22 * tmp24);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp25;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr1[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_add_new_zeros_threshold_backward_325 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                tmp7.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_326 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        float tmp0[8*8] __attribute__ ((aligned (8)));
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        at::vec::transpose_mxn<float,8,8>(in_ptr0 + static_cast<long>(x2 + (784L*x0) + (14112L*x1)), static_cast<long>(784L), tmp0, 8);
                        for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                        {
                            auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x2) + (18L*x2_inner) + (14112L*x1)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp5 = tmp1 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp1;
                            tmp_acc1_vec = tmp_acc1_vec + tmp5;
                        }
                    }
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma GCC ivdep
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                float tmp_acc1 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x0) + (14112L*x1))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0 + (18L*x2) + (14112L*x1))];
                        auto tmp2 = in_ptr2[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                out_ptr1[static_cast<long>(x0)] = tmp_acc1;
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(out_ptr2 + static_cast<long>(x0));
        }
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = out_ptr1[static_cast<long>(x0)];
            auto tmp1 = in_ptr3[static_cast<long>(x0)];
            auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
            out_ptr2[static_cast<long>(x0)] = tmp2;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x1 + (18L*x2) + (14112L*x0)), static_cast<long>(18L), tmp1, 8);
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x1_inner));
                        auto tmp3 = in_ptr2[static_cast<long>(x1 + x1_inner)];
                        auto tmp6 = out_ptr1[static_cast<long>(x1 + x1_inner)];
                        auto tmp9 = in_ptr3[static_cast<long>(x1 + x1_inner)];
                        auto tmp15 = out_ptr0[static_cast<long>(x1 + x1_inner)];
                        auto tmp19 = in_ptr4[static_cast<long>(x1 + x1_inner)];
                        auto tmp4 = at::vec::Vectorized<float>(tmp3);
                        auto tmp5 = tmp2 - tmp4;
                        auto tmp7 = static_cast<float>(0.00015943877551020407);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp9);
                        auto tmp11 = decltype(tmp8)(tmp8 * tmp10);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp5 * tmp12;
                        auto tmp14 = tmp0 - tmp13;
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp7);
                        auto tmp17 = at::vec::Vectorized<float>(tmp16);
                        auto tmp18 = tmp14 - tmp17;
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp18 * tmp21;
                        tmp22.store(in_out_ptr0 + static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (14112L*x0)));
                    }
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (18L*x2) + (14112L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x2 + (784L*x1) + (14112L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_327 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp10 = tmp8 + tmp9;
                auto tmp11 = decltype(tmp2)::blendv(tmp10, tmp2, tmp5);
                auto tmp13 = tmp11 + tmp12;
                auto tmp14 = decltype(tmp2)::blendv(tmp13, tmp2, tmp3);
                tmp14.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr5[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr6[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr5[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr6[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr7[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr8[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_328 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_329 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_330 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_331 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_332 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_333 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (36L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(0.00015943877551020407);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (36L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(0.00015943877551020407);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (36L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_334 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (36L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (36L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(0.00015943877551020407);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (36L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(0.00015943877551020407);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_335 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp6 = to_float_mask(tmp5 <= tmp2);
                auto tmp9 = tmp7 + tmp8;
                auto tmp10 = decltype(tmp2)::blendv(tmp9, tmp2, tmp6);
                auto tmp11 = tmp4 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_336 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_337 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_338 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_339 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_340 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_341 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp4 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp7 = in_ptr3[static_cast<long>(x0 + (18L*x1))];
                        auto tmp8 = in_ptr4[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                        auto tmp6 = tmp2 ? tmp1 : tmp5;
                        auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 * tmp9);
                        tmp_acc0 = tmp_acc0 + tmp6;
                        tmp_acc1 = tmp_acc1 + tmp10;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_ptr1[static_cast<long>(x1 + (18L*x0))];
                    auto tmp4 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1 + (18L*x0))];
                    auto tmp8 = in_ptr4[static_cast<long>(x1)];
                    auto tmp10 = out_ptr1[static_cast<long>(x1)];
                    auto tmp13 = in_ptr5[static_cast<long>(x1)];
                    auto tmp18 = out_ptr0[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = tmp2 ? tmp1 : tmp5;
                    auto tmp9 = decltype(tmp7)(tmp7 - tmp8);
                    auto tmp11 = static_cast<float>(3.985969387755102e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp13);
                    auto tmp15 = decltype(tmp12)(tmp12 * tmp14);
                    auto tmp16 = decltype(tmp9)(tmp9 * tmp15);
                    auto tmp17 = decltype(tmp6)(tmp6 - tmp16);
                    auto tmp19 = decltype(tmp18)(tmp18 * tmp11);
                    auto tmp20 = decltype(tmp17)(tmp17 - tmp19);
                    auto tmp22 = decltype(tmp13)(tmp13 * tmp21);
                    auto tmp23 = decltype(tmp20)(tmp20 * tmp22);
                    out_ptr2[static_cast<long>(x1 + (18L*x0))] = tmp23;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr5[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    in_out_ptr0[static_cast<long>(x0)] = tmp2;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_342 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp3 = in_ptr1[static_cast<long>(x0 + (18L*x1))];
                        auto tmp5 = in_ptr2[static_cast<long>(x0 + (18L*x1))];
                        auto tmp6 = in_ptr3[static_cast<long>(x0)];
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = tmp0 <= tmp1;
                        auto tmp4 = tmp2 ? tmp1 : tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        tmp_acc0 = tmp_acc0 + tmp4;
                        tmp_acc1 = tmp_acc1 + tmp8;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp5 = in_ptr2[static_cast<long>(x1 + (18L*x0))];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp8 = out_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr4[static_cast<long>(x1)];
                    auto tmp16 = out_ptr0[static_cast<long>(x1)];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = tmp0 <= tmp1;
                    auto tmp4 = tmp2 ? tmp1 : tmp3;
                    auto tmp7 = decltype(tmp5)(tmp5 - tmp6);
                    auto tmp9 = static_cast<float>(3.985969387755102e-05);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp11)(tmp11 * tmp11);
                    auto tmp13 = decltype(tmp10)(tmp10 * tmp12);
                    auto tmp14 = decltype(tmp7)(tmp7 * tmp13);
                    auto tmp15 = decltype(tmp4)(tmp4 - tmp14);
                    auto tmp17 = decltype(tmp16)(tmp16 * tmp9);
                    auto tmp18 = decltype(tmp15)(tmp15 - tmp17);
                    auto tmp20 = decltype(tmp11)(tmp11 * tmp19);
                    auto tmp21 = decltype(tmp18)(tmp18 * tmp20);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp21;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_343 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(225792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (36L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (36L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (36L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(32L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(0.00015943877551020407);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_344 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(451584L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (18L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x0 + (18L*x1))];
                        auto tmp1 = in_ptr4[static_cast<long>(x0 + (18L*x1))];
                        auto tmp2 = in_ptr5[static_cast<long>(x0)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp4 = decltype(tmp0)(tmp0 * tmp3);
                        tmp_acc0 = tmp_acc0 + tmp0;
                        tmp_acc1 = tmp_acc1 + tmp4;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr1[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
                #pragma omp simd simdlen(4) 
                for(long x0=static_cast<long>(16L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = out_ptr1[static_cast<long>(x0)];
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = decltype(tmp0)(tmp0 * tmp1);
                    out_ptr2[static_cast<long>(x0)] = tmp2;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = in_ptr5[static_cast<long>(x1)];
                    auto tmp4 = out_ptr1[static_cast<long>(x1)];
                    auto tmp7 = in_ptr6[static_cast<long>(x1)];
                    auto tmp12 = out_ptr0[static_cast<long>(x1)];
                    auto tmp15 = in_ptr7[static_cast<long>(x1)];
                    auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                    auto tmp8 = decltype(tmp7)(tmp7 * tmp7);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp3)(tmp3 * tmp9);
                    auto tmp11 = decltype(tmp0)(tmp0 - tmp10);
                    auto tmp13 = decltype(tmp12)(tmp12 * tmp5);
                    auto tmp14 = decltype(tmp11)(tmp11 - tmp13);
                    auto tmp16 = decltype(tmp7)(tmp7 * tmp15);
                    auto tmp17 = decltype(tmp14)(tmp14 * tmp16);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_345 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_346 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_347 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_348 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_349 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_350 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_351 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr2)
{
    auto out_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(out_ptr2 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_352 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_353 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_354 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                auto tmp1 = static_cast<float>(0.0);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = to_float_mask(tmp0 <= tmp2);
                auto tmp5 = to_float_mask(tmp4 <= tmp2);
                auto tmp8 = tmp6 + tmp7;
                auto tmp9 = decltype(tmp2)::blendv(tmp8, tmp2, tmp5);
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = decltype(tmp2)::blendv(tmp11, tmp2, tmp3);
                tmp12.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc2 = 0;
                    at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (256L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        auto tmp7 = tmp5 - tmp6;
                        auto tmp8 = tmp0 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        tmp_acc2_vec = tmp_acc2_vec + tmp8;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                    tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr3 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp16 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                    auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp22 = at::vec::Vectorized<float>::loadu(out_ptr2 + static_cast<long>(x1));
                    auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp3 = tmp1 - tmp2;
                    auto tmp5 = static_cast<float>(3.985969387755102e-05);
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 * tmp6;
                    auto tmp9 = tmp8 * tmp8;
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp3 * tmp10;
                    auto tmp12 = tmp0 - tmp11;
                    auto tmp14 = tmp13 * tmp6;
                    auto tmp15 = tmp12 - tmp14;
                    auto tmp17 = tmp8 * tmp16;
                    auto tmp18 = tmp15 * tmp17;
                    auto tmp21 = tmp19 - tmp20;
                    auto tmp23 = tmp22 * tmp6;
                    auto tmp25 = tmp24 * tmp24;
                    auto tmp26 = tmp23 * tmp25;
                    auto tmp27 = tmp21 * tmp26;
                    auto tmp28 = tmp0 - tmp27;
                    auto tmp29 = tmp28 - tmp14;
                    auto tmp31 = tmp24 * tmp30;
                    auto tmp32 = tmp29 * tmp31;
                    tmp18.store(out_ptr4 + static_cast<long>(x1 + (256L*x0)));
                    tmp32.store(out_ptr5 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_batch_norm_backward_355 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
            auto tmp2 = tmp0 * tmp1;
            tmp2.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_356 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_357 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(3.985969387755102e-05);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_native_batch_norm_backward_threshold_backward_358 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0)
{
    auto in_ptr1 = in_out_ptr0;
    auto out_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                        auto tmp10 = tmp8 - tmp9;
                        auto tmp11 = tmp7 * tmp10;
                        tmp_acc0_vec = tmp_acc0_vec + tmp7;
                        tmp_acc1_vec = tmp_acc1_vec + tmp11;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = decltype(tmp2)::blendv(tmp6, tmp2, tmp3);
                    auto tmp10 = tmp8 - tmp9;
                    auto tmp12 = static_cast<float>(3.985969387755102e-05);
                    auto tmp13 = at::vec::Vectorized<float>(tmp12);
                    auto tmp14 = tmp11 * tmp13;
                    auto tmp16 = tmp15 * tmp15;
                    auto tmp17 = tmp14 * tmp16;
                    auto tmp18 = tmp10 * tmp17;
                    auto tmp19 = tmp7 - tmp18;
                    auto tmp21 = tmp20 * tmp13;
                    auto tmp22 = tmp19 - tmp21;
                    auto tmp24 = tmp15 * tmp23;
                    auto tmp25 = tmp22 * tmp24;
                    tmp25.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(in_out_ptr1 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_359 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(100352L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (64L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                        auto tmp1 = static_cast<float>(0.0);
                        auto tmp2 = at::vec::Vectorized<float>(tmp1);
                        auto tmp3 = to_float_mask(tmp0 <= tmp2);
                        auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                        auto tmp8 = tmp6 - tmp7;
                        auto tmp9 = tmp5 * tmp8;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp9;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr2 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp1 = static_cast<float>(0.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = to_float_mask(tmp0 <= tmp2);
                    auto tmp5 = decltype(tmp2)::blendv(tmp4, tmp2, tmp3);
                    auto tmp8 = tmp6 - tmp7;
                    auto tmp10 = static_cast<float>(9.964923469387754e-06);
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp14 = tmp13 * tmp13;
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp8 * tmp15;
                    auto tmp17 = tmp5 - tmp16;
                    auto tmp19 = tmp18 * tmp11;
                    auto tmp20 = tmp17 - tmp19;
                    auto tmp22 = tmp13 * tmp21;
                    auto tmp23 = tmp20 * tmp22;
                    tmp23.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_4, primals_5, primals_7, primals_8, primals_10, primals_11, primals_13, primals_14, primals_16, primals_17, primals_19, primals_20, primals_22, primals_23, primals_25, primals_26, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_37, primals_38, primals_40, primals_41, primals_43, primals_44, primals_46, primals_47, primals_49, primals_50, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_61, primals_62, primals_64, primals_65, primals_67, primals_68, primals_70, primals_71, primals_73, primals_74, primals_76, primals_77, primals_79, primals_80, primals_82, primals_83, primals_85, primals_86, primals_88, primals_89, primals_91, primals_92, primals_94, primals_95, primals_97, primals_98, primals_100, primals_101, primals_103, primals_104, primals_106, primals_107, primals_109, primals_110, primals_112, primals_113, primals_115, primals_116, primals_118, primals_119, primals_121, primals_122, primals_124, primals_125, primals_127, primals_128, primals_130, primals_131, primals_133, primals_134, primals_136, primals_137, primals_139, primals_140, primals_142, primals_143, primals_145, primals_146, primals_148, primals_149, primals_151, primals_152, primals_154, primals_155, primals_157, primals_158, primals_160, primals_161, primals_163, primals_164, primals_166, primals_167, primals_169, primals_170, primals_172, primals_173, primals_175, primals_176, primals_178, primals_179, primals_181, primals_182, primals_184, primals_185, primals_187, primals_188, primals_190, primals_191, primals_193, primals_194, primals_196, primals_197, primals_199, primals_200, primals_202, primals_203, primals_205, primals_206, primals_208, primals_209, primals_211, primals_212, primals_214, primals_215, primals_217, primals_218, primals_220, primals_221, primals_223, primals_224, primals_226, primals_227, primals_229, primals_230, primals_232, primals_233, primals_235, primals_236, primals_238, primals_239, primals_241, primals_242, primals_244, primals_245, primals_247, primals_248, primals_250, primals_251, primals_253, primals_254, primals_256, primals_257, primals_259, primals_260, primals_262, primals_263, primals_265, primals_266, primals_268, primals_269, primals_271, primals_272, primals_274, primals_275, primals_277, primals_278, primals_280, primals_281, primals_283, primals_284, primals_286, primals_287, primals_289, primals_290, primals_292, primals_293, primals_295, primals_296, primals_298, primals_299, primals_301, primals_302, primals_304, primals_305, primals_307, primals_308, primals_310, primals_311, primals_313, primals_314, primals_316, primals_317, primals_319, primals_320, primals_322, primals_323, primals_325, primals_326, primals_328, primals_329, primals_331, primals_332, primals_334, primals_335, primals_337, primals_338, primals_340, primals_341, primals_343, primals_344, primals_346, primals_347, primals_349, primals_350, primals_352, primals_353, primals_355, primals_356, primals_358, primals_359, primals_361, primals_362, primals_364, primals_365, primals_367, primals_368, primals_370, primals_371, primals_373, primals_374, primals_376, primals_377, primals_379, primals_380, primals_382, primals_383, primals_385, primals_386, primals_388, primals_389, primals_391, primals_392, primals_394, primals_395, primals_397, primals_398, primals_400, primals_401, primals_403, primals_404, primals_406, primals_407, primals_409, primals_410, primals_412, primals_413, primals_415, primals_416, primals_418, primals_419, primals_421, primals_422, primals_424, primals_425, primals_427, primals_428, primals_430, primals_431, primals_433, primals_434, primals_436, primals_437, primals_439, primals_440, primals_442, primals_443, primals_445, primals_446, primals_448, primals_449, primals_451, primals_452, primals_454, primals_455, primals_457, primals_458, primals_460, primals_461, primals_463, primals_464, primals_466, primals_467, primals_469, primals_470, primals_472, primals_473, primals_475, primals_476, primals_478, primals_479, primals_481, primals_482, primals_484, primals_485, primals_487, primals_488, primals_490, primals_491, primals_493, primals_494, primals_496, primals_497, primals_499, primals_500, primals_502, primals_503, primals_505, primals_506, primals_508, primals_509, primals_511, primals_512, primals_514, primals_515, primals_517, primals_518, primals_520, primals_521, primals_523, primals_524, primals_526, primals_527, primals_529, primals_530, primals_532, primals_533, primals_535, primals_536, primals_538, primals_539, primals_541, primals_542, primals_544, primals_545, primals_547, primals_548, primals_550, primals_551, primals_553, primals_554, primals_556, primals_557, primals_559, primals_560, primals_562, primals_563, primals_565, primals_566, primals_568, primals_569, primals_571, primals_572, primals_574, primals_575, primals_577, primals_578, primals_580, primals_581, primals_583, primals_584, primals_586, primals_587, primals_589, primals_590, primals_592, primals_593, primals_595, primals_596, primals_598, primals_599, primals_601, primals_602, primals_604, primals_605, primals_607, primals_608, primals_610, primals_611, primals_613, primals_614, primals_616, primals_617, primals_619, primals_620, primals_622, primals_623, primals_625, primals_626, primals_628, primals_629, primals_631, primals_632, primals_634, primals_635, primals_637, primals_638, primals_640, primals_641, primals_643, primals_644, primals_646, primals_647, primals_649, primals_650, primals_652, primals_653, primals_655, primals_656, primals_658, primals_659, primals_661, primals_662, primals_664, primals_665, primals_667, primals_668, primals_670, primals_671, primals_673, primals_674, primals_676, primals_677, primals_679, primals_680, primals_682, primals_683, primals_685, primals_686, primals_688, primals_689, primals_691, primals_692, primals_694, primals_695, primals_697, primals_698, primals_700, primals_701, primals_703, primals_704, primals_706, primals_707, primals_709, primals_710, primals_712, primals_713, primals_715, primals_716, primals_718, primals_719, primals_721, primals_722, primals_724, primals_725, primals_727, primals_728, primals_730, primals_731, primals_733, primals_734, primals_736, primals_737, primals_739, primals_740, primals_742, primals_743, primals_745, primals_746, primals_748, primals_749, primals_751, primals_752, primals_754, primals_755, primals_757, primals_758, primals_760, primals_761, primals_763, primals_764, primals_766, primals_767, primals_769, primals_770, primals_772, primals_773, primals_775, primals_776, primals_778, primals_779, primals_781, primals_782, primals_784, primals_785, primals_787, primals_788, primals_790, primals_791, primals_793, primals_794, primals_796, primals_797, primals_799, primals_800, primals_802, primals_803, primals_805, primals_806, primals_808, primals_809, primals_811, primals_812, primals_814, primals_815, primals_817, primals_818, primals_820, primals_821, primals_823, primals_824, primals_826, primals_827, primals_829, primals_830, primals_832, primals_833, primals_835, primals_836, primals_838, primals_839, primals_841, primals_842, primals_844, primals_845, primals_847, primals_848, primals_850, primals_851, primals_853, primals_854, primals_856, primals_857, primals_859, primals_860, primals_862, primals_863, primals_865, primals_866, primals_868, primals_869, primals_871, primals_872, primals_874, primals_875, primals_877, primals_878, primals_880, primals_881, primals_883, primals_884, primals_886, primals_887, primals_889, primals_890, primals_892, primals_893, primals_895, primals_896, primals_898, primals_899, primals_901, primals_902, primals_904, primals_905, primals_907, primals_908, primals_910, primals_911, primals_913, primals_914, primals_916, primals_917, primals_919, primals_920, primals_922, primals_923, primals_925, primals_926, primals_928, primals_929, primals_931, primals_932, primals_934, primals_935, primals_937, primals_938, primals_940, primals_942, primals_944, primals_945, primals_947, primals_948, primals_950, primals_951, primals_953, primals_954, primals_956, primals_958, primals_960, primals_961, primals_963, primals_964, primals_966, primals_967, primals_969, primals_970, primals_972, primals_974, primals_976, primals_978, primals_1957, convolution, squeeze_1, relu, convolution_1, squeeze_4, relu_1, convolution_2, squeeze_7, relu_2, convolution_3, squeeze_10, relu_3, convolution_4, squeeze_13, convolution_5, squeeze_16, relu_4, convolution_6, squeeze_19, relu_5, convolution_7, squeeze_22, relu_6, convolution_8, squeeze_25, relu_7, convolution_9, squeeze_28, relu_8, convolution_10, squeeze_31, relu_9, convolution_11, squeeze_34, relu_10, convolution_12, squeeze_37, relu_11, convolution_13, squeeze_40, relu_12, convolution_14, squeeze_43, relu_13, convolution_15, squeeze_46, relu_14, convolution_16, squeeze_49, relu_15, convolution_17, squeeze_52, relu_16, convolution_18, squeeze_55, relu_17, convolution_19, squeeze_58, relu_18, convolution_20, squeeze_61, relu_19, convolution_21, squeeze_64, relu_20, convolution_22, squeeze_67, relu_21, convolution_23, squeeze_70, relu_22, convolution_24, squeeze_73, relu_23, convolution_25, squeeze_76, relu_24, convolution_26, squeeze_79, relu_25, convolution_27, squeeze_82, relu_26, convolution_28, squeeze_85, relu_27, convolution_29, squeeze_88, relu_28, convolution_30, squeeze_91, relu_29, convolution_31, squeeze_94, relu_30, convolution_32, squeeze_97, relu_31, convolution_33, squeeze_100, convert_element_type_2, unsqueeze_136, relu_32, convolution_34, squeeze_103, relu_33, convolution_35, squeeze_106, relu_34, convolution_36, squeeze_109, relu_35, convolution_37, squeeze_112, relu_36, convolution_38, squeeze_115, relu_37, convolution_39, squeeze_118, relu_38, convolution_40, squeeze_121, relu_39, convolution_41, squeeze_124, relu_40, convolution_42, squeeze_127, relu_41, convolution_43, squeeze_130, relu_42, convolution_44, squeeze_133, relu_43, convolution_45, squeeze_136, relu_44, convolution_46, squeeze_139, relu_45, convolution_47, squeeze_142, relu_46, convolution_48, squeeze_145, relu_47, convolution_49, squeeze_148, relu_48, convolution_50, squeeze_151, relu_49, convolution_51, squeeze_154, relu_50, convolution_52, squeeze_157, relu_51, convolution_53, squeeze_160, relu_52, convolution_54, squeeze_163, relu_53, convolution_55, squeeze_166, relu_54, convolution_56, squeeze_169, relu_55, convolution_57, squeeze_172, relu_56, convolution_58, squeeze_175, relu_57, convolution_59, squeeze_178, relu_58, convolution_60, squeeze_181, convolution_61, squeeze_184, convert_element_type_14, unsqueeze_250, relu_59, convolution_62, squeeze_187, convolution_63, squeeze_190, convert_element_type_20, unsqueeze_259, relu_60, convolution_64, squeeze_193, relu_61, convolution_65, squeeze_196, convolution_66, squeeze_199, relu_62, convolution_67, squeeze_202, relu_63, convolution_68, squeeze_205, relu_64, convolution_69, squeeze_208, relu_65, convolution_70, squeeze_211, relu_66, convolution_71, squeeze_214, relu_67, convolution_72, squeeze_217, relu_68, convolution_73, squeeze_220, relu_69, convolution_74, squeeze_223, relu_70, convolution_75, squeeze_226, relu_71, convolution_76, squeeze_229, relu_72, convolution_77, squeeze_232, relu_73, convolution_78, squeeze_235, relu_74, convolution_79, squeeze_238, relu_75, convolution_80, squeeze_241, relu_76, convolution_81, squeeze_244, relu_77, convolution_82, squeeze_247, relu_78, convolution_83, squeeze_250, relu_79, convolution_84, squeeze_253, relu_80, convolution_85, squeeze_256, relu_81, convolution_86, squeeze_259, relu_82, convolution_87, squeeze_262, relu_83, convolution_88, squeeze_265, relu_84, convolution_89, squeeze_268, relu_85, convolution_90, squeeze_271, relu_86, convolution_91, squeeze_274, convolution_92, squeeze_277, relu_87, convolution_93, squeeze_280, convolution_94, squeeze_283, relu_88, convolution_95, squeeze_286, relu_89, convolution_96, squeeze_289, convolution_97, squeeze_292, relu_90, convolution_98, squeeze_295, relu_91, convolution_99, squeeze_298, relu_92, convolution_100, squeeze_301, relu_93, convolution_101, squeeze_304, relu_94, convolution_102, squeeze_307, relu_95, convolution_103, squeeze_310, relu_96, convolution_104, squeeze_313, relu_97, convolution_105, squeeze_316, relu_98, convolution_106, squeeze_319, relu_99, convolution_107, squeeze_322, relu_100, convolution_108, squeeze_325, relu_101, convolution_109, squeeze_328, relu_102, convolution_110, squeeze_331, relu_103, convolution_111, squeeze_334, relu_104, convolution_112, squeeze_337, relu_105, convolution_113, squeeze_340, relu_106, convolution_114, squeeze_343, relu_107, convolution_115, squeeze_346, relu_108, convolution_116, squeeze_349, relu_109, convolution_117, squeeze_352, relu_110, convolution_118, squeeze_355, relu_111, convolution_119, squeeze_358, relu_112, convolution_120, squeeze_361, relu_113, convolution_121, squeeze_364, relu_114, convolution_122, squeeze_367, convolution_123, squeeze_370, relu_115, convolution_124, squeeze_373, convolution_125, squeeze_376, relu_116, convolution_126, squeeze_379, relu_117, convolution_127, squeeze_382, convolution_128, squeeze_385, relu_118, convolution_129, squeeze_388, relu_119, convolution_130, squeeze_391, relu_120, convolution_131, squeeze_394, relu_121, convolution_132, squeeze_397, relu_122, convolution_133, squeeze_400, relu_123, convolution_134, squeeze_403, relu_124, convolution_135, squeeze_406, relu_125, convolution_136, squeeze_409, relu_126, convolution_137, squeeze_412, relu_127, convolution_138, squeeze_415, relu_128, convolution_139, squeeze_418, relu_129, convolution_140, squeeze_421, relu_130, convolution_141, squeeze_424, relu_131, convolution_142, squeeze_427, relu_132, convolution_143, squeeze_430, relu_133, convolution_144, squeeze_433, relu_134, convolution_145, squeeze_436, relu_135, convolution_146, squeeze_439, relu_136, convolution_147, squeeze_442, relu_137, convolution_148, squeeze_445, relu_138, convolution_149, squeeze_448, relu_139, convolution_150, squeeze_451, relu_140, convolution_151, squeeze_454, relu_141, convolution_152, squeeze_457, relu_142, convolution_153, squeeze_460, convolution_154, squeeze_463, relu_143, convolution_155, squeeze_466, convolution_156, squeeze_469, relu_144, convolution_157, squeeze_472, relu_145, convolution_158, squeeze_475, convolution_159, squeeze_478, relu_146, convolution_160, squeeze_481, relu_147, convolution_161, squeeze_484, relu_148, convolution_162, squeeze_487, relu_149, convolution_163, squeeze_490, relu_150, convolution_164, squeeze_493, relu_151, convolution_165, squeeze_496, relu_152, convolution_166, squeeze_499, relu_153, convolution_167, squeeze_502, relu_154, convolution_168, squeeze_505, relu_155, convolution_169, squeeze_508, relu_156, convolution_170, squeeze_511, relu_157, convolution_171, squeeze_514, relu_158, convolution_172, squeeze_517, relu_159, convolution_173, squeeze_520, relu_160, convolution_174, squeeze_523, relu_161, convolution_175, squeeze_526, relu_162, convolution_176, squeeze_529, relu_163, convolution_177, squeeze_532, relu_164, convolution_178, squeeze_535, relu_165, convolution_179, squeeze_538, relu_166, convolution_180, squeeze_541, relu_167, convolution_181, squeeze_544, relu_168, convolution_182, squeeze_547, relu_169, convolution_183, squeeze_550, relu_170, convolution_184, squeeze_553, relu_171, convolution_185, squeeze_556, relu_172, convolution_186, squeeze_559, relu_173, convolution_187, squeeze_562, relu_174, convolution_188, squeeze_565, relu_175, convolution_189, squeeze_568, relu_176, convolution_190, squeeze_571, relu_177, convolution_191, squeeze_574, relu_178, convolution_192, squeeze_577, relu_179, convolution_193, squeeze_580, convolution_194, squeeze_583, convolution_195, squeeze_586, convert_element_type_92, unsqueeze_799, relu_180, convolution_196, squeeze_589, convolution_197, squeeze_592, convolution_198, squeeze_595, convert_element_type_104, unsqueeze_813, relu_181, convolution_199, squeeze_598, relu_182, convolution_200, squeeze_601, convolution_201, squeeze_604, convolution_202, squeeze_607, convert_element_type_110, unsqueeze_830, relu_183, convolution_203, squeeze_610, relu_184, convolution_204, squeeze_613, relu_185, convolution_205, squeeze_616, convolution_206, squeeze_619, relu_186, convolution_207, squeeze_622, convolution_208, squeeze_625, relu_187, convolution_209, squeeze_628, relu_188, convolution_210, squeeze_631, relu_189, convolution_211, squeeze_634, relu_190, convolution_212, squeeze_637, relu_191, convolution_213, squeeze_640, relu_192, convolution_214, squeeze_643, relu_193, convolution_215, squeeze_646, relu_194, convolution_216, squeeze_649, relu_195, convolution_217, squeeze_652, relu_196, convolution_218, squeeze_655, relu_197, convolution_219, squeeze_658, relu_198, convolution_220, squeeze_661, relu_199, convolution_221, squeeze_664, relu_200, convolution_222, squeeze_667, relu_201, convolution_223, squeeze_670, relu_202, convolution_224, squeeze_673, relu_203, convolution_225, squeeze_676, relu_204, convolution_226, squeeze_679, relu_205, convolution_227, squeeze_682, relu_206, convolution_228, squeeze_685, relu_207, convolution_229, squeeze_688, relu_208, convolution_230, squeeze_691, relu_209, convolution_231, squeeze_694, relu_210, convolution_232, squeeze_697, relu_211, convolution_233, squeeze_700, relu_212, convolution_234, squeeze_703, relu_213, convolution_235, squeeze_706, relu_214, convolution_236, squeeze_709, relu_215, convolution_237, squeeze_712, relu_216, convolution_238, squeeze_715, relu_217, convolution_239, squeeze_718, relu_218, convolution_240, squeeze_721, relu_219, convolution_241, squeeze_724, convolution_242, squeeze_727, convolution_243, squeeze_730, relu_220, convolution_244, squeeze_733, convolution_245, squeeze_736, convolution_246, squeeze_739, relu_221, convolution_247, squeeze_742, relu_222, convolution_248, squeeze_745, convolution_249, squeeze_748, convolution_250, squeeze_751, relu_223, convolution_251, squeeze_754, relu_224, convolution_252, squeeze_757, relu_225, convolution_253, squeeze_760, convolution_254, squeeze_763, relu_226, convolution_255, squeeze_766, convolution_256, squeeze_769, relu_227, convolution_257, squeeze_772, relu_228, convolution_258, squeeze_775, relu_229, convolution_259, squeeze_778, relu_230, convolution_260, squeeze_781, relu_231, convolution_261, squeeze_784, relu_232, convolution_262, squeeze_787, relu_233, convolution_263, squeeze_790, relu_234, convolution_264, squeeze_793, relu_235, convolution_265, squeeze_796, relu_236, convolution_266, squeeze_799, relu_237, convolution_267, squeeze_802, relu_238, convolution_268, squeeze_805, relu_239, convolution_269, squeeze_808, relu_240, convolution_270, squeeze_811, relu_241, convolution_271, squeeze_814, relu_242, convolution_272, squeeze_817, relu_243, convolution_273, squeeze_820, relu_244, convolution_274, squeeze_823, relu_245, convolution_275, squeeze_826, relu_246, convolution_276, squeeze_829, relu_247, convolution_277, squeeze_832, relu_248, convolution_278, squeeze_835, relu_249, convolution_279, squeeze_838, relu_250, convolution_280, squeeze_841, relu_251, convolution_281, squeeze_844, relu_252, convolution_282, squeeze_847, relu_253, convolution_283, squeeze_850, relu_254, convolution_284, squeeze_853, relu_255, convolution_285, squeeze_856, relu_256, convolution_286, squeeze_859, relu_257, convolution_287, squeeze_862, relu_258, convolution_288, squeeze_865, relu_259, convolution_289, squeeze_868, convolution_290, squeeze_871, convolution_291, squeeze_874, relu_260, convolution_292, squeeze_877, convolution_293, squeeze_880, convolution_294, squeeze_883, relu_261, convolution_295, squeeze_886, relu_262, convolution_296, squeeze_889, convolution_297, squeeze_892, convolution_298, squeeze_895, relu_263, convolution_299, squeeze_898, relu_264, convolution_300, squeeze_901, relu_265, convolution_301, squeeze_904, convolution_302, squeeze_907, relu_266, convolution_303, squeeze_910, convolution_304, squeeze_913, relu_267, convolution_305, squeeze_916, relu_268, convolution_306, squeeze_919, relu_269, convolution_307, squeeze_922, convolution_308, squeeze_925, relu_270, convolution_309, squeeze_928, relu_271, convolution_310, squeeze_931, relu_272, convolution_311, squeeze_934, convolution_312, squeeze_937, convolution_313, squeeze_940, add_1866, convolution_314, squeeze_943, relu_275, convolution_315, squeeze_946, relu_276, convolution_316, squeeze_949, convolution_317, squeeze_952, convolution_318, squeeze_955, add_1893, convolution_319, squeeze_958, relu_279, convolution_320, squeeze_961, relu_280, convolution_321, squeeze_964, convolution_322, squeeze_967, convolution_323, squeeze_970, add_1920, convolution_324, squeeze_973, clone, permute_1, le, unsqueeze_1333, le_1, unsqueeze_1345, le_2, unsqueeze_1357, unsqueeze_1369, unsqueeze_1381, unsqueeze_1393, le_5, unsqueeze_1405, le_6, unsqueeze_1417, unsqueeze_1429, unsqueeze_1441, unsqueeze_1453, le_9, unsqueeze_1465, le_10, unsqueeze_1477, unsqueeze_1489, unsqueeze_1501, unsqueeze_1513, unsqueeze_1525, unsqueeze_1537, unsqueeze_1549, unsqueeze_1561, unsqueeze_1573, unsqueeze_1585, unsqueeze_1597, unsqueeze_1609, unsqueeze_1621, unsqueeze_1633, unsqueeze_1645, unsqueeze_1657, unsqueeze_1669, unsqueeze_1681, unsqueeze_1693, unsqueeze_1705, unsqueeze_1717, unsqueeze_1729, unsqueeze_1741, unsqueeze_1753, unsqueeze_1765, unsqueeze_1777, unsqueeze_1789, unsqueeze_1801, unsqueeze_1813, unsqueeze_1825, unsqueeze_1837, unsqueeze_1849, unsqueeze_1861, unsqueeze_1873, unsqueeze_1885, unsqueeze_1897, unsqueeze_1909, unsqueeze_1921, unsqueeze_1933, unsqueeze_1945, unsqueeze_1957, unsqueeze_1969, unsqueeze_1981, unsqueeze_1993, unsqueeze_2005, unsqueeze_2017, unsqueeze_2029, unsqueeze_2041, unsqueeze_2053, unsqueeze_2065, unsqueeze_2077, unsqueeze_2089, unsqueeze_2101, unsqueeze_2113, unsqueeze_2125, unsqueeze_2137, unsqueeze_2149, unsqueeze_2161, unsqueeze_2173, unsqueeze_2185, unsqueeze_2197, unsqueeze_2209, unsqueeze_2221, unsqueeze_2233, unsqueeze_2245, unsqueeze_2257, unsqueeze_2269, unsqueeze_2281, unsqueeze_2293, unsqueeze_2305, unsqueeze_2317, unsqueeze_2329, unsqueeze_2341, unsqueeze_2353, unsqueeze_2365, unsqueeze_2377, unsqueeze_2389, unsqueeze_2401, unsqueeze_2413, unsqueeze_2425, unsqueeze_2437, unsqueeze_2449, unsqueeze_2461, unsqueeze_2473, unsqueeze_2485, unsqueeze_2497, unsqueeze_2509, unsqueeze_2521, unsqueeze_2533, unsqueeze_2545, unsqueeze_2557, unsqueeze_2569, unsqueeze_2581, unsqueeze_2593, unsqueeze_2605, unsqueeze_2617, unsqueeze_2629, unsqueeze_2641, unsqueeze_2653, unsqueeze_2665, unsqueeze_2677, unsqueeze_2689, unsqueeze_2701, unsqueeze_2713, unsqueeze_2725, unsqueeze_2737, unsqueeze_2749, unsqueeze_2761, unsqueeze_2773, unsqueeze_2785, unsqueeze_2797, unsqueeze_2809, unsqueeze_2821, unsqueeze_2833, unsqueeze_2845, unsqueeze_2857, unsqueeze_2869, unsqueeze_2881, unsqueeze_2893, unsqueeze_2905, unsqueeze_2917, unsqueeze_2929, unsqueeze_2941, unsqueeze_2953, unsqueeze_2965, unsqueeze_2977, unsqueeze_2989, unsqueeze_3001, unsqueeze_3013, unsqueeze_3025, unsqueeze_3037, unsqueeze_3049, unsqueeze_3061, unsqueeze_3073, unsqueeze_3085, unsqueeze_3097, unsqueeze_3109, unsqueeze_3121, unsqueeze_3133, unsqueeze_3145, unsqueeze_3157, unsqueeze_3169, unsqueeze_3181, unsqueeze_3193, unsqueeze_3205, unsqueeze_3217, unsqueeze_3229, unsqueeze_3241, unsqueeze_3253, unsqueeze_3265, unsqueeze_3277, unsqueeze_3289, unsqueeze_3301, unsqueeze_3313, unsqueeze_3325, unsqueeze_3337, unsqueeze_3349, unsqueeze_3361, unsqueeze_3373, unsqueeze_3385, unsqueeze_3397, unsqueeze_3409, unsqueeze_3421, unsqueeze_3433, unsqueeze_3445, unsqueeze_3457, unsqueeze_3469, unsqueeze_3481, unsqueeze_3493, unsqueeze_3505, unsqueeze_3517, unsqueeze_3529, unsqueeze_3541, unsqueeze_3553, unsqueeze_3565, unsqueeze_3577, unsqueeze_3589, unsqueeze_3601, unsqueeze_3613, unsqueeze_3625, unsqueeze_3637, unsqueeze_3649, unsqueeze_3661, unsqueeze_3673, unsqueeze_3685, unsqueeze_3697, unsqueeze_3709, unsqueeze_3721, unsqueeze_3733, unsqueeze_3745, unsqueeze_3757, unsqueeze_3769, unsqueeze_3781, unsqueeze_3793, unsqueeze_3805, unsqueeze_3817, unsqueeze_3829, unsqueeze_3841, unsqueeze_3853, unsqueeze_3865, unsqueeze_3877, unsqueeze_3889, unsqueeze_3901, unsqueeze_3913, unsqueeze_3925, unsqueeze_3937, unsqueeze_3949, unsqueeze_3961, unsqueeze_3973, unsqueeze_3985, unsqueeze_3997, unsqueeze_4009, unsqueeze_4021, unsqueeze_4033, unsqueeze_4045, unsqueeze_4057, unsqueeze_4069, unsqueeze_4081, unsqueeze_4093, unsqueeze_4105, unsqueeze_4117, unsqueeze_4129, unsqueeze_4141, unsqueeze_4153, unsqueeze_4165, unsqueeze_4177, unsqueeze_4189, unsqueeze_4201, unsqueeze_4213, unsqueeze_4225, unsqueeze_4237, unsqueeze_4249, unsqueeze_4261, unsqueeze_4273, unsqueeze_4285, unsqueeze_4297, unsqueeze_4309, unsqueeze_4321, unsqueeze_4333, unsqueeze_4345, unsqueeze_4357, unsqueeze_4369, unsqueeze_4381, unsqueeze_4393, unsqueeze_4405, unsqueeze_4417, unsqueeze_4429, unsqueeze_4441, unsqueeze_4453, unsqueeze_4465, unsqueeze_4477, unsqueeze_4489, unsqueeze_4501, unsqueeze_4513, unsqueeze_4525, unsqueeze_4537, unsqueeze_4549, unsqueeze_4561, unsqueeze_4573, unsqueeze_4585, unsqueeze_4597, unsqueeze_4609, unsqueeze_4621, unsqueeze_4633, unsqueeze_4645, unsqueeze_4657, unsqueeze_4669, unsqueeze_4681, unsqueeze_4693, unsqueeze_4705, unsqueeze_4717, unsqueeze_4729, unsqueeze_4741, unsqueeze_4753, unsqueeze_4765, unsqueeze_4777, unsqueeze_4789, unsqueeze_4801, unsqueeze_4813, unsqueeze_4825, unsqueeze_4837, unsqueeze_4849, unsqueeze_4861, unsqueeze_4873, unsqueeze_4885, unsqueeze_4897, unsqueeze_4909, unsqueeze_4921, unsqueeze_4933, unsqueeze_4945, unsqueeze_4957, unsqueeze_4969, unsqueeze_4981, unsqueeze_4993, unsqueeze_5005, unsqueeze_5017, unsqueeze_5029, unsqueeze_5041, unsqueeze_5053, unsqueeze_5065, unsqueeze_5077, unsqueeze_5089, unsqueeze_5101, unsqueeze_5113, unsqueeze_5125, unsqueeze_5137, unsqueeze_5149, unsqueeze_5161, unsqueeze_5173, unsqueeze_5185, unsqueeze_5197, unsqueeze_5209, unsqueeze_5221, tangents_1 = args
    args.clear()
    assert_size_stride(primals_1, (64, 3, 3, 3), (27, 1, 9, 3))
    assert_size_stride(primals_2, (64, ), (1, ))
    assert_size_stride(primals_4, (64, 64, 3, 3), (576, 1, 192, 64))
    assert_size_stride(primals_5, (64, ), (1, ))
    assert_size_stride(primals_7, (64, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_8, (64, ), (1, ))
    assert_size_stride(primals_10, (64, 64, 3, 3), (576, 1, 192, 64))
    assert_size_stride(primals_11, (64, ), (1, ))
    assert_size_stride(primals_13, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_14, (256, ), (1, ))
    assert_size_stride(primals_16, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_17, (256, ), (1, ))
    assert_size_stride(primals_19, (64, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_20, (64, ), (1, ))
    assert_size_stride(primals_22, (64, 64, 3, 3), (576, 1, 192, 64))
    assert_size_stride(primals_23, (64, ), (1, ))
    assert_size_stride(primals_25, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_26, (256, ), (1, ))
    assert_size_stride(primals_28, (64, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_29, (64, ), (1, ))
    assert_size_stride(primals_31, (64, 64, 3, 3), (576, 1, 192, 64))
    assert_size_stride(primals_32, (64, ), (1, ))
    assert_size_stride(primals_34, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_35, (256, ), (1, ))
    assert_size_stride(primals_37, (64, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_38, (64, ), (1, ))
    assert_size_stride(primals_40, (64, 64, 3, 3), (576, 1, 192, 64))
    assert_size_stride(primals_41, (64, ), (1, ))
    assert_size_stride(primals_43, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_44, (256, ), (1, ))
    assert_size_stride(primals_46, (18, 256, 3, 3), (2304, 1, 768, 256))
    assert_size_stride(primals_47, (18, ), (1, ))
    assert_size_stride(primals_49, (36, 256, 3, 3), (2304, 1, 768, 256))
    assert_size_stride(primals_50, (36, ), (1, ))
    assert_size_stride(primals_52, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_53, (18, ), (1, ))
    assert_size_stride(primals_55, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_56, (18, ), (1, ))
    assert_size_stride(primals_58, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_59, (18, ), (1, ))
    assert_size_stride(primals_61, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_62, (18, ), (1, ))
    assert_size_stride(primals_64, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_65, (18, ), (1, ))
    assert_size_stride(primals_67, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_68, (18, ), (1, ))
    assert_size_stride(primals_70, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_71, (18, ), (1, ))
    assert_size_stride(primals_73, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_74, (18, ), (1, ))
    assert_size_stride(primals_76, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_77, (36, ), (1, ))
    assert_size_stride(primals_79, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_80, (36, ), (1, ))
    assert_size_stride(primals_82, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_83, (36, ), (1, ))
    assert_size_stride(primals_85, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_86, (36, ), (1, ))
    assert_size_stride(primals_88, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_89, (36, ), (1, ))
    assert_size_stride(primals_91, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_92, (36, ), (1, ))
    assert_size_stride(primals_94, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_95, (36, ), (1, ))
    assert_size_stride(primals_97, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_98, (36, ), (1, ))
    assert_size_stride(primals_100, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_101, (18, ), (1, ))
    assert_size_stride(primals_103, (36, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_104, (36, ), (1, ))
    assert_size_stride(primals_106, (72, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_107, (72, ), (1, ))
    assert_size_stride(primals_109, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_110, (18, ), (1, ))
    assert_size_stride(primals_112, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_113, (18, ), (1, ))
    assert_size_stride(primals_115, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_116, (18, ), (1, ))
    assert_size_stride(primals_118, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_119, (18, ), (1, ))
    assert_size_stride(primals_121, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_122, (18, ), (1, ))
    assert_size_stride(primals_124, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_125, (18, ), (1, ))
    assert_size_stride(primals_127, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_128, (18, ), (1, ))
    assert_size_stride(primals_130, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_131, (18, ), (1, ))
    assert_size_stride(primals_133, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_134, (36, ), (1, ))
    assert_size_stride(primals_136, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_137, (36, ), (1, ))
    assert_size_stride(primals_139, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_140, (36, ), (1, ))
    assert_size_stride(primals_142, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_143, (36, ), (1, ))
    assert_size_stride(primals_145, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_146, (36, ), (1, ))
    assert_size_stride(primals_148, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_149, (36, ), (1, ))
    assert_size_stride(primals_151, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_152, (36, ), (1, ))
    assert_size_stride(primals_154, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_155, (36, ), (1, ))
    assert_size_stride(primals_157, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_158, (72, ), (1, ))
    assert_size_stride(primals_160, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_161, (72, ), (1, ))
    assert_size_stride(primals_163, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_164, (72, ), (1, ))
    assert_size_stride(primals_166, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_167, (72, ), (1, ))
    assert_size_stride(primals_169, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_170, (72, ), (1, ))
    assert_size_stride(primals_172, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_173, (72, ), (1, ))
    assert_size_stride(primals_175, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_176, (72, ), (1, ))
    assert_size_stride(primals_178, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_179, (72, ), (1, ))
    assert_size_stride(primals_181, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_182, (18, ), (1, ))
    assert_size_stride(primals_184, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_185, (18, ), (1, ))
    assert_size_stride(primals_187, (36, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_188, (36, ), (1, ))
    assert_size_stride(primals_190, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_191, (36, ), (1, ))
    assert_size_stride(primals_193, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_194, (18, ), (1, ))
    assert_size_stride(primals_196, (72, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_197, (72, ), (1, ))
    assert_size_stride(primals_199, (72, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_200, (72, ), (1, ))
    assert_size_stride(primals_202, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_203, (18, ), (1, ))
    assert_size_stride(primals_205, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_206, (18, ), (1, ))
    assert_size_stride(primals_208, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_209, (18, ), (1, ))
    assert_size_stride(primals_211, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_212, (18, ), (1, ))
    assert_size_stride(primals_214, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_215, (18, ), (1, ))
    assert_size_stride(primals_217, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_218, (18, ), (1, ))
    assert_size_stride(primals_220, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_221, (18, ), (1, ))
    assert_size_stride(primals_223, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_224, (18, ), (1, ))
    assert_size_stride(primals_226, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_227, (36, ), (1, ))
    assert_size_stride(primals_229, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_230, (36, ), (1, ))
    assert_size_stride(primals_232, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_233, (36, ), (1, ))
    assert_size_stride(primals_235, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_236, (36, ), (1, ))
    assert_size_stride(primals_238, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_239, (36, ), (1, ))
    assert_size_stride(primals_241, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_242, (36, ), (1, ))
    assert_size_stride(primals_244, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_245, (36, ), (1, ))
    assert_size_stride(primals_247, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_248, (36, ), (1, ))
    assert_size_stride(primals_250, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_251, (72, ), (1, ))
    assert_size_stride(primals_253, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_254, (72, ), (1, ))
    assert_size_stride(primals_256, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_257, (72, ), (1, ))
    assert_size_stride(primals_259, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_260, (72, ), (1, ))
    assert_size_stride(primals_262, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_263, (72, ), (1, ))
    assert_size_stride(primals_265, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_266, (72, ), (1, ))
    assert_size_stride(primals_268, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_269, (72, ), (1, ))
    assert_size_stride(primals_271, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_272, (72, ), (1, ))
    assert_size_stride(primals_274, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_275, (18, ), (1, ))
    assert_size_stride(primals_277, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_278, (18, ), (1, ))
    assert_size_stride(primals_280, (36, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_281, (36, ), (1, ))
    assert_size_stride(primals_283, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_284, (36, ), (1, ))
    assert_size_stride(primals_286, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_287, (18, ), (1, ))
    assert_size_stride(primals_289, (72, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_290, (72, ), (1, ))
    assert_size_stride(primals_292, (72, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_293, (72, ), (1, ))
    assert_size_stride(primals_295, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_296, (18, ), (1, ))
    assert_size_stride(primals_298, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_299, (18, ), (1, ))
    assert_size_stride(primals_301, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_302, (18, ), (1, ))
    assert_size_stride(primals_304, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_305, (18, ), (1, ))
    assert_size_stride(primals_307, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_308, (18, ), (1, ))
    assert_size_stride(primals_310, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_311, (18, ), (1, ))
    assert_size_stride(primals_313, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_314, (18, ), (1, ))
    assert_size_stride(primals_316, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_317, (18, ), (1, ))
    assert_size_stride(primals_319, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_320, (36, ), (1, ))
    assert_size_stride(primals_322, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_323, (36, ), (1, ))
    assert_size_stride(primals_325, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_326, (36, ), (1, ))
    assert_size_stride(primals_328, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_329, (36, ), (1, ))
    assert_size_stride(primals_331, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_332, (36, ), (1, ))
    assert_size_stride(primals_334, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_335, (36, ), (1, ))
    assert_size_stride(primals_337, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_338, (36, ), (1, ))
    assert_size_stride(primals_340, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_341, (36, ), (1, ))
    assert_size_stride(primals_343, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_344, (72, ), (1, ))
    assert_size_stride(primals_346, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_347, (72, ), (1, ))
    assert_size_stride(primals_349, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_350, (72, ), (1, ))
    assert_size_stride(primals_352, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_353, (72, ), (1, ))
    assert_size_stride(primals_355, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_356, (72, ), (1, ))
    assert_size_stride(primals_358, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_359, (72, ), (1, ))
    assert_size_stride(primals_361, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_362, (72, ), (1, ))
    assert_size_stride(primals_364, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_365, (72, ), (1, ))
    assert_size_stride(primals_367, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_368, (18, ), (1, ))
    assert_size_stride(primals_370, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_371, (18, ), (1, ))
    assert_size_stride(primals_373, (36, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_374, (36, ), (1, ))
    assert_size_stride(primals_376, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_377, (36, ), (1, ))
    assert_size_stride(primals_379, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_380, (18, ), (1, ))
    assert_size_stride(primals_382, (72, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_383, (72, ), (1, ))
    assert_size_stride(primals_385, (72, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_386, (72, ), (1, ))
    assert_size_stride(primals_388, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_389, (18, ), (1, ))
    assert_size_stride(primals_391, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_392, (18, ), (1, ))
    assert_size_stride(primals_394, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_395, (18, ), (1, ))
    assert_size_stride(primals_397, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_398, (18, ), (1, ))
    assert_size_stride(primals_400, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_401, (18, ), (1, ))
    assert_size_stride(primals_403, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_404, (18, ), (1, ))
    assert_size_stride(primals_406, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_407, (18, ), (1, ))
    assert_size_stride(primals_409, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_410, (18, ), (1, ))
    assert_size_stride(primals_412, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_413, (36, ), (1, ))
    assert_size_stride(primals_415, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_416, (36, ), (1, ))
    assert_size_stride(primals_418, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_419, (36, ), (1, ))
    assert_size_stride(primals_421, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_422, (36, ), (1, ))
    assert_size_stride(primals_424, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_425, (36, ), (1, ))
    assert_size_stride(primals_427, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_428, (36, ), (1, ))
    assert_size_stride(primals_430, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_431, (36, ), (1, ))
    assert_size_stride(primals_433, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_434, (36, ), (1, ))
    assert_size_stride(primals_436, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_437, (72, ), (1, ))
    assert_size_stride(primals_439, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_440, (72, ), (1, ))
    assert_size_stride(primals_442, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_443, (72, ), (1, ))
    assert_size_stride(primals_445, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_446, (72, ), (1, ))
    assert_size_stride(primals_448, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_449, (72, ), (1, ))
    assert_size_stride(primals_451, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_452, (72, ), (1, ))
    assert_size_stride(primals_454, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_455, (72, ), (1, ))
    assert_size_stride(primals_457, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_458, (72, ), (1, ))
    assert_size_stride(primals_460, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_461, (18, ), (1, ))
    assert_size_stride(primals_463, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_464, (18, ), (1, ))
    assert_size_stride(primals_466, (36, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_467, (36, ), (1, ))
    assert_size_stride(primals_469, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_470, (36, ), (1, ))
    assert_size_stride(primals_472, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_473, (18, ), (1, ))
    assert_size_stride(primals_475, (72, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_476, (72, ), (1, ))
    assert_size_stride(primals_478, (72, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_479, (72, ), (1, ))
    assert_size_stride(primals_481, (144, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_482, (144, ), (1, ))
    assert_size_stride(primals_484, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_485, (18, ), (1, ))
    assert_size_stride(primals_487, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_488, (18, ), (1, ))
    assert_size_stride(primals_490, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_491, (18, ), (1, ))
    assert_size_stride(primals_493, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_494, (18, ), (1, ))
    assert_size_stride(primals_496, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_497, (18, ), (1, ))
    assert_size_stride(primals_499, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_500, (18, ), (1, ))
    assert_size_stride(primals_502, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_503, (18, ), (1, ))
    assert_size_stride(primals_505, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_506, (18, ), (1, ))
    assert_size_stride(primals_508, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_509, (36, ), (1, ))
    assert_size_stride(primals_511, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_512, (36, ), (1, ))
    assert_size_stride(primals_514, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_515, (36, ), (1, ))
    assert_size_stride(primals_517, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_518, (36, ), (1, ))
    assert_size_stride(primals_520, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_521, (36, ), (1, ))
    assert_size_stride(primals_523, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_524, (36, ), (1, ))
    assert_size_stride(primals_526, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_527, (36, ), (1, ))
    assert_size_stride(primals_529, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_530, (36, ), (1, ))
    assert_size_stride(primals_532, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_533, (72, ), (1, ))
    assert_size_stride(primals_535, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_536, (72, ), (1, ))
    assert_size_stride(primals_538, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_539, (72, ), (1, ))
    assert_size_stride(primals_541, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_542, (72, ), (1, ))
    assert_size_stride(primals_544, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_545, (72, ), (1, ))
    assert_size_stride(primals_547, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_548, (72, ), (1, ))
    assert_size_stride(primals_550, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_551, (72, ), (1, ))
    assert_size_stride(primals_553, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_554, (72, ), (1, ))
    assert_size_stride(primals_556, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_557, (144, ), (1, ))
    assert_size_stride(primals_559, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_560, (144, ), (1, ))
    assert_size_stride(primals_562, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_563, (144, ), (1, ))
    assert_size_stride(primals_565, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_566, (144, ), (1, ))
    assert_size_stride(primals_568, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_569, (144, ), (1, ))
    assert_size_stride(primals_571, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_572, (144, ), (1, ))
    assert_size_stride(primals_574, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_575, (144, ), (1, ))
    assert_size_stride(primals_577, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_578, (144, ), (1, ))
    assert_size_stride(primals_580, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_581, (18, ), (1, ))
    assert_size_stride(primals_583, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_584, (18, ), (1, ))
    assert_size_stride(primals_586, (18, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_587, (18, ), (1, ))
    assert_size_stride(primals_589, (36, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_590, (36, ), (1, ))
    assert_size_stride(primals_592, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_593, (36, ), (1, ))
    assert_size_stride(primals_595, (36, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_596, (36, ), (1, ))
    assert_size_stride(primals_598, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_599, (18, ), (1, ))
    assert_size_stride(primals_601, (72, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_602, (72, ), (1, ))
    assert_size_stride(primals_604, (72, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_605, (72, ), (1, ))
    assert_size_stride(primals_607, (72, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_608, (72, ), (1, ))
    assert_size_stride(primals_610, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_611, (18, ), (1, ))
    assert_size_stride(primals_613, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_614, (18, ), (1, ))
    assert_size_stride(primals_616, (144, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_617, (144, ), (1, ))
    assert_size_stride(primals_619, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_620, (36, ), (1, ))
    assert_size_stride(primals_622, (144, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_623, (144, ), (1, ))
    assert_size_stride(primals_625, (144, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_626, (144, ), (1, ))
    assert_size_stride(primals_628, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_629, (18, ), (1, ))
    assert_size_stride(primals_631, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_632, (18, ), (1, ))
    assert_size_stride(primals_634, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_635, (18, ), (1, ))
    assert_size_stride(primals_637, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_638, (18, ), (1, ))
    assert_size_stride(primals_640, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_641, (18, ), (1, ))
    assert_size_stride(primals_643, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_644, (18, ), (1, ))
    assert_size_stride(primals_646, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_647, (18, ), (1, ))
    assert_size_stride(primals_649, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_650, (18, ), (1, ))
    assert_size_stride(primals_652, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_653, (36, ), (1, ))
    assert_size_stride(primals_655, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_656, (36, ), (1, ))
    assert_size_stride(primals_658, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_659, (36, ), (1, ))
    assert_size_stride(primals_661, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_662, (36, ), (1, ))
    assert_size_stride(primals_664, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_665, (36, ), (1, ))
    assert_size_stride(primals_667, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_668, (36, ), (1, ))
    assert_size_stride(primals_670, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_671, (36, ), (1, ))
    assert_size_stride(primals_673, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_674, (36, ), (1, ))
    assert_size_stride(primals_676, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_677, (72, ), (1, ))
    assert_size_stride(primals_679, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_680, (72, ), (1, ))
    assert_size_stride(primals_682, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_683, (72, ), (1, ))
    assert_size_stride(primals_685, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_686, (72, ), (1, ))
    assert_size_stride(primals_688, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_689, (72, ), (1, ))
    assert_size_stride(primals_691, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_692, (72, ), (1, ))
    assert_size_stride(primals_694, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_695, (72, ), (1, ))
    assert_size_stride(primals_697, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_698, (72, ), (1, ))
    assert_size_stride(primals_700, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_701, (144, ), (1, ))
    assert_size_stride(primals_703, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_704, (144, ), (1, ))
    assert_size_stride(primals_706, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_707, (144, ), (1, ))
    assert_size_stride(primals_709, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_710, (144, ), (1, ))
    assert_size_stride(primals_712, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_713, (144, ), (1, ))
    assert_size_stride(primals_715, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_716, (144, ), (1, ))
    assert_size_stride(primals_718, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_719, (144, ), (1, ))
    assert_size_stride(primals_721, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_722, (144, ), (1, ))
    assert_size_stride(primals_724, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_725, (18, ), (1, ))
    assert_size_stride(primals_727, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_728, (18, ), (1, ))
    assert_size_stride(primals_730, (18, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_731, (18, ), (1, ))
    assert_size_stride(primals_733, (36, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_734, (36, ), (1, ))
    assert_size_stride(primals_736, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_737, (36, ), (1, ))
    assert_size_stride(primals_739, (36, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_740, (36, ), (1, ))
    assert_size_stride(primals_742, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_743, (18, ), (1, ))
    assert_size_stride(primals_745, (72, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_746, (72, ), (1, ))
    assert_size_stride(primals_748, (72, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_749, (72, ), (1, ))
    assert_size_stride(primals_751, (72, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_752, (72, ), (1, ))
    assert_size_stride(primals_754, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_755, (18, ), (1, ))
    assert_size_stride(primals_757, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_758, (18, ), (1, ))
    assert_size_stride(primals_760, (144, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_761, (144, ), (1, ))
    assert_size_stride(primals_763, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_764, (36, ), (1, ))
    assert_size_stride(primals_766, (144, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_767, (144, ), (1, ))
    assert_size_stride(primals_769, (144, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_770, (144, ), (1, ))
    assert_size_stride(primals_772, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_773, (18, ), (1, ))
    assert_size_stride(primals_775, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_776, (18, ), (1, ))
    assert_size_stride(primals_778, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_779, (18, ), (1, ))
    assert_size_stride(primals_781, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_782, (18, ), (1, ))
    assert_size_stride(primals_784, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_785, (18, ), (1, ))
    assert_size_stride(primals_787, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_788, (18, ), (1, ))
    assert_size_stride(primals_790, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_791, (18, ), (1, ))
    assert_size_stride(primals_793, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_794, (18, ), (1, ))
    assert_size_stride(primals_796, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_797, (36, ), (1, ))
    assert_size_stride(primals_799, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_800, (36, ), (1, ))
    assert_size_stride(primals_802, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_803, (36, ), (1, ))
    assert_size_stride(primals_805, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_806, (36, ), (1, ))
    assert_size_stride(primals_808, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_809, (36, ), (1, ))
    assert_size_stride(primals_811, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_812, (36, ), (1, ))
    assert_size_stride(primals_814, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_815, (36, ), (1, ))
    assert_size_stride(primals_817, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_818, (36, ), (1, ))
    assert_size_stride(primals_820, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_821, (72, ), (1, ))
    assert_size_stride(primals_823, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_824, (72, ), (1, ))
    assert_size_stride(primals_826, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_827, (72, ), (1, ))
    assert_size_stride(primals_829, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_830, (72, ), (1, ))
    assert_size_stride(primals_832, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_833, (72, ), (1, ))
    assert_size_stride(primals_835, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_836, (72, ), (1, ))
    assert_size_stride(primals_838, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_839, (72, ), (1, ))
    assert_size_stride(primals_841, (72, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_842, (72, ), (1, ))
    assert_size_stride(primals_844, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_845, (144, ), (1, ))
    assert_size_stride(primals_847, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_848, (144, ), (1, ))
    assert_size_stride(primals_850, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_851, (144, ), (1, ))
    assert_size_stride(primals_853, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_854, (144, ), (1, ))
    assert_size_stride(primals_856, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_857, (144, ), (1, ))
    assert_size_stride(primals_859, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_860, (144, ), (1, ))
    assert_size_stride(primals_862, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_863, (144, ), (1, ))
    assert_size_stride(primals_865, (144, 144, 3, 3), (1296, 1, 432, 144))
    assert_size_stride(primals_866, (144, ), (1, ))
    assert_size_stride(primals_868, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_869, (18, ), (1, ))
    assert_size_stride(primals_871, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_872, (18, ), (1, ))
    assert_size_stride(primals_874, (18, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_875, (18, ), (1, ))
    assert_size_stride(primals_877, (36, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_878, (36, ), (1, ))
    assert_size_stride(primals_880, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_881, (36, ), (1, ))
    assert_size_stride(primals_883, (36, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_884, (36, ), (1, ))
    assert_size_stride(primals_886, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_887, (18, ), (1, ))
    assert_size_stride(primals_889, (72, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_890, (72, ), (1, ))
    assert_size_stride(primals_892, (72, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_893, (72, ), (1, ))
    assert_size_stride(primals_895, (72, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_896, (72, ), (1, ))
    assert_size_stride(primals_898, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_899, (18, ), (1, ))
    assert_size_stride(primals_901, (18, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_902, (18, ), (1, ))
    assert_size_stride(primals_904, (144, 18, 3, 3), (162, 1, 54, 18))
    assert_size_stride(primals_905, (144, ), (1, ))
    assert_size_stride(primals_907, (36, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_908, (36, ), (1, ))
    assert_size_stride(primals_910, (144, 36, 3, 3), (324, 1, 108, 36))
    assert_size_stride(primals_911, (144, ), (1, ))
    assert_size_stride(primals_913, (144, 72, 3, 3), (648, 1, 216, 72))
    assert_size_stride(primals_914, (144, ), (1, ))
    assert_size_stride(primals_916, (32, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(primals_917, (32, ), (1, ))
    assert_size_stride(primals_919, (32, 32, 3, 3), (288, 1, 96, 32))
    assert_size_stride(primals_920, (32, ), (1, ))
    assert_size_stride(primals_922, (128, 32, 1, 1), (32, 1, 1, 1))
    assert_size_stride(primals_923, (128, ), (1, ))
    assert_size_stride(primals_925, (128, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(primals_926, (128, ), (1, ))
    assert_size_stride(primals_928, (64, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_929, (64, ), (1, ))
    assert_size_stride(primals_931, (64, 64, 3, 3), (576, 1, 192, 64))
    assert_size_stride(primals_932, (64, ), (1, ))
    assert_size_stride(primals_934, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_935, (256, ), (1, ))
    assert_size_stride(primals_937, (256, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(primals_938, (256, ), (1, ))
    assert_size_stride(primals_940, (256, 128, 3, 3), (1152, 1, 384, 128))
    assert_size_stride(primals_942, (256, ), (1, ))
    assert_size_stride(primals_944, (128, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_945, (128, ), (1, ))
    assert_size_stride(primals_947, (128, 128, 3, 3), (1152, 1, 384, 128))
    assert_size_stride(primals_948, (128, ), (1, ))
    assert_size_stride(primals_950, (512, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(primals_951, (512, ), (1, ))
    assert_size_stride(primals_953, (512, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(primals_954, (512, ), (1, ))
    assert_size_stride(primals_956, (512, 256, 3, 3), (2304, 1, 768, 256))
    assert_size_stride(primals_958, (512, ), (1, ))
    assert_size_stride(primals_960, (256, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_961, (256, ), (1, ))
    assert_size_stride(primals_963, (256, 256, 3, 3), (2304, 1, 768, 256))
    assert_size_stride(primals_964, (256, ), (1, ))
    assert_size_stride(primals_966, (1024, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_967, (1024, ), (1, ))
    assert_size_stride(primals_969, (1024, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(primals_970, (1024, ), (1, ))
    assert_size_stride(primals_972, (1024, 512, 3, 3), (4608, 1, 1536, 512))
    assert_size_stride(primals_974, (1024, ), (1, ))
    assert_size_stride(primals_976, (2048, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_978, (2048, ), (1, ))
    assert_size_stride(primals_1957, (8, 3, 224, 224), (150528, 1, 672, 3))
    assert_size_stride(convolution, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(squeeze_1, (64, ), (1, ))
    assert_size_stride(relu, (8, 64, 112, 112), (802816, 1, 7168, 64))
    assert_size_stride(convolution_1, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_4, (64, ), (1, ))
    assert_size_stride(relu_1, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_2, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_7, (64, ), (1, ))
    assert_size_stride(relu_2, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_3, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_10, (64, ), (1, ))
    assert_size_stride(relu_3, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_4, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_13, (256, ), (1, ))
    assert_size_stride(convolution_5, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_16, (256, ), (1, ))
    assert_size_stride(relu_4, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_6, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_19, (64, ), (1, ))
    assert_size_stride(relu_5, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_7, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_22, (64, ), (1, ))
    assert_size_stride(relu_6, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_8, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_25, (256, ), (1, ))
    assert_size_stride(relu_7, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_9, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_28, (64, ), (1, ))
    assert_size_stride(relu_8, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_10, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_31, (64, ), (1, ))
    assert_size_stride(relu_9, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_11, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_34, (256, ), (1, ))
    assert_size_stride(relu_10, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_12, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_37, (64, ), (1, ))
    assert_size_stride(relu_11, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_13, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(squeeze_40, (64, ), (1, ))
    assert_size_stride(relu_12, (8, 64, 56, 56), (200704, 1, 3584, 64))
    assert_size_stride(convolution_14, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(squeeze_43, (256, ), (1, ))
    assert_size_stride(relu_13, (8, 256, 56, 56), (802816, 1, 14336, 256))
    assert_size_stride(convolution_15, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_46, (18, ), (1, ))
    assert_size_stride(relu_14, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_16, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_49, (36, ), (1, ))
    assert_size_stride(relu_15, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_17, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_52, (18, ), (1, ))
    assert_size_stride(relu_16, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_18, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_55, (18, ), (1, ))
    assert_size_stride(relu_17, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_19, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_58, (18, ), (1, ))
    assert_size_stride(relu_18, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_20, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_61, (18, ), (1, ))
    assert_size_stride(relu_19, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_21, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_64, (18, ), (1, ))
    assert_size_stride(relu_20, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_22, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_67, (18, ), (1, ))
    assert_size_stride(relu_21, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_23, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_70, (18, ), (1, ))
    assert_size_stride(relu_22, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_24, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_73, (18, ), (1, ))
    assert_size_stride(relu_23, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_25, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_76, (36, ), (1, ))
    assert_size_stride(relu_24, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_26, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_79, (36, ), (1, ))
    assert_size_stride(relu_25, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_27, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_82, (36, ), (1, ))
    assert_size_stride(relu_26, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_28, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_85, (36, ), (1, ))
    assert_size_stride(relu_27, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_29, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_88, (36, ), (1, ))
    assert_size_stride(relu_28, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_30, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_91, (36, ), (1, ))
    assert_size_stride(relu_29, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_31, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_94, (36, ), (1, ))
    assert_size_stride(relu_30, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_32, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_97, (36, ), (1, ))
    assert_size_stride(relu_31, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_33, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_100, (18, ), (1, ))
    assert_size_stride(convert_element_type_2, (56, ), (1, ))
    assert_size_stride(unsqueeze_136, (56, 1), (1, 1))
    assert_size_stride(relu_32, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_34, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_103, (36, ), (1, ))
    assert_size_stride(relu_33, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_35, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_106, (72, ), (1, ))
    assert_size_stride(relu_34, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_36, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_109, (18, ), (1, ))
    assert_size_stride(relu_35, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_37, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_112, (18, ), (1, ))
    assert_size_stride(relu_36, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_38, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_115, (18, ), (1, ))
    assert_size_stride(relu_37, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_39, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_118, (18, ), (1, ))
    assert_size_stride(relu_38, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_40, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_121, (18, ), (1, ))
    assert_size_stride(relu_39, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_41, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_124, (18, ), (1, ))
    assert_size_stride(relu_40, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_42, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_127, (18, ), (1, ))
    assert_size_stride(relu_41, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_43, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_130, (18, ), (1, ))
    assert_size_stride(relu_42, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_44, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_133, (36, ), (1, ))
    assert_size_stride(relu_43, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_45, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_136, (36, ), (1, ))
    assert_size_stride(relu_44, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_46, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_139, (36, ), (1, ))
    assert_size_stride(relu_45, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_47, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_142, (36, ), (1, ))
    assert_size_stride(relu_46, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_48, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_145, (36, ), (1, ))
    assert_size_stride(relu_47, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_49, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_148, (36, ), (1, ))
    assert_size_stride(relu_48, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_50, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_151, (36, ), (1, ))
    assert_size_stride(relu_49, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_51, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_154, (36, ), (1, ))
    assert_size_stride(relu_50, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_52, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_157, (72, ), (1, ))
    assert_size_stride(relu_51, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_53, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_160, (72, ), (1, ))
    assert_size_stride(relu_52, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_54, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_163, (72, ), (1, ))
    assert_size_stride(relu_53, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_55, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_166, (72, ), (1, ))
    assert_size_stride(relu_54, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_56, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_169, (72, ), (1, ))
    assert_size_stride(relu_55, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_57, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_172, (72, ), (1, ))
    assert_size_stride(relu_56, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_58, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_175, (72, ), (1, ))
    assert_size_stride(relu_57, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_59, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_178, (72, ), (1, ))
    assert_size_stride(relu_58, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_60, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_181, (18, ), (1, ))
    assert_size_stride(convolution_61, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_184, (18, ), (1, ))
    assert_size_stride(convert_element_type_14, (56, ), (1, ))
    assert_size_stride(unsqueeze_250, (56, 1), (1, 1))
    assert_size_stride(relu_59, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_62, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_187, (36, ), (1, ))
    assert_size_stride(convolution_63, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_190, (36, ), (1, ))
    assert_size_stride(convert_element_type_20, (28, ), (1, ))
    assert_size_stride(unsqueeze_259, (28, 1), (1, 1))
    assert_size_stride(relu_60, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_64, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_193, (18, ), (1, ))
    assert_size_stride(relu_61, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_65, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_196, (72, ), (1, ))
    assert_size_stride(convolution_66, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_199, (72, ), (1, ))
    assert_size_stride(relu_62, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_67, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_202, (18, ), (1, ))
    assert_size_stride(relu_63, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_68, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_205, (18, ), (1, ))
    assert_size_stride(relu_64, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_69, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_208, (18, ), (1, ))
    assert_size_stride(relu_65, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_70, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_211, (18, ), (1, ))
    assert_size_stride(relu_66, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_71, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_214, (18, ), (1, ))
    assert_size_stride(relu_67, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_72, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_217, (18, ), (1, ))
    assert_size_stride(relu_68, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_73, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_220, (18, ), (1, ))
    assert_size_stride(relu_69, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_74, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_223, (18, ), (1, ))
    assert_size_stride(relu_70, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_75, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_226, (36, ), (1, ))
    assert_size_stride(relu_71, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_76, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_229, (36, ), (1, ))
    assert_size_stride(relu_72, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_77, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_232, (36, ), (1, ))
    assert_size_stride(relu_73, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_78, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_235, (36, ), (1, ))
    assert_size_stride(relu_74, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_79, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_238, (36, ), (1, ))
    assert_size_stride(relu_75, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_80, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_241, (36, ), (1, ))
    assert_size_stride(relu_76, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_81, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_244, (36, ), (1, ))
    assert_size_stride(relu_77, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_82, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_247, (36, ), (1, ))
    assert_size_stride(relu_78, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_83, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_250, (72, ), (1, ))
    assert_size_stride(relu_79, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_84, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_253, (72, ), (1, ))
    assert_size_stride(relu_80, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_85, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_256, (72, ), (1, ))
    assert_size_stride(relu_81, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_86, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_259, (72, ), (1, ))
    assert_size_stride(relu_82, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_87, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_262, (72, ), (1, ))
    assert_size_stride(relu_83, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_88, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_265, (72, ), (1, ))
    assert_size_stride(relu_84, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_89, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_268, (72, ), (1, ))
    assert_size_stride(relu_85, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_90, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_271, (72, ), (1, ))
    assert_size_stride(relu_86, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_91, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_274, (18, ), (1, ))
    assert_size_stride(convolution_92, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_277, (18, ), (1, ))
    assert_size_stride(relu_87, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_93, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_280, (36, ), (1, ))
    assert_size_stride(convolution_94, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_283, (36, ), (1, ))
    assert_size_stride(relu_88, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_95, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_286, (18, ), (1, ))
    assert_size_stride(relu_89, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_96, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_289, (72, ), (1, ))
    assert_size_stride(convolution_97, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_292, (72, ), (1, ))
    assert_size_stride(relu_90, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_98, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_295, (18, ), (1, ))
    assert_size_stride(relu_91, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_99, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_298, (18, ), (1, ))
    assert_size_stride(relu_92, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_100, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_301, (18, ), (1, ))
    assert_size_stride(relu_93, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_101, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_304, (18, ), (1, ))
    assert_size_stride(relu_94, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_102, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_307, (18, ), (1, ))
    assert_size_stride(relu_95, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_103, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_310, (18, ), (1, ))
    assert_size_stride(relu_96, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_104, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_313, (18, ), (1, ))
    assert_size_stride(relu_97, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_105, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_316, (18, ), (1, ))
    assert_size_stride(relu_98, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_106, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_319, (36, ), (1, ))
    assert_size_stride(relu_99, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_107, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_322, (36, ), (1, ))
    assert_size_stride(relu_100, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_108, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_325, (36, ), (1, ))
    assert_size_stride(relu_101, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_109, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_328, (36, ), (1, ))
    assert_size_stride(relu_102, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_110, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_331, (36, ), (1, ))
    assert_size_stride(relu_103, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_111, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_334, (36, ), (1, ))
    assert_size_stride(relu_104, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_112, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_337, (36, ), (1, ))
    assert_size_stride(relu_105, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_113, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_340, (36, ), (1, ))
    assert_size_stride(relu_106, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_114, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_343, (72, ), (1, ))
    assert_size_stride(relu_107, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_115, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_346, (72, ), (1, ))
    assert_size_stride(relu_108, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_116, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_349, (72, ), (1, ))
    assert_size_stride(relu_109, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_117, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_352, (72, ), (1, ))
    assert_size_stride(relu_110, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_118, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_355, (72, ), (1, ))
    assert_size_stride(relu_111, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_119, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_358, (72, ), (1, ))
    assert_size_stride(relu_112, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_120, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_361, (72, ), (1, ))
    assert_size_stride(relu_113, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_121, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_364, (72, ), (1, ))
    assert_size_stride(relu_114, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_122, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_367, (18, ), (1, ))
    assert_size_stride(convolution_123, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_370, (18, ), (1, ))
    assert_size_stride(relu_115, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_124, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_373, (36, ), (1, ))
    assert_size_stride(convolution_125, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_376, (36, ), (1, ))
    assert_size_stride(relu_116, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_126, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_379, (18, ), (1, ))
    assert_size_stride(relu_117, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_127, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_382, (72, ), (1, ))
    assert_size_stride(convolution_128, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_385, (72, ), (1, ))
    assert_size_stride(relu_118, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_129, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_388, (18, ), (1, ))
    assert_size_stride(relu_119, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_130, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_391, (18, ), (1, ))
    assert_size_stride(relu_120, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_131, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_394, (18, ), (1, ))
    assert_size_stride(relu_121, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_132, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_397, (18, ), (1, ))
    assert_size_stride(relu_122, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_133, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_400, (18, ), (1, ))
    assert_size_stride(relu_123, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_134, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_403, (18, ), (1, ))
    assert_size_stride(relu_124, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_135, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_406, (18, ), (1, ))
    assert_size_stride(relu_125, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_136, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_409, (18, ), (1, ))
    assert_size_stride(relu_126, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_137, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_412, (36, ), (1, ))
    assert_size_stride(relu_127, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_138, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_415, (36, ), (1, ))
    assert_size_stride(relu_128, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_139, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_418, (36, ), (1, ))
    assert_size_stride(relu_129, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_140, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_421, (36, ), (1, ))
    assert_size_stride(relu_130, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_141, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_424, (36, ), (1, ))
    assert_size_stride(relu_131, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_142, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_427, (36, ), (1, ))
    assert_size_stride(relu_132, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_143, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_430, (36, ), (1, ))
    assert_size_stride(relu_133, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_144, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_433, (36, ), (1, ))
    assert_size_stride(relu_134, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_145, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_436, (72, ), (1, ))
    assert_size_stride(relu_135, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_146, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_439, (72, ), (1, ))
    assert_size_stride(relu_136, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_147, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_442, (72, ), (1, ))
    assert_size_stride(relu_137, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_148, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_445, (72, ), (1, ))
    assert_size_stride(relu_138, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_149, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_448, (72, ), (1, ))
    assert_size_stride(relu_139, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_150, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_451, (72, ), (1, ))
    assert_size_stride(relu_140, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_151, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_454, (72, ), (1, ))
    assert_size_stride(relu_141, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_152, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_457, (72, ), (1, ))
    assert_size_stride(relu_142, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_153, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_460, (18, ), (1, ))
    assert_size_stride(convolution_154, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_463, (18, ), (1, ))
    assert_size_stride(relu_143, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_155, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_466, (36, ), (1, ))
    assert_size_stride(convolution_156, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_469, (36, ), (1, ))
    assert_size_stride(relu_144, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_157, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_472, (18, ), (1, ))
    assert_size_stride(relu_145, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_158, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_475, (72, ), (1, ))
    assert_size_stride(convolution_159, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_478, (72, ), (1, ))
    assert_size_stride(relu_146, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_160, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_481, (144, ), (1, ))
    assert_size_stride(relu_147, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_161, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_484, (18, ), (1, ))
    assert_size_stride(relu_148, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_162, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_487, (18, ), (1, ))
    assert_size_stride(relu_149, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_163, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_490, (18, ), (1, ))
    assert_size_stride(relu_150, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_164, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_493, (18, ), (1, ))
    assert_size_stride(relu_151, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_165, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_496, (18, ), (1, ))
    assert_size_stride(relu_152, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_166, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_499, (18, ), (1, ))
    assert_size_stride(relu_153, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_167, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_502, (18, ), (1, ))
    assert_size_stride(relu_154, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_168, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_505, (18, ), (1, ))
    assert_size_stride(relu_155, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_169, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_508, (36, ), (1, ))
    assert_size_stride(relu_156, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_170, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_511, (36, ), (1, ))
    assert_size_stride(relu_157, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_171, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_514, (36, ), (1, ))
    assert_size_stride(relu_158, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_172, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_517, (36, ), (1, ))
    assert_size_stride(relu_159, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_173, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_520, (36, ), (1, ))
    assert_size_stride(relu_160, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_174, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_523, (36, ), (1, ))
    assert_size_stride(relu_161, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_175, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_526, (36, ), (1, ))
    assert_size_stride(relu_162, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_176, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_529, (36, ), (1, ))
    assert_size_stride(relu_163, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_177, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_532, (72, ), (1, ))
    assert_size_stride(relu_164, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_178, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_535, (72, ), (1, ))
    assert_size_stride(relu_165, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_179, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_538, (72, ), (1, ))
    assert_size_stride(relu_166, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_180, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_541, (72, ), (1, ))
    assert_size_stride(relu_167, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_181, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_544, (72, ), (1, ))
    assert_size_stride(relu_168, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_182, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_547, (72, ), (1, ))
    assert_size_stride(relu_169, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_183, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_550, (72, ), (1, ))
    assert_size_stride(relu_170, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_184, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_553, (72, ), (1, ))
    assert_size_stride(relu_171, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_185, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_556, (144, ), (1, ))
    assert_size_stride(relu_172, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_186, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_559, (144, ), (1, ))
    assert_size_stride(relu_173, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_187, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_562, (144, ), (1, ))
    assert_size_stride(relu_174, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_188, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_565, (144, ), (1, ))
    assert_size_stride(relu_175, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_189, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_568, (144, ), (1, ))
    assert_size_stride(relu_176, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_190, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_571, (144, ), (1, ))
    assert_size_stride(relu_177, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_191, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_574, (144, ), (1, ))
    assert_size_stride(relu_178, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_192, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_577, (144, ), (1, ))
    assert_size_stride(relu_179, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_193, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_580, (18, ), (1, ))
    assert_size_stride(convolution_194, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_583, (18, ), (1, ))
    assert_size_stride(convolution_195, (8, 18, 7, 7), (882, 1, 126, 18))
    assert_size_stride(squeeze_586, (18, ), (1, ))
    assert_size_stride(convert_element_type_92, (56, ), (1, ))
    assert_size_stride(unsqueeze_799, (56, 1), (1, 1))
    assert_size_stride(relu_180, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_196, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_589, (36, ), (1, ))
    assert_size_stride(convolution_197, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_592, (36, ), (1, ))
    assert_size_stride(convolution_198, (8, 36, 7, 7), (1764, 1, 252, 36))
    assert_size_stride(squeeze_595, (36, ), (1, ))
    assert_size_stride(convert_element_type_104, (28, ), (1, ))
    assert_size_stride(unsqueeze_813, (28, 1), (1, 1))
    assert_size_stride(relu_181, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_199, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_598, (18, ), (1, ))
    assert_size_stride(relu_182, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_200, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_601, (72, ), (1, ))
    assert_size_stride(convolution_201, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_604, (72, ), (1, ))
    assert_size_stride(convolution_202, (8, 72, 7, 7), (3528, 1, 504, 72))
    assert_size_stride(squeeze_607, (72, ), (1, ))
    assert_size_stride(convert_element_type_110, (14, ), (1, ))
    assert_size_stride(unsqueeze_830, (14, 1), (1, 1))
    assert_size_stride(relu_183, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_203, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_610, (18, ), (1, ))
    assert_size_stride(relu_184, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_204, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_613, (18, ), (1, ))
    assert_size_stride(relu_185, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(convolution_205, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_616, (144, ), (1, ))
    assert_size_stride(convolution_206, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_619, (36, ), (1, ))
    assert_size_stride(relu_186, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(convolution_207, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_622, (144, ), (1, ))
    assert_size_stride(convolution_208, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_625, (144, ), (1, ))
    assert_size_stride(relu_187, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_209, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_628, (18, ), (1, ))
    assert_size_stride(relu_188, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_210, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_631, (18, ), (1, ))
    assert_size_stride(relu_189, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_211, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_634, (18, ), (1, ))
    assert_size_stride(relu_190, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_212, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_637, (18, ), (1, ))
    assert_size_stride(relu_191, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_213, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_640, (18, ), (1, ))
    assert_size_stride(relu_192, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_214, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_643, (18, ), (1, ))
    assert_size_stride(relu_193, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_215, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_646, (18, ), (1, ))
    assert_size_stride(relu_194, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_216, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_649, (18, ), (1, ))
    assert_size_stride(relu_195, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_217, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_652, (36, ), (1, ))
    assert_size_stride(relu_196, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_218, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_655, (36, ), (1, ))
    assert_size_stride(relu_197, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_219, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_658, (36, ), (1, ))
    assert_size_stride(relu_198, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_220, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_661, (36, ), (1, ))
    assert_size_stride(relu_199, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_221, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_664, (36, ), (1, ))
    assert_size_stride(relu_200, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_222, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_667, (36, ), (1, ))
    assert_size_stride(relu_201, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_223, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_670, (36, ), (1, ))
    assert_size_stride(relu_202, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_224, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_673, (36, ), (1, ))
    assert_size_stride(relu_203, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_225, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_676, (72, ), (1, ))
    assert_size_stride(relu_204, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_226, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_679, (72, ), (1, ))
    assert_size_stride(relu_205, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_227, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_682, (72, ), (1, ))
    assert_size_stride(relu_206, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_228, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_685, (72, ), (1, ))
    assert_size_stride(relu_207, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_229, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_688, (72, ), (1, ))
    assert_size_stride(relu_208, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_230, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_691, (72, ), (1, ))
    assert_size_stride(relu_209, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_231, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_694, (72, ), (1, ))
    assert_size_stride(relu_210, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_232, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_697, (72, ), (1, ))
    assert_size_stride(relu_211, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_233, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_700, (144, ), (1, ))
    assert_size_stride(relu_212, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_234, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_703, (144, ), (1, ))
    assert_size_stride(relu_213, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_235, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_706, (144, ), (1, ))
    assert_size_stride(relu_214, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_236, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_709, (144, ), (1, ))
    assert_size_stride(relu_215, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_237, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_712, (144, ), (1, ))
    assert_size_stride(relu_216, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_238, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_715, (144, ), (1, ))
    assert_size_stride(relu_217, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_239, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_718, (144, ), (1, ))
    assert_size_stride(relu_218, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_240, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_721, (144, ), (1, ))
    assert_size_stride(relu_219, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_241, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_724, (18, ), (1, ))
    assert_size_stride(convolution_242, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_727, (18, ), (1, ))
    assert_size_stride(convolution_243, (8, 18, 7, 7), (882, 1, 126, 18))
    assert_size_stride(squeeze_730, (18, ), (1, ))
    assert_size_stride(relu_220, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_244, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_733, (36, ), (1, ))
    assert_size_stride(convolution_245, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_736, (36, ), (1, ))
    assert_size_stride(convolution_246, (8, 36, 7, 7), (1764, 1, 252, 36))
    assert_size_stride(squeeze_739, (36, ), (1, ))
    assert_size_stride(relu_221, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_247, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_742, (18, ), (1, ))
    assert_size_stride(relu_222, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_248, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_745, (72, ), (1, ))
    assert_size_stride(convolution_249, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_748, (72, ), (1, ))
    assert_size_stride(convolution_250, (8, 72, 7, 7), (3528, 1, 504, 72))
    assert_size_stride(squeeze_751, (72, ), (1, ))
    assert_size_stride(relu_223, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_251, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_754, (18, ), (1, ))
    assert_size_stride(relu_224, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_252, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_757, (18, ), (1, ))
    assert_size_stride(relu_225, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(convolution_253, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_760, (144, ), (1, ))
    assert_size_stride(convolution_254, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_763, (36, ), (1, ))
    assert_size_stride(relu_226, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(convolution_255, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_766, (144, ), (1, ))
    assert_size_stride(convolution_256, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_769, (144, ), (1, ))
    assert_size_stride(relu_227, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_257, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_772, (18, ), (1, ))
    assert_size_stride(relu_228, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_258, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_775, (18, ), (1, ))
    assert_size_stride(relu_229, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_259, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_778, (18, ), (1, ))
    assert_size_stride(relu_230, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_260, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_781, (18, ), (1, ))
    assert_size_stride(relu_231, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_261, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_784, (18, ), (1, ))
    assert_size_stride(relu_232, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_262, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_787, (18, ), (1, ))
    assert_size_stride(relu_233, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_263, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_790, (18, ), (1, ))
    assert_size_stride(relu_234, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_264, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(squeeze_793, (18, ), (1, ))
    assert_size_stride(relu_235, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_265, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_796, (36, ), (1, ))
    assert_size_stride(relu_236, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_266, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_799, (36, ), (1, ))
    assert_size_stride(relu_237, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_267, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_802, (36, ), (1, ))
    assert_size_stride(relu_238, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_268, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_805, (36, ), (1, ))
    assert_size_stride(relu_239, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_269, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_808, (36, ), (1, ))
    assert_size_stride(relu_240, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_270, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_811, (36, ), (1, ))
    assert_size_stride(relu_241, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_271, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_814, (36, ), (1, ))
    assert_size_stride(relu_242, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_272, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_817, (36, ), (1, ))
    assert_size_stride(relu_243, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_273, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_820, (72, ), (1, ))
    assert_size_stride(relu_244, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_274, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_823, (72, ), (1, ))
    assert_size_stride(relu_245, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_275, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_826, (72, ), (1, ))
    assert_size_stride(relu_246, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_276, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_829, (72, ), (1, ))
    assert_size_stride(relu_247, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_277, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_832, (72, ), (1, ))
    assert_size_stride(relu_248, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_278, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_835, (72, ), (1, ))
    assert_size_stride(relu_249, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_279, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_838, (72, ), (1, ))
    assert_size_stride(relu_250, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_280, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_841, (72, ), (1, ))
    assert_size_stride(relu_251, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_281, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_844, (144, ), (1, ))
    assert_size_stride(relu_252, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_282, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_847, (144, ), (1, ))
    assert_size_stride(relu_253, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_283, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_850, (144, ), (1, ))
    assert_size_stride(relu_254, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_284, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_853, (144, ), (1, ))
    assert_size_stride(relu_255, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_285, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_856, (144, ), (1, ))
    assert_size_stride(relu_256, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_286, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_859, (144, ), (1, ))
    assert_size_stride(relu_257, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_287, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_862, (144, ), (1, ))
    assert_size_stride(relu_258, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_288, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_865, (144, ), (1, ))
    assert_size_stride(relu_259, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_289, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_868, (18, ), (1, ))
    assert_size_stride(convolution_290, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_871, (18, ), (1, ))
    assert_size_stride(convolution_291, (8, 18, 7, 7), (882, 1, 126, 18))
    assert_size_stride(squeeze_874, (18, ), (1, ))
    assert_size_stride(relu_260, (8, 18, 56, 56), (56448, 1, 1008, 18))
    assert_size_stride(convolution_292, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(squeeze_877, (36, ), (1, ))
    assert_size_stride(convolution_293, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_880, (36, ), (1, ))
    assert_size_stride(convolution_294, (8, 36, 7, 7), (1764, 1, 252, 36))
    assert_size_stride(squeeze_883, (36, ), (1, ))
    assert_size_stride(relu_261, (8, 36, 28, 28), (28224, 1, 1008, 36))
    assert_size_stride(convolution_295, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_886, (18, ), (1, ))
    assert_size_stride(relu_262, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_296, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_889, (72, ), (1, ))
    assert_size_stride(convolution_297, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(squeeze_892, (72, ), (1, ))
    assert_size_stride(convolution_298, (8, 72, 7, 7), (3528, 1, 504, 72))
    assert_size_stride(squeeze_895, (72, ), (1, ))
    assert_size_stride(relu_263, (8, 72, 14, 14), (14112, 1, 1008, 72))
    assert_size_stride(convolution_299, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(squeeze_898, (18, ), (1, ))
    assert_size_stride(relu_264, (8, 18, 28, 28), (14112, 1, 504, 18))
    assert_size_stride(convolution_300, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(squeeze_901, (18, ), (1, ))
    assert_size_stride(relu_265, (8, 18, 14, 14), (3528, 1, 252, 18))
    assert_size_stride(convolution_301, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_904, (144, ), (1, ))
    assert_size_stride(convolution_302, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(squeeze_907, (36, ), (1, ))
    assert_size_stride(relu_266, (8, 36, 14, 14), (7056, 1, 504, 36))
    assert_size_stride(convolution_303, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_910, (144, ), (1, ))
    assert_size_stride(convolution_304, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(squeeze_913, (144, ), (1, ))
    assert_size_stride(relu_267, (8, 144, 7, 7), (7056, 1, 1008, 144))
    assert_size_stride(convolution_305, (8, 32, 56, 56), (100352, 1, 1792, 32))
    assert_size_stride(squeeze_916, (32, ), (1, ))
    assert_size_stride(relu_268, (8, 32, 56, 56), (100352, 1, 1792, 32))
    assert_size_stride(convolution_306, (8, 32, 56, 56), (100352, 1, 1792, 32))
    assert_size_stride(squeeze_919, (32, ), (1, ))
    assert_size_stride(relu_269, (8, 32, 56, 56), (100352, 1, 1792, 32))
    assert_size_stride(convolution_307, (8, 128, 56, 56), (401408, 1, 7168, 128))
    assert_size_stride(squeeze_922, (128, ), (1, ))
    assert_size_stride(convolution_308, (8, 128, 56, 56), (401408, 1, 7168, 128))
    assert_size_stride(squeeze_925, (128, ), (1, ))
    assert_size_stride(relu_270, (8, 128, 56, 56), (401408, 1, 7168, 128))
    assert_size_stride(convolution_309, (8, 64, 28, 28), (50176, 1, 1792, 64))
    assert_size_stride(squeeze_928, (64, ), (1, ))
    assert_size_stride(relu_271, (8, 64, 28, 28), (50176, 1, 1792, 64))
    assert_size_stride(convolution_310, (8, 64, 28, 28), (50176, 1, 1792, 64))
    assert_size_stride(squeeze_931, (64, ), (1, ))
    assert_size_stride(relu_272, (8, 64, 28, 28), (50176, 1, 1792, 64))
    assert_size_stride(convolution_311, (8, 256, 28, 28), (200704, 1, 7168, 256))
    assert_size_stride(squeeze_934, (256, ), (1, ))
    assert_size_stride(convolution_312, (8, 256, 28, 28), (200704, 1, 7168, 256))
    assert_size_stride(squeeze_937, (256, ), (1, ))
    assert_size_stride(convolution_313, (8, 256, 28, 28), (200704, 1, 7168, 256))
    assert_size_stride(squeeze_940, (256, ), (1, ))
    assert_size_stride(add_1866, (8, 256, 28, 28), (200704, 1, 7168, 256))
    assert_size_stride(convolution_314, (8, 128, 14, 14), (25088, 1, 1792, 128))
    assert_size_stride(squeeze_943, (128, ), (1, ))
    assert_size_stride(relu_275, (8, 128, 14, 14), (25088, 1, 1792, 128))
    assert_size_stride(convolution_315, (8, 128, 14, 14), (25088, 1, 1792, 128))
    assert_size_stride(squeeze_946, (128, ), (1, ))
    assert_size_stride(relu_276, (8, 128, 14, 14), (25088, 1, 1792, 128))
    assert_size_stride(convolution_316, (8, 512, 14, 14), (100352, 1, 7168, 512))
    assert_size_stride(squeeze_949, (512, ), (1, ))
    assert_size_stride(convolution_317, (8, 512, 14, 14), (100352, 1, 7168, 512))
    assert_size_stride(squeeze_952, (512, ), (1, ))
    assert_size_stride(convolution_318, (8, 512, 14, 14), (100352, 1, 7168, 512))
    assert_size_stride(squeeze_955, (512, ), (1, ))
    assert_size_stride(add_1893, (8, 512, 14, 14), (100352, 1, 7168, 512))
    assert_size_stride(convolution_319, (8, 256, 7, 7), (12544, 1, 1792, 256))
    assert_size_stride(squeeze_958, (256, ), (1, ))
    assert_size_stride(relu_279, (8, 256, 7, 7), (12544, 1, 1792, 256))
    assert_size_stride(convolution_320, (8, 256, 7, 7), (12544, 1, 1792, 256))
    assert_size_stride(squeeze_961, (256, ), (1, ))
    assert_size_stride(relu_280, (8, 256, 7, 7), (12544, 1, 1792, 256))
    assert_size_stride(convolution_321, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    assert_size_stride(squeeze_964, (1024, ), (1, ))
    assert_size_stride(convolution_322, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    assert_size_stride(squeeze_967, (1024, ), (1, ))
    assert_size_stride(convolution_323, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    assert_size_stride(squeeze_970, (1024, ), (1, ))
    assert_size_stride(add_1920, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    assert_size_stride(convolution_324, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(squeeze_973, (2048, ), (1, ))
    assert_size_stride(clone, (8, 2048), (2048, 1))
    assert_size_stride(permute_1, (1000, 2048), (2048, 1))
    assert_size_stride(le, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    assert_size_stride(unsqueeze_1333, (1, 2048, 1, 1), (2048, 1, 1, 1))
    assert_size_stride(le_1, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    assert_size_stride(unsqueeze_1345, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(le_2, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    assert_size_stride(unsqueeze_1357, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(unsqueeze_1369, (1, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(unsqueeze_1381, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_1393, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(le_5, (8, 512, 14, 14), (100352, 1, 7168, 512))
    assert_size_stride(unsqueeze_1405, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(le_6, (8, 512, 14, 14), (100352, 1, 7168, 512))
    assert_size_stride(unsqueeze_1417, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(unsqueeze_1429, (1, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(unsqueeze_1441, (1, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(unsqueeze_1453, (1, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(le_9, (8, 256, 28, 28), (200704, 1, 7168, 256))
    assert_size_stride(unsqueeze_1465, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(le_10, (8, 256, 28, 28), (200704, 1, 7168, 256))
    assert_size_stride(unsqueeze_1477, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_1489, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_1501, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_1513, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_1525, (1, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(unsqueeze_1537, (1, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(unsqueeze_1549, (1, 32, 1, 1), (32, 1, 1, 1))
    assert_size_stride(unsqueeze_1561, (1, 32, 1, 1), (32, 1, 1, 1))
    assert_size_stride(unsqueeze_1573, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1585, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1597, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_1609, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1621, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_1633, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_1645, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1657, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1669, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1681, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_1693, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_1705, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_1717, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_1729, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_1741, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_1753, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_1765, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1777, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1789, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1801, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1813, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1825, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1837, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1849, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_1861, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1873, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1885, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1897, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1909, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1921, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1933, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1945, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_1957, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_1969, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_1981, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_1993, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2005, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2017, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2029, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2041, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2053, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2065, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2077, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2089, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2101, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2113, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2125, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2137, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2149, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2161, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2173, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2185, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2197, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2209, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2221, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2233, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2245, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2257, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2269, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2281, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2293, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2305, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2317, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2329, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2341, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2353, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2365, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2377, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2389, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2401, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2413, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2425, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2437, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2449, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2461, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2473, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2485, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2497, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2509, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2521, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2533, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2545, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2557, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2569, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2581, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2593, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2605, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2617, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2629, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2641, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2653, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2665, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2677, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2689, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2701, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2713, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2725, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2737, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2749, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2761, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2773, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2785, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2797, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2809, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2821, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_2833, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2845, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2857, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2869, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_2881, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2893, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2905, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_2917, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2929, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2941, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2953, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2965, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2977, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_2989, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_3001, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_3013, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3025, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3037, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3049, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3061, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3073, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3085, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3097, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3109, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3121, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3133, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3145, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3157, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3169, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3181, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3193, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3205, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3217, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3229, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3241, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3253, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3265, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3277, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3289, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3301, (1, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(unsqueeze_3313, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3325, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3337, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3349, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3361, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3373, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3385, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3397, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3409, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3421, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3433, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3445, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3457, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3469, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3481, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3493, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3505, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3517, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3529, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3541, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3553, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3565, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3577, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3589, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3601, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3613, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3625, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3637, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3649, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3661, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3673, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3685, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3697, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3709, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3721, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3733, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3745, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3757, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3769, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3781, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3793, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3805, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3817, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3829, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3841, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3853, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_3865, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3877, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3889, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3901, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3913, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3925, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3937, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3949, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_3961, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3973, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3985, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_3997, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4009, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4021, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4033, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4045, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4057, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4069, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4081, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4093, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4105, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4117, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4129, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4141, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4153, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4165, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4177, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4189, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4201, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4213, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4225, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4237, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4249, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4261, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4273, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4285, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4297, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4309, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4321, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4333, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4345, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4357, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4369, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4381, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4393, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4405, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4417, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4429, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4441, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4453, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4465, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4477, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4489, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4501, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4513, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4525, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4537, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4549, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4561, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4573, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4585, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4597, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4609, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4621, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4633, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4645, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4657, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4669, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4681, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4693, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4705, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4717, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4729, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4741, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4753, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4765, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4777, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4789, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4801, (1, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(unsqueeze_4813, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4825, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4837, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4849, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4861, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4873, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4885, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4897, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4909, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4921, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_4933, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4945, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4957, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4969, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4981, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_4993, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_5005, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_5017, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_5029, (1, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(unsqueeze_5041, (1, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(unsqueeze_5053, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_5065, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5077, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5089, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_5101, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5113, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5125, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_5137, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5149, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5161, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_5173, (1, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(unsqueeze_5185, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5197, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5209, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(unsqueeze_5221, (1, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_1, out=buf0)
    del permute_1
    buf1 = empty((1000, 2048), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), clone, out=buf1)
    del clone
    buf2 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf3 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf4 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf5 = empty((2048, ), device='cpu', dtype=torch.float32)
    buf6 = empty_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_div_native_batch_norm_backward_sum_threshold_backward_0(c_void_p(tangents_1.data_ptr()), c_void_p(le.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(convolution_324.data_ptr()), c_void_p(unsqueeze_1333.data_ptr()), c_void_p(squeeze_973.data_ptr()), c_void_p(primals_978.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()))
    del buf0
    del buf4
    del convolution_324
    del le
    del primals_978
    del squeeze_973
    del tangents_1
    del unsqueeze_1333
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.div, aten.native_batch_norm_backward, aten.threshold_backward]
    buf7 = aten.convolution_backward(buf6, add_1920, primals_976, [2048], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_1920
    del primals_976
    buf8 = buf7[0]
    buf9 = buf7[1]
    buf10 = buf7[2]
    del buf7
    buf11 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf12 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf19 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf20 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf26 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf13 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf14 = empty_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.float32)
    buf22 = empty_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.float32)
    buf28 = empty_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_1(c_void_p(le_1.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(convolution_323.data_ptr()), c_void_p(unsqueeze_1345.data_ptr()), c_void_p(le_2.data_ptr()), c_void_p(convolution_322.data_ptr()), c_void_p(unsqueeze_1357.data_ptr()), c_void_p(convolution_321.data_ptr()), c_void_p(unsqueeze_1369.data_ptr()), c_void_p(squeeze_970.data_ptr()), c_void_p(primals_974.data_ptr()), c_void_p(squeeze_967.data_ptr()), c_void_p(primals_970.data_ptr()), c_void_p(squeeze_964.data_ptr()), c_void_p(primals_967.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf19.data_ptr()), c_void_p(buf20.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf28.data_ptr()))
    del buf12
    del buf8
    del convolution_321
    del convolution_322
    del convolution_323
    del le_1
    del le_2
    del primals_967
    del primals_970
    del primals_974
    del squeeze_970
    del unsqueeze_1345
    del unsqueeze_1357
    del unsqueeze_1369
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf15 = aten.convolution_backward(buf14, add_1893, primals_972, [1024], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_1893
    del buf14
    del primals_972
    buf16 = buf15[0]
    buf17 = buf15[1]
    buf18 = buf15[2]
    del buf15
    buf21 = buf20; del buf20  # reuse
    cpp_fused_native_batch_norm_backward_2(c_void_p(buf21.data_ptr()), c_void_p(squeeze_967.data_ptr()))
    del squeeze_967
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf23 = aten.convolution_backward(buf22, relu_267, primals_969, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf22
    del primals_969
    buf24 = buf23[0]
    buf25 = buf23[1]
    del buf23
    buf27 = buf26; del buf26  # reuse
    cpp_fused_native_batch_norm_backward_3(c_void_p(buf27.data_ptr()), c_void_p(squeeze_964.data_ptr()))
    del squeeze_964
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf29 = aten.convolution_backward(buf28, relu_280, primals_966, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf28
    del primals_966
    buf30 = buf29[0]
    buf31 = buf29[1]
    del buf29
    buf32 = empty((256, ), device='cpu', dtype=torch.float32)
    buf33 = empty((256, ), device='cpu', dtype=torch.float32)
    buf34 = empty((256, ), device='cpu', dtype=torch.float32)
    buf35 = buf30; del buf30  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_4(c_void_p(buf35.data_ptr()), c_void_p(relu_280.data_ptr()), c_void_p(convolution_320.data_ptr()), c_void_p(unsqueeze_1381.data_ptr()), c_void_p(squeeze_961.data_ptr()), c_void_p(primals_964.data_ptr()), c_void_p(buf32.data_ptr()), c_void_p(buf33.data_ptr()), c_void_p(buf34.data_ptr()))
    del convolution_320
    del primals_964
    del relu_280
    del squeeze_961
    del unsqueeze_1381
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf36 = aten.convolution_backward(buf35, relu_279, primals_963, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf35
    del primals_963
    buf37 = buf36[0]
    buf38 = buf36[1]
    del buf36
    buf39 = buf33; del buf33  # reuse
    buf40 = empty((256, ), device='cpu', dtype=torch.float32)
    buf41 = empty((256, ), device='cpu', dtype=torch.float32)
    buf42 = buf37; del buf37  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_5(c_void_p(buf42.data_ptr()), c_void_p(relu_279.data_ptr()), c_void_p(convolution_319.data_ptr()), c_void_p(unsqueeze_1393.data_ptr()), c_void_p(squeeze_958.data_ptr()), c_void_p(primals_961.data_ptr()), c_void_p(buf39.data_ptr()), c_void_p(buf40.data_ptr()), c_void_p(buf41.data_ptr()))
    del convolution_319
    del primals_961
    del relu_279
    del squeeze_958
    del unsqueeze_1393
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf43 = aten.convolution_backward(buf42, relu_267, primals_960, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf42
    del primals_960
    buf44 = buf43[0]
    buf45 = buf43[1]
    del buf43
    buf46 = empty((512, ), device='cpu', dtype=torch.float32)
    buf47 = empty((512, ), device='cpu', dtype=torch.float32)
    buf54 = empty((512, ), device='cpu', dtype=torch.float32)
    buf55 = empty((512, ), device='cpu', dtype=torch.float32)
    buf61 = empty((512, ), device='cpu', dtype=torch.float32)
    buf48 = empty((512, ), device='cpu', dtype=torch.float32)
    buf49 = reinterpret_tensor(buf6, (8, 512, 14, 14), (100352, 1, 7168, 512), 0); del buf6  # reuse
    buf57 = empty_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.float32)
    buf63 = empty_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_6(c_void_p(le_5.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(convolution_318.data_ptr()), c_void_p(unsqueeze_1405.data_ptr()), c_void_p(le_6.data_ptr()), c_void_p(convolution_317.data_ptr()), c_void_p(unsqueeze_1417.data_ptr()), c_void_p(convolution_316.data_ptr()), c_void_p(unsqueeze_1429.data_ptr()), c_void_p(squeeze_955.data_ptr()), c_void_p(primals_958.data_ptr()), c_void_p(squeeze_952.data_ptr()), c_void_p(primals_954.data_ptr()), c_void_p(squeeze_949.data_ptr()), c_void_p(primals_951.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(buf55.data_ptr()), c_void_p(buf61.data_ptr()), c_void_p(buf48.data_ptr()), c_void_p(buf49.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf63.data_ptr()))
    del buf16
    del buf47
    del convolution_316
    del convolution_317
    del convolution_318
    del le_5
    del le_6
    del primals_951
    del primals_954
    del primals_958
    del squeeze_955
    del unsqueeze_1405
    del unsqueeze_1417
    del unsqueeze_1429
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf50 = aten.convolution_backward(buf49, add_1866, primals_956, [512], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_1866
    del buf49
    del primals_956
    buf51 = buf50[0]
    buf52 = buf50[1]
    buf53 = buf50[2]
    del buf50
    buf56 = buf55; del buf55  # reuse
    cpp_fused_native_batch_norm_backward_7(c_void_p(buf56.data_ptr()), c_void_p(squeeze_952.data_ptr()))
    del squeeze_952
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf58 = aten.convolution_backward(buf57, relu_263, primals_953, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf57
    del primals_953
    buf59 = buf58[0]
    buf60 = buf58[1]
    del buf58
    buf62 = buf61; del buf61  # reuse
    cpp_fused_native_batch_norm_backward_8(c_void_p(buf62.data_ptr()), c_void_p(squeeze_949.data_ptr()))
    del squeeze_949
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf64 = aten.convolution_backward(buf63, relu_276, primals_950, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf63
    del primals_950
    buf65 = buf64[0]
    buf66 = buf64[1]
    del buf64
    buf67 = empty((128, ), device='cpu', dtype=torch.float32)
    buf68 = empty((128, ), device='cpu', dtype=torch.float32)
    buf69 = empty((128, ), device='cpu', dtype=torch.float32)
    buf70 = buf65; del buf65  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9(c_void_p(buf70.data_ptr()), c_void_p(relu_276.data_ptr()), c_void_p(convolution_315.data_ptr()), c_void_p(unsqueeze_1441.data_ptr()), c_void_p(squeeze_946.data_ptr()), c_void_p(primals_948.data_ptr()), c_void_p(buf67.data_ptr()), c_void_p(buf68.data_ptr()), c_void_p(buf69.data_ptr()))
    del convolution_315
    del primals_948
    del relu_276
    del squeeze_946
    del unsqueeze_1441
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf71 = aten.convolution_backward(buf70, relu_275, primals_947, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf70
    del primals_947
    buf72 = buf71[0]
    buf73 = buf71[1]
    del buf71
    buf74 = buf68; del buf68  # reuse
    buf75 = empty((128, ), device='cpu', dtype=torch.float32)
    buf76 = empty((128, ), device='cpu', dtype=torch.float32)
    buf77 = buf72; del buf72  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_10(c_void_p(buf77.data_ptr()), c_void_p(relu_275.data_ptr()), c_void_p(convolution_314.data_ptr()), c_void_p(unsqueeze_1453.data_ptr()), c_void_p(squeeze_943.data_ptr()), c_void_p(primals_945.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(buf75.data_ptr()), c_void_p(buf76.data_ptr()))
    del convolution_314
    del primals_945
    del relu_275
    del squeeze_943
    del unsqueeze_1453
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf78 = aten.convolution_backward(buf77, relu_263, primals_944, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf77
    del primals_944
    buf79 = buf78[0]
    buf80 = buf78[1]
    del buf78
    buf81 = buf40; del buf40  # reuse
    buf82 = empty((256, ), device='cpu', dtype=torch.float32)
    buf89 = empty((256, ), device='cpu', dtype=torch.float32)
    buf90 = empty((256, ), device='cpu', dtype=torch.float32)
    buf96 = empty((256, ), device='cpu', dtype=torch.float32)
    buf83 = empty((256, ), device='cpu', dtype=torch.float32)
    buf84 = empty_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.float32)
    buf92 = empty_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.float32)
    buf98 = empty_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_11(c_void_p(le_9.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(convolution_313.data_ptr()), c_void_p(unsqueeze_1465.data_ptr()), c_void_p(le_10.data_ptr()), c_void_p(convolution_312.data_ptr()), c_void_p(unsqueeze_1477.data_ptr()), c_void_p(convolution_311.data_ptr()), c_void_p(unsqueeze_1489.data_ptr()), c_void_p(squeeze_940.data_ptr()), c_void_p(primals_942.data_ptr()), c_void_p(squeeze_937.data_ptr()), c_void_p(primals_938.data_ptr()), c_void_p(squeeze_934.data_ptr()), c_void_p(primals_935.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf82.data_ptr()), c_void_p(buf89.data_ptr()), c_void_p(buf90.data_ptr()), c_void_p(buf96.data_ptr()), c_void_p(buf83.data_ptr()), c_void_p(buf84.data_ptr()), c_void_p(buf92.data_ptr()), c_void_p(buf98.data_ptr()))
    del buf51
    del convolution_311
    del convolution_312
    del convolution_313
    del le_10
    del le_9
    del primals_935
    del primals_938
    del primals_942
    del squeeze_940
    del unsqueeze_1465
    del unsqueeze_1477
    del unsqueeze_1489
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf85 = aten.convolution_backward(buf84, relu_270, primals_940, [256], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del buf84
    del primals_940
    buf86 = buf85[0]
    buf87 = buf85[1]
    buf88 = buf85[2]
    del buf85
    buf91 = buf90; del buf90  # reuse
    cpp_fused_native_batch_norm_backward_12(c_void_p(buf91.data_ptr()), c_void_p(squeeze_937.data_ptr()))
    del squeeze_937
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf93 = aten.convolution_backward(buf92, relu_261, primals_937, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf92
    del primals_937
    buf94 = buf93[0]
    buf95 = buf93[1]
    del buf93
    buf97 = buf96; del buf96  # reuse
    cpp_fused_native_batch_norm_backward_13(c_void_p(buf97.data_ptr()), c_void_p(squeeze_934.data_ptr()))
    del squeeze_934
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf99 = aten.convolution_backward(buf98, relu_272, primals_934, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf98
    del primals_934
    buf100 = buf99[0]
    buf101 = buf99[1]
    del buf99
    buf102 = empty((64, ), device='cpu', dtype=torch.float32)
    buf103 = empty((64, ), device='cpu', dtype=torch.float32)
    buf104 = empty((64, ), device='cpu', dtype=torch.float32)
    buf105 = buf100; del buf100  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_14(c_void_p(buf105.data_ptr()), c_void_p(relu_272.data_ptr()), c_void_p(convolution_310.data_ptr()), c_void_p(unsqueeze_1501.data_ptr()), c_void_p(squeeze_931.data_ptr()), c_void_p(primals_932.data_ptr()), c_void_p(buf102.data_ptr()), c_void_p(buf103.data_ptr()), c_void_p(buf104.data_ptr()))
    del convolution_310
    del primals_932
    del relu_272
    del squeeze_931
    del unsqueeze_1501
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf106 = aten.convolution_backward(buf105, relu_271, primals_931, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf105
    del primals_931
    buf107 = buf106[0]
    buf108 = buf106[1]
    del buf106
    buf109 = buf103; del buf103  # reuse
    buf110 = empty((64, ), device='cpu', dtype=torch.float32)
    buf111 = empty((64, ), device='cpu', dtype=torch.float32)
    buf112 = buf107; del buf107  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_15(c_void_p(buf112.data_ptr()), c_void_p(relu_271.data_ptr()), c_void_p(convolution_309.data_ptr()), c_void_p(unsqueeze_1513.data_ptr()), c_void_p(squeeze_928.data_ptr()), c_void_p(primals_929.data_ptr()), c_void_p(buf109.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(buf111.data_ptr()))
    del convolution_309
    del primals_929
    del relu_271
    del squeeze_928
    del unsqueeze_1513
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf113 = aten.convolution_backward(buf112, relu_261, primals_928, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf112
    del primals_928
    buf114 = buf113[0]
    buf115 = buf113[1]
    del buf113
    buf116 = buf75; del buf75  # reuse
    buf117 = empty((128, ), device='cpu', dtype=torch.float32)
    buf123 = empty((128, ), device='cpu', dtype=torch.float32)
    buf118 = empty((128, ), device='cpu', dtype=torch.float32)
    buf119 = empty_strided((8, 128, 56, 56), (401408, 1, 7168, 128), device='cpu', dtype=torch.float32)
    buf125 = empty_strided((8, 128, 56, 56), (401408, 1, 7168, 128), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_16(c_void_p(relu_270.data_ptr()), c_void_p(buf86.data_ptr()), c_void_p(convolution_308.data_ptr()), c_void_p(unsqueeze_1525.data_ptr()), c_void_p(convolution_307.data_ptr()), c_void_p(unsqueeze_1537.data_ptr()), c_void_p(squeeze_925.data_ptr()), c_void_p(primals_926.data_ptr()), c_void_p(squeeze_922.data_ptr()), c_void_p(primals_923.data_ptr()), c_void_p(buf116.data_ptr()), c_void_p(buf117.data_ptr()), c_void_p(buf123.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(buf125.data_ptr()))
    del buf117
    del buf86
    del convolution_307
    del convolution_308
    del primals_923
    del primals_926
    del relu_270
    del squeeze_925
    del unsqueeze_1525
    del unsqueeze_1537
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf120 = aten.convolution_backward(buf119, relu_260, primals_925, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf119
    del primals_925
    buf121 = buf120[0]
    buf122 = buf120[1]
    del buf120
    buf124 = buf123; del buf123  # reuse
    cpp_fused_native_batch_norm_backward_17(c_void_p(buf124.data_ptr()), c_void_p(squeeze_922.data_ptr()))
    del squeeze_922
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf126 = aten.convolution_backward(buf125, relu_269, primals_922, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf125
    del primals_922
    buf127 = buf126[0]
    buf128 = buf126[1]
    del buf126
    buf129 = empty((32, ), device='cpu', dtype=torch.float32)
    buf130 = empty((32, ), device='cpu', dtype=torch.float32)
    buf131 = empty((32, ), device='cpu', dtype=torch.float32)
    buf132 = buf127; del buf127  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_18(c_void_p(buf132.data_ptr()), c_void_p(relu_269.data_ptr()), c_void_p(convolution_306.data_ptr()), c_void_p(unsqueeze_1549.data_ptr()), c_void_p(squeeze_919.data_ptr()), c_void_p(primals_920.data_ptr()), c_void_p(buf129.data_ptr()), c_void_p(buf130.data_ptr()), c_void_p(buf131.data_ptr()))
    del convolution_306
    del primals_920
    del relu_269
    del squeeze_919
    del unsqueeze_1549
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf133 = aten.convolution_backward(buf132, relu_268, primals_919, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf132
    del primals_919
    buf134 = buf133[0]
    buf135 = buf133[1]
    del buf133
    buf136 = buf130; del buf130  # reuse
    buf137 = empty((32, ), device='cpu', dtype=torch.float32)
    buf138 = empty((32, ), device='cpu', dtype=torch.float32)
    buf139 = buf134; del buf134  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_19(c_void_p(buf139.data_ptr()), c_void_p(relu_268.data_ptr()), c_void_p(convolution_305.data_ptr()), c_void_p(unsqueeze_1561.data_ptr()), c_void_p(squeeze_916.data_ptr()), c_void_p(primals_917.data_ptr()), c_void_p(buf136.data_ptr()), c_void_p(buf137.data_ptr()), c_void_p(buf138.data_ptr()))
    del buf137
    del convolution_305
    del primals_917
    del relu_268
    del squeeze_916
    del unsqueeze_1561
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf140 = aten.convolution_backward(buf139, relu_260, primals_916, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf139
    del primals_916
    buf141 = buf140[0]
    buf142 = buf140[1]
    del buf140
    buf143 = empty((144, ), device='cpu', dtype=torch.float32)
    buf144 = empty((144, ), device='cpu', dtype=torch.float32)
    buf150 = empty((144, ), device='cpu', dtype=torch.float32)
    buf163 = empty((144, ), device='cpu', dtype=torch.float32)
    buf145 = empty_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    buf151 = empty_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    buf164 = empty_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    buf146 = buf144; del buf144  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_20(c_void_p(buf146.data_ptr()), c_void_p(relu_267.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(convolution_304.data_ptr()), c_void_p(unsqueeze_1573.data_ptr()), c_void_p(convolution_303.data_ptr()), c_void_p(unsqueeze_1585.data_ptr()), c_void_p(convolution_301.data_ptr()), c_void_p(unsqueeze_1609.data_ptr()), c_void_p(squeeze_913.data_ptr()), c_void_p(primals_914.data_ptr()), c_void_p(squeeze_910.data_ptr()), c_void_p(primals_911.data_ptr()), c_void_p(squeeze_904.data_ptr()), c_void_p(primals_905.data_ptr()), c_void_p(buf143.data_ptr()), c_void_p(buf150.data_ptr()), c_void_p(buf163.data_ptr()), c_void_p(buf145.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf164.data_ptr()))
    del convolution_301
    del convolution_303
    del convolution_304
    del primals_905
    del primals_911
    del primals_914
    del squeeze_913
    del unsqueeze_1573
    del unsqueeze_1585
    del unsqueeze_1609
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf147 = aten.convolution_backward(buf145, relu_251, primals_913, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf145
    del primals_913
    buf148 = buf147[0]
    buf149 = buf147[1]
    del buf147
    buf152 = buf150; del buf150  # reuse
    cpp_fused_native_batch_norm_backward_21(c_void_p(buf152.data_ptr()), c_void_p(squeeze_910.data_ptr()))
    del squeeze_910
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf153 = aten.convolution_backward(buf151, relu_266, primals_910, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf151
    del primals_910
    buf154 = buf153[0]
    buf155 = buf153[1]
    del buf153
    buf156 = empty((36, ), device='cpu', dtype=torch.float32)
    buf157 = empty((36, ), device='cpu', dtype=torch.float32)
    buf158 = empty((36, ), device='cpu', dtype=torch.float32)
    buf159 = buf154; del buf154  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_22(c_void_p(buf159.data_ptr()), c_void_p(relu_266.data_ptr()), c_void_p(convolution_302.data_ptr()), c_void_p(unsqueeze_1597.data_ptr()), c_void_p(squeeze_907.data_ptr()), c_void_p(primals_908.data_ptr()), c_void_p(buf156.data_ptr()), c_void_p(buf157.data_ptr()), c_void_p(buf158.data_ptr()))
    del convolution_302
    del primals_908
    del relu_266
    del squeeze_907
    del unsqueeze_1597
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf160 = aten.convolution_backward(buf159, relu_243, primals_907, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_907
    buf161 = buf160[0]
    buf162 = buf160[1]
    del buf160
    buf165 = buf163; del buf163  # reuse
    cpp_fused_native_batch_norm_backward_23(c_void_p(buf165.data_ptr()), c_void_p(squeeze_904.data_ptr()))
    del squeeze_904
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf166 = aten.convolution_backward(buf164, relu_265, primals_904, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_904
    buf167 = buf166[0]
    buf168 = buf166[1]
    del buf166
    buf169 = empty((18, ), device='cpu', dtype=torch.float32)
    buf170 = empty((18, ), device='cpu', dtype=torch.float32)
    buf171 = empty((18, ), device='cpu', dtype=torch.float32)
    buf172 = buf167; del buf167  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_24(c_void_p(buf172.data_ptr()), c_void_p(relu_265.data_ptr()), c_void_p(convolution_300.data_ptr()), c_void_p(unsqueeze_1621.data_ptr()), c_void_p(squeeze_901.data_ptr()), c_void_p(primals_902.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(buf170.data_ptr()), c_void_p(buf171.data_ptr()))
    del convolution_300
    del primals_902
    del relu_265
    del squeeze_901
    del unsqueeze_1621
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf173 = aten.convolution_backward(buf172, relu_264, primals_901, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_901
    buf174 = buf173[0]
    buf175 = buf173[1]
    del buf173
    buf176 = buf170; del buf170  # reuse
    buf177 = empty((18, ), device='cpu', dtype=torch.float32)
    buf178 = empty((18, ), device='cpu', dtype=torch.float32)
    buf179 = buf174; del buf174  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_25(c_void_p(buf179.data_ptr()), c_void_p(relu_264.data_ptr()), c_void_p(convolution_299.data_ptr()), c_void_p(unsqueeze_1633.data_ptr()), c_void_p(squeeze_898.data_ptr()), c_void_p(primals_899.data_ptr()), c_void_p(buf176.data_ptr()), c_void_p(buf177.data_ptr()), c_void_p(buf178.data_ptr()))
    del convolution_299
    del primals_899
    del relu_264
    del squeeze_898
    del unsqueeze_1633
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf180 = aten.convolution_backward(buf179, relu_235, primals_898, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_898
    buf181 = buf180[0]
    buf182 = buf180[1]
    del buf180
    buf183 = reinterpret_tensor(buf172, (8, 72, 7, 7), (3528, 49, 7, 1), 0); del buf172  # reuse
    buf184 = buf59; del buf59  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_26(c_void_p(buf184.data_ptr()), c_void_p(relu_263.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(buf183.data_ptr()))
    del relu_263
    aten.index_put_(buf183, [None, None, unsqueeze_830, convert_element_type_110], buf184, True)
    buf187 = empty((72, ), device='cpu', dtype=torch.float32)
    buf188 = empty((72, ), device='cpu', dtype=torch.float32)
    buf189 = empty((72, ), device='cpu', dtype=torch.float32)
    buf186 = empty((8, 72, 7, 7), device='cpu', dtype=torch.float32)
    buf190 = buf186; del buf186  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_27(c_void_p(buf190.data_ptr()), c_void_p(buf183.data_ptr()), c_void_p(convolution_298.data_ptr()), c_void_p(unsqueeze_1645.data_ptr()), c_void_p(squeeze_895.data_ptr()), c_void_p(primals_896.data_ptr()), c_void_p(buf187.data_ptr()), c_void_p(buf188.data_ptr()), c_void_p(buf189.data_ptr()))
    del convolution_298
    del primals_896
    del squeeze_895
    del unsqueeze_1645
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf191 = aten.convolution_backward(buf190, relu_259, primals_895, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_895
    buf192 = buf191[0]
    buf193 = buf191[1]
    del buf191
    buf194 = buf188; del buf188  # reuse
    buf195 = empty((72, ), device='cpu', dtype=torch.float32)
    buf201 = empty((72, ), device='cpu', dtype=torch.float32)
    buf196 = empty((72, ), device='cpu', dtype=torch.float32)
    buf197 = buf79; del buf79  # reuse
    buf203 = reinterpret_tensor(buf179, (8, 72, 14, 14), (14112, 1, 1008, 72), 0); del buf179  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_28(c_void_p(buf184.data_ptr()), c_void_p(convolution_297.data_ptr()), c_void_p(unsqueeze_1657.data_ptr()), c_void_p(convolution_296.data_ptr()), c_void_p(unsqueeze_1669.data_ptr()), c_void_p(squeeze_892.data_ptr()), c_void_p(primals_893.data_ptr()), c_void_p(squeeze_889.data_ptr()), c_void_p(primals_890.data_ptr()), c_void_p(buf194.data_ptr()), c_void_p(buf195.data_ptr()), c_void_p(buf201.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(buf197.data_ptr()), c_void_p(buf203.data_ptr()))
    del convolution_296
    del convolution_297
    del primals_890
    del primals_893
    del squeeze_892
    del unsqueeze_1657
    del unsqueeze_1669
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf198 = aten.convolution_backward(buf197, relu_243, primals_892, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf197
    del primals_892
    buf199 = buf198[0]
    buf200 = buf198[1]
    del buf198
    buf202 = buf201; del buf201  # reuse
    cpp_fused_native_batch_norm_backward_29(c_void_p(buf202.data_ptr()), c_void_p(squeeze_889.data_ptr()))
    del squeeze_889
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf204 = aten.convolution_backward(buf203, relu_262, primals_889, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_889
    buf205 = buf204[0]
    buf206 = buf204[1]
    del buf204
    buf207 = buf177; del buf177  # reuse
    buf208 = empty((18, ), device='cpu', dtype=torch.float32)
    buf209 = empty((18, ), device='cpu', dtype=torch.float32)
    buf210 = buf205; del buf205  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_30(c_void_p(buf210.data_ptr()), c_void_p(relu_262.data_ptr()), c_void_p(convolution_295.data_ptr()), c_void_p(unsqueeze_1681.data_ptr()), c_void_p(squeeze_886.data_ptr()), c_void_p(primals_887.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(buf208.data_ptr()), c_void_p(buf209.data_ptr()))
    del convolution_295
    del primals_887
    del relu_262
    del squeeze_886
    del unsqueeze_1681
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf211 = aten.convolution_backward(buf210, relu_235, primals_886, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_886
    buf212 = buf211[0]
    buf213 = buf211[1]
    del buf211
    buf214 = empty((8, 36, 7, 7), device='cpu', dtype=torch.float32)
    buf215 = buf114; del buf114  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_31(c_void_p(buf215.data_ptr()), c_void_p(relu_261.data_ptr()), c_void_p(buf94.data_ptr()), c_void_p(buf214.data_ptr()))
    del relu_261
    aten.index_put_(buf214, [None, None, unsqueeze_813, convert_element_type_104], buf215, True)
    buf218 = buf157; del buf157  # reuse
    buf219 = empty((36, ), device='cpu', dtype=torch.float32)
    buf220 = empty((36, ), device='cpu', dtype=torch.float32)
    buf217 = empty((8, 36, 7, 7), device='cpu', dtype=torch.float32)
    buf221 = buf217; del buf217  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_32(c_void_p(buf221.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(convolution_294.data_ptr()), c_void_p(unsqueeze_1693.data_ptr()), c_void_p(squeeze_883.data_ptr()), c_void_p(primals_884.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(buf219.data_ptr()), c_void_p(buf220.data_ptr()))
    del convolution_294
    del primals_884
    del squeeze_883
    del unsqueeze_1693
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf222 = aten.convolution_backward(buf221, relu_259, primals_883, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_883
    buf223 = buf222[0]
    buf224 = buf222[1]
    del buf222
    buf225 = reinterpret_tensor(buf164, (8, 36, 14, 14), (7056, 196, 14, 1), 0); del buf164  # reuse
    cpp_fused__unsafe_index_put_new_zeros_33(c_void_p(buf225.data_ptr()))
    aten.index_put_(buf225, [None, None, unsqueeze_259, convert_element_type_20], buf215, True)
    buf228 = buf219; del buf219  # reuse
    buf229 = empty((36, ), device='cpu', dtype=torch.float32)
    buf230 = empty((36, ), device='cpu', dtype=torch.float32)
    buf227 = reinterpret_tensor(buf159, (8, 36, 14, 14), (7056, 196, 14, 1), 0); del buf159  # reuse
    buf231 = buf227; del buf227  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_34(c_void_p(buf231.data_ptr()), c_void_p(buf225.data_ptr()), c_void_p(convolution_293.data_ptr()), c_void_p(unsqueeze_1705.data_ptr()), c_void_p(squeeze_880.data_ptr()), c_void_p(primals_881.data_ptr()), c_void_p(buf228.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf230.data_ptr()))
    del buf225
    del convolution_293
    del primals_881
    del squeeze_880
    del unsqueeze_1705
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf232 = aten.convolution_backward(buf231, relu_251, primals_880, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_880
    buf233 = buf232[0]
    buf234 = buf232[1]
    del buf232
    buf235 = buf229; del buf229  # reuse
    buf236 = empty((36, ), device='cpu', dtype=torch.float32)
    buf237 = empty((36, ), device='cpu', dtype=torch.float32)
    buf238 = buf94; del buf94  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_35(c_void_p(buf215.data_ptr()), c_void_p(convolution_292.data_ptr()), c_void_p(unsqueeze_1717.data_ptr()), c_void_p(squeeze_877.data_ptr()), c_void_p(primals_878.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(buf236.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(buf238.data_ptr()))
    del convolution_292
    del primals_878
    del squeeze_877
    del unsqueeze_1717
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf239 = aten.convolution_backward(buf238, relu_235, primals_877, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_877
    buf240 = buf239[0]
    buf241 = buf239[1]
    del buf239
    buf242 = empty((8, 18, 7, 7), device='cpu', dtype=torch.float32)
    buf243 = buf121; del buf121  # reuse
    buf447 = buf181; del buf181  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_36(c_void_p(buf243.data_ptr()), c_void_p(buf447.data_ptr()), c_void_p(relu_260.data_ptr()), c_void_p(buf141.data_ptr()), c_void_p(relu_235.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf240.data_ptr()), c_void_p(buf242.data_ptr()))
    del buf141
    del buf212
    del buf240
    del relu_235
    del relu_260
    aten.index_put_(buf242, [None, None, unsqueeze_799, convert_element_type_92], buf243, True)
    buf246 = buf208; del buf208  # reuse
    buf247 = empty((18, ), device='cpu', dtype=torch.float32)
    buf248 = empty((18, ), device='cpu', dtype=torch.float32)
    buf245 = empty((8, 18, 7, 7), device='cpu', dtype=torch.float32)
    buf249 = buf245; del buf245  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_37(c_void_p(buf249.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(convolution_291.data_ptr()), c_void_p(unsqueeze_1729.data_ptr()), c_void_p(squeeze_874.data_ptr()), c_void_p(primals_875.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(buf247.data_ptr()), c_void_p(buf248.data_ptr()))
    del convolution_291
    del primals_875
    del squeeze_874
    del unsqueeze_1729
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf250 = aten.convolution_backward(buf249, relu_259, primals_874, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_874
    buf251 = buf250[0]
    buf252 = buf250[1]
    del buf250
    buf253 = reinterpret_tensor(buf190, (8, 18, 14, 14), (3528, 196, 14, 1), 0); del buf190  # reuse
    cpp_fused__unsafe_index_put_new_zeros_38(c_void_p(buf253.data_ptr()))
    aten.index_put_(buf253, [None, None, unsqueeze_250, convert_element_type_14], buf243, True)
    buf256 = buf247; del buf247  # reuse
    buf257 = empty((18, ), device='cpu', dtype=torch.float32)
    buf258 = empty((18, ), device='cpu', dtype=torch.float32)
    buf255 = reinterpret_tensor(buf183, (8, 18, 14, 14), (3528, 196, 14, 1), 0); del buf183  # reuse
    buf259 = buf255; del buf255  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_39(c_void_p(buf259.data_ptr()), c_void_p(buf253.data_ptr()), c_void_p(convolution_290.data_ptr()), c_void_p(unsqueeze_1741.data_ptr()), c_void_p(squeeze_871.data_ptr()), c_void_p(primals_872.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(buf257.data_ptr()), c_void_p(buf258.data_ptr()))
    del buf253
    del convolution_290
    del primals_872
    del squeeze_871
    del unsqueeze_1741
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf260 = aten.convolution_backward(buf259, relu_251, primals_871, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_871
    buf261 = buf260[0]
    buf262 = buf260[1]
    del buf260
    buf263 = reinterpret_tensor(buf210, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf210  # reuse
    cpp_fused__unsafe_index_put_new_zeros_40(c_void_p(buf263.data_ptr()))
    aten.index_put_(buf263, [None, None, unsqueeze_136, convert_element_type_2], buf243, True)
    buf266 = buf257; del buf257  # reuse
    buf267 = empty((18, ), device='cpu', dtype=torch.float32)
    buf268 = empty((18, ), device='cpu', dtype=torch.float32)
    buf265 = reinterpret_tensor(buf203, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf203  # reuse
    buf269 = buf265; del buf265  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_41(c_void_p(buf269.data_ptr()), c_void_p(buf263.data_ptr()), c_void_p(convolution_289.data_ptr()), c_void_p(unsqueeze_1753.data_ptr()), c_void_p(squeeze_868.data_ptr()), c_void_p(primals_869.data_ptr()), c_void_p(buf266.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(buf268.data_ptr()))
    del buf263
    del convolution_289
    del primals_869
    del squeeze_868
    del unsqueeze_1753
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf270 = aten.convolution_backward(buf269, relu_243, primals_868, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_868
    buf271 = buf270[0]
    buf272 = buf270[1]
    del buf270
    buf273 = buf192; del buf192  # reuse
    buf274 = empty((144, ), device='cpu', dtype=torch.float32)
    buf275 = empty((144, ), device='cpu', dtype=torch.float32)
    buf276 = empty((144, ), device='cpu', dtype=torch.float32)
    buf277 = reinterpret_tensor(buf231, (8, 144, 7, 7), (7056, 1, 1008, 144), 0); del buf231  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_42(c_void_p(buf273.data_ptr()), c_void_p(relu_259.data_ptr()), c_void_p(relu_267.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(buf223.data_ptr()), c_void_p(buf251.data_ptr()), c_void_p(convolution_288.data_ptr()), c_void_p(unsqueeze_1765.data_ptr()), c_void_p(squeeze_865.data_ptr()), c_void_p(primals_866.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(buf275.data_ptr()), c_void_p(buf276.data_ptr()), c_void_p(buf277.data_ptr()))
    del buf223
    del buf24
    del buf251
    del buf44
    del convolution_288
    del primals_866
    del relu_259
    del relu_267
    del squeeze_865
    del unsqueeze_1765
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf278 = aten.convolution_backward(buf277, relu_258, primals_865, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf277
    del primals_865
    buf279 = buf278[0]
    buf280 = buf278[1]
    del buf278
    buf281 = buf275; del buf275  # reuse
    buf282 = empty((144, ), device='cpu', dtype=torch.float32)
    buf283 = empty((144, ), device='cpu', dtype=torch.float32)
    buf284 = buf279; del buf279  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_43(c_void_p(buf284.data_ptr()), c_void_p(relu_258.data_ptr()), c_void_p(convolution_287.data_ptr()), c_void_p(unsqueeze_1777.data_ptr()), c_void_p(squeeze_862.data_ptr()), c_void_p(primals_863.data_ptr()), c_void_p(buf281.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(buf283.data_ptr()))
    del convolution_287
    del primals_863
    del relu_258
    del squeeze_862
    del unsqueeze_1777
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf285 = aten.convolution_backward(buf284, relu_257, primals_862, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_862
    buf286 = buf285[0]
    buf287 = buf285[1]
    del buf285
    buf288 = buf282; del buf282  # reuse
    buf289 = empty((144, ), device='cpu', dtype=torch.float32)
    buf290 = buf284; del buf284  # reuse
    buf291 = buf289; del buf289  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_44(c_void_p(buf291.data_ptr()), c_void_p(relu_257.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf286.data_ptr()), c_void_p(convolution_286.data_ptr()), c_void_p(unsqueeze_1789.data_ptr()), c_void_p(squeeze_859.data_ptr()), c_void_p(primals_860.data_ptr()), c_void_p(buf288.data_ptr()), c_void_p(buf290.data_ptr()))
    del convolution_286
    del primals_860
    del squeeze_859
    del unsqueeze_1789
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf292 = aten.convolution_backward(buf290, relu_256, primals_859, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf290
    del primals_859
    buf293 = buf292[0]
    buf294 = buf292[1]
    del buf292
    buf295 = empty((144, ), device='cpu', dtype=torch.float32)
    buf296 = empty((144, ), device='cpu', dtype=torch.float32)
    buf297 = empty((144, ), device='cpu', dtype=torch.float32)
    buf298 = buf293; del buf293  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_45(c_void_p(buf298.data_ptr()), c_void_p(relu_256.data_ptr()), c_void_p(convolution_285.data_ptr()), c_void_p(unsqueeze_1801.data_ptr()), c_void_p(squeeze_856.data_ptr()), c_void_p(primals_857.data_ptr()), c_void_p(buf295.data_ptr()), c_void_p(buf296.data_ptr()), c_void_p(buf297.data_ptr()))
    del convolution_285
    del primals_857
    del relu_256
    del squeeze_856
    del unsqueeze_1801
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf299 = aten.convolution_backward(buf298, relu_255, primals_856, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_856
    buf300 = buf299[0]
    buf301 = buf299[1]
    del buf299
    buf302 = buf273; del buf273  # reuse
    buf303 = buf296; del buf296  # reuse
    buf304 = empty((144, ), device='cpu', dtype=torch.float32)
    buf305 = empty((144, ), device='cpu', dtype=torch.float32)
    buf306 = buf298; del buf298  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_46(c_void_p(buf302.data_ptr()), c_void_p(relu_255.data_ptr()), c_void_p(relu_257.data_ptr()), c_void_p(buf286.data_ptr()), c_void_p(buf300.data_ptr()), c_void_p(convolution_284.data_ptr()), c_void_p(unsqueeze_1813.data_ptr()), c_void_p(squeeze_853.data_ptr()), c_void_p(primals_854.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf306.data_ptr()))
    del buf286
    del buf300
    del convolution_284
    del primals_854
    del relu_255
    del relu_257
    del squeeze_853
    del unsqueeze_1813
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf307 = aten.convolution_backward(buf306, relu_254, primals_853, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_853
    buf308 = buf307[0]
    buf309 = buf307[1]
    del buf307
    buf310 = buf304; del buf304  # reuse
    buf311 = empty((144, ), device='cpu', dtype=torch.float32)
    buf312 = empty((144, ), device='cpu', dtype=torch.float32)
    buf313 = buf308; del buf308  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47(c_void_p(buf313.data_ptr()), c_void_p(relu_254.data_ptr()), c_void_p(convolution_283.data_ptr()), c_void_p(unsqueeze_1825.data_ptr()), c_void_p(squeeze_850.data_ptr()), c_void_p(primals_851.data_ptr()), c_void_p(buf310.data_ptr()), c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()))
    del convolution_283
    del primals_851
    del relu_254
    del squeeze_850
    del unsqueeze_1825
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf314 = aten.convolution_backward(buf313, relu_253, primals_850, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_850
    buf315 = buf314[0]
    buf316 = buf314[1]
    del buf314
    buf317 = buf311; del buf311  # reuse
    buf318 = empty((144, ), device='cpu', dtype=torch.float32)
    buf319 = buf313; del buf313  # reuse
    buf320 = buf318; del buf318  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_48(c_void_p(buf320.data_ptr()), c_void_p(relu_253.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(convolution_282.data_ptr()), c_void_p(unsqueeze_1837.data_ptr()), c_void_p(squeeze_847.data_ptr()), c_void_p(primals_848.data_ptr()), c_void_p(buf317.data_ptr()), c_void_p(buf319.data_ptr()))
    del convolution_282
    del primals_848
    del squeeze_847
    del unsqueeze_1837
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf321 = aten.convolution_backward(buf319, relu_252, primals_847, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_847
    buf322 = buf321[0]
    buf323 = buf321[1]
    del buf321
    buf324 = empty((144, ), device='cpu', dtype=torch.float32)
    buf325 = empty((144, ), device='cpu', dtype=torch.float32)
    buf326 = empty((144, ), device='cpu', dtype=torch.float32)
    buf327 = buf322; del buf322  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_49(c_void_p(buf327.data_ptr()), c_void_p(relu_252.data_ptr()), c_void_p(convolution_281.data_ptr()), c_void_p(unsqueeze_1849.data_ptr()), c_void_p(squeeze_844.data_ptr()), c_void_p(primals_845.data_ptr()), c_void_p(buf324.data_ptr()), c_void_p(buf325.data_ptr()), c_void_p(buf326.data_ptr()))
    del convolution_281
    del primals_845
    del relu_252
    del squeeze_844
    del unsqueeze_1849
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf328 = aten.convolution_backward(buf327, relu_227, primals_844, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_844
    buf329 = buf328[0]
    buf330 = buf328[1]
    del buf328
    buf331 = buf148; del buf148  # reuse
    buf332 = buf195; del buf195  # reuse
    buf333 = empty((72, ), device='cpu', dtype=torch.float32)
    buf334 = empty((72, ), device='cpu', dtype=torch.float32)
    buf335 = reinterpret_tensor(buf269, (8, 72, 14, 14), (14112, 1, 1008, 72), 0); del buf269  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_50(c_void_p(buf331.data_ptr()), c_void_p(relu_251.data_ptr()), c_void_p(buf184.data_ptr()), c_void_p(buf233.data_ptr()), c_void_p(buf261.data_ptr()), c_void_p(convolution_280.data_ptr()), c_void_p(unsqueeze_1861.data_ptr()), c_void_p(squeeze_841.data_ptr()), c_void_p(primals_842.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(buf333.data_ptr()), c_void_p(buf334.data_ptr()), c_void_p(buf335.data_ptr()))
    del buf184
    del buf233
    del buf261
    del convolution_280
    del primals_842
    del relu_251
    del squeeze_841
    del unsqueeze_1861
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf336 = aten.convolution_backward(buf335, relu_250, primals_841, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf335
    del primals_841
    buf337 = buf336[0]
    buf338 = buf336[1]
    del buf336
    buf339 = buf333; del buf333  # reuse
    buf340 = empty((72, ), device='cpu', dtype=torch.float32)
    buf341 = empty((72, ), device='cpu', dtype=torch.float32)
    buf342 = buf337; del buf337  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_51(c_void_p(buf342.data_ptr()), c_void_p(relu_250.data_ptr()), c_void_p(convolution_279.data_ptr()), c_void_p(unsqueeze_1873.data_ptr()), c_void_p(squeeze_838.data_ptr()), c_void_p(primals_839.data_ptr()), c_void_p(buf339.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(buf341.data_ptr()))
    del convolution_279
    del primals_839
    del relu_250
    del squeeze_838
    del unsqueeze_1873
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf343 = aten.convolution_backward(buf342, relu_249, primals_838, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_838
    buf344 = buf343[0]
    buf345 = buf343[1]
    del buf343
    buf346 = buf340; del buf340  # reuse
    buf347 = empty((72, ), device='cpu', dtype=torch.float32)
    buf348 = buf342; del buf342  # reuse
    buf349 = buf347; del buf347  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_52(c_void_p(buf349.data_ptr()), c_void_p(relu_249.data_ptr()), c_void_p(buf331.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(convolution_278.data_ptr()), c_void_p(unsqueeze_1885.data_ptr()), c_void_p(squeeze_835.data_ptr()), c_void_p(primals_836.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(buf348.data_ptr()))
    del convolution_278
    del primals_836
    del squeeze_835
    del unsqueeze_1885
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf350 = aten.convolution_backward(buf348, relu_248, primals_835, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf348
    del primals_835
    buf351 = buf350[0]
    buf352 = buf350[1]
    del buf350
    buf353 = empty((72, ), device='cpu', dtype=torch.float32)
    buf354 = empty((72, ), device='cpu', dtype=torch.float32)
    buf355 = empty((72, ), device='cpu', dtype=torch.float32)
    buf356 = buf351; del buf351  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_53(c_void_p(buf356.data_ptr()), c_void_p(relu_248.data_ptr()), c_void_p(convolution_277.data_ptr()), c_void_p(unsqueeze_1897.data_ptr()), c_void_p(squeeze_832.data_ptr()), c_void_p(primals_833.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(buf354.data_ptr()), c_void_p(buf355.data_ptr()))
    del convolution_277
    del primals_833
    del relu_248
    del squeeze_832
    del unsqueeze_1897
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf357 = aten.convolution_backward(buf356, relu_247, primals_832, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_832
    buf358 = buf357[0]
    buf359 = buf357[1]
    del buf357
    buf360 = buf331; del buf331  # reuse
    buf361 = buf354; del buf354  # reuse
    buf362 = empty((72, ), device='cpu', dtype=torch.float32)
    buf363 = empty((72, ), device='cpu', dtype=torch.float32)
    buf364 = buf356; del buf356  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_54(c_void_p(buf360.data_ptr()), c_void_p(relu_247.data_ptr()), c_void_p(relu_249.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(buf358.data_ptr()), c_void_p(convolution_276.data_ptr()), c_void_p(unsqueeze_1909.data_ptr()), c_void_p(squeeze_829.data_ptr()), c_void_p(primals_830.data_ptr()), c_void_p(buf361.data_ptr()), c_void_p(buf362.data_ptr()), c_void_p(buf363.data_ptr()), c_void_p(buf364.data_ptr()))
    del buf344
    del buf358
    del convolution_276
    del primals_830
    del relu_247
    del relu_249
    del squeeze_829
    del unsqueeze_1909
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf365 = aten.convolution_backward(buf364, relu_246, primals_829, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf364
    del primals_829
    buf366 = buf365[0]
    buf367 = buf365[1]
    del buf365
    buf368 = buf362; del buf362  # reuse
    buf369 = empty((72, ), device='cpu', dtype=torch.float32)
    buf370 = empty((72, ), device='cpu', dtype=torch.float32)
    buf371 = buf366; del buf366  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_55(c_void_p(buf371.data_ptr()), c_void_p(relu_246.data_ptr()), c_void_p(convolution_275.data_ptr()), c_void_p(unsqueeze_1921.data_ptr()), c_void_p(squeeze_826.data_ptr()), c_void_p(primals_827.data_ptr()), c_void_p(buf368.data_ptr()), c_void_p(buf369.data_ptr()), c_void_p(buf370.data_ptr()))
    del convolution_275
    del primals_827
    del relu_246
    del squeeze_826
    del unsqueeze_1921
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf372 = aten.convolution_backward(buf371, relu_245, primals_826, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_826
    buf373 = buf372[0]
    buf374 = buf372[1]
    del buf372
    buf375 = buf369; del buf369  # reuse
    buf376 = empty((72, ), device='cpu', dtype=torch.float32)
    buf377 = buf371; del buf371  # reuse
    buf378 = buf376; del buf376  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_56(c_void_p(buf378.data_ptr()), c_void_p(relu_245.data_ptr()), c_void_p(buf360.data_ptr()), c_void_p(buf373.data_ptr()), c_void_p(convolution_274.data_ptr()), c_void_p(unsqueeze_1933.data_ptr()), c_void_p(squeeze_823.data_ptr()), c_void_p(primals_824.data_ptr()), c_void_p(buf375.data_ptr()), c_void_p(buf377.data_ptr()))
    del convolution_274
    del primals_824
    del squeeze_823
    del unsqueeze_1933
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf379 = aten.convolution_backward(buf377, relu_244, primals_823, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf377
    del primals_823
    buf380 = buf379[0]
    buf381 = buf379[1]
    del buf379
    buf382 = empty((72, ), device='cpu', dtype=torch.float32)
    buf383 = empty((72, ), device='cpu', dtype=torch.float32)
    buf384 = empty((72, ), device='cpu', dtype=torch.float32)
    buf385 = buf380; del buf380  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_57(c_void_p(buf385.data_ptr()), c_void_p(relu_244.data_ptr()), c_void_p(convolution_273.data_ptr()), c_void_p(unsqueeze_1945.data_ptr()), c_void_p(squeeze_820.data_ptr()), c_void_p(primals_821.data_ptr()), c_void_p(buf382.data_ptr()), c_void_p(buf383.data_ptr()), c_void_p(buf384.data_ptr()))
    del convolution_273
    del primals_821
    del relu_244
    del squeeze_820
    del unsqueeze_1945
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf386 = aten.convolution_backward(buf385, relu_223, primals_820, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf385
    del primals_820
    buf387 = buf386[0]
    buf388 = buf386[1]
    del buf386
    buf389 = buf161; del buf161  # reuse
    buf390 = buf236; del buf236  # reuse
    buf391 = empty((36, ), device='cpu', dtype=torch.float32)
    buf392 = empty((36, ), device='cpu', dtype=torch.float32)
    buf393 = buf238; del buf238  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_58(c_void_p(buf389.data_ptr()), c_void_p(relu_243.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf215.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(convolution_272.data_ptr()), c_void_p(unsqueeze_1957.data_ptr()), c_void_p(squeeze_817.data_ptr()), c_void_p(primals_818.data_ptr()), c_void_p(buf390.data_ptr()), c_void_p(buf391.data_ptr()), c_void_p(buf392.data_ptr()), c_void_p(buf393.data_ptr()))
    del buf199
    del buf215
    del buf271
    del convolution_272
    del primals_818
    del relu_243
    del squeeze_817
    del unsqueeze_1957
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf394 = aten.convolution_backward(buf393, relu_242, primals_817, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf393
    del primals_817
    buf395 = buf394[0]
    buf396 = buf394[1]
    del buf394
    buf397 = buf391; del buf391  # reuse
    buf398 = empty((36, ), device='cpu', dtype=torch.float32)
    buf399 = empty((36, ), device='cpu', dtype=torch.float32)
    buf400 = buf395; del buf395  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_59(c_void_p(buf400.data_ptr()), c_void_p(relu_242.data_ptr()), c_void_p(convolution_271.data_ptr()), c_void_p(unsqueeze_1969.data_ptr()), c_void_p(squeeze_814.data_ptr()), c_void_p(primals_815.data_ptr()), c_void_p(buf397.data_ptr()), c_void_p(buf398.data_ptr()), c_void_p(buf399.data_ptr()))
    del convolution_271
    del primals_815
    del relu_242
    del squeeze_814
    del unsqueeze_1969
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf401 = aten.convolution_backward(buf400, relu_241, primals_814, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_814
    buf402 = buf401[0]
    buf403 = buf401[1]
    del buf401
    buf404 = buf398; del buf398  # reuse
    buf405 = empty((36, ), device='cpu', dtype=torch.float32)
    buf406 = buf400; del buf400  # reuse
    buf407 = buf405; del buf405  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_60(c_void_p(buf407.data_ptr()), c_void_p(relu_241.data_ptr()), c_void_p(buf389.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(convolution_270.data_ptr()), c_void_p(unsqueeze_1981.data_ptr()), c_void_p(squeeze_811.data_ptr()), c_void_p(primals_812.data_ptr()), c_void_p(buf404.data_ptr()), c_void_p(buf406.data_ptr()))
    del convolution_270
    del primals_812
    del squeeze_811
    del unsqueeze_1981
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf408 = aten.convolution_backward(buf406, relu_240, primals_811, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf406
    del primals_811
    buf409 = buf408[0]
    buf410 = buf408[1]
    del buf408
    buf411 = empty((36, ), device='cpu', dtype=torch.float32)
    buf412 = empty((36, ), device='cpu', dtype=torch.float32)
    buf413 = empty((36, ), device='cpu', dtype=torch.float32)
    buf414 = buf409; del buf409  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_61(c_void_p(buf414.data_ptr()), c_void_p(relu_240.data_ptr()), c_void_p(convolution_269.data_ptr()), c_void_p(unsqueeze_1993.data_ptr()), c_void_p(squeeze_808.data_ptr()), c_void_p(primals_809.data_ptr()), c_void_p(buf411.data_ptr()), c_void_p(buf412.data_ptr()), c_void_p(buf413.data_ptr()))
    del convolution_269
    del primals_809
    del relu_240
    del squeeze_808
    del unsqueeze_1993
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf415 = aten.convolution_backward(buf414, relu_239, primals_808, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_808
    buf416 = buf415[0]
    buf417 = buf415[1]
    del buf415
    buf418 = buf389; del buf389  # reuse
    buf419 = buf412; del buf412  # reuse
    buf420 = empty((36, ), device='cpu', dtype=torch.float32)
    buf421 = empty((36, ), device='cpu', dtype=torch.float32)
    buf422 = buf414; del buf414  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_62(c_void_p(buf418.data_ptr()), c_void_p(relu_239.data_ptr()), c_void_p(relu_241.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(buf416.data_ptr()), c_void_p(convolution_268.data_ptr()), c_void_p(unsqueeze_2005.data_ptr()), c_void_p(squeeze_805.data_ptr()), c_void_p(primals_806.data_ptr()), c_void_p(buf419.data_ptr()), c_void_p(buf420.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf422.data_ptr()))
    del buf402
    del buf416
    del convolution_268
    del primals_806
    del relu_239
    del relu_241
    del squeeze_805
    del unsqueeze_2005
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf423 = aten.convolution_backward(buf422, relu_238, primals_805, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf422
    del primals_805
    buf424 = buf423[0]
    buf425 = buf423[1]
    del buf423
    buf426 = buf420; del buf420  # reuse
    buf427 = empty((36, ), device='cpu', dtype=torch.float32)
    buf428 = empty((36, ), device='cpu', dtype=torch.float32)
    buf429 = buf424; del buf424  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_63(c_void_p(buf429.data_ptr()), c_void_p(relu_238.data_ptr()), c_void_p(convolution_267.data_ptr()), c_void_p(unsqueeze_2017.data_ptr()), c_void_p(squeeze_802.data_ptr()), c_void_p(primals_803.data_ptr()), c_void_p(buf426.data_ptr()), c_void_p(buf427.data_ptr()), c_void_p(buf428.data_ptr()))
    del convolution_267
    del primals_803
    del relu_238
    del squeeze_802
    del unsqueeze_2017
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf430 = aten.convolution_backward(buf429, relu_237, primals_802, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_802
    buf431 = buf430[0]
    buf432 = buf430[1]
    del buf430
    buf433 = buf427; del buf427  # reuse
    buf434 = empty((36, ), device='cpu', dtype=torch.float32)
    buf435 = buf429; del buf429  # reuse
    buf436 = buf434; del buf434  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_64(c_void_p(buf436.data_ptr()), c_void_p(relu_237.data_ptr()), c_void_p(buf418.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(convolution_266.data_ptr()), c_void_p(unsqueeze_2029.data_ptr()), c_void_p(squeeze_799.data_ptr()), c_void_p(primals_800.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf435.data_ptr()))
    del convolution_266
    del primals_800
    del squeeze_799
    del unsqueeze_2029
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf437 = aten.convolution_backward(buf435, relu_236, primals_799, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf435
    del primals_799
    buf438 = buf437[0]
    buf439 = buf437[1]
    del buf437
    buf440 = empty((36, ), device='cpu', dtype=torch.float32)
    buf441 = empty((36, ), device='cpu', dtype=torch.float32)
    buf442 = empty((36, ), device='cpu', dtype=torch.float32)
    buf443 = buf438; del buf438  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_65(c_void_p(buf443.data_ptr()), c_void_p(relu_236.data_ptr()), c_void_p(convolution_265.data_ptr()), c_void_p(unsqueeze_2041.data_ptr()), c_void_p(squeeze_796.data_ptr()), c_void_p(primals_797.data_ptr()), c_void_p(buf440.data_ptr()), c_void_p(buf441.data_ptr()), c_void_p(buf442.data_ptr()))
    del convolution_265
    del primals_797
    del relu_236
    del squeeze_796
    del unsqueeze_2041
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf444 = aten.convolution_backward(buf443, relu_221, primals_796, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf443
    del primals_796
    buf445 = buf444[0]
    buf446 = buf444[1]
    del buf444
    buf448 = buf267; del buf267  # reuse
    buf449 = empty((18, ), device='cpu', dtype=torch.float32)
    buf450 = empty((18, ), device='cpu', dtype=torch.float32)
    buf451 = buf243; del buf243  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_66(c_void_p(buf447.data_ptr()), c_void_p(convolution_264.data_ptr()), c_void_p(unsqueeze_2053.data_ptr()), c_void_p(squeeze_793.data_ptr()), c_void_p(primals_794.data_ptr()), c_void_p(buf448.data_ptr()), c_void_p(buf449.data_ptr()), c_void_p(buf450.data_ptr()), c_void_p(buf451.data_ptr()))
    del convolution_264
    del primals_794
    del squeeze_793
    del unsqueeze_2053
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf452 = aten.convolution_backward(buf451, relu_234, primals_793, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf451
    del primals_793
    buf453 = buf452[0]
    buf454 = buf452[1]
    del buf452
    buf455 = buf449; del buf449  # reuse
    buf456 = empty((18, ), device='cpu', dtype=torch.float32)
    buf457 = empty((18, ), device='cpu', dtype=torch.float32)
    buf458 = buf453; del buf453  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_67(c_void_p(buf458.data_ptr()), c_void_p(relu_234.data_ptr()), c_void_p(convolution_263.data_ptr()), c_void_p(unsqueeze_2065.data_ptr()), c_void_p(squeeze_790.data_ptr()), c_void_p(primals_791.data_ptr()), c_void_p(buf455.data_ptr()), c_void_p(buf456.data_ptr()), c_void_p(buf457.data_ptr()))
    del convolution_263
    del primals_791
    del relu_234
    del squeeze_790
    del unsqueeze_2065
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf459 = aten.convolution_backward(buf458, relu_233, primals_790, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_790
    buf460 = buf459[0]
    buf461 = buf459[1]
    del buf459
    buf462 = buf456; del buf456  # reuse
    buf463 = empty((18, ), device='cpu', dtype=torch.float32)
    buf464 = buf458; del buf458  # reuse
    buf465 = buf463; del buf463  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_68(c_void_p(buf465.data_ptr()), c_void_p(relu_233.data_ptr()), c_void_p(buf447.data_ptr()), c_void_p(buf460.data_ptr()), c_void_p(convolution_262.data_ptr()), c_void_p(unsqueeze_2077.data_ptr()), c_void_p(squeeze_787.data_ptr()), c_void_p(primals_788.data_ptr()), c_void_p(buf462.data_ptr()), c_void_p(buf464.data_ptr()))
    del convolution_262
    del primals_788
    del squeeze_787
    del unsqueeze_2077
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf466 = aten.convolution_backward(buf464, relu_232, primals_787, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf464
    del primals_787
    buf467 = buf466[0]
    buf468 = buf466[1]
    del buf466
    buf469 = empty((18, ), device='cpu', dtype=torch.float32)
    buf470 = empty((18, ), device='cpu', dtype=torch.float32)
    buf471 = empty((18, ), device='cpu', dtype=torch.float32)
    buf472 = buf467; del buf467  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_69(c_void_p(buf472.data_ptr()), c_void_p(relu_232.data_ptr()), c_void_p(convolution_261.data_ptr()), c_void_p(unsqueeze_2089.data_ptr()), c_void_p(squeeze_784.data_ptr()), c_void_p(primals_785.data_ptr()), c_void_p(buf469.data_ptr()), c_void_p(buf470.data_ptr()), c_void_p(buf471.data_ptr()))
    del convolution_261
    del primals_785
    del relu_232
    del squeeze_784
    del unsqueeze_2089
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf473 = aten.convolution_backward(buf472, relu_231, primals_784, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_784
    buf474 = buf473[0]
    buf475 = buf473[1]
    del buf473
    buf476 = buf447; del buf447  # reuse
    buf477 = buf470; del buf470  # reuse
    buf478 = empty((18, ), device='cpu', dtype=torch.float32)
    buf479 = empty((18, ), device='cpu', dtype=torch.float32)
    buf480 = buf472; del buf472  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_70(c_void_p(buf476.data_ptr()), c_void_p(relu_231.data_ptr()), c_void_p(relu_233.data_ptr()), c_void_p(buf460.data_ptr()), c_void_p(buf474.data_ptr()), c_void_p(convolution_260.data_ptr()), c_void_p(unsqueeze_2101.data_ptr()), c_void_p(squeeze_781.data_ptr()), c_void_p(primals_782.data_ptr()), c_void_p(buf477.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(buf479.data_ptr()), c_void_p(buf480.data_ptr()))
    del buf460
    del buf474
    del convolution_260
    del primals_782
    del relu_231
    del relu_233
    del squeeze_781
    del unsqueeze_2101
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf481 = aten.convolution_backward(buf480, relu_230, primals_781, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf480
    del primals_781
    buf482 = buf481[0]
    buf483 = buf481[1]
    del buf481
    buf484 = buf478; del buf478  # reuse
    buf485 = empty((18, ), device='cpu', dtype=torch.float32)
    buf486 = empty((18, ), device='cpu', dtype=torch.float32)
    buf487 = buf482; del buf482  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_71(c_void_p(buf487.data_ptr()), c_void_p(relu_230.data_ptr()), c_void_p(convolution_259.data_ptr()), c_void_p(unsqueeze_2113.data_ptr()), c_void_p(squeeze_778.data_ptr()), c_void_p(primals_779.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(buf485.data_ptr()), c_void_p(buf486.data_ptr()))
    del convolution_259
    del primals_779
    del relu_230
    del squeeze_778
    del unsqueeze_2113
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf488 = aten.convolution_backward(buf487, relu_229, primals_778, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_778
    buf489 = buf488[0]
    buf490 = buf488[1]
    del buf488
    buf491 = buf485; del buf485  # reuse
    buf492 = empty((18, ), device='cpu', dtype=torch.float32)
    buf493 = buf487; del buf487  # reuse
    buf494 = buf492; del buf492  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_72(c_void_p(buf494.data_ptr()), c_void_p(relu_229.data_ptr()), c_void_p(buf476.data_ptr()), c_void_p(buf489.data_ptr()), c_void_p(convolution_258.data_ptr()), c_void_p(unsqueeze_2125.data_ptr()), c_void_p(squeeze_775.data_ptr()), c_void_p(primals_776.data_ptr()), c_void_p(buf491.data_ptr()), c_void_p(buf493.data_ptr()))
    del convolution_258
    del primals_776
    del squeeze_775
    del unsqueeze_2125
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf495 = aten.convolution_backward(buf493, relu_228, primals_775, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf493
    del primals_775
    buf496 = buf495[0]
    buf497 = buf495[1]
    del buf495
    buf498 = empty((18, ), device='cpu', dtype=torch.float32)
    buf499 = empty((18, ), device='cpu', dtype=torch.float32)
    buf500 = empty((18, ), device='cpu', dtype=torch.float32)
    buf501 = buf496; del buf496  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_73(c_void_p(buf501.data_ptr()), c_void_p(relu_228.data_ptr()), c_void_p(convolution_257.data_ptr()), c_void_p(unsqueeze_2137.data_ptr()), c_void_p(squeeze_772.data_ptr()), c_void_p(primals_773.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf500.data_ptr()))
    del convolution_257
    del primals_773
    del relu_228
    del squeeze_772
    del unsqueeze_2137
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf502 = aten.convolution_backward(buf501, relu_220, primals_772, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf501
    del primals_772
    buf503 = buf502[0]
    buf504 = buf502[1]
    del buf502
    buf505 = buf302; del buf302  # reuse
    buf506 = buf325; del buf325  # reuse
    buf507 = empty((144, ), device='cpu', dtype=torch.float32)
    buf513 = empty((144, ), device='cpu', dtype=torch.float32)
    buf526 = empty((144, ), device='cpu', dtype=torch.float32)
    buf508 = empty((144, ), device='cpu', dtype=torch.float32)
    buf509 = buf327; del buf327  # reuse
    buf515 = buf319; del buf319  # reuse
    buf528 = buf306; del buf306  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_74(c_void_p(buf505.data_ptr()), c_void_p(relu_227.data_ptr()), c_void_p(relu_253.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(buf329.data_ptr()), c_void_p(convolution_256.data_ptr()), c_void_p(unsqueeze_2149.data_ptr()), c_void_p(convolution_255.data_ptr()), c_void_p(unsqueeze_2161.data_ptr()), c_void_p(convolution_253.data_ptr()), c_void_p(unsqueeze_2185.data_ptr()), c_void_p(squeeze_769.data_ptr()), c_void_p(primals_770.data_ptr()), c_void_p(squeeze_766.data_ptr()), c_void_p(primals_767.data_ptr()), c_void_p(squeeze_760.data_ptr()), c_void_p(primals_761.data_ptr()), c_void_p(buf506.data_ptr()), c_void_p(buf507.data_ptr()), c_void_p(buf513.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(buf508.data_ptr()), c_void_p(buf509.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(buf528.data_ptr()))
    del buf315
    del buf329
    del convolution_253
    del convolution_255
    del convolution_256
    del primals_761
    del primals_767
    del primals_770
    del relu_227
    del relu_253
    del squeeze_769
    del unsqueeze_2149
    del unsqueeze_2161
    del unsqueeze_2185
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf510 = aten.convolution_backward(buf509, relu_211, primals_769, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf509
    del primals_769
    buf511 = buf510[0]
    buf512 = buf510[1]
    del buf510
    buf514 = buf513; del buf513  # reuse
    cpp_fused_native_batch_norm_backward_75(c_void_p(buf514.data_ptr()), c_void_p(squeeze_766.data_ptr()))
    del squeeze_766
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf516 = aten.convolution_backward(buf515, relu_226, primals_766, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf515
    del primals_766
    buf517 = buf516[0]
    buf518 = buf516[1]
    del buf516
    buf519 = buf441; del buf441  # reuse
    buf520 = empty((36, ), device='cpu', dtype=torch.float32)
    buf521 = empty((36, ), device='cpu', dtype=torch.float32)
    buf522 = buf517; del buf517  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_76(c_void_p(buf522.data_ptr()), c_void_p(relu_226.data_ptr()), c_void_p(convolution_254.data_ptr()), c_void_p(unsqueeze_2173.data_ptr()), c_void_p(squeeze_763.data_ptr()), c_void_p(primals_764.data_ptr()), c_void_p(buf519.data_ptr()), c_void_p(buf520.data_ptr()), c_void_p(buf521.data_ptr()))
    del convolution_254
    del primals_764
    del relu_226
    del squeeze_763
    del unsqueeze_2173
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf523 = aten.convolution_backward(buf522, relu_203, primals_763, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_763
    buf524 = buf523[0]
    buf525 = buf523[1]
    del buf523
    buf527 = buf526; del buf526  # reuse
    cpp_fused_native_batch_norm_backward_77(c_void_p(buf527.data_ptr()), c_void_p(squeeze_760.data_ptr()))
    del squeeze_760
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf529 = aten.convolution_backward(buf528, relu_225, primals_760, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_760
    buf530 = buf529[0]
    buf531 = buf529[1]
    del buf529
    buf532 = buf499; del buf499  # reuse
    buf533 = empty((18, ), device='cpu', dtype=torch.float32)
    buf534 = empty((18, ), device='cpu', dtype=torch.float32)
    buf535 = buf530; del buf530  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_78(c_void_p(buf535.data_ptr()), c_void_p(relu_225.data_ptr()), c_void_p(convolution_252.data_ptr()), c_void_p(unsqueeze_2197.data_ptr()), c_void_p(squeeze_757.data_ptr()), c_void_p(primals_758.data_ptr()), c_void_p(buf532.data_ptr()), c_void_p(buf533.data_ptr()), c_void_p(buf534.data_ptr()))
    del convolution_252
    del primals_758
    del relu_225
    del squeeze_757
    del unsqueeze_2197
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf536 = aten.convolution_backward(buf535, relu_224, primals_757, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_757
    buf537 = buf536[0]
    buf538 = buf536[1]
    del buf536
    buf539 = buf533; del buf533  # reuse
    buf540 = empty((18, ), device='cpu', dtype=torch.float32)
    buf541 = empty((18, ), device='cpu', dtype=torch.float32)
    buf542 = buf537; del buf537  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_79(c_void_p(buf542.data_ptr()), c_void_p(relu_224.data_ptr()), c_void_p(convolution_251.data_ptr()), c_void_p(unsqueeze_2209.data_ptr()), c_void_p(squeeze_754.data_ptr()), c_void_p(primals_755.data_ptr()), c_void_p(buf539.data_ptr()), c_void_p(buf540.data_ptr()), c_void_p(buf541.data_ptr()))
    del convolution_251
    del primals_755
    del relu_224
    del squeeze_754
    del unsqueeze_2209
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf543 = aten.convolution_backward(buf542, relu_195, primals_754, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf542
    del primals_754
    buf544 = buf543[0]
    buf545 = buf543[1]
    del buf543
    buf546 = buf360; del buf360  # reuse
    buf547 = reinterpret_tensor(buf535, (8, 72, 7, 7), (3528, 49, 7, 1), 0); del buf535  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_80(c_void_p(buf546.data_ptr()), c_void_p(relu_223.data_ptr()), c_void_p(relu_245.data_ptr()), c_void_p(buf373.data_ptr()), c_void_p(buf387.data_ptr()), c_void_p(buf547.data_ptr()))
    del relu_223
    del relu_245
    aten.index_put_(buf547, [None, None, unsqueeze_830, convert_element_type_110], buf546, True)
    buf550 = buf383; del buf383  # reuse
    buf551 = empty((72, ), device='cpu', dtype=torch.float32)
    buf552 = empty((72, ), device='cpu', dtype=torch.float32)
    buf549 = reinterpret_tensor(buf259, (8, 72, 7, 7), (3528, 49, 7, 1), 0); del buf259  # reuse
    buf553 = buf549; del buf549  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_81(c_void_p(buf553.data_ptr()), c_void_p(buf547.data_ptr()), c_void_p(convolution_250.data_ptr()), c_void_p(unsqueeze_2221.data_ptr()), c_void_p(squeeze_751.data_ptr()), c_void_p(primals_752.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(buf551.data_ptr()), c_void_p(buf552.data_ptr()))
    del convolution_250
    del primals_752
    del squeeze_751
    del unsqueeze_2221
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf554 = aten.convolution_backward(buf553, relu_219, primals_751, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_751
    buf555 = buf554[0]
    buf556 = buf554[1]
    del buf554
    buf557 = buf551; del buf551  # reuse
    buf558 = empty((72, ), device='cpu', dtype=torch.float32)
    buf564 = empty((72, ), device='cpu', dtype=torch.float32)
    buf559 = empty((72, ), device='cpu', dtype=torch.float32)
    buf560 = buf387; del buf387  # reuse
    buf566 = buf373; del buf373  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_82(c_void_p(buf546.data_ptr()), c_void_p(convolution_249.data_ptr()), c_void_p(unsqueeze_2233.data_ptr()), c_void_p(convolution_248.data_ptr()), c_void_p(unsqueeze_2245.data_ptr()), c_void_p(squeeze_748.data_ptr()), c_void_p(primals_749.data_ptr()), c_void_p(squeeze_745.data_ptr()), c_void_p(primals_746.data_ptr()), c_void_p(buf557.data_ptr()), c_void_p(buf558.data_ptr()), c_void_p(buf564.data_ptr()), c_void_p(buf559.data_ptr()), c_void_p(buf560.data_ptr()), c_void_p(buf566.data_ptr()))
    del convolution_248
    del convolution_249
    del primals_746
    del primals_749
    del squeeze_748
    del unsqueeze_2233
    del unsqueeze_2245
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf561 = aten.convolution_backward(buf560, relu_203, primals_748, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf560
    del primals_748
    buf562 = buf561[0]
    buf563 = buf561[1]
    del buf561
    buf565 = buf564; del buf564  # reuse
    cpp_fused_native_batch_norm_backward_83(c_void_p(buf565.data_ptr()), c_void_p(squeeze_745.data_ptr()))
    del squeeze_745
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf567 = aten.convolution_backward(buf566, relu_222, primals_745, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_745
    buf568 = buf567[0]
    buf569 = buf567[1]
    del buf567
    buf570 = buf540; del buf540  # reuse
    buf571 = empty((18, ), device='cpu', dtype=torch.float32)
    buf572 = empty((18, ), device='cpu', dtype=torch.float32)
    buf573 = buf568; del buf568  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_84(c_void_p(buf573.data_ptr()), c_void_p(relu_222.data_ptr()), c_void_p(convolution_247.data_ptr()), c_void_p(unsqueeze_2257.data_ptr()), c_void_p(squeeze_742.data_ptr()), c_void_p(primals_743.data_ptr()), c_void_p(buf570.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(buf572.data_ptr()))
    del convolution_247
    del primals_743
    del relu_222
    del squeeze_742
    del unsqueeze_2257
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf574 = aten.convolution_backward(buf573, relu_195, primals_742, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_742
    buf575 = buf574[0]
    buf576 = buf574[1]
    del buf574
    buf577 = buf418; del buf418  # reuse
    buf578 = buf221; del buf221  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_85(c_void_p(buf577.data_ptr()), c_void_p(relu_221.data_ptr()), c_void_p(relu_237.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(buf578.data_ptr()))
    del buf431
    del relu_221
    del relu_237
    aten.index_put_(buf578, [None, None, unsqueeze_813, convert_element_type_104], buf577, True)
    buf581 = buf520; del buf520  # reuse
    buf582 = empty((36, ), device='cpu', dtype=torch.float32)
    buf583 = empty((36, ), device='cpu', dtype=torch.float32)
    buf580 = buf214; del buf214  # reuse
    buf584 = buf580; del buf580  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_86(c_void_p(buf584.data_ptr()), c_void_p(buf578.data_ptr()), c_void_p(convolution_246.data_ptr()), c_void_p(unsqueeze_2269.data_ptr()), c_void_p(squeeze_739.data_ptr()), c_void_p(primals_740.data_ptr()), c_void_p(buf581.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(buf583.data_ptr()))
    del convolution_246
    del primals_740
    del squeeze_739
    del unsqueeze_2269
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf585 = aten.convolution_backward(buf584, relu_219, primals_739, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_739
    buf586 = buf585[0]
    buf587 = buf585[1]
    del buf585
    buf588 = reinterpret_tensor(buf528, (8, 36, 14, 14), (7056, 196, 14, 1), 0); del buf528  # reuse
    cpp_fused__unsafe_index_put_new_zeros_87(c_void_p(buf588.data_ptr()))
    aten.index_put_(buf588, [None, None, unsqueeze_259, convert_element_type_20], buf577, True)
    buf591 = buf582; del buf582  # reuse
    buf592 = empty((36, ), device='cpu', dtype=torch.float32)
    buf593 = empty((36, ), device='cpu', dtype=torch.float32)
    buf590 = reinterpret_tensor(buf522, (8, 36, 14, 14), (7056, 196, 14, 1), 0); del buf522  # reuse
    buf594 = buf590; del buf590  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_88(c_void_p(buf594.data_ptr()), c_void_p(buf588.data_ptr()), c_void_p(convolution_245.data_ptr()), c_void_p(unsqueeze_2281.data_ptr()), c_void_p(squeeze_736.data_ptr()), c_void_p(primals_737.data_ptr()), c_void_p(buf591.data_ptr()), c_void_p(buf592.data_ptr()), c_void_p(buf593.data_ptr()))
    del buf588
    del convolution_245
    del primals_737
    del squeeze_736
    del unsqueeze_2281
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf595 = aten.convolution_backward(buf594, relu_211, primals_736, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_736
    buf596 = buf595[0]
    buf597 = buf595[1]
    del buf595
    buf598 = buf592; del buf592  # reuse
    buf599 = empty((36, ), device='cpu', dtype=torch.float32)
    buf600 = empty((36, ), device='cpu', dtype=torch.float32)
    buf601 = buf445; del buf445  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_89(c_void_p(buf577.data_ptr()), c_void_p(convolution_244.data_ptr()), c_void_p(unsqueeze_2293.data_ptr()), c_void_p(squeeze_733.data_ptr()), c_void_p(primals_734.data_ptr()), c_void_p(buf598.data_ptr()), c_void_p(buf599.data_ptr()), c_void_p(buf600.data_ptr()), c_void_p(buf601.data_ptr()))
    del convolution_244
    del primals_734
    del squeeze_733
    del unsqueeze_2293
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf602 = aten.convolution_backward(buf601, relu_195, primals_733, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_733
    buf603 = buf602[0]
    buf604 = buf602[1]
    del buf602
    buf605 = buf476; del buf476  # reuse
    buf810 = buf544; del buf544  # reuse
    buf606 = buf249; del buf249  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_90(c_void_p(buf605.data_ptr()), c_void_p(buf810.data_ptr()), c_void_p(relu_220.data_ptr()), c_void_p(relu_229.data_ptr()), c_void_p(buf489.data_ptr()), c_void_p(buf503.data_ptr()), c_void_p(relu_195.data_ptr()), c_void_p(buf575.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(buf606.data_ptr()))
    del buf489
    del buf503
    del buf575
    del buf603
    del relu_195
    del relu_220
    del relu_229
    aten.index_put_(buf606, [None, None, unsqueeze_799, convert_element_type_92], buf605, True)
    buf609 = buf571; del buf571  # reuse
    buf610 = empty((18, ), device='cpu', dtype=torch.float32)
    buf611 = empty((18, ), device='cpu', dtype=torch.float32)
    buf608 = buf242; del buf242  # reuse
    buf612 = buf608; del buf608  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_91(c_void_p(buf612.data_ptr()), c_void_p(buf606.data_ptr()), c_void_p(convolution_243.data_ptr()), c_void_p(unsqueeze_2305.data_ptr()), c_void_p(squeeze_730.data_ptr()), c_void_p(primals_731.data_ptr()), c_void_p(buf609.data_ptr()), c_void_p(buf610.data_ptr()), c_void_p(buf611.data_ptr()))
    del convolution_243
    del primals_731
    del squeeze_730
    del unsqueeze_2305
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf613 = aten.convolution_backward(buf612, relu_219, primals_730, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_730
    buf614 = buf613[0]
    buf615 = buf613[1]
    del buf613
    buf616 = reinterpret_tensor(buf553, (8, 18, 14, 14), (3528, 196, 14, 1), 0); del buf553  # reuse
    cpp_fused__unsafe_index_put_new_zeros_92(c_void_p(buf616.data_ptr()))
    aten.index_put_(buf616, [None, None, unsqueeze_250, convert_element_type_14], buf605, True)
    buf619 = buf610; del buf610  # reuse
    buf620 = empty((18, ), device='cpu', dtype=torch.float32)
    buf621 = empty((18, ), device='cpu', dtype=torch.float32)
    buf618 = reinterpret_tensor(buf547, (8, 18, 14, 14), (3528, 196, 14, 1), 0); del buf547  # reuse
    buf622 = buf618; del buf618  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_93(c_void_p(buf622.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(convolution_242.data_ptr()), c_void_p(unsqueeze_2317.data_ptr()), c_void_p(squeeze_727.data_ptr()), c_void_p(primals_728.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(buf620.data_ptr()), c_void_p(buf621.data_ptr()))
    del buf616
    del convolution_242
    del primals_728
    del squeeze_727
    del unsqueeze_2317
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf623 = aten.convolution_backward(buf622, relu_211, primals_727, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_727
    buf624 = buf623[0]
    buf625 = buf623[1]
    del buf623
    buf626 = reinterpret_tensor(buf573, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf573  # reuse
    cpp_fused__unsafe_index_put_new_zeros_94(c_void_p(buf626.data_ptr()))
    aten.index_put_(buf626, [None, None, unsqueeze_136, convert_element_type_2], buf605, True)
    buf629 = buf620; del buf620  # reuse
    buf630 = empty((18, ), device='cpu', dtype=torch.float32)
    buf631 = empty((18, ), device='cpu', dtype=torch.float32)
    buf628 = reinterpret_tensor(buf566, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf566  # reuse
    buf632 = buf628; del buf628  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_95(c_void_p(buf632.data_ptr()), c_void_p(buf626.data_ptr()), c_void_p(convolution_241.data_ptr()), c_void_p(unsqueeze_2329.data_ptr()), c_void_p(squeeze_724.data_ptr()), c_void_p(primals_725.data_ptr()), c_void_p(buf629.data_ptr()), c_void_p(buf630.data_ptr()), c_void_p(buf631.data_ptr()))
    del buf626
    del convolution_241
    del primals_725
    del squeeze_724
    del unsqueeze_2329
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf633 = aten.convolution_backward(buf632, relu_203, primals_724, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_724
    buf634 = buf633[0]
    buf635 = buf633[1]
    del buf633
    buf636 = buf505; del buf505  # reuse
    buf637 = buf507; del buf507  # reuse
    buf638 = empty((144, ), device='cpu', dtype=torch.float32)
    buf639 = empty((144, ), device='cpu', dtype=torch.float32)
    buf640 = reinterpret_tensor(buf594, (8, 144, 7, 7), (7056, 1, 1008, 144), 0); del buf594  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_96(c_void_p(buf636.data_ptr()), c_void_p(relu_219.data_ptr()), c_void_p(buf555.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(convolution_240.data_ptr()), c_void_p(unsqueeze_2341.data_ptr()), c_void_p(squeeze_721.data_ptr()), c_void_p(primals_722.data_ptr()), c_void_p(buf637.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(buf639.data_ptr()), c_void_p(buf640.data_ptr()))
    del buf555
    del buf586
    del buf614
    del convolution_240
    del primals_722
    del relu_219
    del squeeze_721
    del unsqueeze_2341
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf641 = aten.convolution_backward(buf640, relu_218, primals_721, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf640
    del primals_721
    buf642 = buf641[0]
    buf643 = buf641[1]
    del buf641
    buf644 = buf638; del buf638  # reuse
    buf645 = empty((144, ), device='cpu', dtype=torch.float32)
    buf646 = empty((144, ), device='cpu', dtype=torch.float32)
    buf647 = buf642; del buf642  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_97(c_void_p(buf647.data_ptr()), c_void_p(relu_218.data_ptr()), c_void_p(convolution_239.data_ptr()), c_void_p(unsqueeze_2353.data_ptr()), c_void_p(squeeze_718.data_ptr()), c_void_p(primals_719.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(buf645.data_ptr()), c_void_p(buf646.data_ptr()))
    del convolution_239
    del primals_719
    del relu_218
    del squeeze_718
    del unsqueeze_2353
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf648 = aten.convolution_backward(buf647, relu_217, primals_718, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_718
    buf649 = buf648[0]
    buf650 = buf648[1]
    del buf648
    buf651 = buf645; del buf645  # reuse
    buf652 = empty((144, ), device='cpu', dtype=torch.float32)
    buf653 = buf647; del buf647  # reuse
    buf654 = buf652; del buf652  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_98(c_void_p(buf654.data_ptr()), c_void_p(relu_217.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf649.data_ptr()), c_void_p(convolution_238.data_ptr()), c_void_p(unsqueeze_2365.data_ptr()), c_void_p(squeeze_715.data_ptr()), c_void_p(primals_716.data_ptr()), c_void_p(buf651.data_ptr()), c_void_p(buf653.data_ptr()))
    del convolution_238
    del primals_716
    del squeeze_715
    del unsqueeze_2365
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf655 = aten.convolution_backward(buf653, relu_216, primals_715, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf653
    del primals_715
    buf656 = buf655[0]
    buf657 = buf655[1]
    del buf655
    buf658 = empty((144, ), device='cpu', dtype=torch.float32)
    buf659 = empty((144, ), device='cpu', dtype=torch.float32)
    buf660 = empty((144, ), device='cpu', dtype=torch.float32)
    buf661 = buf656; del buf656  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_99(c_void_p(buf661.data_ptr()), c_void_p(relu_216.data_ptr()), c_void_p(convolution_237.data_ptr()), c_void_p(unsqueeze_2377.data_ptr()), c_void_p(squeeze_712.data_ptr()), c_void_p(primals_713.data_ptr()), c_void_p(buf658.data_ptr()), c_void_p(buf659.data_ptr()), c_void_p(buf660.data_ptr()))
    del convolution_237
    del primals_713
    del relu_216
    del squeeze_712
    del unsqueeze_2377
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf662 = aten.convolution_backward(buf661, relu_215, primals_712, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_712
    buf663 = buf662[0]
    buf664 = buf662[1]
    del buf662
    buf665 = buf636; del buf636  # reuse
    buf666 = buf659; del buf659  # reuse
    buf667 = empty((144, ), device='cpu', dtype=torch.float32)
    buf668 = empty((144, ), device='cpu', dtype=torch.float32)
    buf669 = buf661; del buf661  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_100(c_void_p(buf665.data_ptr()), c_void_p(relu_215.data_ptr()), c_void_p(relu_217.data_ptr()), c_void_p(buf649.data_ptr()), c_void_p(buf663.data_ptr()), c_void_p(convolution_236.data_ptr()), c_void_p(unsqueeze_2389.data_ptr()), c_void_p(squeeze_709.data_ptr()), c_void_p(primals_710.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf669.data_ptr()))
    del buf649
    del buf663
    del convolution_236
    del primals_710
    del relu_215
    del relu_217
    del squeeze_709
    del unsqueeze_2389
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf670 = aten.convolution_backward(buf669, relu_214, primals_709, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_709
    buf671 = buf670[0]
    buf672 = buf670[1]
    del buf670
    buf673 = buf667; del buf667  # reuse
    buf674 = empty((144, ), device='cpu', dtype=torch.float32)
    buf675 = empty((144, ), device='cpu', dtype=torch.float32)
    buf676 = buf671; del buf671  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101(c_void_p(buf676.data_ptr()), c_void_p(relu_214.data_ptr()), c_void_p(convolution_235.data_ptr()), c_void_p(unsqueeze_2401.data_ptr()), c_void_p(squeeze_706.data_ptr()), c_void_p(primals_707.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf674.data_ptr()), c_void_p(buf675.data_ptr()))
    del convolution_235
    del primals_707
    del relu_214
    del squeeze_706
    del unsqueeze_2401
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf677 = aten.convolution_backward(buf676, relu_213, primals_706, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_706
    buf678 = buf677[0]
    buf679 = buf677[1]
    del buf677
    buf680 = buf674; del buf674  # reuse
    buf681 = empty((144, ), device='cpu', dtype=torch.float32)
    buf682 = buf676; del buf676  # reuse
    buf683 = buf681; del buf681  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_102(c_void_p(buf683.data_ptr()), c_void_p(relu_213.data_ptr()), c_void_p(buf665.data_ptr()), c_void_p(buf678.data_ptr()), c_void_p(convolution_234.data_ptr()), c_void_p(unsqueeze_2413.data_ptr()), c_void_p(squeeze_703.data_ptr()), c_void_p(primals_704.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(buf682.data_ptr()))
    del convolution_234
    del primals_704
    del squeeze_703
    del unsqueeze_2413
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf684 = aten.convolution_backward(buf682, relu_212, primals_703, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_703
    buf685 = buf684[0]
    buf686 = buf684[1]
    del buf684
    buf687 = empty((144, ), device='cpu', dtype=torch.float32)
    buf688 = empty((144, ), device='cpu', dtype=torch.float32)
    buf689 = empty((144, ), device='cpu', dtype=torch.float32)
    buf690 = buf685; del buf685  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_103(c_void_p(buf690.data_ptr()), c_void_p(relu_212.data_ptr()), c_void_p(convolution_233.data_ptr()), c_void_p(unsqueeze_2425.data_ptr()), c_void_p(squeeze_700.data_ptr()), c_void_p(primals_701.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(buf688.data_ptr()), c_void_p(buf689.data_ptr()))
    del convolution_233
    del primals_701
    del relu_212
    del squeeze_700
    del unsqueeze_2425
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf691 = aten.convolution_backward(buf690, relu_187, primals_700, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_700
    buf692 = buf691[0]
    buf693 = buf691[1]
    del buf691
    buf694 = buf511; del buf511  # reuse
    buf695 = buf558; del buf558  # reuse
    buf696 = empty((72, ), device='cpu', dtype=torch.float32)
    buf697 = empty((72, ), device='cpu', dtype=torch.float32)
    buf698 = reinterpret_tensor(buf632, (8, 72, 14, 14), (14112, 1, 1008, 72), 0); del buf632  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_104(c_void_p(buf694.data_ptr()), c_void_p(relu_211.data_ptr()), c_void_p(buf546.data_ptr()), c_void_p(buf596.data_ptr()), c_void_p(buf624.data_ptr()), c_void_p(convolution_232.data_ptr()), c_void_p(unsqueeze_2437.data_ptr()), c_void_p(squeeze_697.data_ptr()), c_void_p(primals_698.data_ptr()), c_void_p(buf695.data_ptr()), c_void_p(buf696.data_ptr()), c_void_p(buf697.data_ptr()), c_void_p(buf698.data_ptr()))
    del buf546
    del buf596
    del buf624
    del convolution_232
    del primals_698
    del relu_211
    del squeeze_697
    del unsqueeze_2437
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf699 = aten.convolution_backward(buf698, relu_210, primals_697, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf698
    del primals_697
    buf700 = buf699[0]
    buf701 = buf699[1]
    del buf699
    buf702 = buf696; del buf696  # reuse
    buf703 = empty((72, ), device='cpu', dtype=torch.float32)
    buf704 = empty((72, ), device='cpu', dtype=torch.float32)
    buf705 = buf700; del buf700  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_105(c_void_p(buf705.data_ptr()), c_void_p(relu_210.data_ptr()), c_void_p(convolution_231.data_ptr()), c_void_p(unsqueeze_2449.data_ptr()), c_void_p(squeeze_694.data_ptr()), c_void_p(primals_695.data_ptr()), c_void_p(buf702.data_ptr()), c_void_p(buf703.data_ptr()), c_void_p(buf704.data_ptr()))
    del convolution_231
    del primals_695
    del relu_210
    del squeeze_694
    del unsqueeze_2449
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf706 = aten.convolution_backward(buf705, relu_209, primals_694, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_694
    buf707 = buf706[0]
    buf708 = buf706[1]
    del buf706
    buf709 = buf703; del buf703  # reuse
    buf710 = empty((72, ), device='cpu', dtype=torch.float32)
    buf711 = buf705; del buf705  # reuse
    buf712 = buf710; del buf710  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_106(c_void_p(buf712.data_ptr()), c_void_p(relu_209.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(buf707.data_ptr()), c_void_p(convolution_230.data_ptr()), c_void_p(unsqueeze_2461.data_ptr()), c_void_p(squeeze_691.data_ptr()), c_void_p(primals_692.data_ptr()), c_void_p(buf709.data_ptr()), c_void_p(buf711.data_ptr()))
    del convolution_230
    del primals_692
    del squeeze_691
    del unsqueeze_2461
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf713 = aten.convolution_backward(buf711, relu_208, primals_691, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf711
    del primals_691
    buf714 = buf713[0]
    buf715 = buf713[1]
    del buf713
    buf716 = empty((72, ), device='cpu', dtype=torch.float32)
    buf717 = empty((72, ), device='cpu', dtype=torch.float32)
    buf718 = empty((72, ), device='cpu', dtype=torch.float32)
    buf719 = buf714; del buf714  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_107(c_void_p(buf719.data_ptr()), c_void_p(relu_208.data_ptr()), c_void_p(convolution_229.data_ptr()), c_void_p(unsqueeze_2473.data_ptr()), c_void_p(squeeze_688.data_ptr()), c_void_p(primals_689.data_ptr()), c_void_p(buf716.data_ptr()), c_void_p(buf717.data_ptr()), c_void_p(buf718.data_ptr()))
    del convolution_229
    del primals_689
    del relu_208
    del squeeze_688
    del unsqueeze_2473
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf720 = aten.convolution_backward(buf719, relu_207, primals_688, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_688
    buf721 = buf720[0]
    buf722 = buf720[1]
    del buf720
    buf723 = buf694; del buf694  # reuse
    buf724 = buf717; del buf717  # reuse
    buf725 = empty((72, ), device='cpu', dtype=torch.float32)
    buf726 = empty((72, ), device='cpu', dtype=torch.float32)
    buf727 = buf719; del buf719  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_108(c_void_p(buf723.data_ptr()), c_void_p(relu_207.data_ptr()), c_void_p(relu_209.data_ptr()), c_void_p(buf707.data_ptr()), c_void_p(buf721.data_ptr()), c_void_p(convolution_228.data_ptr()), c_void_p(unsqueeze_2485.data_ptr()), c_void_p(squeeze_685.data_ptr()), c_void_p(primals_686.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(buf726.data_ptr()), c_void_p(buf727.data_ptr()))
    del buf707
    del buf721
    del convolution_228
    del primals_686
    del relu_207
    del relu_209
    del squeeze_685
    del unsqueeze_2485
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf728 = aten.convolution_backward(buf727, relu_206, primals_685, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf727
    del primals_685
    buf729 = buf728[0]
    buf730 = buf728[1]
    del buf728
    buf731 = buf725; del buf725  # reuse
    buf732 = empty((72, ), device='cpu', dtype=torch.float32)
    buf733 = empty((72, ), device='cpu', dtype=torch.float32)
    buf734 = buf729; del buf729  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_109(c_void_p(buf734.data_ptr()), c_void_p(relu_206.data_ptr()), c_void_p(convolution_227.data_ptr()), c_void_p(unsqueeze_2497.data_ptr()), c_void_p(squeeze_682.data_ptr()), c_void_p(primals_683.data_ptr()), c_void_p(buf731.data_ptr()), c_void_p(buf732.data_ptr()), c_void_p(buf733.data_ptr()))
    del convolution_227
    del primals_683
    del relu_206
    del squeeze_682
    del unsqueeze_2497
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf735 = aten.convolution_backward(buf734, relu_205, primals_682, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_682
    buf736 = buf735[0]
    buf737 = buf735[1]
    del buf735
    buf738 = buf732; del buf732  # reuse
    buf739 = empty((72, ), device='cpu', dtype=torch.float32)
    buf740 = buf734; del buf734  # reuse
    buf741 = buf739; del buf739  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_110(c_void_p(buf741.data_ptr()), c_void_p(relu_205.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(buf736.data_ptr()), c_void_p(convolution_226.data_ptr()), c_void_p(unsqueeze_2509.data_ptr()), c_void_p(squeeze_679.data_ptr()), c_void_p(primals_680.data_ptr()), c_void_p(buf738.data_ptr()), c_void_p(buf740.data_ptr()))
    del convolution_226
    del primals_680
    del squeeze_679
    del unsqueeze_2509
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf742 = aten.convolution_backward(buf740, relu_204, primals_679, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf740
    del primals_679
    buf743 = buf742[0]
    buf744 = buf742[1]
    del buf742
    buf745 = empty((72, ), device='cpu', dtype=torch.float32)
    buf746 = empty((72, ), device='cpu', dtype=torch.float32)
    buf747 = empty((72, ), device='cpu', dtype=torch.float32)
    buf748 = buf743; del buf743  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_111(c_void_p(buf748.data_ptr()), c_void_p(relu_204.data_ptr()), c_void_p(convolution_225.data_ptr()), c_void_p(unsqueeze_2521.data_ptr()), c_void_p(squeeze_676.data_ptr()), c_void_p(primals_677.data_ptr()), c_void_p(buf745.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf747.data_ptr()))
    del convolution_225
    del primals_677
    del relu_204
    del squeeze_676
    del unsqueeze_2521
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf749 = aten.convolution_backward(buf748, relu_183, primals_676, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf748
    del primals_676
    buf750 = buf749[0]
    buf751 = buf749[1]
    del buf749
    buf752 = buf524; del buf524  # reuse
    buf753 = buf599; del buf599  # reuse
    buf754 = empty((36, ), device='cpu', dtype=torch.float32)
    buf755 = empty((36, ), device='cpu', dtype=torch.float32)
    buf756 = buf601; del buf601  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_112(c_void_p(buf752.data_ptr()), c_void_p(relu_203.data_ptr()), c_void_p(buf562.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(buf634.data_ptr()), c_void_p(convolution_224.data_ptr()), c_void_p(unsqueeze_2533.data_ptr()), c_void_p(squeeze_673.data_ptr()), c_void_p(primals_674.data_ptr()), c_void_p(buf753.data_ptr()), c_void_p(buf754.data_ptr()), c_void_p(buf755.data_ptr()), c_void_p(buf756.data_ptr()))
    del buf562
    del buf577
    del buf634
    del convolution_224
    del primals_674
    del relu_203
    del squeeze_673
    del unsqueeze_2533
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf757 = aten.convolution_backward(buf756, relu_202, primals_673, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf756
    del primals_673
    buf758 = buf757[0]
    buf759 = buf757[1]
    del buf757
    buf760 = buf754; del buf754  # reuse
    buf761 = empty((36, ), device='cpu', dtype=torch.float32)
    buf762 = empty((36, ), device='cpu', dtype=torch.float32)
    buf763 = buf758; del buf758  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_113(c_void_p(buf763.data_ptr()), c_void_p(relu_202.data_ptr()), c_void_p(convolution_223.data_ptr()), c_void_p(unsqueeze_2545.data_ptr()), c_void_p(squeeze_670.data_ptr()), c_void_p(primals_671.data_ptr()), c_void_p(buf760.data_ptr()), c_void_p(buf761.data_ptr()), c_void_p(buf762.data_ptr()))
    del convolution_223
    del primals_671
    del relu_202
    del squeeze_670
    del unsqueeze_2545
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf764 = aten.convolution_backward(buf763, relu_201, primals_670, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_670
    buf765 = buf764[0]
    buf766 = buf764[1]
    del buf764
    buf767 = buf761; del buf761  # reuse
    buf768 = empty((36, ), device='cpu', dtype=torch.float32)
    buf769 = buf763; del buf763  # reuse
    buf770 = buf768; del buf768  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_114(c_void_p(buf770.data_ptr()), c_void_p(relu_201.data_ptr()), c_void_p(buf752.data_ptr()), c_void_p(buf765.data_ptr()), c_void_p(convolution_222.data_ptr()), c_void_p(unsqueeze_2557.data_ptr()), c_void_p(squeeze_667.data_ptr()), c_void_p(primals_668.data_ptr()), c_void_p(buf767.data_ptr()), c_void_p(buf769.data_ptr()))
    del convolution_222
    del primals_668
    del squeeze_667
    del unsqueeze_2557
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf771 = aten.convolution_backward(buf769, relu_200, primals_667, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf769
    del primals_667
    buf772 = buf771[0]
    buf773 = buf771[1]
    del buf771
    buf774 = empty((36, ), device='cpu', dtype=torch.float32)
    buf775 = empty((36, ), device='cpu', dtype=torch.float32)
    buf776 = empty((36, ), device='cpu', dtype=torch.float32)
    buf777 = buf772; del buf772  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_115(c_void_p(buf777.data_ptr()), c_void_p(relu_200.data_ptr()), c_void_p(convolution_221.data_ptr()), c_void_p(unsqueeze_2569.data_ptr()), c_void_p(squeeze_664.data_ptr()), c_void_p(primals_665.data_ptr()), c_void_p(buf774.data_ptr()), c_void_p(buf775.data_ptr()), c_void_p(buf776.data_ptr()))
    del convolution_221
    del primals_665
    del relu_200
    del squeeze_664
    del unsqueeze_2569
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf778 = aten.convolution_backward(buf777, relu_199, primals_664, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_664
    buf779 = buf778[0]
    buf780 = buf778[1]
    del buf778
    buf781 = buf752; del buf752  # reuse
    buf782 = buf775; del buf775  # reuse
    buf783 = empty((36, ), device='cpu', dtype=torch.float32)
    buf784 = empty((36, ), device='cpu', dtype=torch.float32)
    buf785 = buf777; del buf777  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_116(c_void_p(buf781.data_ptr()), c_void_p(relu_199.data_ptr()), c_void_p(relu_201.data_ptr()), c_void_p(buf765.data_ptr()), c_void_p(buf779.data_ptr()), c_void_p(convolution_220.data_ptr()), c_void_p(unsqueeze_2581.data_ptr()), c_void_p(squeeze_661.data_ptr()), c_void_p(primals_662.data_ptr()), c_void_p(buf782.data_ptr()), c_void_p(buf783.data_ptr()), c_void_p(buf784.data_ptr()), c_void_p(buf785.data_ptr()))
    del buf765
    del buf779
    del convolution_220
    del primals_662
    del relu_199
    del relu_201
    del squeeze_661
    del unsqueeze_2581
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf786 = aten.convolution_backward(buf785, relu_198, primals_661, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf785
    del primals_661
    buf787 = buf786[0]
    buf788 = buf786[1]
    del buf786
    buf789 = buf783; del buf783  # reuse
    buf790 = empty((36, ), device='cpu', dtype=torch.float32)
    buf791 = empty((36, ), device='cpu', dtype=torch.float32)
    buf792 = buf787; del buf787  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_117(c_void_p(buf792.data_ptr()), c_void_p(relu_198.data_ptr()), c_void_p(convolution_219.data_ptr()), c_void_p(unsqueeze_2593.data_ptr()), c_void_p(squeeze_658.data_ptr()), c_void_p(primals_659.data_ptr()), c_void_p(buf789.data_ptr()), c_void_p(buf790.data_ptr()), c_void_p(buf791.data_ptr()))
    del convolution_219
    del primals_659
    del relu_198
    del squeeze_658
    del unsqueeze_2593
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf793 = aten.convolution_backward(buf792, relu_197, primals_658, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_658
    buf794 = buf793[0]
    buf795 = buf793[1]
    del buf793
    buf796 = buf790; del buf790  # reuse
    buf797 = empty((36, ), device='cpu', dtype=torch.float32)
    buf798 = buf792; del buf792  # reuse
    buf799 = buf797; del buf797  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_118(c_void_p(buf799.data_ptr()), c_void_p(relu_197.data_ptr()), c_void_p(buf781.data_ptr()), c_void_p(buf794.data_ptr()), c_void_p(convolution_218.data_ptr()), c_void_p(unsqueeze_2605.data_ptr()), c_void_p(squeeze_655.data_ptr()), c_void_p(primals_656.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf798.data_ptr()))
    del convolution_218
    del primals_656
    del squeeze_655
    del unsqueeze_2605
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf800 = aten.convolution_backward(buf798, relu_196, primals_655, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf798
    del primals_655
    buf801 = buf800[0]
    buf802 = buf800[1]
    del buf800
    buf803 = empty((36, ), device='cpu', dtype=torch.float32)
    buf804 = empty((36, ), device='cpu', dtype=torch.float32)
    buf805 = empty((36, ), device='cpu', dtype=torch.float32)
    buf806 = buf801; del buf801  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_119(c_void_p(buf806.data_ptr()), c_void_p(relu_196.data_ptr()), c_void_p(convolution_217.data_ptr()), c_void_p(unsqueeze_2617.data_ptr()), c_void_p(squeeze_652.data_ptr()), c_void_p(primals_653.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(buf804.data_ptr()), c_void_p(buf805.data_ptr()))
    del convolution_217
    del primals_653
    del relu_196
    del squeeze_652
    del unsqueeze_2617
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf807 = aten.convolution_backward(buf806, relu_181, primals_652, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf806
    del primals_652
    buf808 = buf807[0]
    buf809 = buf807[1]
    del buf807
    buf811 = buf630; del buf630  # reuse
    buf812 = empty((18, ), device='cpu', dtype=torch.float32)
    buf813 = empty((18, ), device='cpu', dtype=torch.float32)
    buf814 = buf605; del buf605  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_120(c_void_p(buf810.data_ptr()), c_void_p(convolution_216.data_ptr()), c_void_p(unsqueeze_2629.data_ptr()), c_void_p(squeeze_649.data_ptr()), c_void_p(primals_650.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(buf812.data_ptr()), c_void_p(buf813.data_ptr()), c_void_p(buf814.data_ptr()))
    del convolution_216
    del primals_650
    del squeeze_649
    del unsqueeze_2629
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf815 = aten.convolution_backward(buf814, relu_194, primals_649, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf814
    del primals_649
    buf816 = buf815[0]
    buf817 = buf815[1]
    del buf815
    buf818 = buf812; del buf812  # reuse
    buf819 = empty((18, ), device='cpu', dtype=torch.float32)
    buf820 = empty((18, ), device='cpu', dtype=torch.float32)
    buf821 = buf816; del buf816  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_121(c_void_p(buf821.data_ptr()), c_void_p(relu_194.data_ptr()), c_void_p(convolution_215.data_ptr()), c_void_p(unsqueeze_2641.data_ptr()), c_void_p(squeeze_646.data_ptr()), c_void_p(primals_647.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(buf820.data_ptr()))
    del convolution_215
    del primals_647
    del relu_194
    del squeeze_646
    del unsqueeze_2641
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf822 = aten.convolution_backward(buf821, relu_193, primals_646, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_646
    buf823 = buf822[0]
    buf824 = buf822[1]
    del buf822
    buf825 = buf819; del buf819  # reuse
    buf826 = empty((18, ), device='cpu', dtype=torch.float32)
    buf827 = buf821; del buf821  # reuse
    buf828 = buf826; del buf826  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_122(c_void_p(buf828.data_ptr()), c_void_p(relu_193.data_ptr()), c_void_p(buf810.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(convolution_214.data_ptr()), c_void_p(unsqueeze_2653.data_ptr()), c_void_p(squeeze_643.data_ptr()), c_void_p(primals_644.data_ptr()), c_void_p(buf825.data_ptr()), c_void_p(buf827.data_ptr()))
    del convolution_214
    del primals_644
    del squeeze_643
    del unsqueeze_2653
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf829 = aten.convolution_backward(buf827, relu_192, primals_643, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf827
    del primals_643
    buf830 = buf829[0]
    buf831 = buf829[1]
    del buf829
    buf832 = empty((18, ), device='cpu', dtype=torch.float32)
    buf833 = empty((18, ), device='cpu', dtype=torch.float32)
    buf834 = empty((18, ), device='cpu', dtype=torch.float32)
    buf835 = buf830; del buf830  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_123(c_void_p(buf835.data_ptr()), c_void_p(relu_192.data_ptr()), c_void_p(convolution_213.data_ptr()), c_void_p(unsqueeze_2665.data_ptr()), c_void_p(squeeze_640.data_ptr()), c_void_p(primals_641.data_ptr()), c_void_p(buf832.data_ptr()), c_void_p(buf833.data_ptr()), c_void_p(buf834.data_ptr()))
    del convolution_213
    del primals_641
    del relu_192
    del squeeze_640
    del unsqueeze_2665
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf836 = aten.convolution_backward(buf835, relu_191, primals_640, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_640
    buf837 = buf836[0]
    buf838 = buf836[1]
    del buf836
    buf839 = buf810; del buf810  # reuse
    buf840 = buf833; del buf833  # reuse
    buf841 = empty((18, ), device='cpu', dtype=torch.float32)
    buf842 = empty((18, ), device='cpu', dtype=torch.float32)
    buf843 = buf835; del buf835  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_124(c_void_p(buf839.data_ptr()), c_void_p(relu_191.data_ptr()), c_void_p(relu_193.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(buf837.data_ptr()), c_void_p(convolution_212.data_ptr()), c_void_p(unsqueeze_2677.data_ptr()), c_void_p(squeeze_637.data_ptr()), c_void_p(primals_638.data_ptr()), c_void_p(buf840.data_ptr()), c_void_p(buf841.data_ptr()), c_void_p(buf842.data_ptr()), c_void_p(buf843.data_ptr()))
    del buf823
    del buf837
    del convolution_212
    del primals_638
    del relu_191
    del relu_193
    del squeeze_637
    del unsqueeze_2677
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf844 = aten.convolution_backward(buf843, relu_190, primals_637, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf843
    del primals_637
    buf845 = buf844[0]
    buf846 = buf844[1]
    del buf844
    buf847 = buf841; del buf841  # reuse
    buf848 = empty((18, ), device='cpu', dtype=torch.float32)
    buf849 = empty((18, ), device='cpu', dtype=torch.float32)
    buf850 = buf845; del buf845  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_125(c_void_p(buf850.data_ptr()), c_void_p(relu_190.data_ptr()), c_void_p(convolution_211.data_ptr()), c_void_p(unsqueeze_2689.data_ptr()), c_void_p(squeeze_634.data_ptr()), c_void_p(primals_635.data_ptr()), c_void_p(buf847.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(buf849.data_ptr()))
    del convolution_211
    del primals_635
    del relu_190
    del squeeze_634
    del unsqueeze_2689
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf851 = aten.convolution_backward(buf850, relu_189, primals_634, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_634
    buf852 = buf851[0]
    buf853 = buf851[1]
    del buf851
    buf854 = buf848; del buf848  # reuse
    buf855 = empty((18, ), device='cpu', dtype=torch.float32)
    buf856 = buf850; del buf850  # reuse
    buf857 = buf855; del buf855  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_126(c_void_p(buf857.data_ptr()), c_void_p(relu_189.data_ptr()), c_void_p(buf839.data_ptr()), c_void_p(buf852.data_ptr()), c_void_p(convolution_210.data_ptr()), c_void_p(unsqueeze_2701.data_ptr()), c_void_p(squeeze_631.data_ptr()), c_void_p(primals_632.data_ptr()), c_void_p(buf854.data_ptr()), c_void_p(buf856.data_ptr()))
    del convolution_210
    del primals_632
    del squeeze_631
    del unsqueeze_2701
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf858 = aten.convolution_backward(buf856, relu_188, primals_631, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf856
    del primals_631
    buf859 = buf858[0]
    buf860 = buf858[1]
    del buf858
    buf861 = empty((18, ), device='cpu', dtype=torch.float32)
    buf862 = empty((18, ), device='cpu', dtype=torch.float32)
    buf863 = empty((18, ), device='cpu', dtype=torch.float32)
    buf864 = buf859; del buf859  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_127(c_void_p(buf864.data_ptr()), c_void_p(relu_188.data_ptr()), c_void_p(convolution_209.data_ptr()), c_void_p(unsqueeze_2713.data_ptr()), c_void_p(squeeze_628.data_ptr()), c_void_p(primals_629.data_ptr()), c_void_p(buf861.data_ptr()), c_void_p(buf862.data_ptr()), c_void_p(buf863.data_ptr()))
    del convolution_209
    del primals_629
    del relu_188
    del squeeze_628
    del unsqueeze_2713
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf865 = aten.convolution_backward(buf864, relu_180, primals_628, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf864
    del primals_628
    buf866 = buf865[0]
    buf867 = buf865[1]
    del buf865
    buf868 = buf665; del buf665  # reuse
    buf869 = buf688; del buf688  # reuse
    buf870 = empty((144, ), device='cpu', dtype=torch.float32)
    buf876 = empty((144, ), device='cpu', dtype=torch.float32)
    buf889 = empty((144, ), device='cpu', dtype=torch.float32)
    buf871 = empty((144, ), device='cpu', dtype=torch.float32)
    buf872 = buf690; del buf690  # reuse
    buf878 = buf682; del buf682  # reuse
    buf891 = buf669; del buf669  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_128(c_void_p(buf868.data_ptr()), c_void_p(relu_187.data_ptr()), c_void_p(relu_213.data_ptr()), c_void_p(buf678.data_ptr()), c_void_p(buf692.data_ptr()), c_void_p(convolution_208.data_ptr()), c_void_p(unsqueeze_2725.data_ptr()), c_void_p(convolution_207.data_ptr()), c_void_p(unsqueeze_2737.data_ptr()), c_void_p(convolution_205.data_ptr()), c_void_p(unsqueeze_2761.data_ptr()), c_void_p(squeeze_625.data_ptr()), c_void_p(primals_626.data_ptr()), c_void_p(squeeze_622.data_ptr()), c_void_p(primals_623.data_ptr()), c_void_p(squeeze_616.data_ptr()), c_void_p(primals_617.data_ptr()), c_void_p(buf869.data_ptr()), c_void_p(buf870.data_ptr()), c_void_p(buf876.data_ptr()), c_void_p(buf889.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(buf872.data_ptr()), c_void_p(buf878.data_ptr()), c_void_p(buf891.data_ptr()))
    del buf678
    del buf692
    del convolution_205
    del convolution_207
    del convolution_208
    del primals_617
    del primals_623
    del primals_626
    del relu_187
    del relu_213
    del squeeze_625
    del unsqueeze_2725
    del unsqueeze_2737
    del unsqueeze_2761
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf873 = aten.convolution_backward(buf872, relu_171, primals_625, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf872
    del primals_625
    buf874 = buf873[0]
    buf875 = buf873[1]
    del buf873
    buf877 = buf876; del buf876  # reuse
    cpp_fused_native_batch_norm_backward_129(c_void_p(buf877.data_ptr()), c_void_p(squeeze_622.data_ptr()))
    del squeeze_622
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf879 = aten.convolution_backward(buf878, relu_186, primals_622, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf878
    del primals_622
    buf880 = buf879[0]
    buf881 = buf879[1]
    del buf879
    buf882 = buf804; del buf804  # reuse
    buf883 = empty((36, ), device='cpu', dtype=torch.float32)
    buf884 = empty((36, ), device='cpu', dtype=torch.float32)
    buf885 = buf880; del buf880  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_130(c_void_p(buf885.data_ptr()), c_void_p(relu_186.data_ptr()), c_void_p(convolution_206.data_ptr()), c_void_p(unsqueeze_2749.data_ptr()), c_void_p(squeeze_619.data_ptr()), c_void_p(primals_620.data_ptr()), c_void_p(buf882.data_ptr()), c_void_p(buf883.data_ptr()), c_void_p(buf884.data_ptr()))
    del convolution_206
    del primals_620
    del relu_186
    del squeeze_619
    del unsqueeze_2749
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf886 = aten.convolution_backward(buf885, relu_163, primals_619, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_619
    buf887 = buf886[0]
    buf888 = buf886[1]
    del buf886
    buf890 = buf889; del buf889  # reuse
    cpp_fused_native_batch_norm_backward_131(c_void_p(buf890.data_ptr()), c_void_p(squeeze_616.data_ptr()))
    del squeeze_616
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf892 = aten.convolution_backward(buf891, relu_185, primals_616, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_616
    buf893 = buf892[0]
    buf894 = buf892[1]
    del buf892
    buf895 = buf862; del buf862  # reuse
    buf896 = empty((18, ), device='cpu', dtype=torch.float32)
    buf897 = empty((18, ), device='cpu', dtype=torch.float32)
    buf898 = buf893; del buf893  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_132(c_void_p(buf898.data_ptr()), c_void_p(relu_185.data_ptr()), c_void_p(convolution_204.data_ptr()), c_void_p(unsqueeze_2773.data_ptr()), c_void_p(squeeze_613.data_ptr()), c_void_p(primals_614.data_ptr()), c_void_p(buf895.data_ptr()), c_void_p(buf896.data_ptr()), c_void_p(buf897.data_ptr()))
    del convolution_204
    del primals_614
    del relu_185
    del squeeze_613
    del unsqueeze_2773
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf899 = aten.convolution_backward(buf898, relu_184, primals_613, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_613
    buf900 = buf899[0]
    buf901 = buf899[1]
    del buf899
    buf902 = buf896; del buf896  # reuse
    buf903 = empty((18, ), device='cpu', dtype=torch.float32)
    buf904 = empty((18, ), device='cpu', dtype=torch.float32)
    buf905 = buf900; del buf900  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_133(c_void_p(buf905.data_ptr()), c_void_p(relu_184.data_ptr()), c_void_p(convolution_203.data_ptr()), c_void_p(unsqueeze_2785.data_ptr()), c_void_p(squeeze_610.data_ptr()), c_void_p(primals_611.data_ptr()), c_void_p(buf902.data_ptr()), c_void_p(buf903.data_ptr()), c_void_p(buf904.data_ptr()))
    del convolution_203
    del primals_611
    del relu_184
    del squeeze_610
    del unsqueeze_2785
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf906 = aten.convolution_backward(buf905, relu_155, primals_610, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf905
    del primals_610
    buf907 = buf906[0]
    buf908 = buf906[1]
    del buf906
    buf909 = buf723; del buf723  # reuse
    buf910 = reinterpret_tensor(buf898, (8, 72, 7, 7), (3528, 49, 7, 1), 0); del buf898  # reuse
    cpp_fused_add_new_zeros_threshold_backward_134(c_void_p(buf909.data_ptr()), c_void_p(relu_183.data_ptr()), c_void_p(relu_205.data_ptr()), c_void_p(buf736.data_ptr()), c_void_p(buf750.data_ptr()), c_void_p(buf910.data_ptr()))
    del relu_183
    del relu_205
    aten.index_put_(buf910, [None, None, unsqueeze_830, convert_element_type_110], buf909, True)
    del convert_element_type_110
    del unsqueeze_830
    buf913 = buf746; del buf746  # reuse
    buf914 = empty((72, ), device='cpu', dtype=torch.float32)
    buf915 = empty((72, ), device='cpu', dtype=torch.float32)
    buf912 = reinterpret_tensor(buf622, (8, 72, 7, 7), (3528, 49, 7, 1), 0); del buf622  # reuse
    buf916 = buf912; del buf912  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_135(c_void_p(buf916.data_ptr()), c_void_p(buf910.data_ptr()), c_void_p(convolution_202.data_ptr()), c_void_p(unsqueeze_2797.data_ptr()), c_void_p(squeeze_607.data_ptr()), c_void_p(primals_608.data_ptr()), c_void_p(buf913.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf915.data_ptr()))
    del convolution_202
    del primals_608
    del squeeze_607
    del unsqueeze_2797
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf917 = aten.convolution_backward(buf916, relu_179, primals_607, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_607
    buf918 = buf917[0]
    buf919 = buf917[1]
    del buf917
    buf920 = buf914; del buf914  # reuse
    buf921 = empty((72, ), device='cpu', dtype=torch.float32)
    buf927 = empty((72, ), device='cpu', dtype=torch.float32)
    buf922 = empty((72, ), device='cpu', dtype=torch.float32)
    buf923 = buf750; del buf750  # reuse
    buf929 = buf736; del buf736  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_136(c_void_p(buf909.data_ptr()), c_void_p(convolution_201.data_ptr()), c_void_p(unsqueeze_2809.data_ptr()), c_void_p(convolution_200.data_ptr()), c_void_p(unsqueeze_2821.data_ptr()), c_void_p(squeeze_604.data_ptr()), c_void_p(primals_605.data_ptr()), c_void_p(squeeze_601.data_ptr()), c_void_p(primals_602.data_ptr()), c_void_p(buf920.data_ptr()), c_void_p(buf921.data_ptr()), c_void_p(buf927.data_ptr()), c_void_p(buf922.data_ptr()), c_void_p(buf923.data_ptr()), c_void_p(buf929.data_ptr()))
    del convolution_200
    del convolution_201
    del primals_602
    del primals_605
    del squeeze_604
    del unsqueeze_2809
    del unsqueeze_2821
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf924 = aten.convolution_backward(buf923, relu_163, primals_604, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf923
    del primals_604
    buf925 = buf924[0]
    buf926 = buf924[1]
    del buf924
    buf928 = buf927; del buf927  # reuse
    cpp_fused_native_batch_norm_backward_137(c_void_p(buf928.data_ptr()), c_void_p(squeeze_601.data_ptr()))
    del squeeze_601
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf930 = aten.convolution_backward(buf929, relu_182, primals_601, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_601
    buf931 = buf930[0]
    buf932 = buf930[1]
    del buf930
    buf933 = buf903; del buf903  # reuse
    buf934 = empty((18, ), device='cpu', dtype=torch.float32)
    buf935 = empty((18, ), device='cpu', dtype=torch.float32)
    buf936 = buf931; del buf931  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_138(c_void_p(buf936.data_ptr()), c_void_p(relu_182.data_ptr()), c_void_p(convolution_199.data_ptr()), c_void_p(unsqueeze_2833.data_ptr()), c_void_p(squeeze_598.data_ptr()), c_void_p(primals_599.data_ptr()), c_void_p(buf933.data_ptr()), c_void_p(buf934.data_ptr()), c_void_p(buf935.data_ptr()))
    del convolution_199
    del primals_599
    del relu_182
    del squeeze_598
    del unsqueeze_2833
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf937 = aten.convolution_backward(buf936, relu_155, primals_598, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_598
    buf938 = buf937[0]
    buf939 = buf937[1]
    del buf937
    buf940 = buf781; del buf781  # reuse
    buf941 = buf584; del buf584  # reuse
    cpp_fused_add_new_zeros_threshold_backward_139(c_void_p(buf940.data_ptr()), c_void_p(relu_181.data_ptr()), c_void_p(relu_197.data_ptr()), c_void_p(buf794.data_ptr()), c_void_p(buf808.data_ptr()), c_void_p(buf941.data_ptr()))
    del buf794
    del relu_181
    del relu_197
    aten.index_put_(buf941, [None, None, unsqueeze_813, convert_element_type_104], buf940, True)
    del convert_element_type_104
    del unsqueeze_813
    buf944 = buf883; del buf883  # reuse
    buf945 = empty((36, ), device='cpu', dtype=torch.float32)
    buf946 = empty((36, ), device='cpu', dtype=torch.float32)
    buf943 = buf578; del buf578  # reuse
    buf947 = buf943; del buf943  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_140(c_void_p(buf947.data_ptr()), c_void_p(buf941.data_ptr()), c_void_p(convolution_198.data_ptr()), c_void_p(unsqueeze_2845.data_ptr()), c_void_p(squeeze_595.data_ptr()), c_void_p(primals_596.data_ptr()), c_void_p(buf944.data_ptr()), c_void_p(buf945.data_ptr()), c_void_p(buf946.data_ptr()))
    del buf941
    del convolution_198
    del primals_596
    del squeeze_595
    del unsqueeze_2845
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf948 = aten.convolution_backward(buf947, relu_179, primals_595, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf947
    del primals_595
    buf949 = buf948[0]
    buf950 = buf948[1]
    del buf948
    buf951 = reinterpret_tensor(buf891, (8, 36, 14, 14), (7056, 196, 14, 1), 0); del buf891  # reuse
    cpp_fused__unsafe_index_put_new_zeros_141(c_void_p(buf951.data_ptr()))
    aten.index_put_(buf951, [None, None, unsqueeze_259, convert_element_type_20], buf940, True)
    buf954 = buf945; del buf945  # reuse
    buf955 = empty((36, ), device='cpu', dtype=torch.float32)
    buf956 = empty((36, ), device='cpu', dtype=torch.float32)
    buf953 = reinterpret_tensor(buf885, (8, 36, 14, 14), (7056, 196, 14, 1), 0); del buf885  # reuse
    buf957 = buf953; del buf953  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_142(c_void_p(buf957.data_ptr()), c_void_p(buf951.data_ptr()), c_void_p(convolution_197.data_ptr()), c_void_p(unsqueeze_2857.data_ptr()), c_void_p(squeeze_592.data_ptr()), c_void_p(primals_593.data_ptr()), c_void_p(buf954.data_ptr()), c_void_p(buf955.data_ptr()), c_void_p(buf956.data_ptr()))
    del buf951
    del convolution_197
    del primals_593
    del squeeze_592
    del unsqueeze_2857
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf958 = aten.convolution_backward(buf957, relu_171, primals_592, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_592
    buf959 = buf958[0]
    buf960 = buf958[1]
    del buf958
    buf961 = buf955; del buf955  # reuse
    buf962 = empty((36, ), device='cpu', dtype=torch.float32)
    buf963 = empty((36, ), device='cpu', dtype=torch.float32)
    buf964 = buf808; del buf808  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_143(c_void_p(buf940.data_ptr()), c_void_p(convolution_196.data_ptr()), c_void_p(unsqueeze_2869.data_ptr()), c_void_p(squeeze_589.data_ptr()), c_void_p(primals_590.data_ptr()), c_void_p(buf961.data_ptr()), c_void_p(buf962.data_ptr()), c_void_p(buf963.data_ptr()), c_void_p(buf964.data_ptr()))
    del convolution_196
    del primals_590
    del squeeze_589
    del unsqueeze_2869
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf965 = aten.convolution_backward(buf964, relu_155, primals_589, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_589
    buf966 = buf965[0]
    buf967 = buf965[1]
    del buf965
    buf968 = buf839; del buf839  # reuse
    buf1173 = buf907; del buf907  # reuse
    buf969 = buf612; del buf612  # reuse
    cpp_fused_add_new_zeros_threshold_backward_144(c_void_p(buf968.data_ptr()), c_void_p(buf1173.data_ptr()), c_void_p(relu_180.data_ptr()), c_void_p(relu_189.data_ptr()), c_void_p(buf852.data_ptr()), c_void_p(buf866.data_ptr()), c_void_p(relu_155.data_ptr()), c_void_p(buf938.data_ptr()), c_void_p(buf966.data_ptr()), c_void_p(buf969.data_ptr()))
    del buf852
    del buf866
    del buf938
    del buf966
    del relu_155
    del relu_180
    del relu_189
    aten.index_put_(buf969, [None, None, unsqueeze_799, convert_element_type_92], buf968, True)
    del convert_element_type_92
    del unsqueeze_799
    buf972 = buf934; del buf934  # reuse
    buf973 = empty((18, ), device='cpu', dtype=torch.float32)
    buf974 = empty((18, ), device='cpu', dtype=torch.float32)
    buf971 = buf606; del buf606  # reuse
    buf975 = buf971; del buf971  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_145(c_void_p(buf975.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(convolution_195.data_ptr()), c_void_p(unsqueeze_2881.data_ptr()), c_void_p(squeeze_586.data_ptr()), c_void_p(primals_587.data_ptr()), c_void_p(buf972.data_ptr()), c_void_p(buf973.data_ptr()), c_void_p(buf974.data_ptr()))
    del buf969
    del convolution_195
    del primals_587
    del squeeze_586
    del unsqueeze_2881
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf976 = aten.convolution_backward(buf975, relu_179, primals_586, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf975
    del primals_586
    buf977 = buf976[0]
    buf978 = buf976[1]
    del buf976
    buf979 = reinterpret_tensor(buf916, (8, 18, 14, 14), (3528, 196, 14, 1), 0); del buf916  # reuse
    cpp_fused__unsafe_index_put_new_zeros_146(c_void_p(buf979.data_ptr()))
    aten.index_put_(buf979, [None, None, unsqueeze_250, convert_element_type_14], buf968, True)
    buf982 = buf973; del buf973  # reuse
    buf983 = empty((18, ), device='cpu', dtype=torch.float32)
    buf984 = empty((18, ), device='cpu', dtype=torch.float32)
    buf981 = reinterpret_tensor(buf910, (8, 18, 14, 14), (3528, 196, 14, 1), 0); del buf910  # reuse
    buf985 = buf981; del buf981  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_147(c_void_p(buf985.data_ptr()), c_void_p(buf979.data_ptr()), c_void_p(convolution_194.data_ptr()), c_void_p(unsqueeze_2893.data_ptr()), c_void_p(squeeze_583.data_ptr()), c_void_p(primals_584.data_ptr()), c_void_p(buf982.data_ptr()), c_void_p(buf983.data_ptr()), c_void_p(buf984.data_ptr()))
    del convolution_194
    del primals_584
    del squeeze_583
    del unsqueeze_2893
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf986 = aten.convolution_backward(buf985, relu_171, primals_583, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_583
    buf987 = buf986[0]
    buf988 = buf986[1]
    del buf986
    buf989 = reinterpret_tensor(buf936, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf936  # reuse
    cpp_fused__unsafe_index_put_new_zeros_148(c_void_p(buf989.data_ptr()))
    aten.index_put_(buf989, [None, None, unsqueeze_136, convert_element_type_2], buf968, True)
    buf992 = buf983; del buf983  # reuse
    buf993 = empty((18, ), device='cpu', dtype=torch.float32)
    buf994 = empty((18, ), device='cpu', dtype=torch.float32)
    buf991 = reinterpret_tensor(buf929, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf929  # reuse
    buf995 = buf991; del buf991  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_149(c_void_p(buf995.data_ptr()), c_void_p(buf989.data_ptr()), c_void_p(convolution_193.data_ptr()), c_void_p(unsqueeze_2905.data_ptr()), c_void_p(squeeze_580.data_ptr()), c_void_p(primals_581.data_ptr()), c_void_p(buf992.data_ptr()), c_void_p(buf993.data_ptr()), c_void_p(buf994.data_ptr()))
    del buf989
    del convolution_193
    del primals_581
    del squeeze_580
    del unsqueeze_2905
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf996 = aten.convolution_backward(buf995, relu_163, primals_580, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_580
    buf997 = buf996[0]
    buf998 = buf996[1]
    del buf996
    buf999 = buf868; del buf868  # reuse
    buf1000 = buf870; del buf870  # reuse
    buf1001 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1002 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1003 = reinterpret_tensor(buf957, (8, 144, 7, 7), (7056, 1, 1008, 144), 0); del buf957  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_150(c_void_p(buf999.data_ptr()), c_void_p(relu_179.data_ptr()), c_void_p(buf918.data_ptr()), c_void_p(buf949.data_ptr()), c_void_p(buf977.data_ptr()), c_void_p(convolution_192.data_ptr()), c_void_p(unsqueeze_2917.data_ptr()), c_void_p(squeeze_577.data_ptr()), c_void_p(primals_578.data_ptr()), c_void_p(buf1000.data_ptr()), c_void_p(buf1001.data_ptr()), c_void_p(buf1002.data_ptr()), c_void_p(buf1003.data_ptr()))
    del buf918
    del buf949
    del buf977
    del convolution_192
    del primals_578
    del relu_179
    del squeeze_577
    del unsqueeze_2917
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1004 = aten.convolution_backward(buf1003, relu_178, primals_577, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1003
    del primals_577
    buf1005 = buf1004[0]
    buf1006 = buf1004[1]
    del buf1004
    buf1007 = buf1001; del buf1001  # reuse
    buf1008 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1009 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1010 = buf1005; del buf1005  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_151(c_void_p(buf1010.data_ptr()), c_void_p(relu_178.data_ptr()), c_void_p(convolution_191.data_ptr()), c_void_p(unsqueeze_2929.data_ptr()), c_void_p(squeeze_574.data_ptr()), c_void_p(primals_575.data_ptr()), c_void_p(buf1007.data_ptr()), c_void_p(buf1008.data_ptr()), c_void_p(buf1009.data_ptr()))
    del convolution_191
    del primals_575
    del relu_178
    del squeeze_574
    del unsqueeze_2929
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1011 = aten.convolution_backward(buf1010, relu_177, primals_574, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_574
    buf1012 = buf1011[0]
    buf1013 = buf1011[1]
    del buf1011
    buf1014 = buf1008; del buf1008  # reuse
    buf1015 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1016 = buf1010; del buf1010  # reuse
    buf1017 = buf1015; del buf1015  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_152(c_void_p(buf1017.data_ptr()), c_void_p(relu_177.data_ptr()), c_void_p(buf999.data_ptr()), c_void_p(buf1012.data_ptr()), c_void_p(convolution_190.data_ptr()), c_void_p(unsqueeze_2941.data_ptr()), c_void_p(squeeze_571.data_ptr()), c_void_p(primals_572.data_ptr()), c_void_p(buf1014.data_ptr()), c_void_p(buf1016.data_ptr()))
    del convolution_190
    del primals_572
    del squeeze_571
    del unsqueeze_2941
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1018 = aten.convolution_backward(buf1016, relu_176, primals_571, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1016
    del primals_571
    buf1019 = buf1018[0]
    buf1020 = buf1018[1]
    del buf1018
    buf1021 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1022 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1023 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1024 = buf1019; del buf1019  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_153(c_void_p(buf1024.data_ptr()), c_void_p(relu_176.data_ptr()), c_void_p(convolution_189.data_ptr()), c_void_p(unsqueeze_2953.data_ptr()), c_void_p(squeeze_568.data_ptr()), c_void_p(primals_569.data_ptr()), c_void_p(buf1021.data_ptr()), c_void_p(buf1022.data_ptr()), c_void_p(buf1023.data_ptr()))
    del convolution_189
    del primals_569
    del relu_176
    del squeeze_568
    del unsqueeze_2953
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1025 = aten.convolution_backward(buf1024, relu_175, primals_568, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_568
    buf1026 = buf1025[0]
    buf1027 = buf1025[1]
    del buf1025
    buf1028 = buf1012; del buf1012  # reuse
    buf1029 = buf1022; del buf1022  # reuse
    buf1030 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1031 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1032 = buf1024; del buf1024  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_154(c_void_p(buf1028.data_ptr()), c_void_p(relu_175.data_ptr()), c_void_p(relu_177.data_ptr()), c_void_p(buf999.data_ptr()), c_void_p(buf1026.data_ptr()), c_void_p(convolution_188.data_ptr()), c_void_p(unsqueeze_2965.data_ptr()), c_void_p(squeeze_565.data_ptr()), c_void_p(primals_566.data_ptr()), c_void_p(buf1029.data_ptr()), c_void_p(buf1030.data_ptr()), c_void_p(buf1031.data_ptr()), c_void_p(buf1032.data_ptr()))
    del buf1026
    del buf999
    del convolution_188
    del primals_566
    del relu_175
    del relu_177
    del squeeze_565
    del unsqueeze_2965
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1033 = aten.convolution_backward(buf1032, relu_174, primals_565, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1032
    del primals_565
    buf1034 = buf1033[0]
    buf1035 = buf1033[1]
    del buf1033
    buf1036 = buf1030; del buf1030  # reuse
    buf1037 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1038 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1039 = buf1034; del buf1034  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_155(c_void_p(buf1039.data_ptr()), c_void_p(relu_174.data_ptr()), c_void_p(convolution_187.data_ptr()), c_void_p(unsqueeze_2977.data_ptr()), c_void_p(squeeze_562.data_ptr()), c_void_p(primals_563.data_ptr()), c_void_p(buf1036.data_ptr()), c_void_p(buf1037.data_ptr()), c_void_p(buf1038.data_ptr()))
    del convolution_187
    del primals_563
    del relu_174
    del squeeze_562
    del unsqueeze_2977
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1040 = aten.convolution_backward(buf1039, relu_173, primals_562, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_562
    buf1041 = buf1040[0]
    buf1042 = buf1040[1]
    del buf1040
    buf1043 = buf1037; del buf1037  # reuse
    buf1044 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1045 = buf1039; del buf1039  # reuse
    buf1046 = buf1044; del buf1044  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_156(c_void_p(buf1046.data_ptr()), c_void_p(relu_173.data_ptr()), c_void_p(buf1028.data_ptr()), c_void_p(buf1041.data_ptr()), c_void_p(convolution_186.data_ptr()), c_void_p(unsqueeze_2989.data_ptr()), c_void_p(squeeze_559.data_ptr()), c_void_p(primals_560.data_ptr()), c_void_p(buf1043.data_ptr()), c_void_p(buf1045.data_ptr()))
    del convolution_186
    del primals_560
    del squeeze_559
    del unsqueeze_2989
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1047 = aten.convolution_backward(buf1045, relu_172, primals_559, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1045
    del primals_559
    buf1048 = buf1047[0]
    buf1049 = buf1047[1]
    del buf1047
    buf1050 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1051 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1052 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1053 = buf1048; del buf1048  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_157(c_void_p(buf1053.data_ptr()), c_void_p(relu_172.data_ptr()), c_void_p(convolution_185.data_ptr()), c_void_p(unsqueeze_3001.data_ptr()), c_void_p(squeeze_556.data_ptr()), c_void_p(primals_557.data_ptr()), c_void_p(buf1050.data_ptr()), c_void_p(buf1051.data_ptr()), c_void_p(buf1052.data_ptr()))
    del convolution_185
    del primals_557
    del relu_172
    del squeeze_556
    del unsqueeze_3001
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1054 = aten.convolution_backward(buf1053, relu_147, primals_556, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1053
    del primals_556
    buf1055 = buf1054[0]
    buf1056 = buf1054[1]
    del buf1054
    buf1057 = buf874; del buf874  # reuse
    buf1058 = buf921; del buf921  # reuse
    buf1059 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1060 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1061 = reinterpret_tensor(buf995, (8, 72, 14, 14), (14112, 1, 1008, 72), 0); del buf995  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_158(c_void_p(buf1057.data_ptr()), c_void_p(relu_171.data_ptr()), c_void_p(buf909.data_ptr()), c_void_p(buf959.data_ptr()), c_void_p(buf987.data_ptr()), c_void_p(convolution_184.data_ptr()), c_void_p(unsqueeze_3013.data_ptr()), c_void_p(squeeze_553.data_ptr()), c_void_p(primals_554.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(buf1059.data_ptr()), c_void_p(buf1060.data_ptr()), c_void_p(buf1061.data_ptr()))
    del buf909
    del buf959
    del buf987
    del convolution_184
    del primals_554
    del relu_171
    del squeeze_553
    del unsqueeze_3013
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1062 = aten.convolution_backward(buf1061, relu_170, primals_553, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1061
    del primals_553
    buf1063 = buf1062[0]
    buf1064 = buf1062[1]
    del buf1062
    buf1065 = buf1059; del buf1059  # reuse
    buf1066 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1067 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1068 = buf1063; del buf1063  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_159(c_void_p(buf1068.data_ptr()), c_void_p(relu_170.data_ptr()), c_void_p(convolution_183.data_ptr()), c_void_p(unsqueeze_3025.data_ptr()), c_void_p(squeeze_550.data_ptr()), c_void_p(primals_551.data_ptr()), c_void_p(buf1065.data_ptr()), c_void_p(buf1066.data_ptr()), c_void_p(buf1067.data_ptr()))
    del convolution_183
    del primals_551
    del relu_170
    del squeeze_550
    del unsqueeze_3025
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1069 = aten.convolution_backward(buf1068, relu_169, primals_550, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_550
    buf1070 = buf1069[0]
    buf1071 = buf1069[1]
    del buf1069
    buf1072 = buf1066; del buf1066  # reuse
    buf1073 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1074 = buf1068; del buf1068  # reuse
    buf1075 = buf1073; del buf1073  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_160(c_void_p(buf1075.data_ptr()), c_void_p(relu_169.data_ptr()), c_void_p(buf1057.data_ptr()), c_void_p(buf1070.data_ptr()), c_void_p(convolution_182.data_ptr()), c_void_p(unsqueeze_3037.data_ptr()), c_void_p(squeeze_547.data_ptr()), c_void_p(primals_548.data_ptr()), c_void_p(buf1072.data_ptr()), c_void_p(buf1074.data_ptr()))
    del convolution_182
    del primals_548
    del squeeze_547
    del unsqueeze_3037
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1076 = aten.convolution_backward(buf1074, relu_168, primals_547, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1074
    del primals_547
    buf1077 = buf1076[0]
    buf1078 = buf1076[1]
    del buf1076
    buf1079 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1080 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1081 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1082 = buf1077; del buf1077  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_161(c_void_p(buf1082.data_ptr()), c_void_p(relu_168.data_ptr()), c_void_p(convolution_181.data_ptr()), c_void_p(unsqueeze_3049.data_ptr()), c_void_p(squeeze_544.data_ptr()), c_void_p(primals_545.data_ptr()), c_void_p(buf1079.data_ptr()), c_void_p(buf1080.data_ptr()), c_void_p(buf1081.data_ptr()))
    del convolution_181
    del primals_545
    del relu_168
    del squeeze_544
    del unsqueeze_3049
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1083 = aten.convolution_backward(buf1082, relu_167, primals_544, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_544
    buf1084 = buf1083[0]
    buf1085 = buf1083[1]
    del buf1083
    buf1086 = buf1057; del buf1057  # reuse
    buf1087 = buf1080; del buf1080  # reuse
    buf1088 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1089 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1090 = buf1082; del buf1082  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_162(c_void_p(buf1086.data_ptr()), c_void_p(relu_167.data_ptr()), c_void_p(relu_169.data_ptr()), c_void_p(buf1070.data_ptr()), c_void_p(buf1084.data_ptr()), c_void_p(convolution_180.data_ptr()), c_void_p(unsqueeze_3061.data_ptr()), c_void_p(squeeze_541.data_ptr()), c_void_p(primals_542.data_ptr()), c_void_p(buf1087.data_ptr()), c_void_p(buf1088.data_ptr()), c_void_p(buf1089.data_ptr()), c_void_p(buf1090.data_ptr()))
    del buf1070
    del buf1084
    del convolution_180
    del primals_542
    del relu_167
    del relu_169
    del squeeze_541
    del unsqueeze_3061
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1091 = aten.convolution_backward(buf1090, relu_166, primals_541, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1090
    del primals_541
    buf1092 = buf1091[0]
    buf1093 = buf1091[1]
    del buf1091
    buf1094 = buf1088; del buf1088  # reuse
    buf1095 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1096 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1097 = buf1092; del buf1092  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_163(c_void_p(buf1097.data_ptr()), c_void_p(relu_166.data_ptr()), c_void_p(convolution_179.data_ptr()), c_void_p(unsqueeze_3073.data_ptr()), c_void_p(squeeze_538.data_ptr()), c_void_p(primals_539.data_ptr()), c_void_p(buf1094.data_ptr()), c_void_p(buf1095.data_ptr()), c_void_p(buf1096.data_ptr()))
    del convolution_179
    del primals_539
    del relu_166
    del squeeze_538
    del unsqueeze_3073
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1098 = aten.convolution_backward(buf1097, relu_165, primals_538, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_538
    buf1099 = buf1098[0]
    buf1100 = buf1098[1]
    del buf1098
    buf1101 = buf1095; del buf1095  # reuse
    buf1102 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1103 = buf1097; del buf1097  # reuse
    buf1104 = buf1102; del buf1102  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_164(c_void_p(buf1104.data_ptr()), c_void_p(relu_165.data_ptr()), c_void_p(buf1086.data_ptr()), c_void_p(buf1099.data_ptr()), c_void_p(convolution_178.data_ptr()), c_void_p(unsqueeze_3085.data_ptr()), c_void_p(squeeze_535.data_ptr()), c_void_p(primals_536.data_ptr()), c_void_p(buf1101.data_ptr()), c_void_p(buf1103.data_ptr()))
    del convolution_178
    del primals_536
    del squeeze_535
    del unsqueeze_3085
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1105 = aten.convolution_backward(buf1103, relu_164, primals_535, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1103
    del primals_535
    buf1106 = buf1105[0]
    buf1107 = buf1105[1]
    del buf1105
    buf1108 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1109 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1110 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1111 = buf1106; del buf1106  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_165(c_void_p(buf1111.data_ptr()), c_void_p(relu_164.data_ptr()), c_void_p(convolution_177.data_ptr()), c_void_p(unsqueeze_3097.data_ptr()), c_void_p(squeeze_532.data_ptr()), c_void_p(primals_533.data_ptr()), c_void_p(buf1108.data_ptr()), c_void_p(buf1109.data_ptr()), c_void_p(buf1110.data_ptr()))
    del convolution_177
    del primals_533
    del relu_164
    del squeeze_532
    del unsqueeze_3097
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1112 = aten.convolution_backward(buf1111, relu_146, primals_532, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1111
    del primals_532
    buf1113 = buf1112[0]
    buf1114 = buf1112[1]
    del buf1112
    buf1115 = buf887; del buf887  # reuse
    buf1116 = buf962; del buf962  # reuse
    buf1117 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1118 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1119 = buf964; del buf964  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_166(c_void_p(buf1115.data_ptr()), c_void_p(relu_163.data_ptr()), c_void_p(buf925.data_ptr()), c_void_p(buf940.data_ptr()), c_void_p(buf997.data_ptr()), c_void_p(convolution_176.data_ptr()), c_void_p(unsqueeze_3109.data_ptr()), c_void_p(squeeze_529.data_ptr()), c_void_p(primals_530.data_ptr()), c_void_p(buf1116.data_ptr()), c_void_p(buf1117.data_ptr()), c_void_p(buf1118.data_ptr()), c_void_p(buf1119.data_ptr()))
    del buf925
    del buf940
    del buf997
    del convolution_176
    del primals_530
    del relu_163
    del squeeze_529
    del unsqueeze_3109
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1120 = aten.convolution_backward(buf1119, relu_162, primals_529, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1119
    del primals_529
    buf1121 = buf1120[0]
    buf1122 = buf1120[1]
    del buf1120
    buf1123 = buf1117; del buf1117  # reuse
    buf1124 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1125 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1126 = buf1121; del buf1121  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_167(c_void_p(buf1126.data_ptr()), c_void_p(relu_162.data_ptr()), c_void_p(convolution_175.data_ptr()), c_void_p(unsqueeze_3121.data_ptr()), c_void_p(squeeze_526.data_ptr()), c_void_p(primals_527.data_ptr()), c_void_p(buf1123.data_ptr()), c_void_p(buf1124.data_ptr()), c_void_p(buf1125.data_ptr()))
    del convolution_175
    del primals_527
    del relu_162
    del squeeze_526
    del unsqueeze_3121
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1127 = aten.convolution_backward(buf1126, relu_161, primals_526, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_526
    buf1128 = buf1127[0]
    buf1129 = buf1127[1]
    del buf1127
    buf1130 = buf1124; del buf1124  # reuse
    buf1131 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1132 = buf1126; del buf1126  # reuse
    buf1133 = buf1131; del buf1131  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_168(c_void_p(buf1133.data_ptr()), c_void_p(relu_161.data_ptr()), c_void_p(buf1115.data_ptr()), c_void_p(buf1128.data_ptr()), c_void_p(convolution_174.data_ptr()), c_void_p(unsqueeze_3133.data_ptr()), c_void_p(squeeze_523.data_ptr()), c_void_p(primals_524.data_ptr()), c_void_p(buf1130.data_ptr()), c_void_p(buf1132.data_ptr()))
    del convolution_174
    del primals_524
    del squeeze_523
    del unsqueeze_3133
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1134 = aten.convolution_backward(buf1132, relu_160, primals_523, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1132
    del primals_523
    buf1135 = buf1134[0]
    buf1136 = buf1134[1]
    del buf1134
    buf1137 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1138 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1139 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1140 = buf1135; del buf1135  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_169(c_void_p(buf1140.data_ptr()), c_void_p(relu_160.data_ptr()), c_void_p(convolution_173.data_ptr()), c_void_p(unsqueeze_3145.data_ptr()), c_void_p(squeeze_520.data_ptr()), c_void_p(primals_521.data_ptr()), c_void_p(buf1137.data_ptr()), c_void_p(buf1138.data_ptr()), c_void_p(buf1139.data_ptr()))
    del convolution_173
    del primals_521
    del relu_160
    del squeeze_520
    del unsqueeze_3145
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1141 = aten.convolution_backward(buf1140, relu_159, primals_520, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_520
    buf1142 = buf1141[0]
    buf1143 = buf1141[1]
    del buf1141
    buf1144 = buf1115; del buf1115  # reuse
    buf1145 = buf1138; del buf1138  # reuse
    buf1146 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1147 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1148 = buf1140; del buf1140  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_170(c_void_p(buf1144.data_ptr()), c_void_p(relu_159.data_ptr()), c_void_p(relu_161.data_ptr()), c_void_p(buf1128.data_ptr()), c_void_p(buf1142.data_ptr()), c_void_p(convolution_172.data_ptr()), c_void_p(unsqueeze_3157.data_ptr()), c_void_p(squeeze_517.data_ptr()), c_void_p(primals_518.data_ptr()), c_void_p(buf1145.data_ptr()), c_void_p(buf1146.data_ptr()), c_void_p(buf1147.data_ptr()), c_void_p(buf1148.data_ptr()))
    del buf1128
    del buf1142
    del convolution_172
    del primals_518
    del relu_159
    del relu_161
    del squeeze_517
    del unsqueeze_3157
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1149 = aten.convolution_backward(buf1148, relu_158, primals_517, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1148
    del primals_517
    buf1150 = buf1149[0]
    buf1151 = buf1149[1]
    del buf1149
    buf1152 = buf1146; del buf1146  # reuse
    buf1153 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1154 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1155 = buf1150; del buf1150  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_171(c_void_p(buf1155.data_ptr()), c_void_p(relu_158.data_ptr()), c_void_p(convolution_171.data_ptr()), c_void_p(unsqueeze_3169.data_ptr()), c_void_p(squeeze_514.data_ptr()), c_void_p(primals_515.data_ptr()), c_void_p(buf1152.data_ptr()), c_void_p(buf1153.data_ptr()), c_void_p(buf1154.data_ptr()))
    del convolution_171
    del primals_515
    del relu_158
    del squeeze_514
    del unsqueeze_3169
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1156 = aten.convolution_backward(buf1155, relu_157, primals_514, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_514
    buf1157 = buf1156[0]
    buf1158 = buf1156[1]
    del buf1156
    buf1159 = buf1153; del buf1153  # reuse
    buf1160 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1161 = buf1155; del buf1155  # reuse
    buf1162 = buf1160; del buf1160  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_172(c_void_p(buf1162.data_ptr()), c_void_p(relu_157.data_ptr()), c_void_p(buf1144.data_ptr()), c_void_p(buf1157.data_ptr()), c_void_p(convolution_170.data_ptr()), c_void_p(unsqueeze_3181.data_ptr()), c_void_p(squeeze_511.data_ptr()), c_void_p(primals_512.data_ptr()), c_void_p(buf1159.data_ptr()), c_void_p(buf1161.data_ptr()))
    del convolution_170
    del primals_512
    del squeeze_511
    del unsqueeze_3181
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1163 = aten.convolution_backward(buf1161, relu_156, primals_511, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1161
    del primals_511
    buf1164 = buf1163[0]
    buf1165 = buf1163[1]
    del buf1163
    buf1166 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1167 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1168 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1169 = buf1164; del buf1164  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_173(c_void_p(buf1169.data_ptr()), c_void_p(relu_156.data_ptr()), c_void_p(convolution_169.data_ptr()), c_void_p(unsqueeze_3193.data_ptr()), c_void_p(squeeze_508.data_ptr()), c_void_p(primals_509.data_ptr()), c_void_p(buf1166.data_ptr()), c_void_p(buf1167.data_ptr()), c_void_p(buf1168.data_ptr()))
    del convolution_169
    del primals_509
    del relu_156
    del squeeze_508
    del unsqueeze_3193
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1170 = aten.convolution_backward(buf1169, relu_144, primals_508, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1169
    del primals_508
    buf1171 = buf1170[0]
    buf1172 = buf1170[1]
    del buf1170
    buf1174 = buf993; del buf993  # reuse
    buf1175 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1176 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1177 = buf968; del buf968  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_174(c_void_p(buf1173.data_ptr()), c_void_p(convolution_168.data_ptr()), c_void_p(unsqueeze_3205.data_ptr()), c_void_p(squeeze_505.data_ptr()), c_void_p(primals_506.data_ptr()), c_void_p(buf1174.data_ptr()), c_void_p(buf1175.data_ptr()), c_void_p(buf1176.data_ptr()), c_void_p(buf1177.data_ptr()))
    del convolution_168
    del primals_506
    del squeeze_505
    del unsqueeze_3205
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1178 = aten.convolution_backward(buf1177, relu_154, primals_505, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1177
    del primals_505
    buf1179 = buf1178[0]
    buf1180 = buf1178[1]
    del buf1178
    buf1181 = buf1175; del buf1175  # reuse
    buf1182 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1183 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1184 = buf1179; del buf1179  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_175(c_void_p(buf1184.data_ptr()), c_void_p(relu_154.data_ptr()), c_void_p(convolution_167.data_ptr()), c_void_p(unsqueeze_3217.data_ptr()), c_void_p(squeeze_502.data_ptr()), c_void_p(primals_503.data_ptr()), c_void_p(buf1181.data_ptr()), c_void_p(buf1182.data_ptr()), c_void_p(buf1183.data_ptr()))
    del convolution_167
    del primals_503
    del relu_154
    del squeeze_502
    del unsqueeze_3217
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1185 = aten.convolution_backward(buf1184, relu_153, primals_502, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_502
    buf1186 = buf1185[0]
    buf1187 = buf1185[1]
    del buf1185
    buf1188 = buf1182; del buf1182  # reuse
    buf1189 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1190 = buf1184; del buf1184  # reuse
    buf1191 = buf1189; del buf1189  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_176(c_void_p(buf1191.data_ptr()), c_void_p(relu_153.data_ptr()), c_void_p(buf1173.data_ptr()), c_void_p(buf1186.data_ptr()), c_void_p(convolution_166.data_ptr()), c_void_p(unsqueeze_3229.data_ptr()), c_void_p(squeeze_499.data_ptr()), c_void_p(primals_500.data_ptr()), c_void_p(buf1188.data_ptr()), c_void_p(buf1190.data_ptr()))
    del convolution_166
    del primals_500
    del squeeze_499
    del unsqueeze_3229
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1192 = aten.convolution_backward(buf1190, relu_152, primals_499, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1190
    del primals_499
    buf1193 = buf1192[0]
    buf1194 = buf1192[1]
    del buf1192
    buf1195 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1196 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1197 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1198 = buf1193; del buf1193  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_177(c_void_p(buf1198.data_ptr()), c_void_p(relu_152.data_ptr()), c_void_p(convolution_165.data_ptr()), c_void_p(unsqueeze_3241.data_ptr()), c_void_p(squeeze_496.data_ptr()), c_void_p(primals_497.data_ptr()), c_void_p(buf1195.data_ptr()), c_void_p(buf1196.data_ptr()), c_void_p(buf1197.data_ptr()))
    del convolution_165
    del primals_497
    del relu_152
    del squeeze_496
    del unsqueeze_3241
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1199 = aten.convolution_backward(buf1198, relu_151, primals_496, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_496
    buf1200 = buf1199[0]
    buf1201 = buf1199[1]
    del buf1199
    buf1202 = buf1173; del buf1173  # reuse
    buf1203 = buf1196; del buf1196  # reuse
    buf1204 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1205 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1206 = buf1198; del buf1198  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_178(c_void_p(buf1202.data_ptr()), c_void_p(relu_151.data_ptr()), c_void_p(relu_153.data_ptr()), c_void_p(buf1186.data_ptr()), c_void_p(buf1200.data_ptr()), c_void_p(convolution_164.data_ptr()), c_void_p(unsqueeze_3253.data_ptr()), c_void_p(squeeze_493.data_ptr()), c_void_p(primals_494.data_ptr()), c_void_p(buf1203.data_ptr()), c_void_p(buf1204.data_ptr()), c_void_p(buf1205.data_ptr()), c_void_p(buf1206.data_ptr()))
    del buf1186
    del buf1200
    del convolution_164
    del primals_494
    del relu_151
    del relu_153
    del squeeze_493
    del unsqueeze_3253
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1207 = aten.convolution_backward(buf1206, relu_150, primals_493, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1206
    del primals_493
    buf1208 = buf1207[0]
    buf1209 = buf1207[1]
    del buf1207
    buf1210 = buf1204; del buf1204  # reuse
    buf1211 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1212 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1213 = buf1208; del buf1208  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_179(c_void_p(buf1213.data_ptr()), c_void_p(relu_150.data_ptr()), c_void_p(convolution_163.data_ptr()), c_void_p(unsqueeze_3265.data_ptr()), c_void_p(squeeze_490.data_ptr()), c_void_p(primals_491.data_ptr()), c_void_p(buf1210.data_ptr()), c_void_p(buf1211.data_ptr()), c_void_p(buf1212.data_ptr()))
    del convolution_163
    del primals_491
    del relu_150
    del squeeze_490
    del unsqueeze_3265
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1214 = aten.convolution_backward(buf1213, relu_149, primals_490, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_490
    buf1215 = buf1214[0]
    buf1216 = buf1214[1]
    del buf1214
    buf1217 = buf1211; del buf1211  # reuse
    buf1218 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1219 = buf1213; del buf1213  # reuse
    buf1220 = buf1218; del buf1218  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_180(c_void_p(buf1220.data_ptr()), c_void_p(relu_149.data_ptr()), c_void_p(buf1202.data_ptr()), c_void_p(buf1215.data_ptr()), c_void_p(convolution_162.data_ptr()), c_void_p(unsqueeze_3277.data_ptr()), c_void_p(squeeze_487.data_ptr()), c_void_p(primals_488.data_ptr()), c_void_p(buf1217.data_ptr()), c_void_p(buf1219.data_ptr()))
    del convolution_162
    del primals_488
    del squeeze_487
    del unsqueeze_3277
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1221 = aten.convolution_backward(buf1219, relu_148, primals_487, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1219
    del primals_487
    buf1222 = buf1221[0]
    buf1223 = buf1221[1]
    del buf1221
    buf1224 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1225 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1226 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1227 = buf1222; del buf1222  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_181(c_void_p(buf1227.data_ptr()), c_void_p(relu_148.data_ptr()), c_void_p(convolution_161.data_ptr()), c_void_p(unsqueeze_3289.data_ptr()), c_void_p(squeeze_484.data_ptr()), c_void_p(primals_485.data_ptr()), c_void_p(buf1224.data_ptr()), c_void_p(buf1225.data_ptr()), c_void_p(buf1226.data_ptr()))
    del convolution_161
    del primals_485
    del relu_148
    del squeeze_484
    del unsqueeze_3289
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1228 = aten.convolution_backward(buf1227, relu_143, primals_484, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1227
    del primals_484
    buf1229 = buf1228[0]
    buf1230 = buf1228[1]
    del buf1228
    buf1231 = buf1028; del buf1028  # reuse
    buf1232 = buf1051; del buf1051  # reuse
    buf1233 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1234 = empty((144, ), device='cpu', dtype=torch.float32)
    buf1235 = buf1231; del buf1231  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_182(c_void_p(buf1235.data_ptr()), c_void_p(relu_147.data_ptr()), c_void_p(relu_173.data_ptr()), c_void_p(buf1041.data_ptr()), c_void_p(buf1055.data_ptr()), c_void_p(convolution_160.data_ptr()), c_void_p(unsqueeze_3301.data_ptr()), c_void_p(squeeze_481.data_ptr()), c_void_p(primals_482.data_ptr()), c_void_p(buf1232.data_ptr()), c_void_p(buf1233.data_ptr()), c_void_p(buf1234.data_ptr()))
    del buf1041
    del buf1233
    del convolution_160
    del primals_482
    del relu_147
    del relu_173
    del squeeze_481
    del unsqueeze_3301
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1236 = aten.convolution_backward(buf1235, relu_146, primals_481, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_481
    buf1237 = buf1236[0]
    buf1238 = buf1236[1]
    del buf1236
    buf1239 = buf1086; del buf1086  # reuse
    buf1260 = buf1144; del buf1144  # reuse
    buf1261 = reinterpret_tensor(buf1235, (8, 36, 14, 14), (7056, 196, 14, 1), 0); del buf1235  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_183(c_void_p(buf1239.data_ptr()), c_void_p(buf1260.data_ptr()), c_void_p(relu_146.data_ptr()), c_void_p(relu_165.data_ptr()), c_void_p(buf1099.data_ptr()), c_void_p(buf1113.data_ptr()), c_void_p(buf1237.data_ptr()), c_void_p(relu_144.data_ptr()), c_void_p(relu_157.data_ptr()), c_void_p(buf1157.data_ptr()), c_void_p(buf1171.data_ptr()), c_void_p(buf1261.data_ptr()))
    del buf1157
    del relu_144
    del relu_146
    del relu_157
    del relu_165
    aten.index_put_(buf1261, [None, None, unsqueeze_259, convert_element_type_20], buf1260, True)
    buf1264 = buf1167; del buf1167  # reuse
    buf1265 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1263 = reinterpret_tensor(buf1055, (8, 36, 14, 14), (7056, 196, 14, 1), 0); del buf1055  # reuse
    buf1267 = buf1263; del buf1263  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_184(c_void_p(buf1267.data_ptr()), c_void_p(buf1261.data_ptr()), c_void_p(convolution_156.data_ptr()), c_void_p(unsqueeze_3349.data_ptr()), c_void_p(squeeze_469.data_ptr()), c_void_p(primals_470.data_ptr()), c_void_p(buf1264.data_ptr()), c_void_p(buf1265.data_ptr()))
    del convolution_156
    del primals_470
    del unsqueeze_3349
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1268 = aten.convolution_backward(buf1267, relu_142, primals_469, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_469
    buf1269 = buf1268[0]
    buf1278 = buf1202; del buf1202  # reuse
    buf1279 = buf985; del buf985  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_185(c_void_p(buf1278.data_ptr()), c_void_p(relu_143.data_ptr()), c_void_p(relu_149.data_ptr()), c_void_p(buf1215.data_ptr()), c_void_p(buf1229.data_ptr()), c_void_p(buf1279.data_ptr()))
    del buf1215
    del relu_143
    del relu_149
    aten.index_put_(buf1279, [None, None, unsqueeze_250, convert_element_type_14], buf1278, True)
    buf1282 = buf1225; del buf1225  # reuse
    buf1283 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1281 = buf979; del buf979  # reuse
    buf1285 = buf1281; del buf1281  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_186(c_void_p(buf1285.data_ptr()), c_void_p(buf1279.data_ptr()), c_void_p(convolution_154.data_ptr()), c_void_p(unsqueeze_3373.data_ptr()), c_void_p(squeeze_463.data_ptr()), c_void_p(primals_464.data_ptr()), c_void_p(buf1282.data_ptr()), c_void_p(buf1283.data_ptr()))
    del convolution_154
    del primals_464
    del unsqueeze_3373
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1286 = aten.convolution_backward(buf1285, relu_142, primals_463, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_463
    buf1287 = buf1286[0]
    buf1240 = buf1109; del buf1109  # reuse
    buf1241 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1247 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1299 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1300 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1242 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1243 = buf1237; del buf1237  # reuse
    buf1249 = buf1113; del buf1113  # reuse
    buf1301 = buf1099; del buf1099  # reuse
    buf1303 = buf1301; del buf1301  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_187(c_void_p(buf1303.data_ptr()), c_void_p(buf1239.data_ptr()), c_void_p(convolution_159.data_ptr()), c_void_p(unsqueeze_3313.data_ptr()), c_void_p(convolution_158.data_ptr()), c_void_p(unsqueeze_3325.data_ptr()), c_void_p(relu_142.data_ptr()), c_void_p(buf1269.data_ptr()), c_void_p(buf1287.data_ptr()), c_void_p(convolution_152.data_ptr()), c_void_p(unsqueeze_3397.data_ptr()), c_void_p(squeeze_478.data_ptr()), c_void_p(primals_479.data_ptr()), c_void_p(squeeze_475.data_ptr()), c_void_p(primals_476.data_ptr()), c_void_p(squeeze_457.data_ptr()), c_void_p(primals_458.data_ptr()), c_void_p(buf1240.data_ptr()), c_void_p(buf1241.data_ptr()), c_void_p(buf1247.data_ptr()), c_void_p(buf1299.data_ptr()), c_void_p(buf1300.data_ptr()), c_void_p(buf1242.data_ptr()), c_void_p(buf1243.data_ptr()), c_void_p(buf1249.data_ptr()))
    del convolution_152
    del convolution_158
    del convolution_159
    del primals_458
    del primals_476
    del primals_479
    del squeeze_478
    del unsqueeze_3313
    del unsqueeze_3325
    del unsqueeze_3397
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1244 = aten.convolution_backward(buf1243, relu_134, primals_478, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1243
    del primals_478
    buf1245 = buf1244[0]
    buf1246 = buf1244[1]
    del buf1244
    buf1248 = buf1247; del buf1247  # reuse
    cpp_fused_native_batch_norm_backward_188(c_void_p(buf1248.data_ptr()), c_void_p(squeeze_475.data_ptr()))
    del squeeze_475
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1250 = aten.convolution_backward(buf1249, relu_145, primals_475, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_475
    buf1251 = buf1250[0]
    buf1252 = buf1250[1]
    del buf1250
    buf1253 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1254 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1255 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1256 = buf1251; del buf1251  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_189(c_void_p(buf1256.data_ptr()), c_void_p(relu_145.data_ptr()), c_void_p(convolution_157.data_ptr()), c_void_p(unsqueeze_3337.data_ptr()), c_void_p(squeeze_472.data_ptr()), c_void_p(primals_473.data_ptr()), c_void_p(buf1253.data_ptr()), c_void_p(buf1254.data_ptr()), c_void_p(buf1255.data_ptr()))
    del convolution_157
    del primals_473
    del relu_145
    del squeeze_472
    del unsqueeze_3337
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1257 = aten.convolution_backward(buf1256, relu_126, primals_472, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_472
    buf1258 = buf1257[0]
    buf1259 = buf1257[1]
    del buf1257
    buf1266 = buf1265; del buf1265  # reuse
    cpp_fused_native_batch_norm_backward_190(c_void_p(buf1266.data_ptr()), c_void_p(squeeze_469.data_ptr()))
    del squeeze_469
    buf1270 = buf1268[1]
    del buf1268
    buf1271 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1272 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1273 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1274 = buf1171; del buf1171  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_191(c_void_p(buf1260.data_ptr()), c_void_p(convolution_155.data_ptr()), c_void_p(unsqueeze_3361.data_ptr()), c_void_p(squeeze_466.data_ptr()), c_void_p(primals_467.data_ptr()), c_void_p(buf1271.data_ptr()), c_void_p(buf1272.data_ptr()), c_void_p(buf1273.data_ptr()), c_void_p(buf1274.data_ptr()))
    del convolution_155
    del primals_467
    del squeeze_466
    del unsqueeze_3361
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1275 = aten.convolution_backward(buf1274, relu_126, primals_466, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_466
    buf1276 = buf1275[0]
    buf1277 = buf1275[1]
    del buf1275
    buf1284 = buf1283; del buf1283  # reuse
    cpp_fused_native_batch_norm_backward_192(c_void_p(buf1284.data_ptr()), c_void_p(squeeze_463.data_ptr()))
    del squeeze_463
    buf1288 = buf1286[1]
    del buf1286
    buf1289 = reinterpret_tensor(buf1256, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf1256  # reuse
    cpp_fused__unsafe_index_put_new_zeros_193(c_void_p(buf1289.data_ptr()))
    aten.index_put_(buf1289, [None, None, unsqueeze_136, convert_element_type_2], buf1278, True)
    buf1292 = buf1254; del buf1254  # reuse
    buf1293 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1294 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1291 = reinterpret_tensor(buf1249, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf1249  # reuse
    buf1295 = buf1291; del buf1291  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_194(c_void_p(buf1295.data_ptr()), c_void_p(buf1289.data_ptr()), c_void_p(convolution_153.data_ptr()), c_void_p(unsqueeze_3385.data_ptr()), c_void_p(squeeze_460.data_ptr()), c_void_p(primals_461.data_ptr()), c_void_p(buf1292.data_ptr()), c_void_p(buf1293.data_ptr()), c_void_p(buf1294.data_ptr()))
    del buf1289
    del convolution_153
    del primals_461
    del squeeze_460
    del unsqueeze_3385
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1296 = aten.convolution_backward(buf1295, relu_134, primals_460, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1295
    del primals_460
    buf1297 = buf1296[0]
    buf1298 = buf1296[1]
    del buf1296
    buf1302 = buf1300; del buf1300  # reuse
    cpp_fused_native_batch_norm_backward_195(c_void_p(buf1302.data_ptr()), c_void_p(squeeze_457.data_ptr()))
    del squeeze_457
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1304 = aten.convolution_backward(buf1303, relu_141, primals_457, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1303
    del primals_457
    buf1305 = buf1304[0]
    buf1306 = buf1304[1]
    del buf1304
    buf1307 = buf1241; del buf1241  # reuse
    buf1308 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1309 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1310 = buf1305; del buf1305  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_196(c_void_p(buf1310.data_ptr()), c_void_p(relu_141.data_ptr()), c_void_p(convolution_151.data_ptr()), c_void_p(unsqueeze_3409.data_ptr()), c_void_p(squeeze_454.data_ptr()), c_void_p(primals_455.data_ptr()), c_void_p(buf1307.data_ptr()), c_void_p(buf1308.data_ptr()), c_void_p(buf1309.data_ptr()))
    del convolution_151
    del primals_455
    del relu_141
    del squeeze_454
    del unsqueeze_3409
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1311 = aten.convolution_backward(buf1310, relu_140, primals_454, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_454
    buf1312 = buf1311[0]
    buf1313 = buf1311[1]
    del buf1311
    buf1314 = buf1239; del buf1239  # reuse
    buf1315 = buf1308; del buf1308  # reuse
    buf1316 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1317 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1318 = buf1310; del buf1310  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_197(c_void_p(buf1314.data_ptr()), c_void_p(relu_140.data_ptr()), c_void_p(relu_142.data_ptr()), c_void_p(buf1269.data_ptr()), c_void_p(buf1287.data_ptr()), c_void_p(buf1312.data_ptr()), c_void_p(convolution_150.data_ptr()), c_void_p(unsqueeze_3421.data_ptr()), c_void_p(squeeze_451.data_ptr()), c_void_p(primals_452.data_ptr()), c_void_p(buf1315.data_ptr()), c_void_p(buf1316.data_ptr()), c_void_p(buf1317.data_ptr()), c_void_p(buf1318.data_ptr()))
    del buf1269
    del buf1287
    del buf1312
    del convolution_150
    del primals_452
    del relu_140
    del relu_142
    del squeeze_451
    del unsqueeze_3421
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1319 = aten.convolution_backward(buf1318, relu_139, primals_451, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1318
    del primals_451
    buf1320 = buf1319[0]
    buf1321 = buf1319[1]
    del buf1319
    buf1322 = buf1316; del buf1316  # reuse
    buf1323 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1324 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1325 = buf1320; del buf1320  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_198(c_void_p(buf1325.data_ptr()), c_void_p(relu_139.data_ptr()), c_void_p(convolution_149.data_ptr()), c_void_p(unsqueeze_3433.data_ptr()), c_void_p(squeeze_448.data_ptr()), c_void_p(primals_449.data_ptr()), c_void_p(buf1322.data_ptr()), c_void_p(buf1323.data_ptr()), c_void_p(buf1324.data_ptr()))
    del convolution_149
    del primals_449
    del relu_139
    del squeeze_448
    del unsqueeze_3433
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1326 = aten.convolution_backward(buf1325, relu_138, primals_448, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_448
    buf1327 = buf1326[0]
    buf1328 = buf1326[1]
    del buf1326
    buf1329 = buf1323; del buf1323  # reuse
    buf1330 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1331 = buf1325; del buf1325  # reuse
    buf1332 = buf1330; del buf1330  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_199(c_void_p(buf1332.data_ptr()), c_void_p(relu_138.data_ptr()), c_void_p(buf1314.data_ptr()), c_void_p(buf1327.data_ptr()), c_void_p(convolution_148.data_ptr()), c_void_p(unsqueeze_3445.data_ptr()), c_void_p(squeeze_445.data_ptr()), c_void_p(primals_446.data_ptr()), c_void_p(buf1329.data_ptr()), c_void_p(buf1331.data_ptr()))
    del convolution_148
    del primals_446
    del squeeze_445
    del unsqueeze_3445
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1333 = aten.convolution_backward(buf1331, relu_137, primals_445, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1331
    del primals_445
    buf1334 = buf1333[0]
    buf1335 = buf1333[1]
    del buf1333
    buf1336 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1337 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1338 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1339 = buf1334; del buf1334  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_200(c_void_p(buf1339.data_ptr()), c_void_p(relu_137.data_ptr()), c_void_p(convolution_147.data_ptr()), c_void_p(unsqueeze_3457.data_ptr()), c_void_p(squeeze_442.data_ptr()), c_void_p(primals_443.data_ptr()), c_void_p(buf1336.data_ptr()), c_void_p(buf1337.data_ptr()), c_void_p(buf1338.data_ptr()))
    del convolution_147
    del primals_443
    del relu_137
    del squeeze_442
    del unsqueeze_3457
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1340 = aten.convolution_backward(buf1339, relu_136, primals_442, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_442
    buf1341 = buf1340[0]
    buf1342 = buf1340[1]
    del buf1340
    buf1343 = buf1314; del buf1314  # reuse
    buf1344 = buf1337; del buf1337  # reuse
    buf1345 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1346 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1347 = buf1339; del buf1339  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_201(c_void_p(buf1343.data_ptr()), c_void_p(relu_136.data_ptr()), c_void_p(relu_138.data_ptr()), c_void_p(buf1327.data_ptr()), c_void_p(buf1341.data_ptr()), c_void_p(convolution_146.data_ptr()), c_void_p(unsqueeze_3469.data_ptr()), c_void_p(squeeze_439.data_ptr()), c_void_p(primals_440.data_ptr()), c_void_p(buf1344.data_ptr()), c_void_p(buf1345.data_ptr()), c_void_p(buf1346.data_ptr()), c_void_p(buf1347.data_ptr()))
    del buf1327
    del buf1341
    del convolution_146
    del primals_440
    del relu_136
    del relu_138
    del squeeze_439
    del unsqueeze_3469
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1348 = aten.convolution_backward(buf1347, relu_135, primals_439, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_439
    buf1349 = buf1348[0]
    buf1350 = buf1348[1]
    del buf1348
    buf1351 = buf1345; del buf1345  # reuse
    buf1352 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1353 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1354 = buf1349; del buf1349  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_202(c_void_p(buf1354.data_ptr()), c_void_p(relu_135.data_ptr()), c_void_p(convolution_145.data_ptr()), c_void_p(unsqueeze_3481.data_ptr()), c_void_p(squeeze_436.data_ptr()), c_void_p(primals_437.data_ptr()), c_void_p(buf1351.data_ptr()), c_void_p(buf1352.data_ptr()), c_void_p(buf1353.data_ptr()))
    del convolution_145
    del primals_437
    del relu_135
    del squeeze_436
    del unsqueeze_3481
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1355 = aten.convolution_backward(buf1354, relu_118, primals_436, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_436
    buf1356 = buf1355[0]
    buf1357 = buf1355[1]
    del buf1355
    buf1358 = buf1272; del buf1272  # reuse
    buf1359 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1360 = buf1274; del buf1274  # reuse
    buf1362 = buf1360; del buf1360  # reuse
    buf1361 = buf1359; del buf1359  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_203(c_void_p(buf1362.data_ptr()), c_void_p(buf1361.data_ptr()), c_void_p(relu_134.data_ptr()), c_void_p(buf1245.data_ptr()), c_void_p(buf1260.data_ptr()), c_void_p(buf1297.data_ptr()), c_void_p(convolution_144.data_ptr()), c_void_p(unsqueeze_3493.data_ptr()), c_void_p(squeeze_433.data_ptr()), c_void_p(primals_434.data_ptr()), c_void_p(buf1358.data_ptr()))
    del convolution_144
    del primals_434
    del squeeze_433
    del unsqueeze_3493
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1363 = aten.convolution_backward(buf1362, relu_133, primals_433, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1362
    del primals_433
    buf1364 = buf1363[0]
    buf1365 = buf1363[1]
    del buf1363
    buf1366 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1367 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1368 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1369 = buf1364; del buf1364  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_204(c_void_p(buf1369.data_ptr()), c_void_p(relu_133.data_ptr()), c_void_p(convolution_143.data_ptr()), c_void_p(unsqueeze_3505.data_ptr()), c_void_p(squeeze_430.data_ptr()), c_void_p(primals_431.data_ptr()), c_void_p(buf1366.data_ptr()), c_void_p(buf1367.data_ptr()), c_void_p(buf1368.data_ptr()))
    del convolution_143
    del primals_431
    del relu_133
    del squeeze_430
    del unsqueeze_3505
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1370 = aten.convolution_backward(buf1369, relu_132, primals_430, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_430
    buf1371 = buf1370[0]
    buf1372 = buf1370[1]
    del buf1370
    buf1373 = buf1245; del buf1245  # reuse
    buf1374 = buf1367; del buf1367  # reuse
    buf1375 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1376 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1377 = buf1369; del buf1369  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_205(c_void_p(buf1373.data_ptr()), c_void_p(relu_132.data_ptr()), c_void_p(relu_134.data_ptr()), c_void_p(buf1260.data_ptr()), c_void_p(buf1297.data_ptr()), c_void_p(buf1371.data_ptr()), c_void_p(convolution_142.data_ptr()), c_void_p(unsqueeze_3517.data_ptr()), c_void_p(squeeze_427.data_ptr()), c_void_p(primals_428.data_ptr()), c_void_p(buf1374.data_ptr()), c_void_p(buf1375.data_ptr()), c_void_p(buf1376.data_ptr()), c_void_p(buf1377.data_ptr()))
    del buf1260
    del buf1297
    del buf1371
    del convolution_142
    del primals_428
    del relu_132
    del relu_134
    del squeeze_427
    del unsqueeze_3517
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1378 = aten.convolution_backward(buf1377, relu_131, primals_427, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1377
    del primals_427
    buf1379 = buf1378[0]
    buf1380 = buf1378[1]
    del buf1378
    buf1381 = buf1375; del buf1375  # reuse
    buf1382 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1383 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1384 = buf1379; del buf1379  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_206(c_void_p(buf1384.data_ptr()), c_void_p(relu_131.data_ptr()), c_void_p(convolution_141.data_ptr()), c_void_p(unsqueeze_3529.data_ptr()), c_void_p(squeeze_424.data_ptr()), c_void_p(primals_425.data_ptr()), c_void_p(buf1381.data_ptr()), c_void_p(buf1382.data_ptr()), c_void_p(buf1383.data_ptr()))
    del convolution_141
    del primals_425
    del relu_131
    del squeeze_424
    del unsqueeze_3529
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1385 = aten.convolution_backward(buf1384, relu_130, primals_424, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_424
    buf1386 = buf1385[0]
    buf1387 = buf1385[1]
    del buf1385
    buf1388 = buf1382; del buf1382  # reuse
    buf1389 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1390 = buf1384; del buf1384  # reuse
    buf1391 = buf1389; del buf1389  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_207(c_void_p(buf1391.data_ptr()), c_void_p(relu_130.data_ptr()), c_void_p(buf1373.data_ptr()), c_void_p(buf1386.data_ptr()), c_void_p(convolution_140.data_ptr()), c_void_p(unsqueeze_3541.data_ptr()), c_void_p(squeeze_421.data_ptr()), c_void_p(primals_422.data_ptr()), c_void_p(buf1388.data_ptr()), c_void_p(buf1390.data_ptr()))
    del convolution_140
    del primals_422
    del squeeze_421
    del unsqueeze_3541
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1392 = aten.convolution_backward(buf1390, relu_129, primals_421, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1390
    del primals_421
    buf1393 = buf1392[0]
    buf1394 = buf1392[1]
    del buf1392
    buf1395 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1396 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1397 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1398 = buf1393; del buf1393  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_208(c_void_p(buf1398.data_ptr()), c_void_p(relu_129.data_ptr()), c_void_p(convolution_139.data_ptr()), c_void_p(unsqueeze_3553.data_ptr()), c_void_p(squeeze_418.data_ptr()), c_void_p(primals_419.data_ptr()), c_void_p(buf1395.data_ptr()), c_void_p(buf1396.data_ptr()), c_void_p(buf1397.data_ptr()))
    del convolution_139
    del primals_419
    del relu_129
    del squeeze_418
    del unsqueeze_3553
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1399 = aten.convolution_backward(buf1398, relu_128, primals_418, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_418
    buf1400 = buf1399[0]
    buf1401 = buf1399[1]
    del buf1399
    buf1402 = buf1373; del buf1373  # reuse
    buf1403 = buf1396; del buf1396  # reuse
    buf1404 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1405 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1406 = buf1398; del buf1398  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_209(c_void_p(buf1402.data_ptr()), c_void_p(relu_128.data_ptr()), c_void_p(relu_130.data_ptr()), c_void_p(buf1386.data_ptr()), c_void_p(buf1400.data_ptr()), c_void_p(convolution_138.data_ptr()), c_void_p(unsqueeze_3565.data_ptr()), c_void_p(squeeze_415.data_ptr()), c_void_p(primals_416.data_ptr()), c_void_p(buf1403.data_ptr()), c_void_p(buf1404.data_ptr()), c_void_p(buf1405.data_ptr()), c_void_p(buf1406.data_ptr()))
    del buf1386
    del buf1400
    del convolution_138
    del primals_416
    del relu_128
    del relu_130
    del squeeze_415
    del unsqueeze_3565
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1407 = aten.convolution_backward(buf1406, relu_127, primals_415, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1406
    del primals_415
    buf1408 = buf1407[0]
    buf1409 = buf1407[1]
    del buf1407
    buf1410 = buf1404; del buf1404  # reuse
    buf1411 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1412 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1413 = buf1408; del buf1408  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_210(c_void_p(buf1413.data_ptr()), c_void_p(relu_127.data_ptr()), c_void_p(convolution_137.data_ptr()), c_void_p(unsqueeze_3577.data_ptr()), c_void_p(squeeze_412.data_ptr()), c_void_p(primals_413.data_ptr()), c_void_p(buf1410.data_ptr()), c_void_p(buf1411.data_ptr()), c_void_p(buf1412.data_ptr()))
    del convolution_137
    del primals_413
    del relu_127
    del squeeze_412
    del unsqueeze_3577
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1414 = aten.convolution_backward(buf1413, relu_116, primals_412, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1413
    del primals_412
    buf1415 = buf1414[0]
    buf1416 = buf1414[1]
    del buf1414
    buf1417 = buf1293; del buf1293  # reuse
    buf1418 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1419 = buf1229; del buf1229  # reuse
    buf1421 = buf1419; del buf1419  # reuse
    buf1420 = buf1418; del buf1418  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_211(c_void_p(buf1421.data_ptr()), c_void_p(buf1420.data_ptr()), c_void_p(relu_126.data_ptr()), c_void_p(buf1258.data_ptr()), c_void_p(buf1276.data_ptr()), c_void_p(buf1278.data_ptr()), c_void_p(convolution_136.data_ptr()), c_void_p(unsqueeze_3589.data_ptr()), c_void_p(squeeze_409.data_ptr()), c_void_p(primals_410.data_ptr()), c_void_p(buf1417.data_ptr()))
    del convolution_136
    del primals_410
    del squeeze_409
    del unsqueeze_3589
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1422 = aten.convolution_backward(buf1421, relu_125, primals_409, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1421
    del primals_409
    buf1423 = buf1422[0]
    buf1424 = buf1422[1]
    del buf1422
    buf1425 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1426 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1427 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1428 = buf1423; del buf1423  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_212(c_void_p(buf1428.data_ptr()), c_void_p(relu_125.data_ptr()), c_void_p(convolution_135.data_ptr()), c_void_p(unsqueeze_3601.data_ptr()), c_void_p(squeeze_406.data_ptr()), c_void_p(primals_407.data_ptr()), c_void_p(buf1425.data_ptr()), c_void_p(buf1426.data_ptr()), c_void_p(buf1427.data_ptr()))
    del convolution_135
    del primals_407
    del relu_125
    del squeeze_406
    del unsqueeze_3601
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1429 = aten.convolution_backward(buf1428, relu_124, primals_406, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_406
    buf1430 = buf1429[0]
    buf1431 = buf1429[1]
    del buf1429
    buf1432 = buf1258; del buf1258  # reuse
    buf1433 = buf1426; del buf1426  # reuse
    buf1434 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1435 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1436 = buf1428; del buf1428  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_213(c_void_p(buf1432.data_ptr()), c_void_p(relu_124.data_ptr()), c_void_p(relu_126.data_ptr()), c_void_p(buf1276.data_ptr()), c_void_p(buf1278.data_ptr()), c_void_p(buf1430.data_ptr()), c_void_p(convolution_134.data_ptr()), c_void_p(unsqueeze_3613.data_ptr()), c_void_p(squeeze_403.data_ptr()), c_void_p(primals_404.data_ptr()), c_void_p(buf1433.data_ptr()), c_void_p(buf1434.data_ptr()), c_void_p(buf1435.data_ptr()), c_void_p(buf1436.data_ptr()))
    del buf1276
    del buf1278
    del buf1430
    del convolution_134
    del primals_404
    del relu_124
    del relu_126
    del squeeze_403
    del unsqueeze_3613
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1437 = aten.convolution_backward(buf1436, relu_123, primals_403, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1436
    del primals_403
    buf1438 = buf1437[0]
    buf1439 = buf1437[1]
    del buf1437
    buf1440 = buf1434; del buf1434  # reuse
    buf1441 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1442 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1443 = buf1438; del buf1438  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_214(c_void_p(buf1443.data_ptr()), c_void_p(relu_123.data_ptr()), c_void_p(convolution_133.data_ptr()), c_void_p(unsqueeze_3625.data_ptr()), c_void_p(squeeze_400.data_ptr()), c_void_p(primals_401.data_ptr()), c_void_p(buf1440.data_ptr()), c_void_p(buf1441.data_ptr()), c_void_p(buf1442.data_ptr()))
    del convolution_133
    del primals_401
    del relu_123
    del squeeze_400
    del unsqueeze_3625
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1444 = aten.convolution_backward(buf1443, relu_122, primals_400, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_400
    buf1445 = buf1444[0]
    buf1446 = buf1444[1]
    del buf1444
    buf1447 = buf1441; del buf1441  # reuse
    buf1448 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1449 = buf1443; del buf1443  # reuse
    buf1450 = buf1448; del buf1448  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_215(c_void_p(buf1450.data_ptr()), c_void_p(relu_122.data_ptr()), c_void_p(buf1432.data_ptr()), c_void_p(buf1445.data_ptr()), c_void_p(convolution_132.data_ptr()), c_void_p(unsqueeze_3637.data_ptr()), c_void_p(squeeze_397.data_ptr()), c_void_p(primals_398.data_ptr()), c_void_p(buf1447.data_ptr()), c_void_p(buf1449.data_ptr()))
    del convolution_132
    del primals_398
    del squeeze_397
    del unsqueeze_3637
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1451 = aten.convolution_backward(buf1449, relu_121, primals_397, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1449
    del primals_397
    buf1452 = buf1451[0]
    buf1453 = buf1451[1]
    del buf1451
    buf1454 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1455 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1456 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1457 = buf1452; del buf1452  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_216(c_void_p(buf1457.data_ptr()), c_void_p(relu_121.data_ptr()), c_void_p(convolution_131.data_ptr()), c_void_p(unsqueeze_3649.data_ptr()), c_void_p(squeeze_394.data_ptr()), c_void_p(primals_395.data_ptr()), c_void_p(buf1454.data_ptr()), c_void_p(buf1455.data_ptr()), c_void_p(buf1456.data_ptr()))
    del convolution_131
    del primals_395
    del relu_121
    del squeeze_394
    del unsqueeze_3649
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1458 = aten.convolution_backward(buf1457, relu_120, primals_394, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_394
    buf1459 = buf1458[0]
    buf1460 = buf1458[1]
    del buf1458
    buf1461 = buf1432; del buf1432  # reuse
    buf1462 = buf1455; del buf1455  # reuse
    buf1463 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1464 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1465 = buf1457; del buf1457  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_217(c_void_p(buf1461.data_ptr()), c_void_p(relu_120.data_ptr()), c_void_p(relu_122.data_ptr()), c_void_p(buf1445.data_ptr()), c_void_p(buf1459.data_ptr()), c_void_p(convolution_130.data_ptr()), c_void_p(unsqueeze_3661.data_ptr()), c_void_p(squeeze_391.data_ptr()), c_void_p(primals_392.data_ptr()), c_void_p(buf1462.data_ptr()), c_void_p(buf1463.data_ptr()), c_void_p(buf1464.data_ptr()), c_void_p(buf1465.data_ptr()))
    del buf1445
    del buf1459
    del convolution_130
    del primals_392
    del relu_120
    del relu_122
    del squeeze_391
    del unsqueeze_3661
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1466 = aten.convolution_backward(buf1465, relu_119, primals_391, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1465
    del primals_391
    buf1467 = buf1466[0]
    buf1468 = buf1466[1]
    del buf1466
    buf1469 = buf1463; del buf1463  # reuse
    buf1470 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1471 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1472 = buf1467; del buf1467  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_218(c_void_p(buf1472.data_ptr()), c_void_p(relu_119.data_ptr()), c_void_p(convolution_129.data_ptr()), c_void_p(unsqueeze_3673.data_ptr()), c_void_p(squeeze_388.data_ptr()), c_void_p(primals_389.data_ptr()), c_void_p(buf1469.data_ptr()), c_void_p(buf1470.data_ptr()), c_void_p(buf1471.data_ptr()))
    del convolution_129
    del primals_389
    del relu_119
    del squeeze_388
    del unsqueeze_3673
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1473 = aten.convolution_backward(buf1472, relu_115, primals_388, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1472
    del primals_388
    buf1474 = buf1473[0]
    buf1475 = buf1473[1]
    del buf1473
    buf1476 = buf1352; del buf1352  # reuse
    buf1477 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1483 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1478 = buf1354; del buf1354  # reuse
    buf1484 = buf1347; del buf1347  # reuse
    buf1479 = buf1477; del buf1477  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_219(c_void_p(buf1479.data_ptr()), c_void_p(relu_118.data_ptr()), c_void_p(buf1343.data_ptr()), c_void_p(buf1356.data_ptr()), c_void_p(convolution_128.data_ptr()), c_void_p(unsqueeze_3685.data_ptr()), c_void_p(convolution_127.data_ptr()), c_void_p(unsqueeze_3697.data_ptr()), c_void_p(squeeze_385.data_ptr()), c_void_p(primals_386.data_ptr()), c_void_p(squeeze_382.data_ptr()), c_void_p(primals_383.data_ptr()), c_void_p(buf1476.data_ptr()), c_void_p(buf1483.data_ptr()), c_void_p(buf1478.data_ptr()), c_void_p(buf1484.data_ptr()))
    del convolution_127
    del convolution_128
    del primals_383
    del primals_386
    del squeeze_385
    del unsqueeze_3685
    del unsqueeze_3697
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1480 = aten.convolution_backward(buf1478, relu_106, primals_385, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1478
    del primals_385
    buf1481 = buf1480[0]
    buf1482 = buf1480[1]
    del buf1480
    buf1485 = buf1483; del buf1483  # reuse
    cpp_fused_native_batch_norm_backward_220(c_void_p(buf1485.data_ptr()), c_void_p(squeeze_382.data_ptr()))
    del squeeze_382
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1486 = aten.convolution_backward(buf1484, relu_117, primals_382, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_382
    buf1487 = buf1486[0]
    buf1488 = buf1486[1]
    del buf1486
    buf1489 = buf1470; del buf1470  # reuse
    buf1490 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1491 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1492 = buf1487; del buf1487  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_221(c_void_p(buf1492.data_ptr()), c_void_p(relu_117.data_ptr()), c_void_p(convolution_126.data_ptr()), c_void_p(unsqueeze_3709.data_ptr()), c_void_p(squeeze_379.data_ptr()), c_void_p(primals_380.data_ptr()), c_void_p(buf1489.data_ptr()), c_void_p(buf1490.data_ptr()), c_void_p(buf1491.data_ptr()))
    del convolution_126
    del primals_380
    del relu_117
    del squeeze_379
    del unsqueeze_3709
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1493 = aten.convolution_backward(buf1492, relu_98, primals_379, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_379
    buf1494 = buf1493[0]
    buf1495 = buf1493[1]
    del buf1493
    buf1496 = buf1267; del buf1267  # reuse
    buf1497 = buf1402; del buf1402  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_222(c_void_p(buf1497.data_ptr()), c_void_p(relu_116.data_ptr()), c_void_p(buf1415.data_ptr()), c_void_p(buf1496.data_ptr()))
    del relu_116
    aten.index_put_(buf1496, [None, None, unsqueeze_259, convert_element_type_20], buf1497, True)
    buf1500 = buf1411; del buf1411  # reuse
    buf1501 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1502 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1499 = buf1261; del buf1261  # reuse
    buf1503 = buf1499; del buf1499  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_223(c_void_p(buf1503.data_ptr()), c_void_p(buf1496.data_ptr()), c_void_p(convolution_125.data_ptr()), c_void_p(unsqueeze_3721.data_ptr()), c_void_p(squeeze_376.data_ptr()), c_void_p(primals_377.data_ptr()), c_void_p(buf1500.data_ptr()), c_void_p(buf1501.data_ptr()), c_void_p(buf1502.data_ptr()))
    del convolution_125
    del primals_377
    del squeeze_376
    del unsqueeze_3721
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1504 = aten.convolution_backward(buf1503, relu_114, primals_376, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_376
    buf1505 = buf1504[0]
    buf1506 = buf1504[1]
    del buf1504
    buf1507 = buf1501; del buf1501  # reuse
    buf1508 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1509 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1510 = buf1415; del buf1415  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_224(c_void_p(buf1497.data_ptr()), c_void_p(convolution_124.data_ptr()), c_void_p(unsqueeze_3733.data_ptr()), c_void_p(squeeze_373.data_ptr()), c_void_p(primals_374.data_ptr()), c_void_p(buf1507.data_ptr()), c_void_p(buf1508.data_ptr()), c_void_p(buf1509.data_ptr()), c_void_p(buf1510.data_ptr()))
    del convolution_124
    del primals_374
    del squeeze_373
    del unsqueeze_3733
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1511 = aten.convolution_backward(buf1510, relu_98, primals_373, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_373
    buf1512 = buf1511[0]
    buf1513 = buf1511[1]
    del buf1511
    buf1514 = buf1285; del buf1285  # reuse
    buf1515 = buf1461; del buf1461  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_225(c_void_p(buf1515.data_ptr()), c_void_p(relu_115.data_ptr()), c_void_p(buf1474.data_ptr()), c_void_p(buf1514.data_ptr()))
    del relu_115
    aten.index_put_(buf1514, [None, None, unsqueeze_250, convert_element_type_14], buf1515, True)
    buf1518 = buf1490; del buf1490  # reuse
    buf1519 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1520 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1517 = buf1279; del buf1279  # reuse
    buf1521 = buf1517; del buf1517  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_226(c_void_p(buf1521.data_ptr()), c_void_p(buf1514.data_ptr()), c_void_p(convolution_123.data_ptr()), c_void_p(unsqueeze_3745.data_ptr()), c_void_p(squeeze_370.data_ptr()), c_void_p(primals_371.data_ptr()), c_void_p(buf1518.data_ptr()), c_void_p(buf1519.data_ptr()), c_void_p(buf1520.data_ptr()))
    del convolution_123
    del primals_371
    del squeeze_370
    del unsqueeze_3745
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1522 = aten.convolution_backward(buf1521, relu_114, primals_370, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_370
    buf1523 = buf1522[0]
    buf1524 = buf1522[1]
    del buf1522
    buf1525 = reinterpret_tensor(buf1492, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf1492  # reuse
    cpp_fused__unsafe_index_put_new_zeros_227(c_void_p(buf1525.data_ptr()))
    aten.index_put_(buf1525, [None, None, unsqueeze_136, convert_element_type_2], buf1515, True)
    buf1528 = buf1519; del buf1519  # reuse
    buf1529 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1530 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1527 = reinterpret_tensor(buf1484, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf1484  # reuse
    buf1531 = buf1527; del buf1527  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_228(c_void_p(buf1531.data_ptr()), c_void_p(buf1525.data_ptr()), c_void_p(convolution_122.data_ptr()), c_void_p(unsqueeze_3757.data_ptr()), c_void_p(squeeze_367.data_ptr()), c_void_p(primals_368.data_ptr()), c_void_p(buf1528.data_ptr()), c_void_p(buf1529.data_ptr()), c_void_p(buf1530.data_ptr()))
    del buf1525
    del convolution_122
    del primals_368
    del squeeze_367
    del unsqueeze_3757
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1532 = aten.convolution_backward(buf1531, relu_106, primals_367, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_367
    buf1533 = buf1532[0]
    buf1534 = buf1532[1]
    del buf1532
    buf1535 = buf1343; del buf1343  # reuse
    buf1536 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1537 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1538 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1539 = reinterpret_tensor(buf1531, (8, 72, 14, 14), (14112, 1, 1008, 72), 0); del buf1531  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_229(c_void_p(buf1535.data_ptr()), c_void_p(relu_114.data_ptr()), c_void_p(relu_118.data_ptr()), c_void_p(buf1356.data_ptr()), c_void_p(buf1505.data_ptr()), c_void_p(buf1523.data_ptr()), c_void_p(convolution_121.data_ptr()), c_void_p(unsqueeze_3769.data_ptr()), c_void_p(squeeze_364.data_ptr()), c_void_p(primals_365.data_ptr()), c_void_p(buf1536.data_ptr()), c_void_p(buf1537.data_ptr()), c_void_p(buf1538.data_ptr()), c_void_p(buf1539.data_ptr()))
    del buf1356
    del buf1505
    del buf1523
    del convolution_121
    del primals_365
    del relu_114
    del relu_118
    del squeeze_364
    del unsqueeze_3769
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1540 = aten.convolution_backward(buf1539, relu_113, primals_364, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1539
    del primals_364
    buf1541 = buf1540[0]
    buf1542 = buf1540[1]
    del buf1540
    buf1543 = buf1537; del buf1537  # reuse
    buf1544 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1545 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1546 = buf1541; del buf1541  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_230(c_void_p(buf1546.data_ptr()), c_void_p(relu_113.data_ptr()), c_void_p(convolution_120.data_ptr()), c_void_p(unsqueeze_3781.data_ptr()), c_void_p(squeeze_361.data_ptr()), c_void_p(primals_362.data_ptr()), c_void_p(buf1543.data_ptr()), c_void_p(buf1544.data_ptr()), c_void_p(buf1545.data_ptr()))
    del convolution_120
    del primals_362
    del relu_113
    del squeeze_361
    del unsqueeze_3781
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1547 = aten.convolution_backward(buf1546, relu_112, primals_361, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_361
    buf1548 = buf1547[0]
    buf1549 = buf1547[1]
    del buf1547
    buf1550 = buf1544; del buf1544  # reuse
    buf1551 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1552 = buf1546; del buf1546  # reuse
    buf1553 = buf1551; del buf1551  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_231(c_void_p(buf1553.data_ptr()), c_void_p(relu_112.data_ptr()), c_void_p(buf1535.data_ptr()), c_void_p(buf1548.data_ptr()), c_void_p(convolution_119.data_ptr()), c_void_p(unsqueeze_3793.data_ptr()), c_void_p(squeeze_358.data_ptr()), c_void_p(primals_359.data_ptr()), c_void_p(buf1550.data_ptr()), c_void_p(buf1552.data_ptr()))
    del convolution_119
    del primals_359
    del squeeze_358
    del unsqueeze_3793
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1554 = aten.convolution_backward(buf1552, relu_111, primals_358, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1552
    del primals_358
    buf1555 = buf1554[0]
    buf1556 = buf1554[1]
    del buf1554
    buf1557 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1558 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1559 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1560 = buf1555; del buf1555  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_232(c_void_p(buf1560.data_ptr()), c_void_p(relu_111.data_ptr()), c_void_p(convolution_118.data_ptr()), c_void_p(unsqueeze_3805.data_ptr()), c_void_p(squeeze_355.data_ptr()), c_void_p(primals_356.data_ptr()), c_void_p(buf1557.data_ptr()), c_void_p(buf1558.data_ptr()), c_void_p(buf1559.data_ptr()))
    del convolution_118
    del primals_356
    del relu_111
    del squeeze_355
    del unsqueeze_3805
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1561 = aten.convolution_backward(buf1560, relu_110, primals_355, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_355
    buf1562 = buf1561[0]
    buf1563 = buf1561[1]
    del buf1561
    buf1564 = buf1535; del buf1535  # reuse
    buf1565 = buf1558; del buf1558  # reuse
    buf1566 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1567 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1568 = buf1560; del buf1560  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_233(c_void_p(buf1564.data_ptr()), c_void_p(relu_110.data_ptr()), c_void_p(relu_112.data_ptr()), c_void_p(buf1548.data_ptr()), c_void_p(buf1562.data_ptr()), c_void_p(convolution_117.data_ptr()), c_void_p(unsqueeze_3817.data_ptr()), c_void_p(squeeze_352.data_ptr()), c_void_p(primals_353.data_ptr()), c_void_p(buf1565.data_ptr()), c_void_p(buf1566.data_ptr()), c_void_p(buf1567.data_ptr()), c_void_p(buf1568.data_ptr()))
    del buf1548
    del buf1562
    del convolution_117
    del primals_353
    del relu_110
    del relu_112
    del squeeze_352
    del unsqueeze_3817
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1569 = aten.convolution_backward(buf1568, relu_109, primals_352, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1568
    del primals_352
    buf1570 = buf1569[0]
    buf1571 = buf1569[1]
    del buf1569
    buf1572 = buf1566; del buf1566  # reuse
    buf1573 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1574 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1575 = buf1570; del buf1570  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_234(c_void_p(buf1575.data_ptr()), c_void_p(relu_109.data_ptr()), c_void_p(convolution_116.data_ptr()), c_void_p(unsqueeze_3829.data_ptr()), c_void_p(squeeze_349.data_ptr()), c_void_p(primals_350.data_ptr()), c_void_p(buf1572.data_ptr()), c_void_p(buf1573.data_ptr()), c_void_p(buf1574.data_ptr()))
    del convolution_116
    del primals_350
    del relu_109
    del squeeze_349
    del unsqueeze_3829
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1576 = aten.convolution_backward(buf1575, relu_108, primals_349, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_349
    buf1577 = buf1576[0]
    buf1578 = buf1576[1]
    del buf1576
    buf1579 = buf1573; del buf1573  # reuse
    buf1580 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1581 = buf1575; del buf1575  # reuse
    buf1582 = buf1580; del buf1580  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_235(c_void_p(buf1582.data_ptr()), c_void_p(relu_108.data_ptr()), c_void_p(buf1564.data_ptr()), c_void_p(buf1577.data_ptr()), c_void_p(convolution_115.data_ptr()), c_void_p(unsqueeze_3841.data_ptr()), c_void_p(squeeze_346.data_ptr()), c_void_p(primals_347.data_ptr()), c_void_p(buf1579.data_ptr()), c_void_p(buf1581.data_ptr()))
    del convolution_115
    del primals_347
    del squeeze_346
    del unsqueeze_3841
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1583 = aten.convolution_backward(buf1581, relu_107, primals_346, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1581
    del primals_346
    buf1584 = buf1583[0]
    buf1585 = buf1583[1]
    del buf1583
    buf1586 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1587 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1588 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1589 = buf1584; del buf1584  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_236(c_void_p(buf1589.data_ptr()), c_void_p(relu_107.data_ptr()), c_void_p(convolution_114.data_ptr()), c_void_p(unsqueeze_3853.data_ptr()), c_void_p(squeeze_343.data_ptr()), c_void_p(primals_344.data_ptr()), c_void_p(buf1586.data_ptr()), c_void_p(buf1587.data_ptr()), c_void_p(buf1588.data_ptr()))
    del convolution_114
    del primals_344
    del relu_107
    del squeeze_343
    del unsqueeze_3853
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1590 = aten.convolution_backward(buf1589, relu_90, primals_343, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_343
    buf1591 = buf1590[0]
    buf1592 = buf1590[1]
    del buf1590
    buf1593 = buf1508; del buf1508  # reuse
    buf1594 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1595 = buf1510; del buf1510  # reuse
    buf1597 = buf1595; del buf1595  # reuse
    buf1596 = buf1594; del buf1594  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_237(c_void_p(buf1597.data_ptr()), c_void_p(buf1596.data_ptr()), c_void_p(relu_106.data_ptr()), c_void_p(buf1481.data_ptr()), c_void_p(buf1497.data_ptr()), c_void_p(buf1533.data_ptr()), c_void_p(convolution_113.data_ptr()), c_void_p(unsqueeze_3865.data_ptr()), c_void_p(squeeze_340.data_ptr()), c_void_p(primals_341.data_ptr()), c_void_p(buf1593.data_ptr()))
    del convolution_113
    del primals_341
    del squeeze_340
    del unsqueeze_3865
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1598 = aten.convolution_backward(buf1597, relu_105, primals_340, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1597
    del primals_340
    buf1599 = buf1598[0]
    buf1600 = buf1598[1]
    del buf1598
    buf1601 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1602 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1603 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1604 = buf1599; del buf1599  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_238(c_void_p(buf1604.data_ptr()), c_void_p(relu_105.data_ptr()), c_void_p(convolution_112.data_ptr()), c_void_p(unsqueeze_3877.data_ptr()), c_void_p(squeeze_337.data_ptr()), c_void_p(primals_338.data_ptr()), c_void_p(buf1601.data_ptr()), c_void_p(buf1602.data_ptr()), c_void_p(buf1603.data_ptr()))
    del convolution_112
    del primals_338
    del relu_105
    del squeeze_337
    del unsqueeze_3877
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1605 = aten.convolution_backward(buf1604, relu_104, primals_337, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_337
    buf1606 = buf1605[0]
    buf1607 = buf1605[1]
    del buf1605
    buf1608 = buf1481; del buf1481  # reuse
    buf1609 = buf1602; del buf1602  # reuse
    buf1610 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1611 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1612 = buf1604; del buf1604  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_239(c_void_p(buf1608.data_ptr()), c_void_p(relu_104.data_ptr()), c_void_p(relu_106.data_ptr()), c_void_p(buf1497.data_ptr()), c_void_p(buf1533.data_ptr()), c_void_p(buf1606.data_ptr()), c_void_p(convolution_111.data_ptr()), c_void_p(unsqueeze_3889.data_ptr()), c_void_p(squeeze_334.data_ptr()), c_void_p(primals_335.data_ptr()), c_void_p(buf1609.data_ptr()), c_void_p(buf1610.data_ptr()), c_void_p(buf1611.data_ptr()), c_void_p(buf1612.data_ptr()))
    del buf1497
    del buf1533
    del buf1606
    del convolution_111
    del primals_335
    del relu_104
    del relu_106
    del squeeze_334
    del unsqueeze_3889
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1613 = aten.convolution_backward(buf1612, relu_103, primals_334, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1612
    del primals_334
    buf1614 = buf1613[0]
    buf1615 = buf1613[1]
    del buf1613
    buf1616 = buf1610; del buf1610  # reuse
    buf1617 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1618 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1619 = buf1614; del buf1614  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_240(c_void_p(buf1619.data_ptr()), c_void_p(relu_103.data_ptr()), c_void_p(convolution_110.data_ptr()), c_void_p(unsqueeze_3901.data_ptr()), c_void_p(squeeze_331.data_ptr()), c_void_p(primals_332.data_ptr()), c_void_p(buf1616.data_ptr()), c_void_p(buf1617.data_ptr()), c_void_p(buf1618.data_ptr()))
    del convolution_110
    del primals_332
    del relu_103
    del squeeze_331
    del unsqueeze_3901
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1620 = aten.convolution_backward(buf1619, relu_102, primals_331, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_331
    buf1621 = buf1620[0]
    buf1622 = buf1620[1]
    del buf1620
    buf1623 = buf1617; del buf1617  # reuse
    buf1624 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1625 = buf1619; del buf1619  # reuse
    buf1626 = buf1624; del buf1624  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_241(c_void_p(buf1626.data_ptr()), c_void_p(relu_102.data_ptr()), c_void_p(buf1608.data_ptr()), c_void_p(buf1621.data_ptr()), c_void_p(convolution_109.data_ptr()), c_void_p(unsqueeze_3913.data_ptr()), c_void_p(squeeze_328.data_ptr()), c_void_p(primals_329.data_ptr()), c_void_p(buf1623.data_ptr()), c_void_p(buf1625.data_ptr()))
    del convolution_109
    del primals_329
    del squeeze_328
    del unsqueeze_3913
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1627 = aten.convolution_backward(buf1625, relu_101, primals_328, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1625
    del primals_328
    buf1628 = buf1627[0]
    buf1629 = buf1627[1]
    del buf1627
    buf1630 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1631 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1632 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1633 = buf1628; del buf1628  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_242(c_void_p(buf1633.data_ptr()), c_void_p(relu_101.data_ptr()), c_void_p(convolution_108.data_ptr()), c_void_p(unsqueeze_3925.data_ptr()), c_void_p(squeeze_325.data_ptr()), c_void_p(primals_326.data_ptr()), c_void_p(buf1630.data_ptr()), c_void_p(buf1631.data_ptr()), c_void_p(buf1632.data_ptr()))
    del convolution_108
    del primals_326
    del relu_101
    del squeeze_325
    del unsqueeze_3925
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1634 = aten.convolution_backward(buf1633, relu_100, primals_325, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_325
    buf1635 = buf1634[0]
    buf1636 = buf1634[1]
    del buf1634
    buf1637 = buf1608; del buf1608  # reuse
    buf1638 = buf1631; del buf1631  # reuse
    buf1639 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1640 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1641 = buf1633; del buf1633  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_243(c_void_p(buf1637.data_ptr()), c_void_p(relu_100.data_ptr()), c_void_p(relu_102.data_ptr()), c_void_p(buf1621.data_ptr()), c_void_p(buf1635.data_ptr()), c_void_p(convolution_107.data_ptr()), c_void_p(unsqueeze_3937.data_ptr()), c_void_p(squeeze_322.data_ptr()), c_void_p(primals_323.data_ptr()), c_void_p(buf1638.data_ptr()), c_void_p(buf1639.data_ptr()), c_void_p(buf1640.data_ptr()), c_void_p(buf1641.data_ptr()))
    del buf1621
    del buf1635
    del convolution_107
    del primals_323
    del relu_100
    del relu_102
    del squeeze_322
    del unsqueeze_3937
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1642 = aten.convolution_backward(buf1641, relu_99, primals_322, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1641
    del primals_322
    buf1643 = buf1642[0]
    buf1644 = buf1642[1]
    del buf1642
    buf1645 = buf1639; del buf1639  # reuse
    buf1646 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1647 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1648 = buf1643; del buf1643  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_244(c_void_p(buf1648.data_ptr()), c_void_p(relu_99.data_ptr()), c_void_p(convolution_106.data_ptr()), c_void_p(unsqueeze_3949.data_ptr()), c_void_p(squeeze_319.data_ptr()), c_void_p(primals_320.data_ptr()), c_void_p(buf1645.data_ptr()), c_void_p(buf1646.data_ptr()), c_void_p(buf1647.data_ptr()))
    del convolution_106
    del primals_320
    del relu_99
    del squeeze_319
    del unsqueeze_3949
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1649 = aten.convolution_backward(buf1648, relu_88, primals_319, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1648
    del primals_319
    buf1650 = buf1649[0]
    buf1651 = buf1649[1]
    del buf1649
    buf1652 = buf1529; del buf1529  # reuse
    buf1653 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1654 = buf1474; del buf1474  # reuse
    buf1656 = buf1654; del buf1654  # reuse
    buf1655 = buf1653; del buf1653  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_245(c_void_p(buf1656.data_ptr()), c_void_p(buf1655.data_ptr()), c_void_p(relu_98.data_ptr()), c_void_p(buf1494.data_ptr()), c_void_p(buf1512.data_ptr()), c_void_p(buf1515.data_ptr()), c_void_p(convolution_105.data_ptr()), c_void_p(unsqueeze_3961.data_ptr()), c_void_p(squeeze_316.data_ptr()), c_void_p(primals_317.data_ptr()), c_void_p(buf1652.data_ptr()))
    del convolution_105
    del primals_317
    del squeeze_316
    del unsqueeze_3961
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1657 = aten.convolution_backward(buf1656, relu_97, primals_316, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1656
    del primals_316
    buf1658 = buf1657[0]
    buf1659 = buf1657[1]
    del buf1657
    buf1660 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1661 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1662 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1663 = buf1658; del buf1658  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_246(c_void_p(buf1663.data_ptr()), c_void_p(relu_97.data_ptr()), c_void_p(convolution_104.data_ptr()), c_void_p(unsqueeze_3973.data_ptr()), c_void_p(squeeze_313.data_ptr()), c_void_p(primals_314.data_ptr()), c_void_p(buf1660.data_ptr()), c_void_p(buf1661.data_ptr()), c_void_p(buf1662.data_ptr()))
    del convolution_104
    del primals_314
    del relu_97
    del squeeze_313
    del unsqueeze_3973
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1664 = aten.convolution_backward(buf1663, relu_96, primals_313, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_313
    buf1665 = buf1664[0]
    buf1666 = buf1664[1]
    del buf1664
    buf1667 = buf1494; del buf1494  # reuse
    buf1668 = buf1661; del buf1661  # reuse
    buf1669 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1670 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1671 = buf1663; del buf1663  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_247(c_void_p(buf1667.data_ptr()), c_void_p(relu_96.data_ptr()), c_void_p(relu_98.data_ptr()), c_void_p(buf1512.data_ptr()), c_void_p(buf1515.data_ptr()), c_void_p(buf1665.data_ptr()), c_void_p(convolution_103.data_ptr()), c_void_p(unsqueeze_3985.data_ptr()), c_void_p(squeeze_310.data_ptr()), c_void_p(primals_311.data_ptr()), c_void_p(buf1668.data_ptr()), c_void_p(buf1669.data_ptr()), c_void_p(buf1670.data_ptr()), c_void_p(buf1671.data_ptr()))
    del buf1512
    del buf1515
    del buf1665
    del convolution_103
    del primals_311
    del relu_96
    del relu_98
    del squeeze_310
    del unsqueeze_3985
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1672 = aten.convolution_backward(buf1671, relu_95, primals_310, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1671
    del primals_310
    buf1673 = buf1672[0]
    buf1674 = buf1672[1]
    del buf1672
    buf1675 = buf1669; del buf1669  # reuse
    buf1676 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1677 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1678 = buf1673; del buf1673  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_248(c_void_p(buf1678.data_ptr()), c_void_p(relu_95.data_ptr()), c_void_p(convolution_102.data_ptr()), c_void_p(unsqueeze_3997.data_ptr()), c_void_p(squeeze_307.data_ptr()), c_void_p(primals_308.data_ptr()), c_void_p(buf1675.data_ptr()), c_void_p(buf1676.data_ptr()), c_void_p(buf1677.data_ptr()))
    del convolution_102
    del primals_308
    del relu_95
    del squeeze_307
    del unsqueeze_3997
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1679 = aten.convolution_backward(buf1678, relu_94, primals_307, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_307
    buf1680 = buf1679[0]
    buf1681 = buf1679[1]
    del buf1679
    buf1682 = buf1676; del buf1676  # reuse
    buf1683 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1684 = buf1678; del buf1678  # reuse
    buf1685 = buf1683; del buf1683  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_249(c_void_p(buf1685.data_ptr()), c_void_p(relu_94.data_ptr()), c_void_p(buf1667.data_ptr()), c_void_p(buf1680.data_ptr()), c_void_p(convolution_101.data_ptr()), c_void_p(unsqueeze_4009.data_ptr()), c_void_p(squeeze_304.data_ptr()), c_void_p(primals_305.data_ptr()), c_void_p(buf1682.data_ptr()), c_void_p(buf1684.data_ptr()))
    del convolution_101
    del primals_305
    del squeeze_304
    del unsqueeze_4009
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1686 = aten.convolution_backward(buf1684, relu_93, primals_304, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1684
    del primals_304
    buf1687 = buf1686[0]
    buf1688 = buf1686[1]
    del buf1686
    buf1689 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1690 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1691 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1692 = buf1687; del buf1687  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_250(c_void_p(buf1692.data_ptr()), c_void_p(relu_93.data_ptr()), c_void_p(convolution_100.data_ptr()), c_void_p(unsqueeze_4021.data_ptr()), c_void_p(squeeze_301.data_ptr()), c_void_p(primals_302.data_ptr()), c_void_p(buf1689.data_ptr()), c_void_p(buf1690.data_ptr()), c_void_p(buf1691.data_ptr()))
    del convolution_100
    del primals_302
    del relu_93
    del squeeze_301
    del unsqueeze_4021
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1693 = aten.convolution_backward(buf1692, relu_92, primals_301, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_301
    buf1694 = buf1693[0]
    buf1695 = buf1693[1]
    del buf1693
    buf1696 = buf1667; del buf1667  # reuse
    buf1697 = buf1690; del buf1690  # reuse
    buf1698 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1699 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1700 = buf1692; del buf1692  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_251(c_void_p(buf1696.data_ptr()), c_void_p(relu_92.data_ptr()), c_void_p(relu_94.data_ptr()), c_void_p(buf1680.data_ptr()), c_void_p(buf1694.data_ptr()), c_void_p(convolution_99.data_ptr()), c_void_p(unsqueeze_4033.data_ptr()), c_void_p(squeeze_298.data_ptr()), c_void_p(primals_299.data_ptr()), c_void_p(buf1697.data_ptr()), c_void_p(buf1698.data_ptr()), c_void_p(buf1699.data_ptr()), c_void_p(buf1700.data_ptr()))
    del buf1680
    del buf1694
    del convolution_99
    del primals_299
    del relu_92
    del relu_94
    del squeeze_298
    del unsqueeze_4033
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1701 = aten.convolution_backward(buf1700, relu_91, primals_298, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1700
    del primals_298
    buf1702 = buf1701[0]
    buf1703 = buf1701[1]
    del buf1701
    buf1704 = buf1698; del buf1698  # reuse
    buf1705 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1706 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1707 = buf1702; del buf1702  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_252(c_void_p(buf1707.data_ptr()), c_void_p(relu_91.data_ptr()), c_void_p(convolution_98.data_ptr()), c_void_p(unsqueeze_4045.data_ptr()), c_void_p(squeeze_295.data_ptr()), c_void_p(primals_296.data_ptr()), c_void_p(buf1704.data_ptr()), c_void_p(buf1705.data_ptr()), c_void_p(buf1706.data_ptr()))
    del convolution_98
    del primals_296
    del relu_91
    del squeeze_295
    del unsqueeze_4045
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1708 = aten.convolution_backward(buf1707, relu_87, primals_295, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1707
    del primals_295
    buf1709 = buf1708[0]
    buf1710 = buf1708[1]
    del buf1708
    buf1711 = buf1564; del buf1564  # reuse
    buf1732 = buf1503; del buf1503  # reuse
    buf1733 = buf1637; del buf1637  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_253(c_void_p(buf1711.data_ptr()), c_void_p(buf1733.data_ptr()), c_void_p(relu_90.data_ptr()), c_void_p(relu_108.data_ptr()), c_void_p(buf1577.data_ptr()), c_void_p(buf1591.data_ptr()), c_void_p(relu_88.data_ptr()), c_void_p(buf1650.data_ptr()), c_void_p(buf1732.data_ptr()))
    del relu_108
    del relu_88
    del relu_90
    aten.index_put_(buf1732, [None, None, unsqueeze_259, convert_element_type_20], buf1733, True)
    buf1736 = buf1646; del buf1646  # reuse
    buf1737 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1735 = buf1496; del buf1496  # reuse
    buf1739 = buf1735; del buf1735  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_254(c_void_p(buf1739.data_ptr()), c_void_p(buf1732.data_ptr()), c_void_p(convolution_94.data_ptr()), c_void_p(unsqueeze_4093.data_ptr()), c_void_p(squeeze_283.data_ptr()), c_void_p(primals_284.data_ptr()), c_void_p(buf1736.data_ptr()), c_void_p(buf1737.data_ptr()))
    del convolution_94
    del primals_284
    del unsqueeze_4093
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1740 = aten.convolution_backward(buf1739, relu_86, primals_283, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_283
    buf1741 = buf1740[0]
    buf1750 = buf1521; del buf1521  # reuse
    buf1751 = buf1696; del buf1696  # reuse
    cpp_fused__unsafe_index_put_add_new_zeros_threshold_backward_255(c_void_p(buf1751.data_ptr()), c_void_p(relu_87.data_ptr()), c_void_p(buf1709.data_ptr()), c_void_p(buf1750.data_ptr()))
    del relu_87
    aten.index_put_(buf1750, [None, None, unsqueeze_250, convert_element_type_14], buf1751, True)
    buf1754 = buf1705; del buf1705  # reuse
    buf1755 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1753 = buf1514; del buf1514  # reuse
    buf1757 = buf1753; del buf1753  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_256(c_void_p(buf1757.data_ptr()), c_void_p(buf1750.data_ptr()), c_void_p(convolution_92.data_ptr()), c_void_p(unsqueeze_4117.data_ptr()), c_void_p(squeeze_277.data_ptr()), c_void_p(primals_278.data_ptr()), c_void_p(buf1754.data_ptr()), c_void_p(buf1755.data_ptr()))
    del convolution_92
    del primals_278
    del unsqueeze_4117
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1758 = aten.convolution_backward(buf1757, relu_86, primals_277, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_277
    buf1759 = buf1758[0]
    buf1712 = buf1587; del buf1587  # reuse
    buf1713 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1719 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1771 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1772 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1714 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1715 = buf1591; del buf1591  # reuse
    buf1721 = buf1577; del buf1577  # reuse
    buf1773 = buf1589; del buf1589  # reuse
    buf1775 = buf1773; del buf1773  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_257(c_void_p(buf1775.data_ptr()), c_void_p(buf1711.data_ptr()), c_void_p(convolution_97.data_ptr()), c_void_p(unsqueeze_4057.data_ptr()), c_void_p(convolution_96.data_ptr()), c_void_p(unsqueeze_4069.data_ptr()), c_void_p(relu_86.data_ptr()), c_void_p(buf1741.data_ptr()), c_void_p(buf1759.data_ptr()), c_void_p(convolution_90.data_ptr()), c_void_p(unsqueeze_4141.data_ptr()), c_void_p(squeeze_292.data_ptr()), c_void_p(primals_293.data_ptr()), c_void_p(squeeze_289.data_ptr()), c_void_p(primals_290.data_ptr()), c_void_p(squeeze_271.data_ptr()), c_void_p(primals_272.data_ptr()), c_void_p(buf1712.data_ptr()), c_void_p(buf1713.data_ptr()), c_void_p(buf1719.data_ptr()), c_void_p(buf1771.data_ptr()), c_void_p(buf1772.data_ptr()), c_void_p(buf1714.data_ptr()), c_void_p(buf1715.data_ptr()), c_void_p(buf1721.data_ptr()))
    del convolution_90
    del convolution_96
    del convolution_97
    del primals_272
    del primals_290
    del primals_293
    del squeeze_292
    del unsqueeze_4057
    del unsqueeze_4069
    del unsqueeze_4141
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1716 = aten.convolution_backward(buf1715, relu_78, primals_292, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1715
    del primals_292
    buf1717 = buf1716[0]
    buf1718 = buf1716[1]
    del buf1716
    buf1720 = buf1719; del buf1719  # reuse
    cpp_fused_native_batch_norm_backward_258(c_void_p(buf1720.data_ptr()), c_void_p(squeeze_289.data_ptr()))
    del squeeze_289
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1722 = aten.convolution_backward(buf1721, relu_89, primals_289, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_289
    buf1723 = buf1722[0]
    buf1724 = buf1722[1]
    del buf1722
    buf1725 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1726 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1727 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1728 = buf1723; del buf1723  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_259(c_void_p(buf1728.data_ptr()), c_void_p(relu_89.data_ptr()), c_void_p(convolution_95.data_ptr()), c_void_p(unsqueeze_4081.data_ptr()), c_void_p(squeeze_286.data_ptr()), c_void_p(primals_287.data_ptr()), c_void_p(buf1725.data_ptr()), c_void_p(buf1726.data_ptr()), c_void_p(buf1727.data_ptr()))
    del convolution_95
    del primals_287
    del relu_89
    del squeeze_286
    del unsqueeze_4081
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1729 = aten.convolution_backward(buf1728, relu_70, primals_286, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_286
    buf1730 = buf1729[0]
    buf1731 = buf1729[1]
    del buf1729
    buf1738 = buf1737; del buf1737  # reuse
    cpp_fused_native_batch_norm_backward_260(c_void_p(buf1738.data_ptr()), c_void_p(squeeze_283.data_ptr()))
    del squeeze_283
    buf1742 = buf1740[1]
    del buf1740
    buf1743 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1744 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1745 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1746 = buf1650; del buf1650  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_261(c_void_p(buf1733.data_ptr()), c_void_p(convolution_93.data_ptr()), c_void_p(unsqueeze_4105.data_ptr()), c_void_p(squeeze_280.data_ptr()), c_void_p(primals_281.data_ptr()), c_void_p(buf1743.data_ptr()), c_void_p(buf1744.data_ptr()), c_void_p(buf1745.data_ptr()), c_void_p(buf1746.data_ptr()))
    del convolution_93
    del primals_281
    del squeeze_280
    del unsqueeze_4105
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1747 = aten.convolution_backward(buf1746, relu_70, primals_280, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_280
    buf1748 = buf1747[0]
    buf1749 = buf1747[1]
    del buf1747
    buf1756 = buf1755; del buf1755  # reuse
    cpp_fused_native_batch_norm_backward_262(c_void_p(buf1756.data_ptr()), c_void_p(squeeze_277.data_ptr()))
    del squeeze_277
    buf1760 = buf1758[1]
    del buf1758
    buf1761 = reinterpret_tensor(buf1728, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf1728  # reuse
    cpp_fused__unsafe_index_put_new_zeros_263(c_void_p(buf1761.data_ptr()))
    aten.index_put_(buf1761, [None, None, unsqueeze_136, convert_element_type_2], buf1751, True)
    buf1764 = buf1726; del buf1726  # reuse
    buf1765 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1766 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1763 = reinterpret_tensor(buf1721, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf1721  # reuse
    buf1767 = buf1763; del buf1763  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_264(c_void_p(buf1767.data_ptr()), c_void_p(buf1761.data_ptr()), c_void_p(convolution_91.data_ptr()), c_void_p(unsqueeze_4129.data_ptr()), c_void_p(squeeze_274.data_ptr()), c_void_p(primals_275.data_ptr()), c_void_p(buf1764.data_ptr()), c_void_p(buf1765.data_ptr()), c_void_p(buf1766.data_ptr()))
    del buf1761
    del convolution_91
    del primals_275
    del squeeze_274
    del unsqueeze_4129
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1768 = aten.convolution_backward(buf1767, relu_78, primals_274, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1767
    del primals_274
    buf1769 = buf1768[0]
    buf1770 = buf1768[1]
    del buf1768
    buf1774 = buf1772; del buf1772  # reuse
    cpp_fused_native_batch_norm_backward_265(c_void_p(buf1774.data_ptr()), c_void_p(squeeze_271.data_ptr()))
    del squeeze_271
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1776 = aten.convolution_backward(buf1775, relu_85, primals_271, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1775
    del primals_271
    buf1777 = buf1776[0]
    buf1778 = buf1776[1]
    del buf1776
    buf1779 = buf1713; del buf1713  # reuse
    buf1780 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1781 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1782 = buf1777; del buf1777  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_266(c_void_p(buf1782.data_ptr()), c_void_p(relu_85.data_ptr()), c_void_p(convolution_89.data_ptr()), c_void_p(unsqueeze_4153.data_ptr()), c_void_p(squeeze_268.data_ptr()), c_void_p(primals_269.data_ptr()), c_void_p(buf1779.data_ptr()), c_void_p(buf1780.data_ptr()), c_void_p(buf1781.data_ptr()))
    del convolution_89
    del primals_269
    del relu_85
    del squeeze_268
    del unsqueeze_4153
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1783 = aten.convolution_backward(buf1782, relu_84, primals_268, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_268
    buf1784 = buf1783[0]
    buf1785 = buf1783[1]
    del buf1783
    buf1786 = buf1711; del buf1711  # reuse
    buf1787 = buf1780; del buf1780  # reuse
    buf1788 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1789 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1790 = buf1782; del buf1782  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_267(c_void_p(buf1786.data_ptr()), c_void_p(relu_84.data_ptr()), c_void_p(relu_86.data_ptr()), c_void_p(buf1741.data_ptr()), c_void_p(buf1759.data_ptr()), c_void_p(buf1784.data_ptr()), c_void_p(convolution_88.data_ptr()), c_void_p(unsqueeze_4165.data_ptr()), c_void_p(squeeze_265.data_ptr()), c_void_p(primals_266.data_ptr()), c_void_p(buf1787.data_ptr()), c_void_p(buf1788.data_ptr()), c_void_p(buf1789.data_ptr()), c_void_p(buf1790.data_ptr()))
    del buf1741
    del buf1759
    del buf1784
    del convolution_88
    del primals_266
    del relu_84
    del relu_86
    del squeeze_265
    del unsqueeze_4165
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1791 = aten.convolution_backward(buf1790, relu_83, primals_265, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1790
    del primals_265
    buf1792 = buf1791[0]
    buf1793 = buf1791[1]
    del buf1791
    buf1794 = buf1788; del buf1788  # reuse
    buf1795 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1796 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1797 = buf1792; del buf1792  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_268(c_void_p(buf1797.data_ptr()), c_void_p(relu_83.data_ptr()), c_void_p(convolution_87.data_ptr()), c_void_p(unsqueeze_4177.data_ptr()), c_void_p(squeeze_262.data_ptr()), c_void_p(primals_263.data_ptr()), c_void_p(buf1794.data_ptr()), c_void_p(buf1795.data_ptr()), c_void_p(buf1796.data_ptr()))
    del convolution_87
    del primals_263
    del relu_83
    del squeeze_262
    del unsqueeze_4177
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1798 = aten.convolution_backward(buf1797, relu_82, primals_262, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_262
    buf1799 = buf1798[0]
    buf1800 = buf1798[1]
    del buf1798
    buf1801 = buf1795; del buf1795  # reuse
    buf1802 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1803 = buf1797; del buf1797  # reuse
    buf1804 = buf1802; del buf1802  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_269(c_void_p(buf1804.data_ptr()), c_void_p(relu_82.data_ptr()), c_void_p(buf1786.data_ptr()), c_void_p(buf1799.data_ptr()), c_void_p(convolution_86.data_ptr()), c_void_p(unsqueeze_4189.data_ptr()), c_void_p(squeeze_259.data_ptr()), c_void_p(primals_260.data_ptr()), c_void_p(buf1801.data_ptr()), c_void_p(buf1803.data_ptr()))
    del convolution_86
    del primals_260
    del squeeze_259
    del unsqueeze_4189
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1805 = aten.convolution_backward(buf1803, relu_81, primals_259, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1803
    del primals_259
    buf1806 = buf1805[0]
    buf1807 = buf1805[1]
    del buf1805
    buf1808 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1809 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1810 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1811 = buf1806; del buf1806  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_270(c_void_p(buf1811.data_ptr()), c_void_p(relu_81.data_ptr()), c_void_p(convolution_85.data_ptr()), c_void_p(unsqueeze_4201.data_ptr()), c_void_p(squeeze_256.data_ptr()), c_void_p(primals_257.data_ptr()), c_void_p(buf1808.data_ptr()), c_void_p(buf1809.data_ptr()), c_void_p(buf1810.data_ptr()))
    del convolution_85
    del primals_257
    del relu_81
    del squeeze_256
    del unsqueeze_4201
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1812 = aten.convolution_backward(buf1811, relu_80, primals_256, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_256
    buf1813 = buf1812[0]
    buf1814 = buf1812[1]
    del buf1812
    buf1815 = buf1786; del buf1786  # reuse
    buf1816 = buf1809; del buf1809  # reuse
    buf1817 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1818 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1819 = buf1811; del buf1811  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_271(c_void_p(buf1815.data_ptr()), c_void_p(relu_80.data_ptr()), c_void_p(relu_82.data_ptr()), c_void_p(buf1799.data_ptr()), c_void_p(buf1813.data_ptr()), c_void_p(convolution_84.data_ptr()), c_void_p(unsqueeze_4213.data_ptr()), c_void_p(squeeze_253.data_ptr()), c_void_p(primals_254.data_ptr()), c_void_p(buf1816.data_ptr()), c_void_p(buf1817.data_ptr()), c_void_p(buf1818.data_ptr()), c_void_p(buf1819.data_ptr()))
    del buf1799
    del buf1813
    del convolution_84
    del primals_254
    del relu_80
    del relu_82
    del squeeze_253
    del unsqueeze_4213
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1820 = aten.convolution_backward(buf1819, relu_79, primals_253, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_253
    buf1821 = buf1820[0]
    buf1822 = buf1820[1]
    del buf1820
    buf1823 = buf1817; del buf1817  # reuse
    buf1824 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1825 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1826 = buf1821; del buf1821  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_272(c_void_p(buf1826.data_ptr()), c_void_p(relu_79.data_ptr()), c_void_p(convolution_83.data_ptr()), c_void_p(unsqueeze_4225.data_ptr()), c_void_p(squeeze_250.data_ptr()), c_void_p(primals_251.data_ptr()), c_void_p(buf1823.data_ptr()), c_void_p(buf1824.data_ptr()), c_void_p(buf1825.data_ptr()))
    del convolution_83
    del primals_251
    del relu_79
    del squeeze_250
    del unsqueeze_4225
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1827 = aten.convolution_backward(buf1826, relu_62, primals_250, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_250
    buf1828 = buf1827[0]
    buf1829 = buf1827[1]
    del buf1827
    buf1830 = buf1744; del buf1744  # reuse
    buf1831 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1832 = buf1746; del buf1746  # reuse
    buf1834 = buf1832; del buf1832  # reuse
    buf1833 = buf1831; del buf1831  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_273(c_void_p(buf1834.data_ptr()), c_void_p(buf1833.data_ptr()), c_void_p(relu_78.data_ptr()), c_void_p(buf1717.data_ptr()), c_void_p(buf1733.data_ptr()), c_void_p(buf1769.data_ptr()), c_void_p(convolution_82.data_ptr()), c_void_p(unsqueeze_4237.data_ptr()), c_void_p(squeeze_247.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(buf1830.data_ptr()))
    del convolution_82
    del primals_248
    del squeeze_247
    del unsqueeze_4237
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1835 = aten.convolution_backward(buf1834, relu_77, primals_247, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1834
    del primals_247
    buf1836 = buf1835[0]
    buf1837 = buf1835[1]
    del buf1835
    buf1838 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1839 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1840 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1841 = buf1836; del buf1836  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_274(c_void_p(buf1841.data_ptr()), c_void_p(relu_77.data_ptr()), c_void_p(convolution_81.data_ptr()), c_void_p(unsqueeze_4249.data_ptr()), c_void_p(squeeze_244.data_ptr()), c_void_p(primals_245.data_ptr()), c_void_p(buf1838.data_ptr()), c_void_p(buf1839.data_ptr()), c_void_p(buf1840.data_ptr()))
    del convolution_81
    del primals_245
    del relu_77
    del squeeze_244
    del unsqueeze_4249
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1842 = aten.convolution_backward(buf1841, relu_76, primals_244, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_244
    buf1843 = buf1842[0]
    buf1844 = buf1842[1]
    del buf1842
    buf1845 = buf1717; del buf1717  # reuse
    buf1846 = buf1839; del buf1839  # reuse
    buf1847 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1848 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1849 = buf1841; del buf1841  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_275(c_void_p(buf1845.data_ptr()), c_void_p(relu_76.data_ptr()), c_void_p(relu_78.data_ptr()), c_void_p(buf1733.data_ptr()), c_void_p(buf1769.data_ptr()), c_void_p(buf1843.data_ptr()), c_void_p(convolution_80.data_ptr()), c_void_p(unsqueeze_4261.data_ptr()), c_void_p(squeeze_241.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(buf1846.data_ptr()), c_void_p(buf1847.data_ptr()), c_void_p(buf1848.data_ptr()), c_void_p(buf1849.data_ptr()))
    del buf1733
    del buf1769
    del buf1843
    del convolution_80
    del primals_242
    del relu_76
    del relu_78
    del squeeze_241
    del unsqueeze_4261
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1850 = aten.convolution_backward(buf1849, relu_75, primals_241, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1849
    del primals_241
    buf1851 = buf1850[0]
    buf1852 = buf1850[1]
    del buf1850
    buf1853 = buf1847; del buf1847  # reuse
    buf1854 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1855 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1856 = buf1851; del buf1851  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_276(c_void_p(buf1856.data_ptr()), c_void_p(relu_75.data_ptr()), c_void_p(convolution_79.data_ptr()), c_void_p(unsqueeze_4273.data_ptr()), c_void_p(squeeze_238.data_ptr()), c_void_p(primals_239.data_ptr()), c_void_p(buf1853.data_ptr()), c_void_p(buf1854.data_ptr()), c_void_p(buf1855.data_ptr()))
    del convolution_79
    del primals_239
    del relu_75
    del squeeze_238
    del unsqueeze_4273
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1857 = aten.convolution_backward(buf1856, relu_74, primals_238, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_238
    buf1858 = buf1857[0]
    buf1859 = buf1857[1]
    del buf1857
    buf1860 = buf1854; del buf1854  # reuse
    buf1861 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1862 = buf1856; del buf1856  # reuse
    buf1863 = buf1861; del buf1861  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_277(c_void_p(buf1863.data_ptr()), c_void_p(relu_74.data_ptr()), c_void_p(buf1845.data_ptr()), c_void_p(buf1858.data_ptr()), c_void_p(convolution_78.data_ptr()), c_void_p(unsqueeze_4285.data_ptr()), c_void_p(squeeze_235.data_ptr()), c_void_p(primals_236.data_ptr()), c_void_p(buf1860.data_ptr()), c_void_p(buf1862.data_ptr()))
    del convolution_78
    del primals_236
    del squeeze_235
    del unsqueeze_4285
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1864 = aten.convolution_backward(buf1862, relu_73, primals_235, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1862
    del primals_235
    buf1865 = buf1864[0]
    buf1866 = buf1864[1]
    del buf1864
    buf1867 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1868 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1869 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1870 = buf1865; del buf1865  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_278(c_void_p(buf1870.data_ptr()), c_void_p(relu_73.data_ptr()), c_void_p(convolution_77.data_ptr()), c_void_p(unsqueeze_4297.data_ptr()), c_void_p(squeeze_232.data_ptr()), c_void_p(primals_233.data_ptr()), c_void_p(buf1867.data_ptr()), c_void_p(buf1868.data_ptr()), c_void_p(buf1869.data_ptr()))
    del convolution_77
    del primals_233
    del relu_73
    del squeeze_232
    del unsqueeze_4297
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1871 = aten.convolution_backward(buf1870, relu_72, primals_232, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_232
    buf1872 = buf1871[0]
    buf1873 = buf1871[1]
    del buf1871
    buf1874 = buf1845; del buf1845  # reuse
    buf1875 = buf1868; del buf1868  # reuse
    buf1876 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1877 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1878 = buf1870; del buf1870  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_279(c_void_p(buf1874.data_ptr()), c_void_p(relu_72.data_ptr()), c_void_p(relu_74.data_ptr()), c_void_p(buf1858.data_ptr()), c_void_p(buf1872.data_ptr()), c_void_p(convolution_76.data_ptr()), c_void_p(unsqueeze_4309.data_ptr()), c_void_p(squeeze_229.data_ptr()), c_void_p(primals_230.data_ptr()), c_void_p(buf1875.data_ptr()), c_void_p(buf1876.data_ptr()), c_void_p(buf1877.data_ptr()), c_void_p(buf1878.data_ptr()))
    del buf1858
    del buf1872
    del convolution_76
    del primals_230
    del relu_72
    del relu_74
    del squeeze_229
    del unsqueeze_4309
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1879 = aten.convolution_backward(buf1878, relu_71, primals_229, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1878
    del primals_229
    buf1880 = buf1879[0]
    buf1881 = buf1879[1]
    del buf1879
    buf1882 = buf1876; del buf1876  # reuse
    buf1883 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1884 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1885 = buf1880; del buf1880  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_280(c_void_p(buf1885.data_ptr()), c_void_p(relu_71.data_ptr()), c_void_p(convolution_75.data_ptr()), c_void_p(unsqueeze_4321.data_ptr()), c_void_p(squeeze_226.data_ptr()), c_void_p(primals_227.data_ptr()), c_void_p(buf1882.data_ptr()), c_void_p(buf1883.data_ptr()), c_void_p(buf1884.data_ptr()))
    del convolution_75
    del primals_227
    del relu_71
    del squeeze_226
    del unsqueeze_4321
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1886 = aten.convolution_backward(buf1885, relu_60, primals_226, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1885
    del primals_226
    buf1887 = buf1886[0]
    buf1888 = buf1886[1]
    del buf1886
    buf1889 = buf1765; del buf1765  # reuse
    buf1890 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1891 = buf1709; del buf1709  # reuse
    buf1893 = buf1891; del buf1891  # reuse
    buf1892 = buf1890; del buf1890  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_281(c_void_p(buf1893.data_ptr()), c_void_p(buf1892.data_ptr()), c_void_p(relu_70.data_ptr()), c_void_p(buf1730.data_ptr()), c_void_p(buf1748.data_ptr()), c_void_p(buf1751.data_ptr()), c_void_p(convolution_74.data_ptr()), c_void_p(unsqueeze_4333.data_ptr()), c_void_p(squeeze_223.data_ptr()), c_void_p(primals_224.data_ptr()), c_void_p(buf1889.data_ptr()))
    del convolution_74
    del primals_224
    del squeeze_223
    del unsqueeze_4333
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1894 = aten.convolution_backward(buf1893, relu_69, primals_223, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1893
    del primals_223
    buf1895 = buf1894[0]
    buf1896 = buf1894[1]
    del buf1894
    buf1897 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1898 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1899 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1900 = buf1895; del buf1895  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_282(c_void_p(buf1900.data_ptr()), c_void_p(relu_69.data_ptr()), c_void_p(convolution_73.data_ptr()), c_void_p(unsqueeze_4345.data_ptr()), c_void_p(squeeze_220.data_ptr()), c_void_p(primals_221.data_ptr()), c_void_p(buf1897.data_ptr()), c_void_p(buf1898.data_ptr()), c_void_p(buf1899.data_ptr()))
    del convolution_73
    del primals_221
    del relu_69
    del squeeze_220
    del unsqueeze_4345
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1901 = aten.convolution_backward(buf1900, relu_68, primals_220, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_220
    buf1902 = buf1901[0]
    buf1903 = buf1901[1]
    del buf1901
    buf1904 = buf1730; del buf1730  # reuse
    buf1905 = buf1898; del buf1898  # reuse
    buf1906 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1907 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1908 = buf1900; del buf1900  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_283(c_void_p(buf1904.data_ptr()), c_void_p(relu_68.data_ptr()), c_void_p(relu_70.data_ptr()), c_void_p(buf1748.data_ptr()), c_void_p(buf1751.data_ptr()), c_void_p(buf1902.data_ptr()), c_void_p(convolution_72.data_ptr()), c_void_p(unsqueeze_4357.data_ptr()), c_void_p(squeeze_217.data_ptr()), c_void_p(primals_218.data_ptr()), c_void_p(buf1905.data_ptr()), c_void_p(buf1906.data_ptr()), c_void_p(buf1907.data_ptr()), c_void_p(buf1908.data_ptr()))
    del buf1748
    del buf1751
    del buf1902
    del convolution_72
    del primals_218
    del relu_68
    del relu_70
    del squeeze_217
    del unsqueeze_4357
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1909 = aten.convolution_backward(buf1908, relu_67, primals_217, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1908
    del primals_217
    buf1910 = buf1909[0]
    buf1911 = buf1909[1]
    del buf1909
    buf1912 = buf1906; del buf1906  # reuse
    buf1913 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1914 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1915 = buf1910; del buf1910  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_284(c_void_p(buf1915.data_ptr()), c_void_p(relu_67.data_ptr()), c_void_p(convolution_71.data_ptr()), c_void_p(unsqueeze_4369.data_ptr()), c_void_p(squeeze_214.data_ptr()), c_void_p(primals_215.data_ptr()), c_void_p(buf1912.data_ptr()), c_void_p(buf1913.data_ptr()), c_void_p(buf1914.data_ptr()))
    del convolution_71
    del primals_215
    del relu_67
    del squeeze_214
    del unsqueeze_4369
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1916 = aten.convolution_backward(buf1915, relu_66, primals_214, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_214
    buf1917 = buf1916[0]
    buf1918 = buf1916[1]
    del buf1916
    buf1919 = buf1913; del buf1913  # reuse
    buf1920 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1921 = buf1915; del buf1915  # reuse
    buf1922 = buf1920; del buf1920  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_285(c_void_p(buf1922.data_ptr()), c_void_p(relu_66.data_ptr()), c_void_p(buf1904.data_ptr()), c_void_p(buf1917.data_ptr()), c_void_p(convolution_70.data_ptr()), c_void_p(unsqueeze_4381.data_ptr()), c_void_p(squeeze_211.data_ptr()), c_void_p(primals_212.data_ptr()), c_void_p(buf1919.data_ptr()), c_void_p(buf1921.data_ptr()))
    del convolution_70
    del primals_212
    del squeeze_211
    del unsqueeze_4381
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1923 = aten.convolution_backward(buf1921, relu_65, primals_211, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1921
    del primals_211
    buf1924 = buf1923[0]
    buf1925 = buf1923[1]
    del buf1923
    buf1926 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1927 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1928 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1929 = buf1924; del buf1924  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_286(c_void_p(buf1929.data_ptr()), c_void_p(relu_65.data_ptr()), c_void_p(convolution_69.data_ptr()), c_void_p(unsqueeze_4393.data_ptr()), c_void_p(squeeze_208.data_ptr()), c_void_p(primals_209.data_ptr()), c_void_p(buf1926.data_ptr()), c_void_p(buf1927.data_ptr()), c_void_p(buf1928.data_ptr()))
    del convolution_69
    del primals_209
    del relu_65
    del squeeze_208
    del unsqueeze_4393
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1930 = aten.convolution_backward(buf1929, relu_64, primals_208, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_208
    buf1931 = buf1930[0]
    buf1932 = buf1930[1]
    del buf1930
    buf1933 = buf1904; del buf1904  # reuse
    buf1934 = buf1927; del buf1927  # reuse
    buf1935 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1936 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1937 = buf1929; del buf1929  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_287(c_void_p(buf1933.data_ptr()), c_void_p(relu_64.data_ptr()), c_void_p(relu_66.data_ptr()), c_void_p(buf1917.data_ptr()), c_void_p(buf1931.data_ptr()), c_void_p(convolution_68.data_ptr()), c_void_p(unsqueeze_4405.data_ptr()), c_void_p(squeeze_205.data_ptr()), c_void_p(primals_206.data_ptr()), c_void_p(buf1934.data_ptr()), c_void_p(buf1935.data_ptr()), c_void_p(buf1936.data_ptr()), c_void_p(buf1937.data_ptr()))
    del buf1917
    del buf1931
    del convolution_68
    del primals_206
    del relu_64
    del relu_66
    del squeeze_205
    del unsqueeze_4405
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1938 = aten.convolution_backward(buf1937, relu_63, primals_205, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1937
    del primals_205
    buf1939 = buf1938[0]
    buf1940 = buf1938[1]
    del buf1938
    buf1941 = buf1935; del buf1935  # reuse
    buf1942 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1943 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1944 = buf1939; del buf1939  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_288(c_void_p(buf1944.data_ptr()), c_void_p(relu_63.data_ptr()), c_void_p(convolution_67.data_ptr()), c_void_p(unsqueeze_4417.data_ptr()), c_void_p(squeeze_202.data_ptr()), c_void_p(primals_203.data_ptr()), c_void_p(buf1941.data_ptr()), c_void_p(buf1942.data_ptr()), c_void_p(buf1943.data_ptr()))
    del convolution_67
    del primals_203
    del relu_63
    del squeeze_202
    del unsqueeze_4417
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1945 = aten.convolution_backward(buf1944, relu_59, primals_202, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1944
    del primals_202
    buf1946 = buf1945[0]
    buf1947 = buf1945[1]
    del buf1945
    buf1948 = buf1824; del buf1824  # reuse
    buf1949 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1955 = empty((72, ), device='cpu', dtype=torch.float32)
    buf1950 = buf1826; del buf1826  # reuse
    buf1956 = buf1819; del buf1819  # reuse
    buf1951 = buf1949; del buf1949  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_289(c_void_p(buf1951.data_ptr()), c_void_p(relu_62.data_ptr()), c_void_p(buf1815.data_ptr()), c_void_p(buf1828.data_ptr()), c_void_p(convolution_66.data_ptr()), c_void_p(unsqueeze_4429.data_ptr()), c_void_p(convolution_65.data_ptr()), c_void_p(unsqueeze_4441.data_ptr()), c_void_p(squeeze_199.data_ptr()), c_void_p(primals_200.data_ptr()), c_void_p(squeeze_196.data_ptr()), c_void_p(primals_197.data_ptr()), c_void_p(buf1948.data_ptr()), c_void_p(buf1955.data_ptr()), c_void_p(buf1950.data_ptr()), c_void_p(buf1956.data_ptr()))
    del convolution_65
    del convolution_66
    del primals_197
    del primals_200
    del squeeze_199
    del unsqueeze_4429
    del unsqueeze_4441
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1952 = aten.convolution_backward(buf1950, relu_50, primals_199, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1950
    del primals_199
    buf1953 = buf1952[0]
    buf1954 = buf1952[1]
    del buf1952
    buf1957 = buf1955; del buf1955  # reuse
    cpp_fused_native_batch_norm_backward_290(c_void_p(buf1957.data_ptr()), c_void_p(squeeze_196.data_ptr()))
    del squeeze_196
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1958 = aten.convolution_backward(buf1956, relu_61, primals_196, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_196
    buf1959 = buf1958[0]
    buf1960 = buf1958[1]
    del buf1958
    buf1961 = buf1942; del buf1942  # reuse
    buf1962 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1963 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1964 = buf1959; del buf1959  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_291(c_void_p(buf1964.data_ptr()), c_void_p(relu_61.data_ptr()), c_void_p(convolution_64.data_ptr()), c_void_p(unsqueeze_4453.data_ptr()), c_void_p(squeeze_193.data_ptr()), c_void_p(primals_194.data_ptr()), c_void_p(buf1961.data_ptr()), c_void_p(buf1962.data_ptr()), c_void_p(buf1963.data_ptr()))
    del convolution_64
    del primals_194
    del relu_61
    del squeeze_193
    del unsqueeze_4453
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf1965 = aten.convolution_backward(buf1964, relu_42, primals_193, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_193
    buf1966 = buf1965[0]
    buf1967 = buf1965[1]
    del buf1965
    buf1968 = buf1739; del buf1739  # reuse
    buf1969 = buf1874; del buf1874  # reuse
    cpp_fused_add_new_zeros_threshold_backward_292(c_void_p(buf1969.data_ptr()), c_void_p(relu_60.data_ptr()), c_void_p(buf1887.data_ptr()), c_void_p(buf1968.data_ptr()))
    del relu_60
    aten.index_put_(buf1968, [None, None, unsqueeze_259, convert_element_type_20], buf1969, True)
    del convert_element_type_20
    del unsqueeze_259
    buf1972 = buf1883; del buf1883  # reuse
    buf1973 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1974 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1971 = buf1732; del buf1732  # reuse
    buf1975 = buf1971; del buf1971  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_293(c_void_p(buf1975.data_ptr()), c_void_p(buf1968.data_ptr()), c_void_p(convolution_63.data_ptr()), c_void_p(unsqueeze_4465.data_ptr()), c_void_p(squeeze_190.data_ptr()), c_void_p(primals_191.data_ptr()), c_void_p(buf1972.data_ptr()), c_void_p(buf1973.data_ptr()), c_void_p(buf1974.data_ptr()))
    del buf1968
    del convolution_63
    del primals_191
    del squeeze_190
    del unsqueeze_4465
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1976 = aten.convolution_backward(buf1975, relu_58, primals_190, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1975
    del primals_190
    buf1977 = buf1976[0]
    buf1978 = buf1976[1]
    del buf1976
    buf1979 = buf1973; del buf1973  # reuse
    buf1980 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1981 = empty((36, ), device='cpu', dtype=torch.float32)
    buf1982 = buf1887; del buf1887  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_294(c_void_p(buf1969.data_ptr()), c_void_p(convolution_62.data_ptr()), c_void_p(unsqueeze_4477.data_ptr()), c_void_p(squeeze_187.data_ptr()), c_void_p(primals_188.data_ptr()), c_void_p(buf1979.data_ptr()), c_void_p(buf1980.data_ptr()), c_void_p(buf1981.data_ptr()), c_void_p(buf1982.data_ptr()))
    del convolution_62
    del primals_188
    del squeeze_187
    del unsqueeze_4477
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1983 = aten.convolution_backward(buf1982, relu_42, primals_187, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_187
    buf1984 = buf1983[0]
    buf1985 = buf1983[1]
    del buf1983
    buf1986 = buf1757; del buf1757  # reuse
    buf1987 = buf1933; del buf1933  # reuse
    cpp_fused_add_new_zeros_threshold_backward_295(c_void_p(buf1987.data_ptr()), c_void_p(relu_59.data_ptr()), c_void_p(buf1946.data_ptr()), c_void_p(buf1986.data_ptr()))
    del relu_59
    aten.index_put_(buf1986, [None, None, unsqueeze_250, convert_element_type_14], buf1987, True)
    del convert_element_type_14
    del unsqueeze_250
    buf1990 = buf1962; del buf1962  # reuse
    buf1991 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1992 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1989 = buf1750; del buf1750  # reuse
    buf1993 = buf1989; del buf1989  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_296(c_void_p(buf1993.data_ptr()), c_void_p(buf1986.data_ptr()), c_void_p(convolution_61.data_ptr()), c_void_p(unsqueeze_4489.data_ptr()), c_void_p(squeeze_184.data_ptr()), c_void_p(primals_185.data_ptr()), c_void_p(buf1990.data_ptr()), c_void_p(buf1991.data_ptr()), c_void_p(buf1992.data_ptr()))
    del buf1986
    del convolution_61
    del primals_185
    del squeeze_184
    del unsqueeze_4489
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf1994 = aten.convolution_backward(buf1993, relu_58, primals_184, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf1993
    del primals_184
    buf1995 = buf1994[0]
    buf1996 = buf1994[1]
    del buf1994
    buf1997 = reinterpret_tensor(buf1964, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf1964  # reuse
    cpp_fused__unsafe_index_put_new_zeros_297(c_void_p(buf1997.data_ptr()))
    aten.index_put_(buf1997, [None, None, unsqueeze_136, convert_element_type_2], buf1987, True)
    buf2000 = buf1991; del buf1991  # reuse
    buf2001 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2002 = empty((18, ), device='cpu', dtype=torch.float32)
    buf1999 = reinterpret_tensor(buf1956, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf1956  # reuse
    buf2003 = buf1999; del buf1999  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_298(c_void_p(buf2003.data_ptr()), c_void_p(buf1997.data_ptr()), c_void_p(convolution_60.data_ptr()), c_void_p(unsqueeze_4501.data_ptr()), c_void_p(squeeze_181.data_ptr()), c_void_p(primals_182.data_ptr()), c_void_p(buf2000.data_ptr()), c_void_p(buf2001.data_ptr()), c_void_p(buf2002.data_ptr()))
    del buf1997
    del convolution_60
    del primals_182
    del squeeze_181
    del unsqueeze_4501
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2004 = aten.convolution_backward(buf2003, relu_50, primals_181, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_181
    buf2005 = buf2004[0]
    buf2006 = buf2004[1]
    del buf2004
    buf2007 = buf1815; del buf1815  # reuse
    buf2008 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2009 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2010 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2011 = reinterpret_tensor(buf2003, (8, 72, 14, 14), (14112, 1, 1008, 72), 0); del buf2003  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_299(c_void_p(buf2007.data_ptr()), c_void_p(relu_58.data_ptr()), c_void_p(relu_62.data_ptr()), c_void_p(buf1828.data_ptr()), c_void_p(buf1977.data_ptr()), c_void_p(buf1995.data_ptr()), c_void_p(convolution_59.data_ptr()), c_void_p(unsqueeze_4513.data_ptr()), c_void_p(squeeze_178.data_ptr()), c_void_p(primals_179.data_ptr()), c_void_p(buf2008.data_ptr()), c_void_p(buf2009.data_ptr()), c_void_p(buf2010.data_ptr()), c_void_p(buf2011.data_ptr()))
    del buf1828
    del buf1977
    del buf1995
    del convolution_59
    del primals_179
    del relu_58
    del relu_62
    del squeeze_178
    del unsqueeze_4513
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2012 = aten.convolution_backward(buf2011, relu_57, primals_178, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2011
    del primals_178
    buf2013 = buf2012[0]
    buf2014 = buf2012[1]
    del buf2012
    buf2015 = buf2009; del buf2009  # reuse
    buf2016 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2017 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2018 = buf2013; del buf2013  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_300(c_void_p(buf2018.data_ptr()), c_void_p(relu_57.data_ptr()), c_void_p(convolution_58.data_ptr()), c_void_p(unsqueeze_4525.data_ptr()), c_void_p(squeeze_175.data_ptr()), c_void_p(primals_176.data_ptr()), c_void_p(buf2015.data_ptr()), c_void_p(buf2016.data_ptr()), c_void_p(buf2017.data_ptr()))
    del convolution_58
    del primals_176
    del relu_57
    del squeeze_175
    del unsqueeze_4525
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2019 = aten.convolution_backward(buf2018, relu_56, primals_175, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_175
    buf2020 = buf2019[0]
    buf2021 = buf2019[1]
    del buf2019
    buf2022 = buf2016; del buf2016  # reuse
    buf2023 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2024 = buf2018; del buf2018  # reuse
    buf2025 = buf2023; del buf2023  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_301(c_void_p(buf2025.data_ptr()), c_void_p(relu_56.data_ptr()), c_void_p(buf2007.data_ptr()), c_void_p(buf2020.data_ptr()), c_void_p(convolution_57.data_ptr()), c_void_p(unsqueeze_4537.data_ptr()), c_void_p(squeeze_172.data_ptr()), c_void_p(primals_173.data_ptr()), c_void_p(buf2022.data_ptr()), c_void_p(buf2024.data_ptr()))
    del convolution_57
    del primals_173
    del squeeze_172
    del unsqueeze_4537
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2026 = aten.convolution_backward(buf2024, relu_55, primals_172, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2024
    del primals_172
    buf2027 = buf2026[0]
    buf2028 = buf2026[1]
    del buf2026
    buf2029 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2030 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2031 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2032 = buf2027; del buf2027  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_302(c_void_p(buf2032.data_ptr()), c_void_p(relu_55.data_ptr()), c_void_p(convolution_56.data_ptr()), c_void_p(unsqueeze_4549.data_ptr()), c_void_p(squeeze_169.data_ptr()), c_void_p(primals_170.data_ptr()), c_void_p(buf2029.data_ptr()), c_void_p(buf2030.data_ptr()), c_void_p(buf2031.data_ptr()))
    del convolution_56
    del primals_170
    del relu_55
    del squeeze_169
    del unsqueeze_4549
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2033 = aten.convolution_backward(buf2032, relu_54, primals_169, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_169
    buf2034 = buf2033[0]
    buf2035 = buf2033[1]
    del buf2033
    buf2036 = buf2007; del buf2007  # reuse
    buf2037 = buf2030; del buf2030  # reuse
    buf2038 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2039 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2040 = buf2032; del buf2032  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_303(c_void_p(buf2036.data_ptr()), c_void_p(relu_54.data_ptr()), c_void_p(relu_56.data_ptr()), c_void_p(buf2020.data_ptr()), c_void_p(buf2034.data_ptr()), c_void_p(convolution_55.data_ptr()), c_void_p(unsqueeze_4561.data_ptr()), c_void_p(squeeze_166.data_ptr()), c_void_p(primals_167.data_ptr()), c_void_p(buf2037.data_ptr()), c_void_p(buf2038.data_ptr()), c_void_p(buf2039.data_ptr()), c_void_p(buf2040.data_ptr()))
    del buf2020
    del buf2034
    del convolution_55
    del primals_167
    del relu_54
    del relu_56
    del squeeze_166
    del unsqueeze_4561
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2041 = aten.convolution_backward(buf2040, relu_53, primals_166, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2040
    del primals_166
    buf2042 = buf2041[0]
    buf2043 = buf2041[1]
    del buf2041
    buf2044 = buf2038; del buf2038  # reuse
    buf2045 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2046 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2047 = buf2042; del buf2042  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_304(c_void_p(buf2047.data_ptr()), c_void_p(relu_53.data_ptr()), c_void_p(convolution_54.data_ptr()), c_void_p(unsqueeze_4573.data_ptr()), c_void_p(squeeze_163.data_ptr()), c_void_p(primals_164.data_ptr()), c_void_p(buf2044.data_ptr()), c_void_p(buf2045.data_ptr()), c_void_p(buf2046.data_ptr()))
    del convolution_54
    del primals_164
    del relu_53
    del squeeze_163
    del unsqueeze_4573
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2048 = aten.convolution_backward(buf2047, relu_52, primals_163, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_163
    buf2049 = buf2048[0]
    buf2050 = buf2048[1]
    del buf2048
    buf2051 = buf2045; del buf2045  # reuse
    buf2052 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2053 = buf2047; del buf2047  # reuse
    buf2054 = buf2052; del buf2052  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_305(c_void_p(buf2054.data_ptr()), c_void_p(relu_52.data_ptr()), c_void_p(buf2036.data_ptr()), c_void_p(buf2049.data_ptr()), c_void_p(convolution_53.data_ptr()), c_void_p(unsqueeze_4585.data_ptr()), c_void_p(squeeze_160.data_ptr()), c_void_p(primals_161.data_ptr()), c_void_p(buf2051.data_ptr()), c_void_p(buf2053.data_ptr()))
    del convolution_53
    del primals_161
    del squeeze_160
    del unsqueeze_4585
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2055 = aten.convolution_backward(buf2053, relu_51, primals_160, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2053
    del primals_160
    buf2056 = buf2055[0]
    buf2057 = buf2055[1]
    del buf2055
    buf2058 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2059 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2060 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2061 = buf2056; del buf2056  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_306(c_void_p(buf2061.data_ptr()), c_void_p(relu_51.data_ptr()), c_void_p(convolution_52.data_ptr()), c_void_p(unsqueeze_4597.data_ptr()), c_void_p(squeeze_157.data_ptr()), c_void_p(primals_158.data_ptr()), c_void_p(buf2058.data_ptr()), c_void_p(buf2059.data_ptr()), c_void_p(buf2060.data_ptr()))
    del convolution_52
    del primals_158
    del relu_51
    del squeeze_157
    del unsqueeze_4597
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2062 = aten.convolution_backward(buf2061, relu_34, primals_157, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2061
    del primals_157
    buf2063 = buf2062[0]
    buf2064 = buf2062[1]
    del buf2062
    buf2065 = buf1980; del buf1980  # reuse
    buf2066 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2067 = buf1982; del buf1982  # reuse
    buf2069 = buf2067; del buf2067  # reuse
    buf2068 = buf2066; del buf2066  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_307(c_void_p(buf2069.data_ptr()), c_void_p(buf2068.data_ptr()), c_void_p(relu_50.data_ptr()), c_void_p(buf1953.data_ptr()), c_void_p(buf1969.data_ptr()), c_void_p(buf2005.data_ptr()), c_void_p(convolution_51.data_ptr()), c_void_p(unsqueeze_4609.data_ptr()), c_void_p(squeeze_154.data_ptr()), c_void_p(primals_155.data_ptr()), c_void_p(buf2065.data_ptr()))
    del convolution_51
    del primals_155
    del squeeze_154
    del unsqueeze_4609
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2070 = aten.convolution_backward(buf2069, relu_49, primals_154, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2069
    del primals_154
    buf2071 = buf2070[0]
    buf2072 = buf2070[1]
    del buf2070
    buf2073 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2074 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2075 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2076 = buf2071; del buf2071  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_308(c_void_p(buf2076.data_ptr()), c_void_p(relu_49.data_ptr()), c_void_p(convolution_50.data_ptr()), c_void_p(unsqueeze_4621.data_ptr()), c_void_p(squeeze_151.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(buf2073.data_ptr()), c_void_p(buf2074.data_ptr()), c_void_p(buf2075.data_ptr()))
    del convolution_50
    del primals_152
    del relu_49
    del squeeze_151
    del unsqueeze_4621
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2077 = aten.convolution_backward(buf2076, relu_48, primals_151, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_151
    buf2078 = buf2077[0]
    buf2079 = buf2077[1]
    del buf2077
    buf2080 = buf1953; del buf1953  # reuse
    buf2081 = buf2074; del buf2074  # reuse
    buf2082 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2083 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2084 = buf2076; del buf2076  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_309(c_void_p(buf2080.data_ptr()), c_void_p(relu_48.data_ptr()), c_void_p(relu_50.data_ptr()), c_void_p(buf1969.data_ptr()), c_void_p(buf2005.data_ptr()), c_void_p(buf2078.data_ptr()), c_void_p(convolution_49.data_ptr()), c_void_p(unsqueeze_4633.data_ptr()), c_void_p(squeeze_148.data_ptr()), c_void_p(primals_149.data_ptr()), c_void_p(buf2081.data_ptr()), c_void_p(buf2082.data_ptr()), c_void_p(buf2083.data_ptr()), c_void_p(buf2084.data_ptr()))
    del buf1969
    del buf2005
    del buf2078
    del convolution_49
    del primals_149
    del relu_48
    del relu_50
    del squeeze_148
    del unsqueeze_4633
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2085 = aten.convolution_backward(buf2084, relu_47, primals_148, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2084
    del primals_148
    buf2086 = buf2085[0]
    buf2087 = buf2085[1]
    del buf2085
    buf2088 = buf2082; del buf2082  # reuse
    buf2089 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2090 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2091 = buf2086; del buf2086  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_310(c_void_p(buf2091.data_ptr()), c_void_p(relu_47.data_ptr()), c_void_p(convolution_48.data_ptr()), c_void_p(unsqueeze_4645.data_ptr()), c_void_p(squeeze_145.data_ptr()), c_void_p(primals_146.data_ptr()), c_void_p(buf2088.data_ptr()), c_void_p(buf2089.data_ptr()), c_void_p(buf2090.data_ptr()))
    del convolution_48
    del primals_146
    del relu_47
    del squeeze_145
    del unsqueeze_4645
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2092 = aten.convolution_backward(buf2091, relu_46, primals_145, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_145
    buf2093 = buf2092[0]
    buf2094 = buf2092[1]
    del buf2092
    buf2095 = buf2089; del buf2089  # reuse
    buf2096 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2097 = buf2091; del buf2091  # reuse
    buf2098 = buf2096; del buf2096  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_311(c_void_p(buf2098.data_ptr()), c_void_p(relu_46.data_ptr()), c_void_p(buf2080.data_ptr()), c_void_p(buf2093.data_ptr()), c_void_p(convolution_47.data_ptr()), c_void_p(unsqueeze_4657.data_ptr()), c_void_p(squeeze_142.data_ptr()), c_void_p(primals_143.data_ptr()), c_void_p(buf2095.data_ptr()), c_void_p(buf2097.data_ptr()))
    del convolution_47
    del primals_143
    del squeeze_142
    del unsqueeze_4657
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2099 = aten.convolution_backward(buf2097, relu_45, primals_142, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2097
    del primals_142
    buf2100 = buf2099[0]
    buf2101 = buf2099[1]
    del buf2099
    buf2102 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2103 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2104 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2105 = buf2100; del buf2100  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_312(c_void_p(buf2105.data_ptr()), c_void_p(relu_45.data_ptr()), c_void_p(convolution_46.data_ptr()), c_void_p(unsqueeze_4669.data_ptr()), c_void_p(squeeze_139.data_ptr()), c_void_p(primals_140.data_ptr()), c_void_p(buf2102.data_ptr()), c_void_p(buf2103.data_ptr()), c_void_p(buf2104.data_ptr()))
    del convolution_46
    del primals_140
    del relu_45
    del squeeze_139
    del unsqueeze_4669
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2106 = aten.convolution_backward(buf2105, relu_44, primals_139, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_139
    buf2107 = buf2106[0]
    buf2108 = buf2106[1]
    del buf2106
    buf2109 = buf2080; del buf2080  # reuse
    buf2110 = buf2103; del buf2103  # reuse
    buf2111 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2112 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2113 = buf2105; del buf2105  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_313(c_void_p(buf2109.data_ptr()), c_void_p(relu_44.data_ptr()), c_void_p(relu_46.data_ptr()), c_void_p(buf2093.data_ptr()), c_void_p(buf2107.data_ptr()), c_void_p(convolution_45.data_ptr()), c_void_p(unsqueeze_4681.data_ptr()), c_void_p(squeeze_136.data_ptr()), c_void_p(primals_137.data_ptr()), c_void_p(buf2110.data_ptr()), c_void_p(buf2111.data_ptr()), c_void_p(buf2112.data_ptr()), c_void_p(buf2113.data_ptr()))
    del buf2093
    del buf2107
    del convolution_45
    del primals_137
    del relu_44
    del relu_46
    del squeeze_136
    del unsqueeze_4681
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2114 = aten.convolution_backward(buf2113, relu_43, primals_136, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2113
    del primals_136
    buf2115 = buf2114[0]
    buf2116 = buf2114[1]
    del buf2114
    buf2117 = buf2111; del buf2111  # reuse
    buf2118 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2119 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2120 = buf2115; del buf2115  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_314(c_void_p(buf2120.data_ptr()), c_void_p(relu_43.data_ptr()), c_void_p(convolution_44.data_ptr()), c_void_p(unsqueeze_4693.data_ptr()), c_void_p(squeeze_133.data_ptr()), c_void_p(primals_134.data_ptr()), c_void_p(buf2117.data_ptr()), c_void_p(buf2118.data_ptr()), c_void_p(buf2119.data_ptr()))
    del convolution_44
    del primals_134
    del relu_43
    del squeeze_133
    del unsqueeze_4693
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2121 = aten.convolution_backward(buf2120, relu_33, primals_133, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_133
    buf2122 = buf2121[0]
    buf2123 = buf2121[1]
    del buf2121
    buf2124 = buf2001; del buf2001  # reuse
    buf2125 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2126 = buf1946; del buf1946  # reuse
    buf2128 = buf2126; del buf2126  # reuse
    buf2127 = buf2125; del buf2125  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_315(c_void_p(buf2128.data_ptr()), c_void_p(buf2127.data_ptr()), c_void_p(relu_42.data_ptr()), c_void_p(buf1966.data_ptr()), c_void_p(buf1984.data_ptr()), c_void_p(buf1987.data_ptr()), c_void_p(convolution_43.data_ptr()), c_void_p(unsqueeze_4705.data_ptr()), c_void_p(squeeze_130.data_ptr()), c_void_p(primals_131.data_ptr()), c_void_p(buf2124.data_ptr()))
    del convolution_43
    del primals_131
    del squeeze_130
    del unsqueeze_4705
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2129 = aten.convolution_backward(buf2128, relu_41, primals_130, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2128
    del primals_130
    buf2130 = buf2129[0]
    buf2131 = buf2129[1]
    del buf2129
    buf2132 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2133 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2134 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2135 = buf2130; del buf2130  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_316(c_void_p(buf2135.data_ptr()), c_void_p(relu_41.data_ptr()), c_void_p(convolution_42.data_ptr()), c_void_p(unsqueeze_4717.data_ptr()), c_void_p(squeeze_127.data_ptr()), c_void_p(primals_128.data_ptr()), c_void_p(buf2132.data_ptr()), c_void_p(buf2133.data_ptr()), c_void_p(buf2134.data_ptr()))
    del convolution_42
    del primals_128
    del relu_41
    del squeeze_127
    del unsqueeze_4717
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2136 = aten.convolution_backward(buf2135, relu_40, primals_127, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_127
    buf2137 = buf2136[0]
    buf2138 = buf2136[1]
    del buf2136
    buf2139 = buf1966; del buf1966  # reuse
    buf2140 = buf2133; del buf2133  # reuse
    buf2141 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2142 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2143 = buf2135; del buf2135  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_317(c_void_p(buf2139.data_ptr()), c_void_p(relu_40.data_ptr()), c_void_p(relu_42.data_ptr()), c_void_p(buf1984.data_ptr()), c_void_p(buf1987.data_ptr()), c_void_p(buf2137.data_ptr()), c_void_p(convolution_41.data_ptr()), c_void_p(unsqueeze_4729.data_ptr()), c_void_p(squeeze_124.data_ptr()), c_void_p(primals_125.data_ptr()), c_void_p(buf2140.data_ptr()), c_void_p(buf2141.data_ptr()), c_void_p(buf2142.data_ptr()), c_void_p(buf2143.data_ptr()))
    del buf1984
    del buf1987
    del buf2137
    del convolution_41
    del primals_125
    del relu_40
    del relu_42
    del squeeze_124
    del unsqueeze_4729
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2144 = aten.convolution_backward(buf2143, relu_39, primals_124, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2143
    del primals_124
    buf2145 = buf2144[0]
    buf2146 = buf2144[1]
    del buf2144
    buf2147 = buf2141; del buf2141  # reuse
    buf2148 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2149 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2150 = buf2145; del buf2145  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_318(c_void_p(buf2150.data_ptr()), c_void_p(relu_39.data_ptr()), c_void_p(convolution_40.data_ptr()), c_void_p(unsqueeze_4741.data_ptr()), c_void_p(squeeze_121.data_ptr()), c_void_p(primals_122.data_ptr()), c_void_p(buf2147.data_ptr()), c_void_p(buf2148.data_ptr()), c_void_p(buf2149.data_ptr()))
    del convolution_40
    del primals_122
    del relu_39
    del squeeze_121
    del unsqueeze_4741
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2151 = aten.convolution_backward(buf2150, relu_38, primals_121, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_121
    buf2152 = buf2151[0]
    buf2153 = buf2151[1]
    del buf2151
    buf2154 = buf2148; del buf2148  # reuse
    buf2155 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2156 = buf2150; del buf2150  # reuse
    buf2157 = buf2155; del buf2155  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_319(c_void_p(buf2157.data_ptr()), c_void_p(relu_38.data_ptr()), c_void_p(buf2139.data_ptr()), c_void_p(buf2152.data_ptr()), c_void_p(convolution_39.data_ptr()), c_void_p(unsqueeze_4753.data_ptr()), c_void_p(squeeze_118.data_ptr()), c_void_p(primals_119.data_ptr()), c_void_p(buf2154.data_ptr()), c_void_p(buf2156.data_ptr()))
    del convolution_39
    del primals_119
    del squeeze_118
    del unsqueeze_4753
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2158 = aten.convolution_backward(buf2156, relu_37, primals_118, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2156
    del primals_118
    buf2159 = buf2158[0]
    buf2160 = buf2158[1]
    del buf2158
    buf2161 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2162 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2163 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2164 = buf2159; del buf2159  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_320(c_void_p(buf2164.data_ptr()), c_void_p(relu_37.data_ptr()), c_void_p(convolution_38.data_ptr()), c_void_p(unsqueeze_4765.data_ptr()), c_void_p(squeeze_115.data_ptr()), c_void_p(primals_116.data_ptr()), c_void_p(buf2161.data_ptr()), c_void_p(buf2162.data_ptr()), c_void_p(buf2163.data_ptr()))
    del convolution_38
    del primals_116
    del relu_37
    del squeeze_115
    del unsqueeze_4765
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2165 = aten.convolution_backward(buf2164, relu_36, primals_115, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_115
    buf2166 = buf2165[0]
    buf2167 = buf2165[1]
    del buf2165
    buf2168 = buf2139; del buf2139  # reuse
    buf2169 = buf2162; del buf2162  # reuse
    buf2170 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2171 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2172 = buf2164; del buf2164  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_321(c_void_p(buf2168.data_ptr()), c_void_p(relu_36.data_ptr()), c_void_p(relu_38.data_ptr()), c_void_p(buf2152.data_ptr()), c_void_p(buf2166.data_ptr()), c_void_p(convolution_37.data_ptr()), c_void_p(unsqueeze_4777.data_ptr()), c_void_p(squeeze_112.data_ptr()), c_void_p(primals_113.data_ptr()), c_void_p(buf2169.data_ptr()), c_void_p(buf2170.data_ptr()), c_void_p(buf2171.data_ptr()), c_void_p(buf2172.data_ptr()))
    del buf2152
    del buf2166
    del convolution_37
    del primals_113
    del relu_36
    del relu_38
    del squeeze_112
    del unsqueeze_4777
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2173 = aten.convolution_backward(buf2172, relu_35, primals_112, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2172
    del primals_112
    buf2174 = buf2173[0]
    buf2175 = buf2173[1]
    del buf2173
    buf2176 = buf2170; del buf2170  # reuse
    buf2177 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2178 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2179 = buf2174; del buf2174  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_322(c_void_p(buf2179.data_ptr()), c_void_p(relu_35.data_ptr()), c_void_p(convolution_36.data_ptr()), c_void_p(unsqueeze_4789.data_ptr()), c_void_p(squeeze_109.data_ptr()), c_void_p(primals_110.data_ptr()), c_void_p(buf2176.data_ptr()), c_void_p(buf2177.data_ptr()), c_void_p(buf2178.data_ptr()))
    del convolution_36
    del primals_110
    del relu_35
    del squeeze_109
    del unsqueeze_4789
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2180 = aten.convolution_backward(buf2179, relu_32, primals_109, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_109
    buf2181 = buf2180[0]
    buf2182 = buf2180[1]
    del buf2180
    buf2183 = buf2036; del buf2036  # reuse
    buf2184 = buf2059; del buf2059  # reuse
    buf2185 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2186 = empty((72, ), device='cpu', dtype=torch.float32)
    buf2187 = buf2183; del buf2183  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_323(c_void_p(buf2187.data_ptr()), c_void_p(relu_34.data_ptr()), c_void_p(relu_52.data_ptr()), c_void_p(buf2049.data_ptr()), c_void_p(buf2063.data_ptr()), c_void_p(convolution_35.data_ptr()), c_void_p(unsqueeze_4801.data_ptr()), c_void_p(squeeze_106.data_ptr()), c_void_p(primals_107.data_ptr()), c_void_p(buf2184.data_ptr()), c_void_p(buf2185.data_ptr()), c_void_p(buf2186.data_ptr()))
    del buf2049
    del buf2185
    del convolution_35
    del primals_107
    del relu_34
    del relu_52
    del squeeze_106
    del unsqueeze_4801
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2188 = aten.convolution_backward(buf2187, relu_33, primals_106, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_106
    buf2189 = buf2188[0]
    buf2190 = buf2188[1]
    del buf2188
    buf2191 = buf2118; del buf2118  # reuse
    buf2192 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2193 = buf2120; del buf2120  # reuse
    buf2195 = buf2193; del buf2193  # reuse
    buf2194 = buf2192; del buf2192  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_324(c_void_p(buf2195.data_ptr()), c_void_p(buf2194.data_ptr()), c_void_p(relu_33.data_ptr()), c_void_p(buf2109.data_ptr()), c_void_p(buf2122.data_ptr()), c_void_p(buf2189.data_ptr()), c_void_p(convolution_34.data_ptr()), c_void_p(unsqueeze_4813.data_ptr()), c_void_p(squeeze_103.data_ptr()), c_void_p(primals_104.data_ptr()), c_void_p(buf2191.data_ptr()))
    del convolution_34
    del primals_104
    del squeeze_103
    del unsqueeze_4813
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2196 = aten.convolution_backward(buf2195, relu_23, primals_103, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_103
    buf2197 = buf2196[0]
    buf2198 = buf2196[1]
    del buf2196
    buf2199 = reinterpret_tensor(buf2187, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf2187  # reuse
    buf2200 = buf2179; del buf2179  # reuse
    cpp_fused_add_new_zeros_threshold_backward_325(c_void_p(relu_32.data_ptr()), c_void_p(buf2168.data_ptr()), c_void_p(buf2181.data_ptr()), c_void_p(buf2199.data_ptr()), c_void_p(buf2200.data_ptr()))
    aten.index_put_(buf2199, [None, None, unsqueeze_136, convert_element_type_2], buf2200, True)
    del convert_element_type_2
    del unsqueeze_136
    buf2203 = buf2177; del buf2177  # reuse
    buf2204 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2205 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2202 = reinterpret_tensor(buf2063, (8, 18, 28, 28), (14112, 784, 28, 1), 0); del buf2063  # reuse
    buf2206 = buf2202; del buf2202  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_326(c_void_p(buf2206.data_ptr()), c_void_p(buf2199.data_ptr()), c_void_p(convolution_33.data_ptr()), c_void_p(unsqueeze_4825.data_ptr()), c_void_p(squeeze_100.data_ptr()), c_void_p(primals_101.data_ptr()), c_void_p(buf2203.data_ptr()), c_void_p(buf2204.data_ptr()), c_void_p(buf2205.data_ptr()))
    del buf2199
    del convolution_33
    del primals_101
    del squeeze_100
    del unsqueeze_4825
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2207 = aten.convolution_backward(buf2206, relu_31, primals_100, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2206
    del primals_100
    buf2208 = buf2207[0]
    buf2209 = buf2207[1]
    del buf2207
    buf2210 = buf2109; del buf2109  # reuse
    buf2211 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2212 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2213 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2214 = buf2195; del buf2195  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_327(c_void_p(buf2210.data_ptr()), c_void_p(relu_31.data_ptr()), c_void_p(relu_33.data_ptr()), c_void_p(buf2122.data_ptr()), c_void_p(buf2189.data_ptr()), c_void_p(buf2208.data_ptr()), c_void_p(convolution_32.data_ptr()), c_void_p(unsqueeze_4837.data_ptr()), c_void_p(squeeze_97.data_ptr()), c_void_p(primals_98.data_ptr()), c_void_p(buf2211.data_ptr()), c_void_p(buf2212.data_ptr()), c_void_p(buf2213.data_ptr()), c_void_p(buf2214.data_ptr()))
    del buf2122
    del buf2189
    del buf2208
    del convolution_32
    del primals_98
    del relu_31
    del relu_33
    del squeeze_97
    del unsqueeze_4837
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2215 = aten.convolution_backward(buf2214, relu_30, primals_97, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2214
    del primals_97
    buf2216 = buf2215[0]
    buf2217 = buf2215[1]
    del buf2215
    buf2218 = buf2212; del buf2212  # reuse
    buf2219 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2220 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2221 = buf2216; del buf2216  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_328(c_void_p(buf2221.data_ptr()), c_void_p(relu_30.data_ptr()), c_void_p(convolution_31.data_ptr()), c_void_p(unsqueeze_4849.data_ptr()), c_void_p(squeeze_94.data_ptr()), c_void_p(primals_95.data_ptr()), c_void_p(buf2218.data_ptr()), c_void_p(buf2219.data_ptr()), c_void_p(buf2220.data_ptr()))
    del convolution_31
    del primals_95
    del relu_30
    del squeeze_94
    del unsqueeze_4849
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2222 = aten.convolution_backward(buf2221, relu_29, primals_94, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_94
    buf2223 = buf2222[0]
    buf2224 = buf2222[1]
    del buf2222
    buf2225 = buf2219; del buf2219  # reuse
    buf2226 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2227 = buf2221; del buf2221  # reuse
    buf2228 = buf2226; del buf2226  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_329(c_void_p(buf2228.data_ptr()), c_void_p(relu_29.data_ptr()), c_void_p(buf2210.data_ptr()), c_void_p(buf2223.data_ptr()), c_void_p(convolution_30.data_ptr()), c_void_p(unsqueeze_4861.data_ptr()), c_void_p(squeeze_91.data_ptr()), c_void_p(primals_92.data_ptr()), c_void_p(buf2225.data_ptr()), c_void_p(buf2227.data_ptr()))
    del convolution_30
    del primals_92
    del squeeze_91
    del unsqueeze_4861
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2229 = aten.convolution_backward(buf2227, relu_28, primals_91, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2227
    del primals_91
    buf2230 = buf2229[0]
    buf2231 = buf2229[1]
    del buf2229
    buf2232 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2233 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2234 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2235 = buf2230; del buf2230  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_330(c_void_p(buf2235.data_ptr()), c_void_p(relu_28.data_ptr()), c_void_p(convolution_29.data_ptr()), c_void_p(unsqueeze_4873.data_ptr()), c_void_p(squeeze_88.data_ptr()), c_void_p(primals_89.data_ptr()), c_void_p(buf2232.data_ptr()), c_void_p(buf2233.data_ptr()), c_void_p(buf2234.data_ptr()))
    del convolution_29
    del primals_89
    del relu_28
    del squeeze_88
    del unsqueeze_4873
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2236 = aten.convolution_backward(buf2235, relu_27, primals_88, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_88
    buf2237 = buf2236[0]
    buf2238 = buf2236[1]
    del buf2236
    buf2239 = buf2210; del buf2210  # reuse
    buf2240 = buf2233; del buf2233  # reuse
    buf2241 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2242 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2243 = buf2235; del buf2235  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_331(c_void_p(buf2239.data_ptr()), c_void_p(relu_27.data_ptr()), c_void_p(relu_29.data_ptr()), c_void_p(buf2223.data_ptr()), c_void_p(buf2237.data_ptr()), c_void_p(convolution_28.data_ptr()), c_void_p(unsqueeze_4885.data_ptr()), c_void_p(squeeze_85.data_ptr()), c_void_p(primals_86.data_ptr()), c_void_p(buf2240.data_ptr()), c_void_p(buf2241.data_ptr()), c_void_p(buf2242.data_ptr()), c_void_p(buf2243.data_ptr()))
    del buf2223
    del buf2237
    del convolution_28
    del primals_86
    del relu_27
    del relu_29
    del squeeze_85
    del unsqueeze_4885
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2244 = aten.convolution_backward(buf2243, relu_26, primals_85, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2243
    del primals_85
    buf2245 = buf2244[0]
    buf2246 = buf2244[1]
    del buf2244
    buf2247 = buf2241; del buf2241  # reuse
    buf2248 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2249 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2250 = buf2245; del buf2245  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_332(c_void_p(buf2250.data_ptr()), c_void_p(relu_26.data_ptr()), c_void_p(convolution_27.data_ptr()), c_void_p(unsqueeze_4897.data_ptr()), c_void_p(squeeze_82.data_ptr()), c_void_p(primals_83.data_ptr()), c_void_p(buf2247.data_ptr()), c_void_p(buf2248.data_ptr()), c_void_p(buf2249.data_ptr()))
    del convolution_27
    del primals_83
    del relu_26
    del squeeze_82
    del unsqueeze_4897
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2251 = aten.convolution_backward(buf2250, relu_25, primals_82, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_82
    buf2252 = buf2251[0]
    buf2253 = buf2251[1]
    del buf2251
    buf2254 = buf2248; del buf2248  # reuse
    buf2255 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2256 = buf2250; del buf2250  # reuse
    buf2257 = buf2255; del buf2255  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_333(c_void_p(buf2257.data_ptr()), c_void_p(relu_25.data_ptr()), c_void_p(buf2239.data_ptr()), c_void_p(buf2252.data_ptr()), c_void_p(convolution_26.data_ptr()), c_void_p(unsqueeze_4909.data_ptr()), c_void_p(squeeze_79.data_ptr()), c_void_p(primals_80.data_ptr()), c_void_p(buf2254.data_ptr()), c_void_p(buf2256.data_ptr()))
    del convolution_26
    del primals_80
    del squeeze_79
    del unsqueeze_4909
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2258 = aten.convolution_backward(buf2256, relu_24, primals_79, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2256
    del primals_79
    buf2259 = buf2258[0]
    buf2260 = buf2258[1]
    del buf2258
    buf2261 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2262 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2263 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2264 = buf2259; del buf2259  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_334(c_void_p(buf2264.data_ptr()), c_void_p(relu_24.data_ptr()), c_void_p(convolution_25.data_ptr()), c_void_p(unsqueeze_4921.data_ptr()), c_void_p(squeeze_76.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(buf2261.data_ptr()), c_void_p(buf2262.data_ptr()), c_void_p(buf2263.data_ptr()))
    del convolution_25
    del primals_77
    del relu_24
    del squeeze_76
    del unsqueeze_4921
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2265 = aten.convolution_backward(buf2264, relu_15, primals_76, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2264
    del primals_76
    buf2266 = buf2265[0]
    buf2267 = buf2265[1]
    del buf2265
    buf2268 = buf2168; del buf2168  # reuse
    buf2269 = buf2204; del buf2204  # reuse
    buf2270 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2271 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2272 = buf2200; del buf2200  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_335(c_void_p(buf2268.data_ptr()), c_void_p(relu_23.data_ptr()), c_void_p(buf2197.data_ptr()), c_void_p(relu_32.data_ptr()), c_void_p(buf2181.data_ptr()), c_void_p(convolution_24.data_ptr()), c_void_p(unsqueeze_4933.data_ptr()), c_void_p(squeeze_73.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(buf2269.data_ptr()), c_void_p(buf2270.data_ptr()), c_void_p(buf2271.data_ptr()), c_void_p(buf2272.data_ptr()))
    del buf2181
    del buf2197
    del convolution_24
    del primals_74
    del relu_23
    del relu_32
    del squeeze_73
    del unsqueeze_4933
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2273 = aten.convolution_backward(buf2272, relu_22, primals_73, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2272
    del primals_73
    buf2274 = buf2273[0]
    buf2275 = buf2273[1]
    del buf2273
    buf2276 = buf2270; del buf2270  # reuse
    buf2277 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2278 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2279 = buf2274; del buf2274  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_336(c_void_p(buf2279.data_ptr()), c_void_p(relu_22.data_ptr()), c_void_p(convolution_23.data_ptr()), c_void_p(unsqueeze_4945.data_ptr()), c_void_p(squeeze_70.data_ptr()), c_void_p(primals_71.data_ptr()), c_void_p(buf2276.data_ptr()), c_void_p(buf2277.data_ptr()), c_void_p(buf2278.data_ptr()))
    del convolution_23
    del primals_71
    del relu_22
    del squeeze_70
    del unsqueeze_4945
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2280 = aten.convolution_backward(buf2279, relu_21, primals_70, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_70
    buf2281 = buf2280[0]
    buf2282 = buf2280[1]
    del buf2280
    buf2283 = buf2277; del buf2277  # reuse
    buf2284 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2285 = buf2279; del buf2279  # reuse
    buf2286 = buf2284; del buf2284  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_337(c_void_p(buf2286.data_ptr()), c_void_p(relu_21.data_ptr()), c_void_p(buf2268.data_ptr()), c_void_p(buf2281.data_ptr()), c_void_p(convolution_22.data_ptr()), c_void_p(unsqueeze_4957.data_ptr()), c_void_p(squeeze_67.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(buf2283.data_ptr()), c_void_p(buf2285.data_ptr()))
    del convolution_22
    del primals_68
    del squeeze_67
    del unsqueeze_4957
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2287 = aten.convolution_backward(buf2285, relu_20, primals_67, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2285
    del primals_67
    buf2288 = buf2287[0]
    buf2289 = buf2287[1]
    del buf2287
    buf2290 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2291 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2292 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2293 = buf2288; del buf2288  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_338(c_void_p(buf2293.data_ptr()), c_void_p(relu_20.data_ptr()), c_void_p(convolution_21.data_ptr()), c_void_p(unsqueeze_4969.data_ptr()), c_void_p(squeeze_64.data_ptr()), c_void_p(primals_65.data_ptr()), c_void_p(buf2290.data_ptr()), c_void_p(buf2291.data_ptr()), c_void_p(buf2292.data_ptr()))
    del convolution_21
    del primals_65
    del relu_20
    del squeeze_64
    del unsqueeze_4969
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2294 = aten.convolution_backward(buf2293, relu_19, primals_64, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_64
    buf2295 = buf2294[0]
    buf2296 = buf2294[1]
    del buf2294
    buf2297 = buf2268; del buf2268  # reuse
    buf2298 = buf2291; del buf2291  # reuse
    buf2299 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2300 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2301 = buf2293; del buf2293  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_339(c_void_p(buf2297.data_ptr()), c_void_p(relu_19.data_ptr()), c_void_p(relu_21.data_ptr()), c_void_p(buf2281.data_ptr()), c_void_p(buf2295.data_ptr()), c_void_p(convolution_20.data_ptr()), c_void_p(unsqueeze_4981.data_ptr()), c_void_p(squeeze_61.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(buf2298.data_ptr()), c_void_p(buf2299.data_ptr()), c_void_p(buf2300.data_ptr()), c_void_p(buf2301.data_ptr()))
    del buf2281
    del buf2295
    del convolution_20
    del primals_62
    del relu_19
    del relu_21
    del squeeze_61
    del unsqueeze_4981
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2302 = aten.convolution_backward(buf2301, relu_18, primals_61, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2301
    del primals_61
    buf2303 = buf2302[0]
    buf2304 = buf2302[1]
    del buf2302
    buf2305 = buf2299; del buf2299  # reuse
    buf2306 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2307 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2308 = buf2303; del buf2303  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_340(c_void_p(buf2308.data_ptr()), c_void_p(relu_18.data_ptr()), c_void_p(convolution_19.data_ptr()), c_void_p(unsqueeze_4993.data_ptr()), c_void_p(squeeze_58.data_ptr()), c_void_p(primals_59.data_ptr()), c_void_p(buf2305.data_ptr()), c_void_p(buf2306.data_ptr()), c_void_p(buf2307.data_ptr()))
    del convolution_19
    del primals_59
    del relu_18
    del squeeze_58
    del unsqueeze_4993
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2309 = aten.convolution_backward(buf2308, relu_17, primals_58, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_58
    buf2310 = buf2309[0]
    buf2311 = buf2309[1]
    del buf2309
    buf2312 = buf2306; del buf2306  # reuse
    buf2313 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2314 = buf2308; del buf2308  # reuse
    buf2315 = buf2313; del buf2313  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_341(c_void_p(buf2315.data_ptr()), c_void_p(relu_17.data_ptr()), c_void_p(buf2297.data_ptr()), c_void_p(buf2310.data_ptr()), c_void_p(convolution_18.data_ptr()), c_void_p(unsqueeze_5005.data_ptr()), c_void_p(squeeze_55.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(buf2312.data_ptr()), c_void_p(buf2314.data_ptr()))
    del convolution_18
    del primals_56
    del squeeze_55
    del unsqueeze_5005
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2316 = aten.convolution_backward(buf2314, relu_16, primals_55, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2314
    del primals_55
    buf2317 = buf2316[0]
    buf2318 = buf2316[1]
    del buf2316
    buf2319 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2320 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2321 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2322 = buf2317; del buf2317  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_342(c_void_p(buf2322.data_ptr()), c_void_p(relu_16.data_ptr()), c_void_p(convolution_17.data_ptr()), c_void_p(unsqueeze_5017.data_ptr()), c_void_p(squeeze_52.data_ptr()), c_void_p(primals_53.data_ptr()), c_void_p(buf2319.data_ptr()), c_void_p(buf2320.data_ptr()), c_void_p(buf2321.data_ptr()))
    del convolution_17
    del primals_53
    del relu_16
    del squeeze_52
    del unsqueeze_5017
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2323 = aten.convolution_backward(buf2322, relu_14, primals_52, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2322
    del primals_52
    buf2324 = buf2323[0]
    buf2325 = buf2323[1]
    del buf2323
    buf2326 = buf2239; del buf2239  # reuse
    buf2327 = buf2262; del buf2262  # reuse
    buf2328 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2329 = empty((36, ), device='cpu', dtype=torch.float32)
    buf2330 = buf2326; del buf2326  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_343(c_void_p(buf2330.data_ptr()), c_void_p(relu_15.data_ptr()), c_void_p(relu_25.data_ptr()), c_void_p(buf2252.data_ptr()), c_void_p(buf2266.data_ptr()), c_void_p(convolution_16.data_ptr()), c_void_p(unsqueeze_5029.data_ptr()), c_void_p(squeeze_49.data_ptr()), c_void_p(primals_50.data_ptr()), c_void_p(buf2327.data_ptr()), c_void_p(buf2328.data_ptr()), c_void_p(buf2329.data_ptr()))
    del buf2252
    del buf2266
    del buf2328
    del convolution_16
    del primals_50
    del relu_15
    del relu_25
    del squeeze_49
    del unsqueeze_5029
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2331 = aten.convolution_backward(buf2330, relu_13, primals_49, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2330
    del primals_49
    buf2332 = buf2331[0]
    buf2333 = buf2331[1]
    del buf2331
    buf2334 = buf2297; del buf2297  # reuse
    buf2335 = buf2320; del buf2320  # reuse
    buf2336 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2337 = empty((18, ), device='cpu', dtype=torch.float32)
    buf2338 = buf2334; del buf2334  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_344(c_void_p(buf2338.data_ptr()), c_void_p(relu_14.data_ptr()), c_void_p(relu_17.data_ptr()), c_void_p(buf2310.data_ptr()), c_void_p(buf2324.data_ptr()), c_void_p(convolution_15.data_ptr()), c_void_p(unsqueeze_5041.data_ptr()), c_void_p(squeeze_46.data_ptr()), c_void_p(primals_47.data_ptr()), c_void_p(buf2335.data_ptr()), c_void_p(buf2336.data_ptr()), c_void_p(buf2337.data_ptr()))
    del buf2310
    del buf2324
    del buf2336
    del convolution_15
    del primals_47
    del relu_14
    del relu_17
    del squeeze_46
    del unsqueeze_5041
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2339 = aten.convolution_backward(buf2338, relu_13, primals_46, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2338
    del primals_46
    buf2340 = buf2339[0]
    buf2341 = buf2339[1]
    del buf2339
    buf2342 = buf82; del buf82  # reuse
    buf2343 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2344 = empty_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    buf2345 = buf2343; del buf2343  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_345(c_void_p(buf2345.data_ptr()), c_void_p(relu_13.data_ptr()), c_void_p(buf2332.data_ptr()), c_void_p(buf2340.data_ptr()), c_void_p(convolution_14.data_ptr()), c_void_p(unsqueeze_5053.data_ptr()), c_void_p(squeeze_43.data_ptr()), c_void_p(primals_44.data_ptr()), c_void_p(buf2342.data_ptr()), c_void_p(buf2344.data_ptr()))
    del convolution_14
    del primals_44
    del squeeze_43
    del unsqueeze_5053
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2346 = aten.convolution_backward(buf2344, relu_12, primals_43, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_43
    buf2347 = buf2346[0]
    buf2348 = buf2346[1]
    del buf2346
    buf2349 = buf110; del buf110  # reuse
    buf2350 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2351 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2352 = buf2347; del buf2347  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_346(c_void_p(buf2352.data_ptr()), c_void_p(relu_12.data_ptr()), c_void_p(convolution_13.data_ptr()), c_void_p(unsqueeze_5065.data_ptr()), c_void_p(squeeze_40.data_ptr()), c_void_p(primals_41.data_ptr()), c_void_p(buf2349.data_ptr()), c_void_p(buf2350.data_ptr()), c_void_p(buf2351.data_ptr()))
    del convolution_13
    del primals_41
    del relu_12
    del squeeze_40
    del unsqueeze_5065
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2353 = aten.convolution_backward(buf2352, relu_11, primals_40, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2352
    del primals_40
    buf2354 = buf2353[0]
    buf2355 = buf2353[1]
    del buf2353
    buf2356 = buf2350; del buf2350  # reuse
    buf2357 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2358 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2359 = buf2354; del buf2354  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_347(c_void_p(buf2359.data_ptr()), c_void_p(relu_11.data_ptr()), c_void_p(convolution_12.data_ptr()), c_void_p(unsqueeze_5077.data_ptr()), c_void_p(squeeze_37.data_ptr()), c_void_p(primals_38.data_ptr()), c_void_p(buf2356.data_ptr()), c_void_p(buf2357.data_ptr()), c_void_p(buf2358.data_ptr()))
    del convolution_12
    del primals_38
    del relu_11
    del squeeze_37
    del unsqueeze_5077
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2360 = aten.convolution_backward(buf2359, relu_10, primals_37, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2359
    del primals_37
    buf2361 = buf2360[0]
    buf2362 = buf2360[1]
    del buf2360
    buf2363 = buf2332; del buf2332  # reuse
    buf2364 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2365 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2366 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2367 = buf2344; del buf2344  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_348(c_void_p(buf2363.data_ptr()), c_void_p(relu_10.data_ptr()), c_void_p(relu_13.data_ptr()), c_void_p(buf2340.data_ptr()), c_void_p(buf2361.data_ptr()), c_void_p(convolution_11.data_ptr()), c_void_p(unsqueeze_5089.data_ptr()), c_void_p(squeeze_34.data_ptr()), c_void_p(primals_35.data_ptr()), c_void_p(buf2364.data_ptr()), c_void_p(buf2365.data_ptr()), c_void_p(buf2366.data_ptr()), c_void_p(buf2367.data_ptr()))
    del buf2340
    del convolution_11
    del primals_35
    del relu_10
    del relu_13
    del squeeze_34
    del unsqueeze_5089
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2368 = aten.convolution_backward(buf2367, relu_9, primals_34, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_34
    buf2369 = buf2368[0]
    buf2370 = buf2368[1]
    del buf2368
    buf2371 = buf2357; del buf2357  # reuse
    buf2372 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2373 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2374 = buf2369; del buf2369  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_349(c_void_p(buf2374.data_ptr()), c_void_p(relu_9.data_ptr()), c_void_p(convolution_10.data_ptr()), c_void_p(unsqueeze_5101.data_ptr()), c_void_p(squeeze_31.data_ptr()), c_void_p(primals_32.data_ptr()), c_void_p(buf2371.data_ptr()), c_void_p(buf2372.data_ptr()), c_void_p(buf2373.data_ptr()))
    del convolution_10
    del primals_32
    del relu_9
    del squeeze_31
    del unsqueeze_5101
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2375 = aten.convolution_backward(buf2374, relu_8, primals_31, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2374
    del primals_31
    buf2376 = buf2375[0]
    buf2377 = buf2375[1]
    del buf2375
    buf2378 = buf2372; del buf2372  # reuse
    buf2379 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2380 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2381 = buf2376; del buf2376  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_350(c_void_p(buf2381.data_ptr()), c_void_p(relu_8.data_ptr()), c_void_p(convolution_9.data_ptr()), c_void_p(unsqueeze_5113.data_ptr()), c_void_p(squeeze_28.data_ptr()), c_void_p(primals_29.data_ptr()), c_void_p(buf2378.data_ptr()), c_void_p(buf2379.data_ptr()), c_void_p(buf2380.data_ptr()))
    del convolution_9
    del primals_29
    del relu_8
    del squeeze_28
    del unsqueeze_5113
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2382 = aten.convolution_backward(buf2381, relu_7, primals_28, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2381
    del primals_28
    buf2383 = buf2382[0]
    buf2384 = buf2382[1]
    del buf2382
    buf2385 = buf2365; del buf2365  # reuse
    buf2386 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2387 = buf2367; del buf2367  # reuse
    buf2388 = buf2386; del buf2386  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_351(c_void_p(buf2388.data_ptr()), c_void_p(relu_7.data_ptr()), c_void_p(buf2363.data_ptr()), c_void_p(buf2383.data_ptr()), c_void_p(convolution_8.data_ptr()), c_void_p(unsqueeze_5125.data_ptr()), c_void_p(squeeze_25.data_ptr()), c_void_p(primals_26.data_ptr()), c_void_p(buf2385.data_ptr()), c_void_p(buf2387.data_ptr()))
    del convolution_8
    del primals_26
    del squeeze_25
    del unsqueeze_5125
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2389 = aten.convolution_backward(buf2387, relu_6, primals_25, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del primals_25
    buf2390 = buf2389[0]
    buf2391 = buf2389[1]
    del buf2389
    buf2392 = buf2379; del buf2379  # reuse
    buf2393 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2394 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2395 = buf2390; del buf2390  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_352(c_void_p(buf2395.data_ptr()), c_void_p(relu_6.data_ptr()), c_void_p(convolution_7.data_ptr()), c_void_p(unsqueeze_5137.data_ptr()), c_void_p(squeeze_22.data_ptr()), c_void_p(primals_23.data_ptr()), c_void_p(buf2392.data_ptr()), c_void_p(buf2393.data_ptr()), c_void_p(buf2394.data_ptr()))
    del convolution_7
    del primals_23
    del relu_6
    del squeeze_22
    del unsqueeze_5137
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2396 = aten.convolution_backward(buf2395, relu_5, primals_22, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2395
    del primals_22
    buf2397 = buf2396[0]
    buf2398 = buf2396[1]
    del buf2396
    buf2399 = buf2393; del buf2393  # reuse
    buf2400 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2401 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2402 = buf2397; del buf2397  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_353(c_void_p(buf2402.data_ptr()), c_void_p(relu_5.data_ptr()), c_void_p(convolution_6.data_ptr()), c_void_p(unsqueeze_5149.data_ptr()), c_void_p(squeeze_19.data_ptr()), c_void_p(primals_20.data_ptr()), c_void_p(buf2399.data_ptr()), c_void_p(buf2400.data_ptr()), c_void_p(buf2401.data_ptr()))
    del convolution_6
    del primals_20
    del relu_5
    del squeeze_19
    del unsqueeze_5149
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2403 = aten.convolution_backward(buf2402, relu_4, primals_19, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2402
    del primals_19
    buf2404 = buf2403[0]
    buf2405 = buf2403[1]
    del buf2403
    buf2406 = buf2363; del buf2363  # reuse
    buf2407 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2408 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2414 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2409 = empty((256, ), device='cpu', dtype=torch.float32)
    buf2410 = buf2387; del buf2387  # reuse
    buf2416 = buf2361; del buf2361  # reuse
    cpp_fused_add_convolution_backward_native_batch_norm_backward_threshold_backward_354(c_void_p(buf2406.data_ptr()), c_void_p(relu_4.data_ptr()), c_void_p(relu_7.data_ptr()), c_void_p(buf2383.data_ptr()), c_void_p(buf2404.data_ptr()), c_void_p(convolution_5.data_ptr()), c_void_p(unsqueeze_5161.data_ptr()), c_void_p(convolution_4.data_ptr()), c_void_p(unsqueeze_5173.data_ptr()), c_void_p(squeeze_16.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(squeeze_13.data_ptr()), c_void_p(primals_14.data_ptr()), c_void_p(buf2407.data_ptr()), c_void_p(buf2408.data_ptr()), c_void_p(buf2414.data_ptr()), c_void_p(buf2409.data_ptr()), c_void_p(buf2410.data_ptr()), c_void_p(buf2416.data_ptr()))
    del buf2383
    del buf2404
    del buf2406
    del buf2408
    del convolution_4
    del convolution_5
    del primals_14
    del primals_17
    del relu_4
    del relu_7
    del squeeze_16
    del unsqueeze_5161
    del unsqueeze_5173
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2411 = aten.convolution_backward(buf2410, relu_1, primals_16, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2410
    del primals_16
    buf2412 = buf2411[0]
    buf2413 = buf2411[1]
    del buf2411
    buf2415 = buf2414; del buf2414  # reuse
    cpp_fused_native_batch_norm_backward_355(c_void_p(buf2415.data_ptr()), c_void_p(squeeze_13.data_ptr()))
    del squeeze_13
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward]
    buf2417 = aten.convolution_backward(buf2416, relu_3, primals_13, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2416
    del primals_13
    buf2418 = buf2417[0]
    buf2419 = buf2417[1]
    del buf2417
    buf2420 = buf2400; del buf2400  # reuse
    buf2421 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2422 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2423 = buf2418; del buf2418  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_356(c_void_p(buf2423.data_ptr()), c_void_p(relu_3.data_ptr()), c_void_p(convolution_3.data_ptr()), c_void_p(unsqueeze_5185.data_ptr()), c_void_p(squeeze_10.data_ptr()), c_void_p(primals_11.data_ptr()), c_void_p(buf2420.data_ptr()), c_void_p(buf2421.data_ptr()), c_void_p(buf2422.data_ptr()))
    del convolution_3
    del primals_11
    del relu_3
    del squeeze_10
    del unsqueeze_5185
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2424 = aten.convolution_backward(buf2423, relu_2, primals_10, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2423
    del primals_10
    buf2425 = buf2424[0]
    buf2426 = buf2424[1]
    del buf2424
    buf2427 = buf2421; del buf2421  # reuse
    buf2428 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2429 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2430 = buf2425; del buf2425  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_357(c_void_p(buf2430.data_ptr()), c_void_p(relu_2.data_ptr()), c_void_p(convolution_2.data_ptr()), c_void_p(unsqueeze_5197.data_ptr()), c_void_p(squeeze_7.data_ptr()), c_void_p(primals_8.data_ptr()), c_void_p(buf2427.data_ptr()), c_void_p(buf2428.data_ptr()), c_void_p(buf2429.data_ptr()))
    del convolution_2
    del primals_8
    del relu_2
    del squeeze_7
    del unsqueeze_5197
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2431 = aten.convolution_backward(buf2430, relu_1, primals_7, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2430
    del primals_7
    buf2432 = buf2431[0]
    buf2433 = buf2431[1]
    del buf2431
    buf2434 = buf2428; del buf2428  # reuse
    buf2435 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2436 = buf2412; del buf2412  # reuse
    buf2437 = buf2435; del buf2435  # reuse
    cpp_fused_add_native_batch_norm_backward_threshold_backward_358(c_void_p(buf2436.data_ptr()), c_void_p(buf2437.data_ptr()), c_void_p(relu_1.data_ptr()), c_void_p(buf2432.data_ptr()), c_void_p(convolution_1.data_ptr()), c_void_p(unsqueeze_5209.data_ptr()), c_void_p(squeeze_4.data_ptr()), c_void_p(primals_5.data_ptr()), c_void_p(buf2434.data_ptr()))
    del buf2432
    del convolution_1
    del primals_5
    del relu_1
    del squeeze_4
    del unsqueeze_5209
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf2438 = aten.convolution_backward(buf2436, relu, primals_4, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
    del buf2436
    del primals_4
    buf2439 = buf2438[0]
    buf2440 = buf2438[1]
    del buf2438
    buf2441 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2442 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2443 = empty((64, ), device='cpu', dtype=torch.float32)
    buf2444 = buf2439; del buf2439  # reuse
    cpp_fused_convolution_backward_native_batch_norm_backward_threshold_backward_359(c_void_p(buf2444.data_ptr()), c_void_p(relu.data_ptr()), c_void_p(convolution.data_ptr()), c_void_p(unsqueeze_5221.data_ptr()), c_void_p(squeeze_1.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(buf2441.data_ptr()), c_void_p(buf2442.data_ptr()), c_void_p(buf2443.data_ptr()))
    del buf2442
    del convolution
    del primals_2
    del relu
    del squeeze_1
    del unsqueeze_5221
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
    buf2445 = aten.convolution_backward(buf2444, primals_1957, primals_1, [0], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [False, True, False])
    del buf2444
    del primals_1
    del primals_1957
    buf2446 = buf2445[1]
    return (buf2446, buf2443, buf2441, buf2440, buf2437, buf2434, buf2433, buf2429, buf2427, buf2426, buf2422, buf2420, buf2419, buf2415, buf2407, buf2413, buf2409, buf2407, buf2405, buf2401, buf2399, buf2398, buf2394, buf2392, buf2391, buf2388, buf2385, buf2384, buf2380, buf2378, buf2377, buf2373, buf2371, buf2370, buf2366, buf2364, buf2362, buf2358, buf2356, buf2355, buf2351, buf2349, buf2348, buf2345, buf2342, buf2341, buf2337, buf2335, buf2333, buf2329, buf2327, buf2325, buf2321, buf2319, buf2318, buf2315, buf2312, buf2311, buf2307, buf2305, buf2304, buf2300, buf2298, buf2296, buf2292, buf2290, buf2289, buf2286, buf2283, buf2282, buf2278, buf2276, buf2275, buf2271, buf2269, buf2267, buf2263, buf2261, buf2260, buf2257, buf2254, buf2253, buf2249, buf2247, buf2246, buf2242, buf2240, buf2238, buf2234, buf2232, buf2231, buf2228, buf2225, buf2224, buf2220, buf2218, buf2217, buf2213, buf2211, buf2209, buf2205, buf2203, buf2198, buf2194, buf2191, buf2190, buf2186, buf2184, buf2182, buf2178, buf2176, buf2175, buf2171, buf2169, buf2167, buf2163, buf2161, buf2160, buf2157, buf2154, buf2153, buf2149, buf2147, buf2146, buf2142, buf2140, buf2138, buf2134, buf2132, buf2131, buf2127, buf2124, buf2123, buf2119, buf2117, buf2116, buf2112, buf2110, buf2108, buf2104, buf2102, buf2101, buf2098, buf2095, buf2094, buf2090, buf2088, buf2087, buf2083, buf2081, buf2079, buf2075, buf2073, buf2072, buf2068, buf2065, buf2064, buf2060, buf2058, buf2057, buf2054, buf2051, buf2050, buf2046, buf2044, buf2043, buf2039, buf2037, buf2035, buf2031, buf2029, buf2028, buf2025, buf2022, buf2021, buf2017, buf2015, buf2014, buf2010, buf2008, buf2006, buf2002, buf2000, buf1996, buf1992, buf1990, buf1985, buf1981, buf1979, buf1978, buf1974, buf1972, buf1967, buf1963, buf1961, buf1960, buf1957, buf1948, buf1954, buf1951, buf1948, buf1947, buf1943, buf1941, buf1940, buf1936, buf1934, buf1932, buf1928, buf1926, buf1925, buf1922, buf1919, buf1918, buf1914, buf1912, buf1911, buf1907, buf1905, buf1903, buf1899, buf1897, buf1896, buf1892, buf1889, buf1888, buf1884, buf1882, buf1881, buf1877, buf1875, buf1873, buf1869, buf1867, buf1866, buf1863, buf1860, buf1859, buf1855, buf1853, buf1852, buf1848, buf1846, buf1844, buf1840, buf1838, buf1837, buf1833, buf1830, buf1829, buf1825, buf1823, buf1822, buf1818, buf1816, buf1814, buf1810, buf1808, buf1807, buf1804, buf1801, buf1800, buf1796, buf1794, buf1793, buf1789, buf1787, buf1785, buf1781, buf1779, buf1778, buf1774, buf1771, buf1770, buf1766, buf1764, buf1760, buf1756, buf1754, buf1749, buf1745, buf1743, buf1742, buf1738, buf1736, buf1731, buf1727, buf1725, buf1724, buf1720, buf1712, buf1718, buf1714, buf1712, buf1710, buf1706, buf1704, buf1703, buf1699, buf1697, buf1695, buf1691, buf1689, buf1688, buf1685, buf1682, buf1681, buf1677, buf1675, buf1674, buf1670, buf1668, buf1666, buf1662, buf1660, buf1659, buf1655, buf1652, buf1651, buf1647, buf1645, buf1644, buf1640, buf1638, buf1636, buf1632, buf1630, buf1629, buf1626, buf1623, buf1622, buf1618, buf1616, buf1615, buf1611, buf1609, buf1607, buf1603, buf1601, buf1600, buf1596, buf1593, buf1592, buf1588, buf1586, buf1585, buf1582, buf1579, buf1578, buf1574, buf1572, buf1571, buf1567, buf1565, buf1563, buf1559, buf1557, buf1556, buf1553, buf1550, buf1549, buf1545, buf1543, buf1542, buf1538, buf1536, buf1534, buf1530, buf1528, buf1524, buf1520, buf1518, buf1513, buf1509, buf1507, buf1506, buf1502, buf1500, buf1495, buf1491, buf1489, buf1488, buf1485, buf1476, buf1482, buf1479, buf1476, buf1475, buf1471, buf1469, buf1468, buf1464, buf1462, buf1460, buf1456, buf1454, buf1453, buf1450, buf1447, buf1446, buf1442, buf1440, buf1439, buf1435, buf1433, buf1431, buf1427, buf1425, buf1424, buf1420, buf1417, buf1416, buf1412, buf1410, buf1409, buf1405, buf1403, buf1401, buf1397, buf1395, buf1394, buf1391, buf1388, buf1387, buf1383, buf1381, buf1380, buf1376, buf1374, buf1372, buf1368, buf1366, buf1365, buf1361, buf1358, buf1357, buf1353, buf1351, buf1350, buf1346, buf1344, buf1342, buf1338, buf1336, buf1335, buf1332, buf1329, buf1328, buf1324, buf1322, buf1321, buf1317, buf1315, buf1313, buf1309, buf1307, buf1306, buf1302, buf1299, buf1298, buf1294, buf1292, buf1288, buf1284, buf1282, buf1277, buf1273, buf1271, buf1270, buf1266, buf1264, buf1259, buf1255, buf1253, buf1252, buf1248, buf1240, buf1246, buf1242, buf1240, buf1238, buf1234, buf1232, buf1230, buf1226, buf1224, buf1223, buf1220, buf1217, buf1216, buf1212, buf1210, buf1209, buf1205, buf1203, buf1201, buf1197, buf1195, buf1194, buf1191, buf1188, buf1187, buf1183, buf1181, buf1180, buf1176, buf1174, buf1172, buf1168, buf1166, buf1165, buf1162, buf1159, buf1158, buf1154, buf1152, buf1151, buf1147, buf1145, buf1143, buf1139, buf1137, buf1136, buf1133, buf1130, buf1129, buf1125, buf1123, buf1122, buf1118, buf1116, buf1114, buf1110, buf1108, buf1107, buf1104, buf1101, buf1100, buf1096, buf1094, buf1093, buf1089, buf1087, buf1085, buf1081, buf1079, buf1078, buf1075, buf1072, buf1071, buf1067, buf1065, buf1064, buf1060, buf1058, buf1056, buf1052, buf1050, buf1049, buf1046, buf1043, buf1042, buf1038, buf1036, buf1035, buf1031, buf1029, buf1027, buf1023, buf1021, buf1020, buf1017, buf1014, buf1013, buf1009, buf1007, buf1006, buf1002, buf1000, buf998, buf994, buf992, buf988, buf984, buf982, buf978, buf974, buf972, buf967, buf963, buf961, buf960, buf956, buf954, buf950, buf946, buf944, buf939, buf935, buf933, buf932, buf928, buf920, buf926, buf922, buf920, buf919, buf915, buf913, buf908, buf904, buf902, buf901, buf897, buf895, buf894, buf890, buf869, buf888, buf884, buf882, buf881, buf877, buf869, buf875, buf871, buf869, buf867, buf863, buf861, buf860, buf857, buf854, buf853, buf849, buf847, buf846, buf842, buf840, buf838, buf834, buf832, buf831, buf828, buf825, buf824, buf820, buf818, buf817, buf813, buf811, buf809, buf805, buf803, buf802, buf799, buf796, buf795, buf791, buf789, buf788, buf784, buf782, buf780, buf776, buf774, buf773, buf770, buf767, buf766, buf762, buf760, buf759, buf755, buf753, buf751, buf747, buf745, buf744, buf741, buf738, buf737, buf733, buf731, buf730, buf726, buf724, buf722, buf718, buf716, buf715, buf712, buf709, buf708, buf704, buf702, buf701, buf697, buf695, buf693, buf689, buf687, buf686, buf683, buf680, buf679, buf675, buf673, buf672, buf668, buf666, buf664, buf660, buf658, buf657, buf654, buf651, buf650, buf646, buf644, buf643, buf639, buf637, buf635, buf631, buf629, buf625, buf621, buf619, buf615, buf611, buf609, buf604, buf600, buf598, buf597, buf593, buf591, buf587, buf583, buf581, buf576, buf572, buf570, buf569, buf565, buf557, buf563, buf559, buf557, buf556, buf552, buf550, buf545, buf541, buf539, buf538, buf534, buf532, buf531, buf527, buf506, buf525, buf521, buf519, buf518, buf514, buf506, buf512, buf508, buf506, buf504, buf500, buf498, buf497, buf494, buf491, buf490, buf486, buf484, buf483, buf479, buf477, buf475, buf471, buf469, buf468, buf465, buf462, buf461, buf457, buf455, buf454, buf450, buf448, buf446, buf442, buf440, buf439, buf436, buf433, buf432, buf428, buf426, buf425, buf421, buf419, buf417, buf413, buf411, buf410, buf407, buf404, buf403, buf399, buf397, buf396, buf392, buf390, buf388, buf384, buf382, buf381, buf378, buf375, buf374, buf370, buf368, buf367, buf363, buf361, buf359, buf355, buf353, buf352, buf349, buf346, buf345, buf341, buf339, buf338, buf334, buf332, buf330, buf326, buf324, buf323, buf320, buf317, buf316, buf312, buf310, buf309, buf305, buf303, buf301, buf297, buf295, buf294, buf291, buf288, buf287, buf283, buf281, buf280, buf276, buf274, buf272, buf268, buf266, buf262, buf258, buf256, buf252, buf248, buf246, buf241, buf237, buf235, buf234, buf230, buf228, buf224, buf220, buf218, buf213, buf209, buf207, buf206, buf202, buf194, buf200, buf196, buf194, buf193, buf189, buf187, buf182, buf178, buf176, buf175, buf171, buf169, buf168, buf165, buf143, buf162, buf158, buf156, buf155, buf152, buf143, buf149, buf146, buf143, buf142, buf138, buf136, buf135, buf131, buf129, buf128, buf124, buf116, buf122, buf118, buf116, buf115, buf111, buf109, buf108, buf104, buf102, buf101, buf97, buf89, buf95, buf91, buf89, buf87, buf88, buf83, buf81, buf80, buf76, buf74, buf73, buf69, buf67, buf66, buf62, buf54, buf60, buf56, buf54, buf52, buf53, buf48, buf46, buf45, buf41, buf39, buf38, buf34, buf32, buf31, buf27, buf19, buf25, buf21, buf19, buf17, buf18, buf13, buf11, buf9, buf10, buf5, buf3, reinterpret_tensor(buf1, (1000, 2048), (2048, 1), 0), reinterpret_tensor(buf2, (1000, ), (1, ), 0), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((64, 3, 3, 3), (27, 1, 9, 3), device='cpu', dtype=torch.float32)
    primals_2 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    primals_5 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_7 = rand_strided((64, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_8 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    primals_11 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_13 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_14 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_16 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_17 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_19 = rand_strided((64, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_20 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_22 = rand_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    primals_23 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_25 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_26 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((64, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_29 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_31 = rand_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    primals_32 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_35 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_37 = rand_strided((64, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_38 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    primals_41 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_43 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_44 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((18, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    primals_47 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_49 = rand_strided((36, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    primals_50 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_53 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_55 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_56 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_58 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_59 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_61 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_64 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_65 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_67 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_70 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_71 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_73 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_74 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_76 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_77 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_79 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_80 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_82 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_83 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_85 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_86 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_88 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_89 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_91 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_92 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_94 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_95 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_97 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_98 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_100 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_101 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_103 = rand_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_104 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_106 = rand_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_107 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_109 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_110 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_113 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_115 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_116 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_118 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_119 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_121 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_122 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_124 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_125 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_127 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_128 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_130 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_131 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_133 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_134 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_136 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_137 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_140 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_143 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_145 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_146 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_148 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_149 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_151 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_152 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_154 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_155 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_157 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_158 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_160 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_161 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_163 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_164 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_166 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_167 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_169 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_170 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_173 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_175 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_176 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_179 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_181 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_182 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_184 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_185 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_187 = rand_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_188 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_190 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_191 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_193 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_194 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_196 = rand_strided((72, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_197 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_199 = rand_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_200 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_203 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_206 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_208 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_209 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_211 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_212 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_214 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_215 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_217 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_218 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_220 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_221 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_223 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_224 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_226 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_227 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_229 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_230 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_232 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_233 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_235 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_236 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_238 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_239 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_241 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_242 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_244 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_245 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_247 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_248 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_250 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_251 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_253 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_254 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_256 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_257 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_259 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_260 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_262 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_263 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_265 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_266 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_268 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_269 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_271 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_272 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_274 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_275 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_277 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_278 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_280 = rand_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_281 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_283 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_284 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_286 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_287 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_289 = rand_strided((72, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_290 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_292 = rand_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_293 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_295 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_296 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_298 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_299 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_301 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_302 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_304 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_305 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_307 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_308 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_310 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_311 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_313 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_314 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_316 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_317 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_319 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_320 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_322 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_323 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_325 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_326 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_328 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_329 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_331 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_332 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_334 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_335 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_337 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_338 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_340 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_341 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_343 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_344 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_346 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_347 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_349 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_350 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_352 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_353 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_355 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_356 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_358 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_359 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_361 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_362 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_364 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_367 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_368 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_370 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_371 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_373 = rand_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_374 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_376 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_377 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_379 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_380 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_382 = rand_strided((72, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_383 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_385 = rand_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_386 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_388 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_389 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_391 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_392 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_394 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_395 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_397 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_398 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_400 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_401 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_403 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_404 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_406 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_407 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_409 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_410 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_412 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_413 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_415 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_416 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_418 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_419 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_421 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_422 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_424 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_425 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_427 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_428 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_430 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_431 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_433 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_434 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_436 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_437 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_439 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_440 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_442 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_443 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_445 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_446 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_448 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_449 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_451 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_452 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_454 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_455 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_457 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_458 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_460 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_461 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_463 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_464 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_466 = rand_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_467 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_469 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_470 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_472 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_473 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_475 = rand_strided((72, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_476 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_478 = rand_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_479 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_481 = rand_strided((144, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_482 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_484 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_485 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_487 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_488 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_490 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_491 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_493 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_494 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_496 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_497 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_499 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_500 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_502 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_503 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_505 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_506 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_508 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_509 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_511 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_512 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_514 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_515 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_517 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_518 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_520 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_521 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_523 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_524 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_526 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_527 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_529 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_530 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_532 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_533 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_535 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_536 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_538 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_539 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_541 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_542 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_544 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_545 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_547 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_548 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_550 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_551 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_553 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_554 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_556 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_557 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_559 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_560 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_562 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_563 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_565 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_566 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_568 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_569 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_571 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_572 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_574 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_575 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_577 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_578 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_580 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_581 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_583 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_584 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_586 = rand_strided((18, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_587 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_589 = rand_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_590 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_592 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_593 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_595 = rand_strided((36, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_596 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_598 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_599 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_601 = rand_strided((72, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_602 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_604 = rand_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_605 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_607 = rand_strided((72, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_608 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_610 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_611 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_613 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_614 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_616 = rand_strided((144, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_617 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_619 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_620 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_622 = rand_strided((144, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_623 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_625 = rand_strided((144, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_626 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_628 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_629 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_631 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_632 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_634 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_635 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_637 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_638 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_640 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_641 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_643 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_644 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_646 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_647 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_649 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_650 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_652 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_653 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_655 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_656 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_658 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_659 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_661 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_662 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_664 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_665 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_667 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_668 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_670 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_671 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_673 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_674 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_676 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_677 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_679 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_680 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_682 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_683 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_685 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_686 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_688 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_689 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_691 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_692 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_694 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_695 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_697 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_698 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_700 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_701 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_703 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_704 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_706 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_707 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_709 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_710 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_712 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_713 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_715 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_716 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_718 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_719 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_721 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_722 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_724 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_725 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_727 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_728 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_730 = rand_strided((18, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_731 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_733 = rand_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_734 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_736 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_737 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_739 = rand_strided((36, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_740 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_742 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_743 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_745 = rand_strided((72, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_746 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_748 = rand_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_749 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_751 = rand_strided((72, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_752 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_754 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_755 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_757 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_758 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_760 = rand_strided((144, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_761 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_763 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_764 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_766 = rand_strided((144, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_767 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_769 = rand_strided((144, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_770 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_772 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_773 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_775 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_776 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_778 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_779 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_781 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_782 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_784 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_785 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_787 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_788 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_790 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_791 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_793 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_794 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_796 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_797 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_799 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_800 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_802 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_803 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_805 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_806 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_808 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_809 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_811 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_812 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_814 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_815 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_817 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_818 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_820 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_821 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_823 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_824 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_826 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_827 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_829 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_830 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_832 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_833 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_835 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_836 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_838 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_839 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_841 = rand_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_842 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_844 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_845 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_847 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_848 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_850 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_851 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_853 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_854 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_856 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_857 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_859 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_860 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_862 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_863 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_865 = rand_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    primals_866 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_868 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_869 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_871 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_872 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_874 = rand_strided((18, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_875 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_877 = rand_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_878 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_880 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_881 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_883 = rand_strided((36, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_884 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_886 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_887 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_889 = rand_strided((72, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_890 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_892 = rand_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_893 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_895 = rand_strided((72, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_896 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    primals_898 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_899 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_901 = rand_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_902 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    primals_904 = rand_strided((144, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    primals_905 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_907 = rand_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_908 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    primals_910 = rand_strided((144, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    primals_911 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_913 = rand_strided((144, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    primals_914 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    primals_916 = rand_strided((32, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_917 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    primals_919 = rand_strided((32, 32, 3, 3), (288, 1, 96, 32), device='cpu', dtype=torch.float32)
    primals_920 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    primals_922 = rand_strided((128, 32, 1, 1), (32, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_923 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_925 = rand_strided((128, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_926 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_928 = rand_strided((64, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_929 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_931 = rand_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    primals_932 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    primals_934 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_935 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_937 = rand_strided((256, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_938 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_940 = rand_strided((256, 128, 3, 3), (1152, 1, 384, 128), device='cpu', dtype=torch.float32)
    primals_942 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_944 = rand_strided((128, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_945 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_947 = rand_strided((128, 128, 3, 3), (1152, 1, 384, 128), device='cpu', dtype=torch.float32)
    primals_948 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_950 = rand_strided((512, 128, 1, 1), (128, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_951 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_953 = rand_strided((512, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_954 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_956 = rand_strided((512, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    primals_958 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_960 = rand_strided((256, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_961 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_963 = rand_strided((256, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    primals_964 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    primals_966 = rand_strided((1024, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_967 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_969 = rand_strided((1024, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_970 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_972 = rand_strided((1024, 512, 3, 3), (4608, 1, 1536, 512), device='cpu', dtype=torch.float32)
    primals_974 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_976 = rand_strided((2048, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_978 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    primals_1957 = rand_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    convolution = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    squeeze_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu = rand_strided((8, 64, 112, 112), (802816, 1, 7168, 64), device='cpu', dtype=torch.float32)
    convolution_1 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_4 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_1 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_2 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_7 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_2 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_3 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_10 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_3 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_4 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_13 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_5 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_16 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_4 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_6 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_19 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_5 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_7 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_22 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_6 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_8 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_25 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_7 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_9 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_28 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_8 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_10 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_31 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_9 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_11 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_34 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_10 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_12 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_37 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_11 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_13 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    squeeze_40 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_12 = rand_strided((8, 64, 56, 56), (200704, 1, 3584, 64), device='cpu', dtype=torch.float32)
    convolution_14 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    squeeze_43 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_13 = rand_strided((8, 256, 56, 56), (802816, 1, 14336, 256), device='cpu', dtype=torch.float32)
    convolution_15 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_46 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_14 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_16 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_49 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_15 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_17 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_52 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_16 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_18 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_55 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_17 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_19 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_58 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_18 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_20 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_61 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_19 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_21 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_64 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_20 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_22 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_67 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_21 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_23 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_70 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_22 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_24 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_73 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_23 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_25 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_76 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_24 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_26 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_79 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_25 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_27 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_82 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_26 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_28 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_85 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_27 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_29 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_88 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_28 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_30 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_91 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_29 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_31 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_94 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_30 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_32 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_97 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_31 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_33 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_100 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convert_element_type_2 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.int64)
    unsqueeze_136 = rand_strided((56, 1), (1, 1), device='cpu', dtype=torch.int64)
    relu_32 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_34 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_103 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_33 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_35 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_106 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_34 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_36 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_109 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_35 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_37 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_112 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_36 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_38 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_115 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_37 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_39 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_118 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_38 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_40 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_121 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_39 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_41 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_124 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_40 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_42 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_127 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_41 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_43 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_130 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_42 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_44 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_133 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_43 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_45 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_136 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_44 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_46 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_139 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_45 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_47 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_142 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_46 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_48 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_145 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_47 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_49 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_148 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_48 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_50 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_151 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_49 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_51 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_154 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_50 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_52 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_157 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_51 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_53 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_160 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_52 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_54 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_163 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_53 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_55 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_166 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_54 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_56 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_169 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_55 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_57 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_172 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_56 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_58 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_175 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_57 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_59 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_178 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_58 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_60 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_181 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_61 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_184 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convert_element_type_14 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.int64)
    unsqueeze_250 = rand_strided((56, 1), (1, 1), device='cpu', dtype=torch.int64)
    relu_59 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_62 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_187 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_63 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_190 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convert_element_type_20 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.int64)
    unsqueeze_259 = rand_strided((28, 1), (1, 1), device='cpu', dtype=torch.int64)
    relu_60 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_64 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_193 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_61 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_65 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_196 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_66 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_199 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_62 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_67 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_202 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_63 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_68 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_205 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_64 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_69 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_208 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_65 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_70 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_211 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_66 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_71 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_214 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_67 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_72 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_217 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_68 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_73 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_220 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_69 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_74 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_223 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_70 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_75 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_226 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_71 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_76 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_229 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_72 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_77 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_232 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_73 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_78 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_235 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_74 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_79 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_238 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_75 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_80 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_241 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_76 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_81 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_244 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_77 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_82 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_247 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_78 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_83 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_250 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_79 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_84 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_253 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_80 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_85 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_256 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_81 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_86 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_259 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_82 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_87 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_262 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_83 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_88 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_265 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_84 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_89 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_268 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_85 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_90 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_271 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_86 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_91 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_274 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_92 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_277 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_87 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_93 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_280 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_94 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_283 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_88 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_95 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_286 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_89 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_96 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_289 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_97 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_292 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_90 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_98 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_295 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_91 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_99 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_298 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_92 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_100 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_301 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_93 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_101 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_304 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_94 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_102 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_307 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_95 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_103 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_310 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_96 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_104 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_313 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_97 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_105 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_316 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_98 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_106 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_319 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_99 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_107 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_322 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_100 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_108 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_325 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_101 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_109 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_328 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_102 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_110 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_331 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_103 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_111 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_334 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_104 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_112 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_337 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_105 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_113 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_340 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_106 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_114 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_343 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_107 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_115 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_346 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_108 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_116 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_349 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_109 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_117 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_352 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_110 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_118 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_355 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_111 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_119 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_358 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_112 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_120 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_361 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_113 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_121 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_364 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_114 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_122 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_367 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_123 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_370 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_115 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_124 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_373 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_125 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_376 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_116 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_126 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_379 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_117 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_127 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_382 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_128 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_385 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_118 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_129 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_388 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_119 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_130 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_391 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_120 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_131 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_394 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_121 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_132 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_397 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_122 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_133 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_400 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_123 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_134 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_403 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_124 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_135 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_406 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_125 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_136 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_409 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_126 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_137 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_412 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_127 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_138 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_415 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_128 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_139 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_418 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_129 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_140 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_421 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_130 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_141 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_424 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_131 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_142 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_427 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_132 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_143 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_430 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_133 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_144 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_433 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_134 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_145 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_436 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_135 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_146 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_439 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_136 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_147 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_442 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_137 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_148 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_445 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_138 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_149 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_448 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_139 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_150 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_451 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_140 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_151 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_454 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_141 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_152 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_457 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_142 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_153 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_460 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_154 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_463 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_143 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_155 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_466 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_156 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_469 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_144 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_157 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_472 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_145 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_158 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_475 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_159 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_478 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_146 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_160 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_481 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_147 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_161 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_484 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_148 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_162 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_487 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_149 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_163 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_490 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_150 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_164 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_493 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_151 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_165 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_496 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_152 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_166 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_499 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_153 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_167 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_502 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_154 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_168 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_505 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_155 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_169 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_508 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_156 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_170 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_511 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_157 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_171 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_514 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_158 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_172 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_517 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_159 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_173 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_520 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_160 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_174 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_523 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_161 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_175 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_526 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_162 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_176 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_529 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_163 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_177 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_532 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_164 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_178 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_535 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_165 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_179 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_538 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_166 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_180 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_541 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_167 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_181 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_544 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_168 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_182 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_547 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_169 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_183 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_550 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_170 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_184 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_553 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_171 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_185 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_556 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_172 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_186 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_559 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_173 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_187 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_562 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_174 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_188 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_565 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_175 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_189 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_568 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_176 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_190 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_571 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_177 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_191 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_574 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_178 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_192 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_577 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_179 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_193 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_580 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_194 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_583 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_195 = rand_strided((8, 18, 7, 7), (882, 1, 126, 18), device='cpu', dtype=torch.float32)
    squeeze_586 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convert_element_type_92 = rand_strided((56, ), (1, ), device='cpu', dtype=torch.int64)
    unsqueeze_799 = rand_strided((56, 1), (1, 1), device='cpu', dtype=torch.int64)
    relu_180 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_196 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_589 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_197 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_592 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_198 = rand_strided((8, 36, 7, 7), (1764, 1, 252, 36), device='cpu', dtype=torch.float32)
    squeeze_595 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convert_element_type_104 = rand_strided((28, ), (1, ), device='cpu', dtype=torch.int64)
    unsqueeze_813 = rand_strided((28, 1), (1, 1), device='cpu', dtype=torch.int64)
    relu_181 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_199 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_598 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_182 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_200 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_601 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_201 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_604 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_202 = rand_strided((8, 72, 7, 7), (3528, 1, 504, 72), device='cpu', dtype=torch.float32)
    squeeze_607 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convert_element_type_110 = rand_strided((14, ), (1, ), device='cpu', dtype=torch.int64)
    unsqueeze_830 = rand_strided((14, 1), (1, 1), device='cpu', dtype=torch.int64)
    relu_183 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_203 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_610 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_184 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_204 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_613 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_185 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    convolution_205 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_616 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_206 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_619 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_186 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    convolution_207 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_622 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_208 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_625 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_187 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_209 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_628 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_188 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_210 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_631 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_189 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_211 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_634 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_190 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_212 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_637 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_191 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_213 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_640 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_192 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_214 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_643 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_193 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_215 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_646 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_194 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_216 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_649 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_195 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_217 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_652 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_196 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_218 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_655 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_197 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_219 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_658 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_198 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_220 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_661 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_199 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_221 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_664 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_200 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_222 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_667 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_201 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_223 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_670 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_202 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_224 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_673 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_203 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_225 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_676 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_204 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_226 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_679 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_205 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_227 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_682 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_206 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_228 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_685 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_207 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_229 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_688 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_208 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_230 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_691 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_209 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_231 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_694 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_210 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_232 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_697 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_211 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_233 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_700 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_212 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_234 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_703 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_213 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_235 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_706 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_214 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_236 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_709 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_215 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_237 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_712 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_216 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_238 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_715 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_217 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_239 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_718 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_218 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_240 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_721 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_219 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_241 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_724 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_242 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_727 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_243 = rand_strided((8, 18, 7, 7), (882, 1, 126, 18), device='cpu', dtype=torch.float32)
    squeeze_730 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_220 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_244 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_733 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_245 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_736 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_246 = rand_strided((8, 36, 7, 7), (1764, 1, 252, 36), device='cpu', dtype=torch.float32)
    squeeze_739 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_221 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_247 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_742 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_222 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_248 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_745 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_249 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_748 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_250 = rand_strided((8, 72, 7, 7), (3528, 1, 504, 72), device='cpu', dtype=torch.float32)
    squeeze_751 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_223 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_251 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_754 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_224 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_252 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_757 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_225 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    convolution_253 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_760 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_254 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_763 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_226 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    convolution_255 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_766 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_256 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_769 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_227 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_257 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_772 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_228 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_258 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_775 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_229 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_259 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_778 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_230 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_260 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_781 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_231 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_261 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_784 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_232 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_262 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_787 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_233 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_263 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_790 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_234 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_264 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    squeeze_793 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_235 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_265 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_796 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_236 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_266 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_799 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_237 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_267 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_802 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_238 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_268 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_805 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_239 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_269 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_808 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_240 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_270 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_811 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_241 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_271 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_814 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_242 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_272 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_817 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_243 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_273 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_820 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_244 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_274 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_823 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_245 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_275 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_826 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_246 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_276 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_829 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_247 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_277 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_832 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_248 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_278 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_835 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_249 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_279 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_838 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_250 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_280 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_841 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_251 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_281 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_844 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_252 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_282 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_847 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_253 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_283 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_850 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_254 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_284 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_853 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_255 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_285 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_856 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_256 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_286 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_859 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_257 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_287 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_862 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_258 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_288 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_865 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_259 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_289 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_868 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_290 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_871 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_291 = rand_strided((8, 18, 7, 7), (882, 1, 126, 18), device='cpu', dtype=torch.float32)
    squeeze_874 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_260 = rand_strided((8, 18, 56, 56), (56448, 1, 1008, 18), device='cpu', dtype=torch.float32)
    convolution_292 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    squeeze_877 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_293 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_880 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_294 = rand_strided((8, 36, 7, 7), (1764, 1, 252, 36), device='cpu', dtype=torch.float32)
    squeeze_883 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_261 = rand_strided((8, 36, 28, 28), (28224, 1, 1008, 36), device='cpu', dtype=torch.float32)
    convolution_295 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_886 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_262 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_296 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_889 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_297 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    squeeze_892 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_298 = rand_strided((8, 72, 7, 7), (3528, 1, 504, 72), device='cpu', dtype=torch.float32)
    squeeze_895 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    relu_263 = rand_strided((8, 72, 14, 14), (14112, 1, 1008, 72), device='cpu', dtype=torch.float32)
    convolution_299 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    squeeze_898 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_264 = rand_strided((8, 18, 28, 28), (14112, 1, 504, 18), device='cpu', dtype=torch.float32)
    convolution_300 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    squeeze_901 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    relu_265 = rand_strided((8, 18, 14, 14), (3528, 1, 252, 18), device='cpu', dtype=torch.float32)
    convolution_301 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_904 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_302 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    squeeze_907 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    relu_266 = rand_strided((8, 36, 14, 14), (7056, 1, 504, 36), device='cpu', dtype=torch.float32)
    convolution_303 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_910 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_304 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    squeeze_913 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    relu_267 = rand_strided((8, 144, 7, 7), (7056, 1, 1008, 144), device='cpu', dtype=torch.float32)
    convolution_305 = rand_strided((8, 32, 56, 56), (100352, 1, 1792, 32), device='cpu', dtype=torch.float32)
    squeeze_916 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    relu_268 = rand_strided((8, 32, 56, 56), (100352, 1, 1792, 32), device='cpu', dtype=torch.float32)
    convolution_306 = rand_strided((8, 32, 56, 56), (100352, 1, 1792, 32), device='cpu', dtype=torch.float32)
    squeeze_919 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    relu_269 = rand_strided((8, 32, 56, 56), (100352, 1, 1792, 32), device='cpu', dtype=torch.float32)
    convolution_307 = rand_strided((8, 128, 56, 56), (401408, 1, 7168, 128), device='cpu', dtype=torch.float32)
    squeeze_922 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_308 = rand_strided((8, 128, 56, 56), (401408, 1, 7168, 128), device='cpu', dtype=torch.float32)
    squeeze_925 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    relu_270 = rand_strided((8, 128, 56, 56), (401408, 1, 7168, 128), device='cpu', dtype=torch.float32)
    convolution_309 = rand_strided((8, 64, 28, 28), (50176, 1, 1792, 64), device='cpu', dtype=torch.float32)
    squeeze_928 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_271 = rand_strided((8, 64, 28, 28), (50176, 1, 1792, 64), device='cpu', dtype=torch.float32)
    convolution_310 = rand_strided((8, 64, 28, 28), (50176, 1, 1792, 64), device='cpu', dtype=torch.float32)
    squeeze_931 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    relu_272 = rand_strided((8, 64, 28, 28), (50176, 1, 1792, 64), device='cpu', dtype=torch.float32)
    convolution_311 = rand_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.float32)
    squeeze_934 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_312 = rand_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.float32)
    squeeze_937 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_313 = rand_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.float32)
    squeeze_940 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    add_1866 = rand_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.float32)
    convolution_314 = rand_strided((8, 128, 14, 14), (25088, 1, 1792, 128), device='cpu', dtype=torch.float32)
    squeeze_943 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    relu_275 = rand_strided((8, 128, 14, 14), (25088, 1, 1792, 128), device='cpu', dtype=torch.float32)
    convolution_315 = rand_strided((8, 128, 14, 14), (25088, 1, 1792, 128), device='cpu', dtype=torch.float32)
    squeeze_946 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    relu_276 = rand_strided((8, 128, 14, 14), (25088, 1, 1792, 128), device='cpu', dtype=torch.float32)
    convolution_316 = rand_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.float32)
    squeeze_949 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_317 = rand_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.float32)
    squeeze_952 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_318 = rand_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.float32)
    squeeze_955 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    add_1893 = rand_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.float32)
    convolution_319 = rand_strided((8, 256, 7, 7), (12544, 1, 1792, 256), device='cpu', dtype=torch.float32)
    squeeze_958 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_279 = rand_strided((8, 256, 7, 7), (12544, 1, 1792, 256), device='cpu', dtype=torch.float32)
    convolution_320 = rand_strided((8, 256, 7, 7), (12544, 1, 1792, 256), device='cpu', dtype=torch.float32)
    squeeze_961 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    relu_280 = rand_strided((8, 256, 7, 7), (12544, 1, 1792, 256), device='cpu', dtype=torch.float32)
    convolution_321 = rand_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.float32)
    squeeze_964 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_322 = rand_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.float32)
    squeeze_967 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    convolution_323 = rand_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.float32)
    squeeze_970 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    add_1920 = rand_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.float32)
    convolution_324 = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.float32)
    squeeze_973 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    clone = rand_strided((8, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    permute_1 = rand_strided((1000, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    le = rand_strided((8, 2048, 7, 7), (100352, 1, 14336, 2048), device='cpu', dtype=torch.bool)
    unsqueeze_1333 = rand_strided((1, 2048, 1, 1), (2048, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_1 = rand_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.bool)
    unsqueeze_1345 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_2 = rand_strided((8, 1024, 7, 7), (50176, 1, 7168, 1024), device='cpu', dtype=torch.bool)
    unsqueeze_1357 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1369 = rand_strided((1, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1381 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1393 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_5 = rand_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.bool)
    unsqueeze_1405 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_6 = rand_strided((8, 512, 14, 14), (100352, 1, 7168, 512), device='cpu', dtype=torch.bool)
    unsqueeze_1417 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1429 = rand_strided((1, 512, 1, 1), (512, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1441 = rand_strided((1, 128, 1, 1), (128, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1453 = rand_strided((1, 128, 1, 1), (128, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_9 = rand_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.bool)
    unsqueeze_1465 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    le_10 = rand_strided((8, 256, 28, 28), (200704, 1, 7168, 256), device='cpu', dtype=torch.bool)
    unsqueeze_1477 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1489 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1501 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1513 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1525 = rand_strided((1, 128, 1, 1), (128, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1537 = rand_strided((1, 128, 1, 1), (128, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1549 = rand_strided((1, 32, 1, 1), (32, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1561 = rand_strided((1, 32, 1, 1), (32, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1573 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1585 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1597 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1609 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1621 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1633 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1645 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1657 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1669 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1681 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1693 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1705 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1717 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1729 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1741 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1753 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1765 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1777 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1789 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1801 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1813 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1825 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1837 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1849 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1861 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1873 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1885 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1897 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1909 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1921 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1933 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1945 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1957 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1969 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1981 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_1993 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2005 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2017 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2029 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2041 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2053 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2065 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2077 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2089 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2101 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2113 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2125 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2137 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2149 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2161 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2173 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2185 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2197 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2209 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2221 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2233 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2245 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2257 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2269 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2281 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2293 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2305 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2317 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2329 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2341 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2353 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2365 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2377 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2389 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2401 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2413 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2425 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2437 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2449 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2461 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2473 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2485 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2497 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2509 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2521 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2533 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2545 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2557 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2569 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2581 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2593 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2605 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2617 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2629 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2641 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2653 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2665 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2677 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2689 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2701 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2713 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2725 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2737 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2749 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2761 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2773 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2785 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2797 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2809 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2821 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2833 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2845 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2857 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2869 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2881 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2893 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2905 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2917 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2929 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2941 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2953 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2965 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2977 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_2989 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3001 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3013 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3025 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3037 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3049 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3061 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3073 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3085 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3097 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3109 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3121 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3133 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3145 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3157 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3169 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3181 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3193 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3205 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3217 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3229 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3241 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3253 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3265 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3277 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3289 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3301 = rand_strided((1, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3313 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3325 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3337 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3349 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3361 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3373 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3385 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3397 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3409 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3421 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3433 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3445 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3457 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3469 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3481 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3493 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3505 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3517 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3529 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3541 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3553 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3565 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3577 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3589 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3601 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3613 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3625 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3637 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3649 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3661 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3673 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3685 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3697 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3709 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3721 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3733 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3745 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3757 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3769 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3781 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3793 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3805 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3817 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3829 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3841 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3853 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3865 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3877 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3889 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3901 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3913 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3925 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3937 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3949 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3961 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3973 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3985 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3997 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4009 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4021 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4033 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4045 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4057 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4069 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4081 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4093 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4105 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4117 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4129 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4141 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4153 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4165 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4177 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4189 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4201 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4213 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4225 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4237 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4249 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4261 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4273 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4285 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4297 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4309 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4321 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4333 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4345 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4357 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4369 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4381 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4393 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4405 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4417 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4429 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4441 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4453 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4465 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4477 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4489 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4501 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4513 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4525 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4537 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4549 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4561 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4573 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4585 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4597 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4609 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4621 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4633 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4645 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4657 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4669 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4681 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4693 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4705 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4717 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4729 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4741 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4753 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4765 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4777 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4789 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4801 = rand_strided((1, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4813 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4825 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4837 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4849 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4861 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4873 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4885 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4897 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4909 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4921 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4933 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4945 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4957 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4969 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4981 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_4993 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5005 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5017 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5029 = rand_strided((1, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5041 = rand_strided((1, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5053 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5065 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5077 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5089 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5101 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5113 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5125 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5137 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5149 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5161 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5173 = rand_strided((1, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5185 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5197 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5209 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    unsqueeze_5221 = rand_strided((1, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_2, primals_4, primals_5, primals_7, primals_8, primals_10, primals_11, primals_13, primals_14, primals_16, primals_17, primals_19, primals_20, primals_22, primals_23, primals_25, primals_26, primals_28, primals_29, primals_31, primals_32, primals_34, primals_35, primals_37, primals_38, primals_40, primals_41, primals_43, primals_44, primals_46, primals_47, primals_49, primals_50, primals_52, primals_53, primals_55, primals_56, primals_58, primals_59, primals_61, primals_62, primals_64, primals_65, primals_67, primals_68, primals_70, primals_71, primals_73, primals_74, primals_76, primals_77, primals_79, primals_80, primals_82, primals_83, primals_85, primals_86, primals_88, primals_89, primals_91, primals_92, primals_94, primals_95, primals_97, primals_98, primals_100, primals_101, primals_103, primals_104, primals_106, primals_107, primals_109, primals_110, primals_112, primals_113, primals_115, primals_116, primals_118, primals_119, primals_121, primals_122, primals_124, primals_125, primals_127, primals_128, primals_130, primals_131, primals_133, primals_134, primals_136, primals_137, primals_139, primals_140, primals_142, primals_143, primals_145, primals_146, primals_148, primals_149, primals_151, primals_152, primals_154, primals_155, primals_157, primals_158, primals_160, primals_161, primals_163, primals_164, primals_166, primals_167, primals_169, primals_170, primals_172, primals_173, primals_175, primals_176, primals_178, primals_179, primals_181, primals_182, primals_184, primals_185, primals_187, primals_188, primals_190, primals_191, primals_193, primals_194, primals_196, primals_197, primals_199, primals_200, primals_202, primals_203, primals_205, primals_206, primals_208, primals_209, primals_211, primals_212, primals_214, primals_215, primals_217, primals_218, primals_220, primals_221, primals_223, primals_224, primals_226, primals_227, primals_229, primals_230, primals_232, primals_233, primals_235, primals_236, primals_238, primals_239, primals_241, primals_242, primals_244, primals_245, primals_247, primals_248, primals_250, primals_251, primals_253, primals_254, primals_256, primals_257, primals_259, primals_260, primals_262, primals_263, primals_265, primals_266, primals_268, primals_269, primals_271, primals_272, primals_274, primals_275, primals_277, primals_278, primals_280, primals_281, primals_283, primals_284, primals_286, primals_287, primals_289, primals_290, primals_292, primals_293, primals_295, primals_296, primals_298, primals_299, primals_301, primals_302, primals_304, primals_305, primals_307, primals_308, primals_310, primals_311, primals_313, primals_314, primals_316, primals_317, primals_319, primals_320, primals_322, primals_323, primals_325, primals_326, primals_328, primals_329, primals_331, primals_332, primals_334, primals_335, primals_337, primals_338, primals_340, primals_341, primals_343, primals_344, primals_346, primals_347, primals_349, primals_350, primals_352, primals_353, primals_355, primals_356, primals_358, primals_359, primals_361, primals_362, primals_364, primals_365, primals_367, primals_368, primals_370, primals_371, primals_373, primals_374, primals_376, primals_377, primals_379, primals_380, primals_382, primals_383, primals_385, primals_386, primals_388, primals_389, primals_391, primals_392, primals_394, primals_395, primals_397, primals_398, primals_400, primals_401, primals_403, primals_404, primals_406, primals_407, primals_409, primals_410, primals_412, primals_413, primals_415, primals_416, primals_418, primals_419, primals_421, primals_422, primals_424, primals_425, primals_427, primals_428, primals_430, primals_431, primals_433, primals_434, primals_436, primals_437, primals_439, primals_440, primals_442, primals_443, primals_445, primals_446, primals_448, primals_449, primals_451, primals_452, primals_454, primals_455, primals_457, primals_458, primals_460, primals_461, primals_463, primals_464, primals_466, primals_467, primals_469, primals_470, primals_472, primals_473, primals_475, primals_476, primals_478, primals_479, primals_481, primals_482, primals_484, primals_485, primals_487, primals_488, primals_490, primals_491, primals_493, primals_494, primals_496, primals_497, primals_499, primals_500, primals_502, primals_503, primals_505, primals_506, primals_508, primals_509, primals_511, primals_512, primals_514, primals_515, primals_517, primals_518, primals_520, primals_521, primals_523, primals_524, primals_526, primals_527, primals_529, primals_530, primals_532, primals_533, primals_535, primals_536, primals_538, primals_539, primals_541, primals_542, primals_544, primals_545, primals_547, primals_548, primals_550, primals_551, primals_553, primals_554, primals_556, primals_557, primals_559, primals_560, primals_562, primals_563, primals_565, primals_566, primals_568, primals_569, primals_571, primals_572, primals_574, primals_575, primals_577, primals_578, primals_580, primals_581, primals_583, primals_584, primals_586, primals_587, primals_589, primals_590, primals_592, primals_593, primals_595, primals_596, primals_598, primals_599, primals_601, primals_602, primals_604, primals_605, primals_607, primals_608, primals_610, primals_611, primals_613, primals_614, primals_616, primals_617, primals_619, primals_620, primals_622, primals_623, primals_625, primals_626, primals_628, primals_629, primals_631, primals_632, primals_634, primals_635, primals_637, primals_638, primals_640, primals_641, primals_643, primals_644, primals_646, primals_647, primals_649, primals_650, primals_652, primals_653, primals_655, primals_656, primals_658, primals_659, primals_661, primals_662, primals_664, primals_665, primals_667, primals_668, primals_670, primals_671, primals_673, primals_674, primals_676, primals_677, primals_679, primals_680, primals_682, primals_683, primals_685, primals_686, primals_688, primals_689, primals_691, primals_692, primals_694, primals_695, primals_697, primals_698, primals_700, primals_701, primals_703, primals_704, primals_706, primals_707, primals_709, primals_710, primals_712, primals_713, primals_715, primals_716, primals_718, primals_719, primals_721, primals_722, primals_724, primals_725, primals_727, primals_728, primals_730, primals_731, primals_733, primals_734, primals_736, primals_737, primals_739, primals_740, primals_742, primals_743, primals_745, primals_746, primals_748, primals_749, primals_751, primals_752, primals_754, primals_755, primals_757, primals_758, primals_760, primals_761, primals_763, primals_764, primals_766, primals_767, primals_769, primals_770, primals_772, primals_773, primals_775, primals_776, primals_778, primals_779, primals_781, primals_782, primals_784, primals_785, primals_787, primals_788, primals_790, primals_791, primals_793, primals_794, primals_796, primals_797, primals_799, primals_800, primals_802, primals_803, primals_805, primals_806, primals_808, primals_809, primals_811, primals_812, primals_814, primals_815, primals_817, primals_818, primals_820, primals_821, primals_823, primals_824, primals_826, primals_827, primals_829, primals_830, primals_832, primals_833, primals_835, primals_836, primals_838, primals_839, primals_841, primals_842, primals_844, primals_845, primals_847, primals_848, primals_850, primals_851, primals_853, primals_854, primals_856, primals_857, primals_859, primals_860, primals_862, primals_863, primals_865, primals_866, primals_868, primals_869, primals_871, primals_872, primals_874, primals_875, primals_877, primals_878, primals_880, primals_881, primals_883, primals_884, primals_886, primals_887, primals_889, primals_890, primals_892, primals_893, primals_895, primals_896, primals_898, primals_899, primals_901, primals_902, primals_904, primals_905, primals_907, primals_908, primals_910, primals_911, primals_913, primals_914, primals_916, primals_917, primals_919, primals_920, primals_922, primals_923, primals_925, primals_926, primals_928, primals_929, primals_931, primals_932, primals_934, primals_935, primals_937, primals_938, primals_940, primals_942, primals_944, primals_945, primals_947, primals_948, primals_950, primals_951, primals_953, primals_954, primals_956, primals_958, primals_960, primals_961, primals_963, primals_964, primals_966, primals_967, primals_969, primals_970, primals_972, primals_974, primals_976, primals_978, primals_1957, convolution, squeeze_1, relu, convolution_1, squeeze_4, relu_1, convolution_2, squeeze_7, relu_2, convolution_3, squeeze_10, relu_3, convolution_4, squeeze_13, convolution_5, squeeze_16, relu_4, convolution_6, squeeze_19, relu_5, convolution_7, squeeze_22, relu_6, convolution_8, squeeze_25, relu_7, convolution_9, squeeze_28, relu_8, convolution_10, squeeze_31, relu_9, convolution_11, squeeze_34, relu_10, convolution_12, squeeze_37, relu_11, convolution_13, squeeze_40, relu_12, convolution_14, squeeze_43, relu_13, convolution_15, squeeze_46, relu_14, convolution_16, squeeze_49, relu_15, convolution_17, squeeze_52, relu_16, convolution_18, squeeze_55, relu_17, convolution_19, squeeze_58, relu_18, convolution_20, squeeze_61, relu_19, convolution_21, squeeze_64, relu_20, convolution_22, squeeze_67, relu_21, convolution_23, squeeze_70, relu_22, convolution_24, squeeze_73, relu_23, convolution_25, squeeze_76, relu_24, convolution_26, squeeze_79, relu_25, convolution_27, squeeze_82, relu_26, convolution_28, squeeze_85, relu_27, convolution_29, squeeze_88, relu_28, convolution_30, squeeze_91, relu_29, convolution_31, squeeze_94, relu_30, convolution_32, squeeze_97, relu_31, convolution_33, squeeze_100, convert_element_type_2, unsqueeze_136, relu_32, convolution_34, squeeze_103, relu_33, convolution_35, squeeze_106, relu_34, convolution_36, squeeze_109, relu_35, convolution_37, squeeze_112, relu_36, convolution_38, squeeze_115, relu_37, convolution_39, squeeze_118, relu_38, convolution_40, squeeze_121, relu_39, convolution_41, squeeze_124, relu_40, convolution_42, squeeze_127, relu_41, convolution_43, squeeze_130, relu_42, convolution_44, squeeze_133, relu_43, convolution_45, squeeze_136, relu_44, convolution_46, squeeze_139, relu_45, convolution_47, squeeze_142, relu_46, convolution_48, squeeze_145, relu_47, convolution_49, squeeze_148, relu_48, convolution_50, squeeze_151, relu_49, convolution_51, squeeze_154, relu_50, convolution_52, squeeze_157, relu_51, convolution_53, squeeze_160, relu_52, convolution_54, squeeze_163, relu_53, convolution_55, squeeze_166, relu_54, convolution_56, squeeze_169, relu_55, convolution_57, squeeze_172, relu_56, convolution_58, squeeze_175, relu_57, convolution_59, squeeze_178, relu_58, convolution_60, squeeze_181, convolution_61, squeeze_184, convert_element_type_14, unsqueeze_250, relu_59, convolution_62, squeeze_187, convolution_63, squeeze_190, convert_element_type_20, unsqueeze_259, relu_60, convolution_64, squeeze_193, relu_61, convolution_65, squeeze_196, convolution_66, squeeze_199, relu_62, convolution_67, squeeze_202, relu_63, convolution_68, squeeze_205, relu_64, convolution_69, squeeze_208, relu_65, convolution_70, squeeze_211, relu_66, convolution_71, squeeze_214, relu_67, convolution_72, squeeze_217, relu_68, convolution_73, squeeze_220, relu_69, convolution_74, squeeze_223, relu_70, convolution_75, squeeze_226, relu_71, convolution_76, squeeze_229, relu_72, convolution_77, squeeze_232, relu_73, convolution_78, squeeze_235, relu_74, convolution_79, squeeze_238, relu_75, convolution_80, squeeze_241, relu_76, convolution_81, squeeze_244, relu_77, convolution_82, squeeze_247, relu_78, convolution_83, squeeze_250, relu_79, convolution_84, squeeze_253, relu_80, convolution_85, squeeze_256, relu_81, convolution_86, squeeze_259, relu_82, convolution_87, squeeze_262, relu_83, convolution_88, squeeze_265, relu_84, convolution_89, squeeze_268, relu_85, convolution_90, squeeze_271, relu_86, convolution_91, squeeze_274, convolution_92, squeeze_277, relu_87, convolution_93, squeeze_280, convolution_94, squeeze_283, relu_88, convolution_95, squeeze_286, relu_89, convolution_96, squeeze_289, convolution_97, squeeze_292, relu_90, convolution_98, squeeze_295, relu_91, convolution_99, squeeze_298, relu_92, convolution_100, squeeze_301, relu_93, convolution_101, squeeze_304, relu_94, convolution_102, squeeze_307, relu_95, convolution_103, squeeze_310, relu_96, convolution_104, squeeze_313, relu_97, convolution_105, squeeze_316, relu_98, convolution_106, squeeze_319, relu_99, convolution_107, squeeze_322, relu_100, convolution_108, squeeze_325, relu_101, convolution_109, squeeze_328, relu_102, convolution_110, squeeze_331, relu_103, convolution_111, squeeze_334, relu_104, convolution_112, squeeze_337, relu_105, convolution_113, squeeze_340, relu_106, convolution_114, squeeze_343, relu_107, convolution_115, squeeze_346, relu_108, convolution_116, squeeze_349, relu_109, convolution_117, squeeze_352, relu_110, convolution_118, squeeze_355, relu_111, convolution_119, squeeze_358, relu_112, convolution_120, squeeze_361, relu_113, convolution_121, squeeze_364, relu_114, convolution_122, squeeze_367, convolution_123, squeeze_370, relu_115, convolution_124, squeeze_373, convolution_125, squeeze_376, relu_116, convolution_126, squeeze_379, relu_117, convolution_127, squeeze_382, convolution_128, squeeze_385, relu_118, convolution_129, squeeze_388, relu_119, convolution_130, squeeze_391, relu_120, convolution_131, squeeze_394, relu_121, convolution_132, squeeze_397, relu_122, convolution_133, squeeze_400, relu_123, convolution_134, squeeze_403, relu_124, convolution_135, squeeze_406, relu_125, convolution_136, squeeze_409, relu_126, convolution_137, squeeze_412, relu_127, convolution_138, squeeze_415, relu_128, convolution_139, squeeze_418, relu_129, convolution_140, squeeze_421, relu_130, convolution_141, squeeze_424, relu_131, convolution_142, squeeze_427, relu_132, convolution_143, squeeze_430, relu_133, convolution_144, squeeze_433, relu_134, convolution_145, squeeze_436, relu_135, convolution_146, squeeze_439, relu_136, convolution_147, squeeze_442, relu_137, convolution_148, squeeze_445, relu_138, convolution_149, squeeze_448, relu_139, convolution_150, squeeze_451, relu_140, convolution_151, squeeze_454, relu_141, convolution_152, squeeze_457, relu_142, convolution_153, squeeze_460, convolution_154, squeeze_463, relu_143, convolution_155, squeeze_466, convolution_156, squeeze_469, relu_144, convolution_157, squeeze_472, relu_145, convolution_158, squeeze_475, convolution_159, squeeze_478, relu_146, convolution_160, squeeze_481, relu_147, convolution_161, squeeze_484, relu_148, convolution_162, squeeze_487, relu_149, convolution_163, squeeze_490, relu_150, convolution_164, squeeze_493, relu_151, convolution_165, squeeze_496, relu_152, convolution_166, squeeze_499, relu_153, convolution_167, squeeze_502, relu_154, convolution_168, squeeze_505, relu_155, convolution_169, squeeze_508, relu_156, convolution_170, squeeze_511, relu_157, convolution_171, squeeze_514, relu_158, convolution_172, squeeze_517, relu_159, convolution_173, squeeze_520, relu_160, convolution_174, squeeze_523, relu_161, convolution_175, squeeze_526, relu_162, convolution_176, squeeze_529, relu_163, convolution_177, squeeze_532, relu_164, convolution_178, squeeze_535, relu_165, convolution_179, squeeze_538, relu_166, convolution_180, squeeze_541, relu_167, convolution_181, squeeze_544, relu_168, convolution_182, squeeze_547, relu_169, convolution_183, squeeze_550, relu_170, convolution_184, squeeze_553, relu_171, convolution_185, squeeze_556, relu_172, convolution_186, squeeze_559, relu_173, convolution_187, squeeze_562, relu_174, convolution_188, squeeze_565, relu_175, convolution_189, squeeze_568, relu_176, convolution_190, squeeze_571, relu_177, convolution_191, squeeze_574, relu_178, convolution_192, squeeze_577, relu_179, convolution_193, squeeze_580, convolution_194, squeeze_583, convolution_195, squeeze_586, convert_element_type_92, unsqueeze_799, relu_180, convolution_196, squeeze_589, convolution_197, squeeze_592, convolution_198, squeeze_595, convert_element_type_104, unsqueeze_813, relu_181, convolution_199, squeeze_598, relu_182, convolution_200, squeeze_601, convolution_201, squeeze_604, convolution_202, squeeze_607, convert_element_type_110, unsqueeze_830, relu_183, convolution_203, squeeze_610, relu_184, convolution_204, squeeze_613, relu_185, convolution_205, squeeze_616, convolution_206, squeeze_619, relu_186, convolution_207, squeeze_622, convolution_208, squeeze_625, relu_187, convolution_209, squeeze_628, relu_188, convolution_210, squeeze_631, relu_189, convolution_211, squeeze_634, relu_190, convolution_212, squeeze_637, relu_191, convolution_213, squeeze_640, relu_192, convolution_214, squeeze_643, relu_193, convolution_215, squeeze_646, relu_194, convolution_216, squeeze_649, relu_195, convolution_217, squeeze_652, relu_196, convolution_218, squeeze_655, relu_197, convolution_219, squeeze_658, relu_198, convolution_220, squeeze_661, relu_199, convolution_221, squeeze_664, relu_200, convolution_222, squeeze_667, relu_201, convolution_223, squeeze_670, relu_202, convolution_224, squeeze_673, relu_203, convolution_225, squeeze_676, relu_204, convolution_226, squeeze_679, relu_205, convolution_227, squeeze_682, relu_206, convolution_228, squeeze_685, relu_207, convolution_229, squeeze_688, relu_208, convolution_230, squeeze_691, relu_209, convolution_231, squeeze_694, relu_210, convolution_232, squeeze_697, relu_211, convolution_233, squeeze_700, relu_212, convolution_234, squeeze_703, relu_213, convolution_235, squeeze_706, relu_214, convolution_236, squeeze_709, relu_215, convolution_237, squeeze_712, relu_216, convolution_238, squeeze_715, relu_217, convolution_239, squeeze_718, relu_218, convolution_240, squeeze_721, relu_219, convolution_241, squeeze_724, convolution_242, squeeze_727, convolution_243, squeeze_730, relu_220, convolution_244, squeeze_733, convolution_245, squeeze_736, convolution_246, squeeze_739, relu_221, convolution_247, squeeze_742, relu_222, convolution_248, squeeze_745, convolution_249, squeeze_748, convolution_250, squeeze_751, relu_223, convolution_251, squeeze_754, relu_224, convolution_252, squeeze_757, relu_225, convolution_253, squeeze_760, convolution_254, squeeze_763, relu_226, convolution_255, squeeze_766, convolution_256, squeeze_769, relu_227, convolution_257, squeeze_772, relu_228, convolution_258, squeeze_775, relu_229, convolution_259, squeeze_778, relu_230, convolution_260, squeeze_781, relu_231, convolution_261, squeeze_784, relu_232, convolution_262, squeeze_787, relu_233, convolution_263, squeeze_790, relu_234, convolution_264, squeeze_793, relu_235, convolution_265, squeeze_796, relu_236, convolution_266, squeeze_799, relu_237, convolution_267, squeeze_802, relu_238, convolution_268, squeeze_805, relu_239, convolution_269, squeeze_808, relu_240, convolution_270, squeeze_811, relu_241, convolution_271, squeeze_814, relu_242, convolution_272, squeeze_817, relu_243, convolution_273, squeeze_820, relu_244, convolution_274, squeeze_823, relu_245, convolution_275, squeeze_826, relu_246, convolution_276, squeeze_829, relu_247, convolution_277, squeeze_832, relu_248, convolution_278, squeeze_835, relu_249, convolution_279, squeeze_838, relu_250, convolution_280, squeeze_841, relu_251, convolution_281, squeeze_844, relu_252, convolution_282, squeeze_847, relu_253, convolution_283, squeeze_850, relu_254, convolution_284, squeeze_853, relu_255, convolution_285, squeeze_856, relu_256, convolution_286, squeeze_859, relu_257, convolution_287, squeeze_862, relu_258, convolution_288, squeeze_865, relu_259, convolution_289, squeeze_868, convolution_290, squeeze_871, convolution_291, squeeze_874, relu_260, convolution_292, squeeze_877, convolution_293, squeeze_880, convolution_294, squeeze_883, relu_261, convolution_295, squeeze_886, relu_262, convolution_296, squeeze_889, convolution_297, squeeze_892, convolution_298, squeeze_895, relu_263, convolution_299, squeeze_898, relu_264, convolution_300, squeeze_901, relu_265, convolution_301, squeeze_904, convolution_302, squeeze_907, relu_266, convolution_303, squeeze_910, convolution_304, squeeze_913, relu_267, convolution_305, squeeze_916, relu_268, convolution_306, squeeze_919, relu_269, convolution_307, squeeze_922, convolution_308, squeeze_925, relu_270, convolution_309, squeeze_928, relu_271, convolution_310, squeeze_931, relu_272, convolution_311, squeeze_934, convolution_312, squeeze_937, convolution_313, squeeze_940, add_1866, convolution_314, squeeze_943, relu_275, convolution_315, squeeze_946, relu_276, convolution_316, squeeze_949, convolution_317, squeeze_952, convolution_318, squeeze_955, add_1893, convolution_319, squeeze_958, relu_279, convolution_320, squeeze_961, relu_280, convolution_321, squeeze_964, convolution_322, squeeze_967, convolution_323, squeeze_970, add_1920, convolution_324, squeeze_973, clone, permute_1, le, unsqueeze_1333, le_1, unsqueeze_1345, le_2, unsqueeze_1357, unsqueeze_1369, unsqueeze_1381, unsqueeze_1393, le_5, unsqueeze_1405, le_6, unsqueeze_1417, unsqueeze_1429, unsqueeze_1441, unsqueeze_1453, le_9, unsqueeze_1465, le_10, unsqueeze_1477, unsqueeze_1489, unsqueeze_1501, unsqueeze_1513, unsqueeze_1525, unsqueeze_1537, unsqueeze_1549, unsqueeze_1561, unsqueeze_1573, unsqueeze_1585, unsqueeze_1597, unsqueeze_1609, unsqueeze_1621, unsqueeze_1633, unsqueeze_1645, unsqueeze_1657, unsqueeze_1669, unsqueeze_1681, unsqueeze_1693, unsqueeze_1705, unsqueeze_1717, unsqueeze_1729, unsqueeze_1741, unsqueeze_1753, unsqueeze_1765, unsqueeze_1777, unsqueeze_1789, unsqueeze_1801, unsqueeze_1813, unsqueeze_1825, unsqueeze_1837, unsqueeze_1849, unsqueeze_1861, unsqueeze_1873, unsqueeze_1885, unsqueeze_1897, unsqueeze_1909, unsqueeze_1921, unsqueeze_1933, unsqueeze_1945, unsqueeze_1957, unsqueeze_1969, unsqueeze_1981, unsqueeze_1993, unsqueeze_2005, unsqueeze_2017, unsqueeze_2029, unsqueeze_2041, unsqueeze_2053, unsqueeze_2065, unsqueeze_2077, unsqueeze_2089, unsqueeze_2101, unsqueeze_2113, unsqueeze_2125, unsqueeze_2137, unsqueeze_2149, unsqueeze_2161, unsqueeze_2173, unsqueeze_2185, unsqueeze_2197, unsqueeze_2209, unsqueeze_2221, unsqueeze_2233, unsqueeze_2245, unsqueeze_2257, unsqueeze_2269, unsqueeze_2281, unsqueeze_2293, unsqueeze_2305, unsqueeze_2317, unsqueeze_2329, unsqueeze_2341, unsqueeze_2353, unsqueeze_2365, unsqueeze_2377, unsqueeze_2389, unsqueeze_2401, unsqueeze_2413, unsqueeze_2425, unsqueeze_2437, unsqueeze_2449, unsqueeze_2461, unsqueeze_2473, unsqueeze_2485, unsqueeze_2497, unsqueeze_2509, unsqueeze_2521, unsqueeze_2533, unsqueeze_2545, unsqueeze_2557, unsqueeze_2569, unsqueeze_2581, unsqueeze_2593, unsqueeze_2605, unsqueeze_2617, unsqueeze_2629, unsqueeze_2641, unsqueeze_2653, unsqueeze_2665, unsqueeze_2677, unsqueeze_2689, unsqueeze_2701, unsqueeze_2713, unsqueeze_2725, unsqueeze_2737, unsqueeze_2749, unsqueeze_2761, unsqueeze_2773, unsqueeze_2785, unsqueeze_2797, unsqueeze_2809, unsqueeze_2821, unsqueeze_2833, unsqueeze_2845, unsqueeze_2857, unsqueeze_2869, unsqueeze_2881, unsqueeze_2893, unsqueeze_2905, unsqueeze_2917, unsqueeze_2929, unsqueeze_2941, unsqueeze_2953, unsqueeze_2965, unsqueeze_2977, unsqueeze_2989, unsqueeze_3001, unsqueeze_3013, unsqueeze_3025, unsqueeze_3037, unsqueeze_3049, unsqueeze_3061, unsqueeze_3073, unsqueeze_3085, unsqueeze_3097, unsqueeze_3109, unsqueeze_3121, unsqueeze_3133, unsqueeze_3145, unsqueeze_3157, unsqueeze_3169, unsqueeze_3181, unsqueeze_3193, unsqueeze_3205, unsqueeze_3217, unsqueeze_3229, unsqueeze_3241, unsqueeze_3253, unsqueeze_3265, unsqueeze_3277, unsqueeze_3289, unsqueeze_3301, unsqueeze_3313, unsqueeze_3325, unsqueeze_3337, unsqueeze_3349, unsqueeze_3361, unsqueeze_3373, unsqueeze_3385, unsqueeze_3397, unsqueeze_3409, unsqueeze_3421, unsqueeze_3433, unsqueeze_3445, unsqueeze_3457, unsqueeze_3469, unsqueeze_3481, unsqueeze_3493, unsqueeze_3505, unsqueeze_3517, unsqueeze_3529, unsqueeze_3541, unsqueeze_3553, unsqueeze_3565, unsqueeze_3577, unsqueeze_3589, unsqueeze_3601, unsqueeze_3613, unsqueeze_3625, unsqueeze_3637, unsqueeze_3649, unsqueeze_3661, unsqueeze_3673, unsqueeze_3685, unsqueeze_3697, unsqueeze_3709, unsqueeze_3721, unsqueeze_3733, unsqueeze_3745, unsqueeze_3757, unsqueeze_3769, unsqueeze_3781, unsqueeze_3793, unsqueeze_3805, unsqueeze_3817, unsqueeze_3829, unsqueeze_3841, unsqueeze_3853, unsqueeze_3865, unsqueeze_3877, unsqueeze_3889, unsqueeze_3901, unsqueeze_3913, unsqueeze_3925, unsqueeze_3937, unsqueeze_3949, unsqueeze_3961, unsqueeze_3973, unsqueeze_3985, unsqueeze_3997, unsqueeze_4009, unsqueeze_4021, unsqueeze_4033, unsqueeze_4045, unsqueeze_4057, unsqueeze_4069, unsqueeze_4081, unsqueeze_4093, unsqueeze_4105, unsqueeze_4117, unsqueeze_4129, unsqueeze_4141, unsqueeze_4153, unsqueeze_4165, unsqueeze_4177, unsqueeze_4189, unsqueeze_4201, unsqueeze_4213, unsqueeze_4225, unsqueeze_4237, unsqueeze_4249, unsqueeze_4261, unsqueeze_4273, unsqueeze_4285, unsqueeze_4297, unsqueeze_4309, unsqueeze_4321, unsqueeze_4333, unsqueeze_4345, unsqueeze_4357, unsqueeze_4369, unsqueeze_4381, unsqueeze_4393, unsqueeze_4405, unsqueeze_4417, unsqueeze_4429, unsqueeze_4441, unsqueeze_4453, unsqueeze_4465, unsqueeze_4477, unsqueeze_4489, unsqueeze_4501, unsqueeze_4513, unsqueeze_4525, unsqueeze_4537, unsqueeze_4549, unsqueeze_4561, unsqueeze_4573, unsqueeze_4585, unsqueeze_4597, unsqueeze_4609, unsqueeze_4621, unsqueeze_4633, unsqueeze_4645, unsqueeze_4657, unsqueeze_4669, unsqueeze_4681, unsqueeze_4693, unsqueeze_4705, unsqueeze_4717, unsqueeze_4729, unsqueeze_4741, unsqueeze_4753, unsqueeze_4765, unsqueeze_4777, unsqueeze_4789, unsqueeze_4801, unsqueeze_4813, unsqueeze_4825, unsqueeze_4837, unsqueeze_4849, unsqueeze_4861, unsqueeze_4873, unsqueeze_4885, unsqueeze_4897, unsqueeze_4909, unsqueeze_4921, unsqueeze_4933, unsqueeze_4945, unsqueeze_4957, unsqueeze_4969, unsqueeze_4981, unsqueeze_4993, unsqueeze_5005, unsqueeze_5017, unsqueeze_5029, unsqueeze_5041, unsqueeze_5053, unsqueeze_5065, unsqueeze_5077, unsqueeze_5089, unsqueeze_5101, unsqueeze_5113, unsqueeze_5125, unsqueeze_5137, unsqueeze_5149, unsqueeze_5161, unsqueeze_5173, unsqueeze_5185, unsqueeze_5197, unsqueeze_5209, unsqueeze_5221, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('hrnet_w18', benchmark_compiled_module)
