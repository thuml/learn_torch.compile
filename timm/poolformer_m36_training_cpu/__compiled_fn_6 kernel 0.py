
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_add_mul_sub_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       const float* in_ptr16,
                       const float* in_ptr17,
                       const float* in_ptr18,
                       const float* in_ptr19,
                       const float* in_ptr20,
                       const float* in_ptr21,
                       const float* in_ptr22,
                       const float* in_ptr23,
                       const float* in_ptr24,
                       const float* in_ptr25,
                       const float* in_ptr26,
                       const float* in_ptr27,
                       const float* in_ptr28,
                       const float* in_ptr29,
                       const float* in_ptr30,
                       const float* in_ptr31,
                       const float* in_ptr32,
                       const float* in_ptr33,
                       const float* in_ptr34,
                       const float* in_ptr35,
                       const float* in_ptr36,
                       const float* in_ptr37,
                       const float* in_ptr38,
                       const float* in_ptr39,
                       const float* in_ptr40,
                       const float* in_ptr41,
                       const float* in_ptr42,
                       const float* in_ptr43,
                       const float* in_ptr44,
                       const float* in_ptr45,
                       const float* in_ptr46,
                       const float* in_ptr47,
                       const float* in_ptr48,
                       const float* in_ptr49,
                       const float* in_ptr50,
                       const float* in_ptr51,
                       const float* in_ptr52,
                       const float* in_ptr53,
                       const float* in_ptr54,
                       const float* in_ptr55,
                       const float* in_ptr56,
                       const float* in_ptr57,
                       const float* in_ptr58,
                       const float* in_ptr59,
                       const float* in_ptr60,
                       const float* in_ptr61,
                       const float* in_ptr62,
                       const float* in_ptr63,
                       const float* in_ptr64,
                       const float* in_ptr65,
                       const float* in_ptr66,
                       const float* in_ptr67,
                       const float* in_ptr68,
                       const float* in_ptr69,
                       const float* in_ptr70,
                       const float* in_ptr71,
                       const float* in_ptr72,
                       const float* in_ptr73,
                       const float* in_ptr74,
                       const float* in_ptr75,
                       const float* in_ptr76,
                       const float* in_ptr77,
                       const float* in_ptr78,
                       const float* in_ptr79,
                       const float* in_ptr80,
                       const float* in_ptr81,
                       const float* in_ptr82,
                       const float* in_ptr83,
                       const float* in_ptr84,
                       const float* in_ptr85,
                       const float* in_ptr86,
                       const float* in_ptr87,
                       const float* in_ptr88,
                       const float* in_ptr89,
                       const float* in_ptr90,
                       const float* in_ptr91,
                       const float* in_ptr92,
                       const float* in_ptr93,
                       const float* in_ptr94,
                       const float* in_ptr95,
                       const float* in_ptr96,
                       const float* in_ptr97,
                       const float* in_ptr98,
                       const float* in_ptr99,
                       const float* in_ptr100,
                       const float* in_ptr101,
                       const float* in_ptr102,
                       const float* in_ptr103,
                       const float* in_ptr104,
                       const float* in_ptr105,
                       const float* in_ptr106,
                       const float* in_ptr107,
                       const float* in_ptr108,
                       const float* in_ptr109,
                       const float* in_ptr110,
                       const float* in_ptr111,
                       const float* in_ptr112,
                       const float* in_ptr113,
                       const float* in_ptr114,
                       const float* in_ptr115,
                       const float* in_ptr116,
                       const float* in_ptr117,
                       const float* in_ptr118,
                       const float* in_ptr119,
                       const float* in_ptr120,
                       const float* in_ptr121,
                       const float* in_ptr122,
                       const float* in_ptr123,
                       const float* in_ptr124,
                       const float* in_ptr125,
                       const float* in_ptr126,
                       const float* in_ptr127,
                       const float* in_ptr128,
                       const float* in_ptr129,
                       const float* in_ptr130,
                       const float* in_ptr131,
                       const float* in_ptr132,
                       const float* in_ptr133,
                       const float* in_ptr134,
                       const float* in_ptr135,
                       const float* in_ptr136,
                       const float* in_ptr137,
                       const float* in_ptr138,
                       const float* in_ptr139,
                       const float* in_ptr140,
                       const float* in_ptr141,
                       const float* in_ptr142,
                       const float* in_ptr143,
                       const float* in_ptr144,
                       const float* in_ptr145,
                       const float* in_ptr146,
                       const float* in_ptr147,
                       const float* in_ptr148,
                       const float* in_ptr149,
                       const float* in_ptr150,
                       const float* in_ptr151,
                       const float* in_ptr152,
                       const float* in_ptr153,
                       const float* in_ptr154,
                       const float* in_ptr155,
                       const float* in_ptr156,
                       const float* in_ptr157,
                       const float* in_ptr158,
                       const float* in_ptr159,
                       const float* in_ptr160,
                       const float* in_ptr161,
                       const float* in_ptr162,
                       const float* in_ptr163,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16,
                       float* out_ptr17,
                       float* out_ptr18,
                       float* out_ptr19,
                       float* out_ptr20,
                       float* out_ptr21,
                       float* out_ptr22,
                       float* out_ptr23,
                       float* out_ptr24,
                       float* out_ptr25,
                       float* out_ptr26,
                       float* out_ptr27,
                       float* out_ptr28,
                       float* out_ptr29,
                       float* out_ptr30,
                       float* out_ptr31)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(96L); x2+=static_cast<long>(8L))
                    {
                        float tmp11[8*8] __attribute__ ((aligned (8)));
                        float tmp22[8*8] __attribute__ ((aligned (8)));
                        float tmp33[8*8] __attribute__ ((aligned (8)));
                        float tmp44[8*8] __attribute__ ((aligned (8)));
                        float tmp55[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2));
                            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x2));
                            auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x2));
                            auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x2));
                            auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x2));
                            auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr16 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr17 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr18 + static_cast<long>(x2));
                            auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr19 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr20 + static_cast<long>(x2));
                            auto tmp45 = at::vec::Vectorized<float>::loadu(in_ptr21 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr22 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp48 = at::vec::Vectorized<float>::loadu(in_ptr23 + static_cast<long>(x2));
                            auto tmp51 = at::vec::Vectorized<float>::loadu(in_ptr24 + static_cast<long>(x2 + (96L*x1) + (96L*x1_inner) + (301056L*x0)));
                            auto tmp52 = at::vec::Vectorized<float>::loadu(in_ptr25 + static_cast<long>(x2));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = tmp0 + tmp5;
                            auto tmp9 = tmp7 * tmp8;
                            auto tmp10 = tmp6 + tmp9;
                            auto tmp14 = tmp12 - tmp13;
                            auto tmp16 = tmp14 * tmp15;
                            auto tmp17 = tmp10 + tmp16;
                            auto tmp20 = tmp18 * tmp19;
                            auto tmp21 = tmp17 + tmp20;
                            auto tmp25 = tmp23 - tmp24;
                            auto tmp27 = tmp25 * tmp26;
                            auto tmp28 = tmp21 + tmp27;
                            auto tmp31 = tmp29 * tmp30;
                            auto tmp32 = tmp28 + tmp31;
                            auto tmp36 = tmp34 - tmp35;
                            auto tmp38 = tmp36 * tmp37;
                            auto tmp39 = tmp32 + tmp38;
                            auto tmp42 = tmp40 * tmp41;
                            auto tmp43 = tmp39 + tmp42;
                            auto tmp47 = tmp45 - tmp46;
                            auto tmp49 = tmp47 * tmp48;
                            auto tmp50 = tmp43 + tmp49;
                            auto tmp53 = tmp51 * tmp52;
                            auto tmp54 = tmp50 + tmp53;
                            tmp10.store(tmp11 + static_cast<long>(8L*x1_inner));
                            tmp21.store(tmp22 + static_cast<long>(8L*x1_inner));
                            tmp32.store(tmp33 + static_cast<long>(8L*x1_inner));
                            tmp43.store(tmp44 + static_cast<long>(8L*x1_inner));
                            tmp54.store(tmp55 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp11, 8, out_ptr0 + static_cast<long>(x1 + (3136L*x2) + (301056L*x0)), static_cast<long>(3136L));
                        at::vec::transpose_mxn<float,8,8>(tmp22, 8, out_ptr1 + static_cast<long>(x1 + (3136L*x2) + (301056L*x0)), static_cast<long>(3136L));
                        at::vec::transpose_mxn<float,8,8>(tmp33, 8, out_ptr2 + static_cast<long>(x1 + (3136L*x2) + (301056L*x0)), static_cast<long>(3136L));
                        at::vec::transpose_mxn<float,8,8>(tmp44, 8, out_ptr3 + static_cast<long>(x1 + (3136L*x2) + (301056L*x0)), static_cast<long>(3136L));
                        at::vec::transpose_mxn<float,8,8>(tmp55, 8, out_ptr4 + static_cast<long>(x1 + (3136L*x2) + (301056L*x0)), static_cast<long>(3136L));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        float tmp11[8*8] __attribute__ ((aligned (8)));
                        float tmp22[8*8] __attribute__ ((aligned (8)));
                        float tmp33[8*8] __attribute__ ((aligned (8)));
                        float tmp44[8*8] __attribute__ ((aligned (8)));
                        float tmp55[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr26 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr27 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr28 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr29 + static_cast<long>(x2));
                            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr30 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr31 + static_cast<long>(x2));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr32 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr33 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr34 + static_cast<long>(x2));
                            auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr35 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr36 + static_cast<long>(x2));
                            auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr37 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr38 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr39 + static_cast<long>(x2));
                            auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr40 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr41 + static_cast<long>(x2));
                            auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr42 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr43 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr44 + static_cast<long>(x2));
                            auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr45 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr46 + static_cast<long>(x2));
                            auto tmp45 = at::vec::Vectorized<float>::loadu(in_ptr47 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr48 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp48 = at::vec::Vectorized<float>::loadu(in_ptr49 + static_cast<long>(x2));
                            auto tmp51 = at::vec::Vectorized<float>::loadu(in_ptr50 + static_cast<long>(x2 + (192L*x1) + (192L*x1_inner) + (150528L*x0)));
                            auto tmp52 = at::vec::Vectorized<float>::loadu(in_ptr51 + static_cast<long>(x2));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = tmp0 + tmp5;
                            auto tmp9 = tmp7 * tmp8;
                            auto tmp10 = tmp6 + tmp9;
                            auto tmp14 = tmp12 - tmp13;
                            auto tmp16 = tmp14 * tmp15;
                            auto tmp17 = tmp10 + tmp16;
                            auto tmp20 = tmp18 * tmp19;
                            auto tmp21 = tmp17 + tmp20;
                            auto tmp25 = tmp23 - tmp24;
                            auto tmp27 = tmp25 * tmp26;
                            auto tmp28 = tmp21 + tmp27;
                            auto tmp31 = tmp29 * tmp30;
                            auto tmp32 = tmp28 + tmp31;
                            auto tmp36 = tmp34 - tmp35;
                            auto tmp38 = tmp36 * tmp37;
                            auto tmp39 = tmp32 + tmp38;
                            auto tmp42 = tmp40 * tmp41;
                            auto tmp43 = tmp39 + tmp42;
                            auto tmp47 = tmp45 - tmp46;
                            auto tmp49 = tmp47 * tmp48;
                            auto tmp50 = tmp43 + tmp49;
                            auto tmp53 = tmp51 * tmp52;
                            auto tmp54 = tmp50 + tmp53;
                            tmp10.store(tmp11 + static_cast<long>(8L*x1_inner));
                            tmp21.store(tmp22 + static_cast<long>(8L*x1_inner));
                            tmp32.store(tmp33 + static_cast<long>(8L*x1_inner));
                            tmp43.store(tmp44 + static_cast<long>(8L*x1_inner));
                            tmp54.store(tmp55 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp11, 8, out_ptr5 + static_cast<long>(x1 + (784L*x2) + (150528L*x0)), static_cast<long>(784L));
                        at::vec::transpose_mxn<float,8,8>(tmp22, 8, out_ptr6 + static_cast<long>(x1 + (784L*x2) + (150528L*x0)), static_cast<long>(784L));
                        at::vec::transpose_mxn<float,8,8>(tmp33, 8, out_ptr7 + static_cast<long>(x1 + (784L*x2) + (150528L*x0)), static_cast<long>(784L));
                        at::vec::transpose_mxn<float,8,8>(tmp44, 8, out_ptr8 + static_cast<long>(x1 + (784L*x2) + (150528L*x0)), static_cast<long>(784L));
                        at::vec::transpose_mxn<float,8,8>(tmp55, 8, out_ptr9 + static_cast<long>(x1 + (784L*x2) + (150528L*x0)), static_cast<long>(784L));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        float tmp11[8*8] __attribute__ ((aligned (8)));
                        float tmp22[8*8] __attribute__ ((aligned (8)));
                        float tmp33[8*8] __attribute__ ((aligned (8)));
                        float tmp44[8*8] __attribute__ ((aligned (8)));
                        float tmp55[8*8] __attribute__ ((aligned (8)));
                        float tmp66[8*8] __attribute__ ((aligned (8)));
                        float tmp77[8*8] __attribute__ ((aligned (8)));
                        float tmp88[8*8] __attribute__ ((aligned (8)));
                        float tmp99[8*8] __attribute__ ((aligned (8)));
                        float tmp110[8*8] __attribute__ ((aligned (8)));
                        float tmp121[8*8] __attribute__ ((aligned (8)));
                        float tmp132[8*8] __attribute__ ((aligned (8)));
                        float tmp143[8*8] __attribute__ ((aligned (8)));
                        float tmp154[8*8] __attribute__ ((aligned (8)));
                        float tmp165[8*8] __attribute__ ((aligned (8)));
                        float tmp176[8*8] __attribute__ ((aligned (8)));
                        float tmp187[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr52 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr53 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr54 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr55 + static_cast<long>(x2));
                            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr56 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr57 + static_cast<long>(x2));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr58 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr59 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr60 + static_cast<long>(x2));
                            auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr61 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr62 + static_cast<long>(x2));
                            auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr63 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr64 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr65 + static_cast<long>(x2));
                            auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr66 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr67 + static_cast<long>(x2));
                            auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr68 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr69 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr70 + static_cast<long>(x2));
                            auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr71 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr72 + static_cast<long>(x2));
                            auto tmp45 = at::vec::Vectorized<float>::loadu(in_ptr73 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr74 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp48 = at::vec::Vectorized<float>::loadu(in_ptr75 + static_cast<long>(x2));
                            auto tmp51 = at::vec::Vectorized<float>::loadu(in_ptr76 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp52 = at::vec::Vectorized<float>::loadu(in_ptr77 + static_cast<long>(x2));
                            auto tmp56 = at::vec::Vectorized<float>::loadu(in_ptr78 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp57 = at::vec::Vectorized<float>::loadu(in_ptr79 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp59 = at::vec::Vectorized<float>::loadu(in_ptr80 + static_cast<long>(x2));
                            auto tmp62 = at::vec::Vectorized<float>::loadu(in_ptr81 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp63 = at::vec::Vectorized<float>::loadu(in_ptr82 + static_cast<long>(x2));
                            auto tmp67 = at::vec::Vectorized<float>::loadu(in_ptr83 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp68 = at::vec::Vectorized<float>::loadu(in_ptr84 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp70 = at::vec::Vectorized<float>::loadu(in_ptr85 + static_cast<long>(x2));
                            auto tmp73 = at::vec::Vectorized<float>::loadu(in_ptr86 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp74 = at::vec::Vectorized<float>::loadu(in_ptr87 + static_cast<long>(x2));
                            auto tmp78 = at::vec::Vectorized<float>::loadu(in_ptr88 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp79 = at::vec::Vectorized<float>::loadu(in_ptr89 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp81 = at::vec::Vectorized<float>::loadu(in_ptr90 + static_cast<long>(x2));
                            auto tmp84 = at::vec::Vectorized<float>::loadu(in_ptr91 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp85 = at::vec::Vectorized<float>::loadu(in_ptr92 + static_cast<long>(x2));
                            auto tmp89 = at::vec::Vectorized<float>::loadu(in_ptr93 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp90 = at::vec::Vectorized<float>::loadu(in_ptr94 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp92 = at::vec::Vectorized<float>::loadu(in_ptr95 + static_cast<long>(x2));
                            auto tmp95 = at::vec::Vectorized<float>::loadu(in_ptr96 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp96 = at::vec::Vectorized<float>::loadu(in_ptr97 + static_cast<long>(x2));
                            auto tmp100 = at::vec::Vectorized<float>::loadu(in_ptr98 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp101 = at::vec::Vectorized<float>::loadu(in_ptr99 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp103 = at::vec::Vectorized<float>::loadu(in_ptr100 + static_cast<long>(x2));
                            auto tmp106 = at::vec::Vectorized<float>::loadu(in_ptr101 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp107 = at::vec::Vectorized<float>::loadu(in_ptr102 + static_cast<long>(x2));
                            auto tmp111 = at::vec::Vectorized<float>::loadu(in_ptr103 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp112 = at::vec::Vectorized<float>::loadu(in_ptr104 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp114 = at::vec::Vectorized<float>::loadu(in_ptr105 + static_cast<long>(x2));
                            auto tmp117 = at::vec::Vectorized<float>::loadu(in_ptr106 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp118 = at::vec::Vectorized<float>::loadu(in_ptr107 + static_cast<long>(x2));
                            auto tmp122 = at::vec::Vectorized<float>::loadu(in_ptr108 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp123 = at::vec::Vectorized<float>::loadu(in_ptr109 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp125 = at::vec::Vectorized<float>::loadu(in_ptr110 + static_cast<long>(x2));
                            auto tmp128 = at::vec::Vectorized<float>::loadu(in_ptr111 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp129 = at::vec::Vectorized<float>::loadu(in_ptr112 + static_cast<long>(x2));
                            auto tmp133 = at::vec::Vectorized<float>::loadu(in_ptr113 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp134 = at::vec::Vectorized<float>::loadu(in_ptr114 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp136 = at::vec::Vectorized<float>::loadu(in_ptr115 + static_cast<long>(x2));
                            auto tmp139 = at::vec::Vectorized<float>::loadu(in_ptr116 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp140 = at::vec::Vectorized<float>::loadu(in_ptr117 + static_cast<long>(x2));
                            auto tmp144 = at::vec::Vectorized<float>::loadu(in_ptr118 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp145 = at::vec::Vectorized<float>::loadu(in_ptr119 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp147 = at::vec::Vectorized<float>::loadu(in_ptr120 + static_cast<long>(x2));
                            auto tmp150 = at::vec::Vectorized<float>::loadu(in_ptr121 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp151 = at::vec::Vectorized<float>::loadu(in_ptr122 + static_cast<long>(x2));
                            auto tmp155 = at::vec::Vectorized<float>::loadu(in_ptr123 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp156 = at::vec::Vectorized<float>::loadu(in_ptr124 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp158 = at::vec::Vectorized<float>::loadu(in_ptr125 + static_cast<long>(x2));
                            auto tmp161 = at::vec::Vectorized<float>::loadu(in_ptr126 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp162 = at::vec::Vectorized<float>::loadu(in_ptr127 + static_cast<long>(x2));
                            auto tmp166 = at::vec::Vectorized<float>::loadu(in_ptr128 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp167 = at::vec::Vectorized<float>::loadu(in_ptr129 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp169 = at::vec::Vectorized<float>::loadu(in_ptr130 + static_cast<long>(x2));
                            auto tmp172 = at::vec::Vectorized<float>::loadu(in_ptr131 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp173 = at::vec::Vectorized<float>::loadu(in_ptr132 + static_cast<long>(x2));
                            auto tmp177 = at::vec::Vectorized<float>::loadu(in_ptr133 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp178 = at::vec::Vectorized<float>::loadu(in_ptr134 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp180 = at::vec::Vectorized<float>::loadu(in_ptr135 + static_cast<long>(x2));
                            auto tmp183 = at::vec::Vectorized<float>::loadu(in_ptr136 + static_cast<long>(x2 + (384L*x1) + (384L*x1_inner) + (75264L*x0)));
                            auto tmp184 = at::vec::Vectorized<float>::loadu(in_ptr137 + static_cast<long>(x2));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = tmp0 + tmp5;
                            auto tmp9 = tmp7 * tmp8;
                            auto tmp10 = tmp6 + tmp9;
                            auto tmp14 = tmp12 - tmp13;
                            auto tmp16 = tmp14 * tmp15;
                            auto tmp17 = tmp10 + tmp16;
                            auto tmp20 = tmp18 * tmp19;
                            auto tmp21 = tmp17 + tmp20;
                            auto tmp25 = tmp23 - tmp24;
                            auto tmp27 = tmp25 * tmp26;
                            auto tmp28 = tmp21 + tmp27;
                            auto tmp31 = tmp29 * tmp30;
                            auto tmp32 = tmp28 + tmp31;
                            auto tmp36 = tmp34 - tmp35;
                            auto tmp38 = tmp36 * tmp37;
                            auto tmp39 = tmp32 + tmp38;
                            auto tmp42 = tmp40 * tmp41;
                            auto tmp43 = tmp39 + tmp42;
                            auto tmp47 = tmp45 - tmp46;
                            auto tmp49 = tmp47 * tmp48;
                            auto tmp50 = tmp43 + tmp49;
                            auto tmp53 = tmp51 * tmp52;
                            auto tmp54 = tmp50 + tmp53;
                            auto tmp58 = tmp56 - tmp57;
                            auto tmp60 = tmp58 * tmp59;
                            auto tmp61 = tmp54 + tmp60;
                            auto tmp64 = tmp62 * tmp63;
                            auto tmp65 = tmp61 + tmp64;
                            auto tmp69 = tmp67 - tmp68;
                            auto tmp71 = tmp69 * tmp70;
                            auto tmp72 = tmp65 + tmp71;
                            auto tmp75 = tmp73 * tmp74;
                            auto tmp76 = tmp72 + tmp75;
                            auto tmp80 = tmp78 - tmp79;
                            auto tmp82 = tmp80 * tmp81;
                            auto tmp83 = tmp76 + tmp82;
                            auto tmp86 = tmp84 * tmp85;
                            auto tmp87 = tmp83 + tmp86;
                            auto tmp91 = tmp89 - tmp90;
                            auto tmp93 = tmp91 * tmp92;
                            auto tmp94 = tmp87 + tmp93;
                            auto tmp97 = tmp95 * tmp96;
                            auto tmp98 = tmp94 + tmp97;
                            auto tmp102 = tmp100 - tmp101;
                            auto tmp104 = tmp102 * tmp103;
                            auto tmp105 = tmp98 + tmp104;
                            auto tmp108 = tmp106 * tmp107;
                            auto tmp109 = tmp105 + tmp108;
                            auto tmp113 = tmp111 - tmp112;
                            auto tmp115 = tmp113 * tmp114;
                            auto tmp116 = tmp109 + tmp115;
                            auto tmp119 = tmp117 * tmp118;
                            auto tmp120 = tmp116 + tmp119;
                            auto tmp124 = tmp122 - tmp123;
                            auto tmp126 = tmp124 * tmp125;
                            auto tmp127 = tmp120 + tmp126;
                            auto tmp130 = tmp128 * tmp129;
                            auto tmp131 = tmp127 + tmp130;
                            auto tmp135 = tmp133 - tmp134;
                            auto tmp137 = tmp135 * tmp136;
                            auto tmp138 = tmp131 + tmp137;
                            auto tmp141 = tmp139 * tmp140;
                            auto tmp142 = tmp138 + tmp141;
                            auto tmp146 = tmp144 - tmp145;
                            auto tmp148 = tmp146 * tmp147;
                            auto tmp149 = tmp142 + tmp148;
                            auto tmp152 = tmp150 * tmp151;
                            auto tmp153 = tmp149 + tmp152;
                            auto tmp157 = tmp155 - tmp156;
                            auto tmp159 = tmp157 * tmp158;
                            auto tmp160 = tmp153 + tmp159;
                            auto tmp163 = tmp161 * tmp162;
                            auto tmp164 = tmp160 + tmp163;
                            auto tmp168 = tmp166 - tmp167;
                            auto tmp170 = tmp168 * tmp169;
                            auto tmp171 = tmp164 + tmp170;
                            auto tmp174 = tmp172 * tmp173;
                            auto tmp175 = tmp171 + tmp174;
                            auto tmp179 = tmp177 - tmp178;
                            auto tmp181 = tmp179 * tmp180;
                            auto tmp182 = tmp175 + tmp181;
                            auto tmp185 = tmp183 * tmp184;
                            auto tmp186 = tmp182 + tmp185;
                            tmp10.store(tmp11 + static_cast<long>(8L*x1_inner));
                            tmp21.store(tmp22 + static_cast<long>(8L*x1_inner));
                            tmp32.store(tmp33 + static_cast<long>(8L*x1_inner));
                            tmp43.store(tmp44 + static_cast<long>(8L*x1_inner));
                            tmp54.store(tmp55 + static_cast<long>(8L*x1_inner));
                            tmp65.store(tmp66 + static_cast<long>(8L*x1_inner));
                            tmp76.store(tmp77 + static_cast<long>(8L*x1_inner));
                            tmp87.store(tmp88 + static_cast<long>(8L*x1_inner));
                            tmp98.store(tmp99 + static_cast<long>(8L*x1_inner));
                            tmp109.store(tmp110 + static_cast<long>(8L*x1_inner));
                            tmp120.store(tmp121 + static_cast<long>(8L*x1_inner));
                            tmp131.store(tmp132 + static_cast<long>(8L*x1_inner));
                            tmp142.store(tmp143 + static_cast<long>(8L*x1_inner));
                            tmp153.store(tmp154 + static_cast<long>(8L*x1_inner));
                            tmp164.store(tmp165 + static_cast<long>(8L*x1_inner));
                            tmp175.store(tmp176 + static_cast<long>(8L*x1_inner));
                            tmp186.store(tmp187 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp11, 8, out_ptr10 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp22, 8, out_ptr11 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp33, 8, out_ptr12 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp44, 8, out_ptr13 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp55, 8, out_ptr14 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp66, 8, out_ptr15 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp77, 8, out_ptr16 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp88, 8, out_ptr17 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp99, 8, out_ptr18 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp110, 8, out_ptr19 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp121, 8, out_ptr20 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp132, 8, out_ptr21 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp143, 8, out_ptr22 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp154, 8, out_ptr23 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp165, 8, out_ptr24 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp176, 8, out_ptr25 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                        at::vec::transpose_mxn<float,8,8>(tmp187, 8, out_ptr26 + static_cast<long>(x1 + (196L*x2) + (75264L*x0)), static_cast<long>(196L));
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr52[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp1 = in_ptr53[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp2 = in_ptr54[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp4 = in_ptr55[static_cast<long>(x2)];
                        auto tmp7 = in_ptr56[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp8 = in_ptr57[static_cast<long>(x2)];
                        auto tmp11 = in_ptr58[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp12 = in_ptr59[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp14 = in_ptr60[static_cast<long>(x2)];
                        auto tmp17 = in_ptr61[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp18 = in_ptr62[static_cast<long>(x2)];
                        auto tmp21 = in_ptr63[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp22 = in_ptr64[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp24 = in_ptr65[static_cast<long>(x2)];
                        auto tmp27 = in_ptr66[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp28 = in_ptr67[static_cast<long>(x2)];
                        auto tmp31 = in_ptr68[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp32 = in_ptr69[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp34 = in_ptr70[static_cast<long>(x2)];
                        auto tmp37 = in_ptr71[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp38 = in_ptr72[static_cast<long>(x2)];
                        auto tmp41 = in_ptr73[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp42 = in_ptr74[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp44 = in_ptr75[static_cast<long>(x2)];
                        auto tmp47 = in_ptr76[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp48 = in_ptr77[static_cast<long>(x2)];
                        auto tmp51 = in_ptr78[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp52 = in_ptr79[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp54 = in_ptr80[static_cast<long>(x2)];
                        auto tmp57 = in_ptr81[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp58 = in_ptr82[static_cast<long>(x2)];
                        auto tmp61 = in_ptr83[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp62 = in_ptr84[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp64 = in_ptr85[static_cast<long>(x2)];
                        auto tmp67 = in_ptr86[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp68 = in_ptr87[static_cast<long>(x2)];
                        auto tmp71 = in_ptr88[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp72 = in_ptr89[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp74 = in_ptr90[static_cast<long>(x2)];
                        auto tmp77 = in_ptr91[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp78 = in_ptr92[static_cast<long>(x2)];
                        auto tmp81 = in_ptr93[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp82 = in_ptr94[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp84 = in_ptr95[static_cast<long>(x2)];
                        auto tmp87 = in_ptr96[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp88 = in_ptr97[static_cast<long>(x2)];
                        auto tmp91 = in_ptr98[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp92 = in_ptr99[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp94 = in_ptr100[static_cast<long>(x2)];
                        auto tmp97 = in_ptr101[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp98 = in_ptr102[static_cast<long>(x2)];
                        auto tmp101 = in_ptr103[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp102 = in_ptr104[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp104 = in_ptr105[static_cast<long>(x2)];
                        auto tmp107 = in_ptr106[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp108 = in_ptr107[static_cast<long>(x2)];
                        auto tmp111 = in_ptr108[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp112 = in_ptr109[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp114 = in_ptr110[static_cast<long>(x2)];
                        auto tmp117 = in_ptr111[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp118 = in_ptr112[static_cast<long>(x2)];
                        auto tmp121 = in_ptr113[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp122 = in_ptr114[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp124 = in_ptr115[static_cast<long>(x2)];
                        auto tmp127 = in_ptr116[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp128 = in_ptr117[static_cast<long>(x2)];
                        auto tmp131 = in_ptr118[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp132 = in_ptr119[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp134 = in_ptr120[static_cast<long>(x2)];
                        auto tmp137 = in_ptr121[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp138 = in_ptr122[static_cast<long>(x2)];
                        auto tmp141 = in_ptr123[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp142 = in_ptr124[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp144 = in_ptr125[static_cast<long>(x2)];
                        auto tmp147 = in_ptr126[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp148 = in_ptr127[static_cast<long>(x2)];
                        auto tmp151 = in_ptr128[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp152 = in_ptr129[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp154 = in_ptr130[static_cast<long>(x2)];
                        auto tmp157 = in_ptr131[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp158 = in_ptr132[static_cast<long>(x2)];
                        auto tmp161 = in_ptr133[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp162 = in_ptr134[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp164 = in_ptr135[static_cast<long>(x2)];
                        auto tmp167 = in_ptr136[static_cast<long>(x2 + (384L*x1) + (75264L*x0))];
                        auto tmp168 = in_ptr137[static_cast<long>(x2)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        auto tmp6 = decltype(tmp0)(tmp0 + tmp5);
                        auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 + tmp9);
                        auto tmp13 = decltype(tmp11)(tmp11 - tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp16 = decltype(tmp10)(tmp10 + tmp15);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp16)(tmp16 + tmp19);
                        auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                        auto tmp25 = decltype(tmp23)(tmp23 * tmp24);
                        auto tmp26 = decltype(tmp20)(tmp20 + tmp25);
                        auto tmp29 = decltype(tmp27)(tmp27 * tmp28);
                        auto tmp30 = decltype(tmp26)(tmp26 + tmp29);
                        auto tmp33 = decltype(tmp31)(tmp31 - tmp32);
                        auto tmp35 = decltype(tmp33)(tmp33 * tmp34);
                        auto tmp36 = decltype(tmp30)(tmp30 + tmp35);
                        auto tmp39 = decltype(tmp37)(tmp37 * tmp38);
                        auto tmp40 = decltype(tmp36)(tmp36 + tmp39);
                        auto tmp43 = decltype(tmp41)(tmp41 - tmp42);
                        auto tmp45 = decltype(tmp43)(tmp43 * tmp44);
                        auto tmp46 = decltype(tmp40)(tmp40 + tmp45);
                        auto tmp49 = decltype(tmp47)(tmp47 * tmp48);
                        auto tmp50 = decltype(tmp46)(tmp46 + tmp49);
                        auto tmp53 = decltype(tmp51)(tmp51 - tmp52);
                        auto tmp55 = decltype(tmp53)(tmp53 * tmp54);
                        auto tmp56 = decltype(tmp50)(tmp50 + tmp55);
                        auto tmp59 = decltype(tmp57)(tmp57 * tmp58);
                        auto tmp60 = decltype(tmp56)(tmp56 + tmp59);
                        auto tmp63 = decltype(tmp61)(tmp61 - tmp62);
                        auto tmp65 = decltype(tmp63)(tmp63 * tmp64);
                        auto tmp66 = decltype(tmp60)(tmp60 + tmp65);
                        auto tmp69 = decltype(tmp67)(tmp67 * tmp68);
                        auto tmp70 = decltype(tmp66)(tmp66 + tmp69);
                        auto tmp73 = decltype(tmp71)(tmp71 - tmp72);
                        auto tmp75 = decltype(tmp73)(tmp73 * tmp74);
                        auto tmp76 = decltype(tmp70)(tmp70 + tmp75);
                        auto tmp79 = decltype(tmp77)(tmp77 * tmp78);
                        auto tmp80 = decltype(tmp76)(tmp76 + tmp79);
                        auto tmp83 = decltype(tmp81)(tmp81 - tmp82);
                        auto tmp85 = decltype(tmp83)(tmp83 * tmp84);
                        auto tmp86 = decltype(tmp80)(tmp80 + tmp85);
                        auto tmp89 = decltype(tmp87)(tmp87 * tmp88);
                        auto tmp90 = decltype(tmp86)(tmp86 + tmp89);
                        auto tmp93 = decltype(tmp91)(tmp91 - tmp92);
                        auto tmp95 = decltype(tmp93)(tmp93 * tmp94);
                        auto tmp96 = decltype(tmp90)(tmp90 + tmp95);
                        auto tmp99 = decltype(tmp97)(tmp97 * tmp98);
                        auto tmp100 = decltype(tmp96)(tmp96 + tmp99);
                        auto tmp103 = decltype(tmp101)(tmp101 - tmp102);
                        auto tmp105 = decltype(tmp103)(tmp103 * tmp104);
                        auto tmp106 = decltype(tmp100)(tmp100 + tmp105);
                        auto tmp109 = decltype(tmp107)(tmp107 * tmp108);
                        auto tmp110 = decltype(tmp106)(tmp106 + tmp109);
                        auto tmp113 = decltype(tmp111)(tmp111 - tmp112);
                        auto tmp115 = decltype(tmp113)(tmp113 * tmp114);
                        auto tmp116 = decltype(tmp110)(tmp110 + tmp115);
                        auto tmp119 = decltype(tmp117)(tmp117 * tmp118);
                        auto tmp120 = decltype(tmp116)(tmp116 + tmp119);
                        auto tmp123 = decltype(tmp121)(tmp121 - tmp122);
                        auto tmp125 = decltype(tmp123)(tmp123 * tmp124);
                        auto tmp126 = decltype(tmp120)(tmp120 + tmp125);
                        auto tmp129 = decltype(tmp127)(tmp127 * tmp128);
                        auto tmp130 = decltype(tmp126)(tmp126 + tmp129);
                        auto tmp133 = decltype(tmp131)(tmp131 - tmp132);
                        auto tmp135 = decltype(tmp133)(tmp133 * tmp134);
                        auto tmp136 = decltype(tmp130)(tmp130 + tmp135);
                        auto tmp139 = decltype(tmp137)(tmp137 * tmp138);
                        auto tmp140 = decltype(tmp136)(tmp136 + tmp139);
                        auto tmp143 = decltype(tmp141)(tmp141 - tmp142);
                        auto tmp145 = decltype(tmp143)(tmp143 * tmp144);
                        auto tmp146 = decltype(tmp140)(tmp140 + tmp145);
                        auto tmp149 = decltype(tmp147)(tmp147 * tmp148);
                        auto tmp150 = decltype(tmp146)(tmp146 + tmp149);
                        auto tmp153 = decltype(tmp151)(tmp151 - tmp152);
                        auto tmp155 = decltype(tmp153)(tmp153 * tmp154);
                        auto tmp156 = decltype(tmp150)(tmp150 + tmp155);
                        auto tmp159 = decltype(tmp157)(tmp157 * tmp158);
                        auto tmp160 = decltype(tmp156)(tmp156 + tmp159);
                        auto tmp163 = decltype(tmp161)(tmp161 - tmp162);
                        auto tmp165 = decltype(tmp163)(tmp163 * tmp164);
                        auto tmp166 = decltype(tmp160)(tmp160 + tmp165);
                        auto tmp169 = decltype(tmp167)(tmp167 * tmp168);
                        auto tmp170 = decltype(tmp166)(tmp166 + tmp169);
                        out_ptr10[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp10;
                        out_ptr11[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp20;
                        out_ptr12[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp30;
                        out_ptr13[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp40;
                        out_ptr14[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp50;
                        out_ptr15[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp60;
                        out_ptr16[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp70;
                        out_ptr17[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp80;
                        out_ptr18[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp90;
                        out_ptr19[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp100;
                        out_ptr20[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp110;
                        out_ptr21[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp120;
                        out_ptr22[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp130;
                        out_ptr23[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp140;
                        out_ptr24[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp150;
                        out_ptr25[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp160;
                        out_ptr26[static_cast<long>(x1 + (196L*x2) + (75264L*x0))] = tmp170;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        float tmp11[8*8] __attribute__ ((aligned (8)));
                        float tmp22[8*8] __attribute__ ((aligned (8)));
                        float tmp33[8*8] __attribute__ ((aligned (8)));
                        float tmp44[8*8] __attribute__ ((aligned (8)));
                        float tmp55[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr138 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr139 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr140 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr141 + static_cast<long>(x2));
                            auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr142 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr143 + static_cast<long>(x2));
                            auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr144 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr145 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr146 + static_cast<long>(x2));
                            auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr147 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp19 = at::vec::Vectorized<float>::loadu(in_ptr148 + static_cast<long>(x2));
                            auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr149 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp24 = at::vec::Vectorized<float>::loadu(in_ptr150 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr151 + static_cast<long>(x2));
                            auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr152 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp30 = at::vec::Vectorized<float>::loadu(in_ptr153 + static_cast<long>(x2));
                            auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr154 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr155 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr156 + static_cast<long>(x2));
                            auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr157 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr158 + static_cast<long>(x2));
                            auto tmp45 = at::vec::Vectorized<float>::loadu(in_ptr159 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr160 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp48 = at::vec::Vectorized<float>::loadu(in_ptr161 + static_cast<long>(x2));
                            auto tmp51 = at::vec::Vectorized<float>::loadu(in_ptr162 + static_cast<long>(x2 + (768L*x1) + (768L*x1_inner) + (37632L*x0)));
                            auto tmp52 = at::vec::Vectorized<float>::loadu(in_ptr163 + static_cast<long>(x2));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            auto tmp6 = tmp0 + tmp5;
                            auto tmp9 = tmp7 * tmp8;
                            auto tmp10 = tmp6 + tmp9;
                            auto tmp14 = tmp12 - tmp13;
                            auto tmp16 = tmp14 * tmp15;
                            auto tmp17 = tmp10 + tmp16;
                            auto tmp20 = tmp18 * tmp19;
                            auto tmp21 = tmp17 + tmp20;
                            auto tmp25 = tmp23 - tmp24;
                            auto tmp27 = tmp25 * tmp26;
                            auto tmp28 = tmp21 + tmp27;
                            auto tmp31 = tmp29 * tmp30;
                            auto tmp32 = tmp28 + tmp31;
                            auto tmp36 = tmp34 - tmp35;
                            auto tmp38 = tmp36 * tmp37;
                            auto tmp39 = tmp32 + tmp38;
                            auto tmp42 = tmp40 * tmp41;
                            auto tmp43 = tmp39 + tmp42;
                            auto tmp47 = tmp45 - tmp46;
                            auto tmp49 = tmp47 * tmp48;
                            auto tmp50 = tmp43 + tmp49;
                            auto tmp53 = tmp51 * tmp52;
                            auto tmp54 = tmp50 + tmp53;
                            tmp10.store(tmp11 + static_cast<long>(8L*x1_inner));
                            tmp21.store(tmp22 + static_cast<long>(8L*x1_inner));
                            tmp32.store(tmp33 + static_cast<long>(8L*x1_inner));
                            tmp43.store(tmp44 + static_cast<long>(8L*x1_inner));
                            tmp54.store(tmp55 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp11, 8, out_ptr27 + static_cast<long>(x1 + (49L*x2) + (37632L*x0)), static_cast<long>(49L));
                        at::vec::transpose_mxn<float,8,8>(tmp22, 8, out_ptr28 + static_cast<long>(x1 + (49L*x2) + (37632L*x0)), static_cast<long>(49L));
                        at::vec::transpose_mxn<float,8,8>(tmp33, 8, out_ptr29 + static_cast<long>(x1 + (49L*x2) + (37632L*x0)), static_cast<long>(49L));
                        at::vec::transpose_mxn<float,8,8>(tmp44, 8, out_ptr30 + static_cast<long>(x1 + (49L*x2) + (37632L*x0)), static_cast<long>(49L));
                        at::vec::transpose_mxn<float,8,8>(tmp55, 8, out_ptr31 + static_cast<long>(x1 + (49L*x2) + (37632L*x0)), static_cast<long>(49L));
                    }
                }
                #pragma GCC ivdep
                for(long x1=static_cast<long>(48L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr138[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp1 = in_ptr139[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp2 = in_ptr140[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp4 = in_ptr141[static_cast<long>(x2)];
                        auto tmp7 = in_ptr142[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp8 = in_ptr143[static_cast<long>(x2)];
                        auto tmp11 = in_ptr144[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp12 = in_ptr145[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp14 = in_ptr146[static_cast<long>(x2)];
                        auto tmp17 = in_ptr147[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp18 = in_ptr148[static_cast<long>(x2)];
                        auto tmp21 = in_ptr149[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp22 = in_ptr150[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp24 = in_ptr151[static_cast<long>(x2)];
                        auto tmp27 = in_ptr152[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp28 = in_ptr153[static_cast<long>(x2)];
                        auto tmp31 = in_ptr154[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp32 = in_ptr155[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp34 = in_ptr156[static_cast<long>(x2)];
                        auto tmp37 = in_ptr157[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp38 = in_ptr158[static_cast<long>(x2)];
                        auto tmp41 = in_ptr159[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp42 = in_ptr160[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp44 = in_ptr161[static_cast<long>(x2)];
                        auto tmp47 = in_ptr162[static_cast<long>(x2 + (768L*x1) + (37632L*x0))];
                        auto tmp48 = in_ptr163[static_cast<long>(x2)];
                        auto tmp3 = decltype(tmp1)(tmp1 - tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        auto tmp6 = decltype(tmp0)(tmp0 + tmp5);
                        auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                        auto tmp10 = decltype(tmp6)(tmp6 + tmp9);
                        auto tmp13 = decltype(tmp11)(tmp11 - tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp16 = decltype(tmp10)(tmp10 + tmp15);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp16)(tmp16 + tmp19);
                        auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                        auto tmp25 = decltype(tmp23)(tmp23 * tmp24);
                        auto tmp26 = decltype(tmp20)(tmp20 + tmp25);
                        auto tmp29 = decltype(tmp27)(tmp27 * tmp28);
                        auto tmp30 = decltype(tmp26)(tmp26 + tmp29);
                        auto tmp33 = decltype(tmp31)(tmp31 - tmp32);
                        auto tmp35 = decltype(tmp33)(tmp33 * tmp34);
                        auto tmp36 = decltype(tmp30)(tmp30 + tmp35);
                        auto tmp39 = decltype(tmp37)(tmp37 * tmp38);
                        auto tmp40 = decltype(tmp36)(tmp36 + tmp39);
                        auto tmp43 = decltype(tmp41)(tmp41 - tmp42);
                        auto tmp45 = decltype(tmp43)(tmp43 * tmp44);
                        auto tmp46 = decltype(tmp40)(tmp40 + tmp45);
                        auto tmp49 = decltype(tmp47)(tmp47 * tmp48);
                        auto tmp50 = decltype(tmp46)(tmp46 + tmp49);
                        out_ptr27[static_cast<long>(x1 + (49L*x2) + (37632L*x0))] = tmp10;
                        out_ptr28[static_cast<long>(x1 + (49L*x2) + (37632L*x0))] = tmp20;
                        out_ptr29[static_cast<long>(x1 + (49L*x2) + (37632L*x0))] = tmp30;
                        out_ptr30[static_cast<long>(x1 + (49L*x2) + (37632L*x0))] = tmp40;
                        out_ptr31[static_cast<long>(x1 + (49L*x2) + (37632L*x0))] = tmp50;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_div_mul_native_layer_norm_backward_sum_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1000L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1000L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (768L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x1)));
                    auto tmp2 = tmp0 * tmp1;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = in_ptr4[static_cast<long>(x0)];
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp7 = out_ptr1[static_cast<long>(x0)];
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x0)));
                auto tmp11 = out_ptr2[static_cast<long>(x0)];
                auto tmp3 = tmp1 * tmp2;
                auto tmp4 = static_cast<float>(768.0);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 * tmp5;
                auto tmp8 = at::vec::Vectorized<float>(tmp7);
                auto tmp9 = tmp6 - tmp8;
                auto tmp12 = at::vec::Vectorized<float>(tmp11);
                auto tmp13 = tmp10 * tmp12;
                auto tmp14 = tmp9 - tmp13;
                auto tmp15 = at::vec::Vectorized<float>(tmp0);
                auto tmp16 = tmp15 * tmp14;
                tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp1 = static_cast<float>(49.0);
                            auto tmp2 = at::vec::Vectorized<float>(tmp1);
                            auto tmp3 = tmp0 / tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (768L*x0))];
                        auto tmp3 = in_ptr6[static_cast<long>(x1)];
                        auto tmp1 = static_cast<float>(49.0);
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        tmp5.store(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (768L*x0))];
                        auto tmp3 = in_ptr6[static_cast<long>(x1)];
                        auto tmp1 = static_cast<float>(49.0);
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp4;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1204224L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_div_mul_native_group_norm_backward_sub_sum_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr1;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (49L*x2) + (49L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x2 + (768L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(2.657312925170068e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        auto tmp27 = static_cast<float>(49.0);
                        auto tmp28 = at::vec::Vectorized<float>(tmp27);
                        auto tmp29 = tmp26 / tmp28;
                        auto tmp30 = decltype(tmp22)(-tmp22);
                        auto tmp31 = decltype(tmp30)(tmp30 * tmp14);
                        auto tmp32 = decltype(tmp13)(tmp13 * tmp1);
                        auto tmp33 = decltype(tmp32)(tmp32 * tmp21);
                        auto tmp34 = decltype(tmp31)(tmp31 - tmp33);
                        auto tmp35 = at::vec::Vectorized<float>(tmp34);
                        auto tmp36 = tmp25 + tmp35;
                        auto tmp37 = tmp29 + tmp36;
                        tmp37.store(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr6 + static_cast<long>(x1 + (768L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(392L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0 + (768L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x1)));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(7L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(7L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp12 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp20 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp28 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp36 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp42 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp48 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp56 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp62 = out_ptr6[static_cast<long>(x1 + (768L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(7L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2))))) + (37632L*x0))];
                            auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))));
                            auto tmp2 = tmp0 / tmp1;
                            auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x2));
                            auto tmp4 = c10::convert<int>(std::min(7L, 2L + x2));
                            auto tmp5 = tmp3 < tmp4;
                            auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x3));
                            auto tmp7 = c10::convert<int>(std::min(7L, 2L + x3));
                            auto tmp8 = tmp6 < tmp7;
                            auto tmp9 = tmp5 & tmp8;
                            auto tmp10 = static_cast<float>(0.0);
                            auto tmp11 = tmp9 ? tmp2 : tmp10;
                            auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x3))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x3))))));
                            auto tmp14 = tmp12 / tmp13;
                            auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x3)));
                            auto tmp16 = tmp15 < tmp7;
                            auto tmp17 = tmp5 & tmp16;
                            auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                            auto tmp19 = tmp17 ? tmp18 : tmp11;
                            auto tmp21 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x3))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x3))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                            auto tmp22 = tmp20 / tmp21;
                            auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x3)));
                            auto tmp24 = tmp23 < tmp7;
                            auto tmp25 = tmp5 & tmp24;
                            auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                            auto tmp27 = tmp25 ? tmp26 : tmp19;
                            auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x3))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))));
                            auto tmp30 = tmp28 / tmp29;
                            auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                            auto tmp32 = tmp31 < tmp4;
                            auto tmp33 = tmp32 & tmp8;
                            auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                            auto tmp35 = tmp33 ? tmp34 : tmp27;
                            auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))));
                            auto tmp38 = tmp36 / tmp37;
                            auto tmp39 = tmp32 & tmp16;
                            auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                            auto tmp41 = tmp39 ? tmp40 : tmp35;
                            auto tmp43 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x2)));
                            auto tmp44 = tmp42 / tmp43;
                            auto tmp45 = tmp32 & tmp24;
                            auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                            auto tmp47 = tmp45 ? tmp46 : tmp41;
                            auto tmp49 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x3))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x3)))));
                            auto tmp50 = tmp48 / tmp49;
                            auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                            auto tmp52 = tmp51 < tmp4;
                            auto tmp53 = tmp52 & tmp8;
                            auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                            auto tmp55 = tmp53 ? tmp54 : tmp47;
                            auto tmp57 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x3))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x3)));
                            auto tmp58 = tmp56 / tmp57;
                            auto tmp59 = tmp52 & tmp16;
                            auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                            auto tmp61 = tmp59 ? tmp60 : tmp55;
                            auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(7L, 4L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x2)) + (std::max(0L, (-1L) + x3)));
                            auto tmp64 = tmp62 / tmp63;
                            auto tmp65 = tmp52 & tmp24;
                            auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                            auto tmp67 = tmp65 ? tmp66 : tmp61;
                            out_ptr8[static_cast<long>(x3 + (7L*x2) + (49L*x1) + (37632L*x0))] = tmp67;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp2[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp2, 8);
                            float tmp5[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp5, 8);
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp2, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(tmp2 + static_cast<long>(8L*x2_inner));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(tmp5 + static_cast<long>(8L*x2_inner));
                                auto tmp1 = tmp0.neg();
                                auto tmp4 = tmp1 + tmp3;
                                auto tmp7 = tmp4 * tmp6;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                                tmp_acc1_vec = tmp_acc1_vec + tmp4;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp2 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr8[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp4 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = tmp0.neg();
                            auto tmp3 = tmp1 + tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            tmp_acc1_vec = tmp_acc1_vec + tmp3;
                        }
                        tmp_acc0_vec.store(out_ptr9 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc1_vec.store(out_ptr10 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr10[static_cast<long>(x1)];
                            auto tmp6 = in_ptr11[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = out_ptr6[static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp5 = in_ptr11[static_cast<long>(x0)];
                        auto tmp6 = in_ptr9[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr10[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr12[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(2.657312925170068e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp34.store(out_ptr15 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (37632L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x1 + (768L*x2) + (37632L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp5 = in_ptr11[static_cast<long>(x0)];
                        auto tmp6 = in_ptr9[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr10[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr12[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(2.657312925170068e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1204224L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (49L*x2) + (49L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(2.657312925170068e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (37632L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(7L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(7L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(7L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(7L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (7L*x1) + (49L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(48L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (49L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (49L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (49L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(2.657312925170068e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp34.store(out_ptr15 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(2.657312925170068e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1204224L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (49L*x2) + (49L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(2.657312925170068e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (37632L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(7L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(7L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(7L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(7L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (7L*x1) + (49L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(48L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (49L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (49L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (49L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(2.657312925170068e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp34.store(out_ptr15 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(2.657312925170068e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1204224L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (49L*x2) + (49L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(2.657312925170068e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (37632L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(7L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(7L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(7L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(7L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (7L*x1) + (49L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(48L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (49L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (49L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (49L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(2.657312925170068e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp34.store(out_ptr15 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(2.657312925170068e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1204224L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (49L*x2) + (49L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(2.657312925170068e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (37632L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(7L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(7L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(7L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(7L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (7L*x1) + (49L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(48L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (49L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (49L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (49L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(2.657312925170068e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp34.store(out_ptr15 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(2.657312925170068e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1204224L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_mul_native_group_norm_backward_sub_sum_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(768L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(2.657312925170068e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (768L*x1) + (37632L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (768L*x2) + (37632L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(2.657312925170068e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (49L*x0) + (37632L*x1)), static_cast<long>(49L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (768L*x2_inner) + (37632L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (49L*x0) + (49L*x0_inner) + (37632L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (768L*x2) + (37632L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(7L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(7L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((7L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((7L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((7L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(7L, 2L + x1))))) + (49L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(7L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(7L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(7L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(7L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(7L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(7L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(7L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (7L*x1) + (49L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp0, 8);
                            float tmp3[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)), static_cast<long>(49L), tmp3, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(tmp3 + static_cast<long>(8L*x2_inner));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0)));
                                auto tmp2 = tmp1.neg();
                                auto tmp5 = tmp2 + tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                            }
                        }
                        for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr6[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr8[static_cast<long>(x2 + (49L*x1) + (49L*x1_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (768L*x2) + (37632L*x0)));
                            auto tmp1 = tmp0.neg();
                            auto tmp3 = tmp1 + tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        }
                        tmp_acc0_vec.store(out_ptr9 + static_cast<long>(x1 + (768L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6144L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(48L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (49L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        tmp_acc0_vec = tmp_acc0_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(48L); x1<static_cast<long>(49L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (49L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (49L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        tmp_acc0 = tmp_acc0 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (768L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (768L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(768L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(48L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (768L*x2) + (768L*x2_inner) + (37632L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(2.657312925170068e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        tmp31.store(in_out_ptr1 + static_cast<long>(x2 + (49L*x1) + (37632L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(48L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (49L*x1) + (37632L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_ptr1[static_cast<long>(x1 + (768L*x2) + (37632L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(2.657312925170068e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        in_out_ptr1[static_cast<long>(x2 + (49L*x1) + (37632L*x0))] = tmp28;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_mul_sum_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto out_ptr8 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(75264L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (75264L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (75264L*x0)));
                    auto tmp2 = out_ptr3[static_cast<long>(x0)];
                    auto tmp3 = in_ptr7[static_cast<long>(x0)];
                    auto tmp5 = out_ptr2[static_cast<long>(x0)];
                    auto tmp7 = in_ptr6[static_cast<long>(x0)];
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                    auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                    auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                    auto tmp11 = static_cast<float>(1.328656462585034e-05);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp13 = decltype(tmp12)(-tmp12);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                    auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp18 = at::vec::Vectorized<float>(tmp17);
                    auto tmp19 = tmp1 + tmp18;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr1 + static_cast<long>(x1 + (75264L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr6 + static_cast<long>(x1 + (384L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1568L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x1)));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(14L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp12 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp20 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp28 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp36 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp42 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp48 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp56 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp62 = out_ptr6[static_cast<long>(x1 + (384L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(14L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2))))) + (75264L*x0))];
                            auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))));
                            auto tmp2 = tmp0 / tmp1;
                            auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x2));
                            auto tmp4 = c10::convert<int>(std::min(14L, 2L + x2));
                            auto tmp5 = tmp3 < tmp4;
                            auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x3));
                            auto tmp7 = c10::convert<int>(std::min(14L, 2L + x3));
                            auto tmp8 = tmp6 < tmp7;
                            auto tmp9 = tmp5 & tmp8;
                            auto tmp10 = static_cast<float>(0.0);
                            auto tmp11 = tmp9 ? tmp2 : tmp10;
                            auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x3))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x3))))));
                            auto tmp14 = tmp12 / tmp13;
                            auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x3)));
                            auto tmp16 = tmp15 < tmp7;
                            auto tmp17 = tmp5 & tmp16;
                            auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                            auto tmp19 = tmp17 ? tmp18 : tmp11;
                            auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x3))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x3))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                            auto tmp22 = tmp20 / tmp21;
                            auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x3)));
                            auto tmp24 = tmp23 < tmp7;
                            auto tmp25 = tmp5 & tmp24;
                            auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                            auto tmp27 = tmp25 ? tmp26 : tmp19;
                            auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x3))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                            auto tmp30 = tmp28 / tmp29;
                            auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                            auto tmp32 = tmp31 < tmp4;
                            auto tmp33 = tmp32 & tmp8;
                            auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                            auto tmp35 = tmp33 ? tmp34 : tmp27;
                            auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                            auto tmp38 = tmp36 / tmp37;
                            auto tmp39 = tmp32 & tmp16;
                            auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                            auto tmp41 = tmp39 ? tmp40 : tmp35;
                            auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x2)));
                            auto tmp44 = tmp42 / tmp43;
                            auto tmp45 = tmp32 & tmp24;
                            auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                            auto tmp47 = tmp45 ? tmp46 : tmp41;
                            auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x3))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x3)))));
                            auto tmp50 = tmp48 / tmp49;
                            auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                            auto tmp52 = tmp51 < tmp4;
                            auto tmp53 = tmp52 & tmp8;
                            auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                            auto tmp55 = tmp53 ? tmp54 : tmp47;
                            auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x3))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x3)));
                            auto tmp58 = tmp56 / tmp57;
                            auto tmp59 = tmp52 & tmp16;
                            auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                            auto tmp61 = tmp59 ? tmp60 : tmp55;
                            auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x2)) + (std::max(0L, (-1L) + x3)));
                            auto tmp64 = tmp62 / tmp63;
                            auto tmp65 = tmp52 & tmp24;
                            auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                            auto tmp67 = tmp65 ? tmp66 : tmp61;
                            out_ptr8[static_cast<long>(x3 + (14L*x2) + (196L*x1) + (75264L*x0))] = tmp67;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp2[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp2, 8);
                            float tmp5[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp5, 8);
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp2, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(tmp2 + static_cast<long>(8L*x2_inner));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(tmp5 + static_cast<long>(8L*x2_inner));
                                auto tmp1 = tmp0.neg();
                                auto tmp4 = tmp1 + tmp3;
                                auto tmp7 = tmp4 * tmp6;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                                tmp_acc1_vec = tmp_acc1_vec + tmp4;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp2 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr8[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp4 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = tmp0.neg();
                            auto tmp3 = tmp1 + tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            tmp_acc1_vec = tmp_acc1_vec + tmp3;
                        }
                        tmp_acc0_vec.store(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                        auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr8[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                        auto tmp10 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp5);
                        auto tmp8 = tmp7 * tmp6;
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = tmp31 * tmp32;
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp31.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))] = tmpbuf[x1_inner]; }
                        tmp33.store(out_ptr15 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (196L*x2) + (196L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0) reduction(+:tmp_acc1)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp4 = in_ptr1[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                        tmp_acc0 = tmp_acc0 + tmp5;
                        tmp_acc1 = tmp_acc1 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))] = tmpbuf[x2_inner]; }
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp3 = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp9 = in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp10 = out_ptr12[static_cast<long>(x0)];
                        auto tmp11 = in_ptr9[static_cast<long>(x0)];
                        auto tmp13 = out_ptr11[static_cast<long>(x0)];
                        auto tmp29 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = decltype(tmp1)(-tmp1);
                        auto tmp4 = decltype(tmp2)(tmp2 + tmp3);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = decltype(tmp4)(tmp4 * tmp7);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp14 = decltype(tmp12)(tmp12 - tmp13);
                        auto tmp15 = decltype(tmp14)(tmp14 * tmp5);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = static_cast<float>(1.328656462585034e-05);
                        auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                        auto tmp20 = decltype(tmp9)(tmp9 * tmp19);
                        auto tmp21 = decltype(tmp8)(tmp8 + tmp20);
                        auto tmp22 = decltype(tmp19)(-tmp19);
                        auto tmp23 = decltype(tmp22)(tmp22 * tmp11);
                        auto tmp24 = decltype(tmp10)(tmp10 * tmp5);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp18);
                        auto tmp26 = decltype(tmp23)(tmp23 - tmp25);
                        auto tmp27 = decltype(tmp21)(tmp21 + tmp26);
                        auto tmp28 = decltype(tmp0)(tmp0 + tmp27);
                        auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                        in_out_ptr2[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp28;
                        out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0))] = tmp30;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr2[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = tmp0 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2408448L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_mul_native_group_norm_backward_sub_sum_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(384L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(1.328656462585034e-05);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (384L*x1) + (75264L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)));
                    }
                    #pragma omp simd simdlen(4) 
                    for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x1 + (384L*x2) + (75264L*x0))];
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp20 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(1.328656462585034e-05);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = decltype(tmp1)(tmp1 + tmp17);
                        auto tmp19 = decltype(tmp0)(tmp0 + tmp18);
                        auto tmp21 = decltype(tmp19)(tmp19 * tmp20);
                        in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp19;
                        out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0))] = tmp21;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (196L*x0) + (75264L*x1)), static_cast<long>(196L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (384L*x2_inner) + (75264L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x0) + (196L*x0_inner) + (75264L*x1))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (384L*x2) + (75264L*x1)));
                            auto tmp3 = tmp1 - tmp2;
                            auto tmp4 = tmp0 * tmp3;
                            tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((14L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((14L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((14L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(14L, 2L + x1))))) + (196L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(14L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(14L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(14L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(14L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(14L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(14L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(14L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (14L*x1) + (196L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr6 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp0, 8);
                            float tmp3[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (196L*x1) + (75264L*x0)), static_cast<long>(196L), tmp3, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(tmp3 + static_cast<long>(8L*x2_inner));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x2) + (384L*x2_inner) + (75264L*x0)));
                                auto tmp2 = tmp1.neg();
                                auto tmp5 = tmp2 + tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                            }
                        }
                        for(long x2=static_cast<long>(192L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr6[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp2 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr8[static_cast<long>(x2 + (196L*x1) + (196L*x1_inner) + (75264L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (384L*x2) + (75264L*x0)));
                            auto tmp1 = tmp0.neg();
                            auto tmp3 = tmp1 + tmp2;
                            auto tmp5 = tmp3 * tmp4;
                            tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        }
                        tmp_acc0_vec.store(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3072L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (196L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        tmp_acc0_vec = tmp_acc0_vec + tmp3;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(192L); x1<static_cast<long>(196L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>(x1 + (196L*x0))];
                        auto tmp2 = out_ptr8[static_cast<long>(x1 + (196L*x0))];
                        auto tmp1 = decltype(tmp0)(-tmp0);
                        auto tmp3 = decltype(tmp1)(tmp1 + tmp2);
                        tmp_acc0 = tmp_acc0 + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (384L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(384L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (384L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(384L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(196L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (196L*x1) + (75264L*x0) + (75264L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = out_ptr6[static_cast<long>(x2 + (196L*x1) + (75264L*x0) + (75264L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = out_ptr8[static_cast<long>(x2 + (196L*x1) + (75264L*x0) + (75264L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr1[static_cast<long>(x1 + (384L*x2) + (75264L*x0) + (75264L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr12 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                        auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr11 + static_cast<long>(x0));
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 * tmp7;
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = tmp11 * tmp12;
                        auto tmp15 = tmp13 - tmp14;
                        auto tmp16 = tmp15 * tmp5;
                        auto tmp17 = tmp16 * tmp5;
                        auto tmp18 = tmp17 * tmp5;
                        auto tmp19 = static_cast<float>(1.328656462585034e-05);
                        auto tmp20 = at::vec::Vectorized<float>(tmp19);
                        auto tmp21 = tmp18 * tmp20;
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = tmp21.neg();
                        auto tmp25 = tmp24 * tmp12;
                        auto tmp26 = tmp11 * tmp5;
                        auto tmp27 = tmp26 * tmp20;
                        auto tmp28 = tmp25 - tmp27;
                        auto tmp29 = tmp23 + tmp28;
                        auto tmp30 = tmp0 + tmp29;
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp30.store(tmpbuf); for (long x0_inner = 0; x0_inner < 8; x0_inner++) out_ptr15[static_cast<long>(x1 + (384L*x2) + (75264L*x0) + (75264L*x0_inner))] = tmpbuf[x0_inner]; }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_mul_sum_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (192L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (192L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (192L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4816896L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto out_ptr8 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (784L*x2) + (784L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(6.64328231292517e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(150528L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (150528L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (150528L*x0)));
                    auto tmp2 = out_ptr3[static_cast<long>(x0)];
                    auto tmp3 = in_ptr7[static_cast<long>(x0)];
                    auto tmp5 = out_ptr2[static_cast<long>(x0)];
                    auto tmp7 = in_ptr6[static_cast<long>(x0)];
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                    auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                    auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                    auto tmp11 = static_cast<float>(6.64328231292517e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp13 = decltype(tmp12)(-tmp12);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                    auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp18 = at::vec::Vectorized<float>(tmp17);
                    auto tmp19 = tmp1 + tmp18;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr1 + static_cast<long>(x1 + (150528L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr6 + static_cast<long>(x1 + (192L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(6272L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0 + (192L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (192L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (192L*x1)));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp12 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp20 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp28 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp36 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp42 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp48 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp56 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp62 = out_ptr6[static_cast<long>(x1 + (192L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(28L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2))))) + (150528L*x0))];
                            auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))));
                            auto tmp2 = tmp0 / tmp1;
                            auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x2));
                            auto tmp4 = c10::convert<int>(std::min(28L, 2L + x2));
                            auto tmp5 = tmp3 < tmp4;
                            auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x3));
                            auto tmp7 = c10::convert<int>(std::min(28L, 2L + x3));
                            auto tmp8 = tmp6 < tmp7;
                            auto tmp9 = tmp5 & tmp8;
                            auto tmp10 = static_cast<float>(0.0);
                            auto tmp11 = tmp9 ? tmp2 : tmp10;
                            auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x3))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x3))))));
                            auto tmp14 = tmp12 / tmp13;
                            auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x3)));
                            auto tmp16 = tmp15 < tmp7;
                            auto tmp17 = tmp5 & tmp16;
                            auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                            auto tmp19 = tmp17 ? tmp18 : tmp11;
                            auto tmp21 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x3))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x3))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                            auto tmp22 = tmp20 / tmp21;
                            auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x3)));
                            auto tmp24 = tmp23 < tmp7;
                            auto tmp25 = tmp5 & tmp24;
                            auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                            auto tmp27 = tmp25 ? tmp26 : tmp19;
                            auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x3))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))));
                            auto tmp30 = tmp28 / tmp29;
                            auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                            auto tmp32 = tmp31 < tmp4;
                            auto tmp33 = tmp32 & tmp8;
                            auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                            auto tmp35 = tmp33 ? tmp34 : tmp27;
                            auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))));
                            auto tmp38 = tmp36 / tmp37;
                            auto tmp39 = tmp32 & tmp16;
                            auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                            auto tmp41 = tmp39 ? tmp40 : tmp35;
                            auto tmp43 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x2)));
                            auto tmp44 = tmp42 / tmp43;
                            auto tmp45 = tmp32 & tmp24;
                            auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                            auto tmp47 = tmp45 ? tmp46 : tmp41;
                            auto tmp49 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x3))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x3)))));
                            auto tmp50 = tmp48 / tmp49;
                            auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                            auto tmp52 = tmp51 < tmp4;
                            auto tmp53 = tmp52 & tmp8;
                            auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                            auto tmp55 = tmp53 ? tmp54 : tmp47;
                            auto tmp57 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x3))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x3)));
                            auto tmp58 = tmp56 / tmp57;
                            auto tmp59 = tmp52 & tmp16;
                            auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                            auto tmp61 = tmp59 ? tmp60 : tmp55;
                            auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(28L, 4L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x2)) + (std::max(0L, (-1L) + x3)));
                            auto tmp64 = tmp62 / tmp63;
                            auto tmp65 = tmp52 & tmp24;
                            auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                            auto tmp67 = tmp65 ? tmp66 : tmp61;
                            out_ptr8[static_cast<long>(x3 + (28L*x2) + (784L*x1) + (150528L*x0))] = tmp67;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp2[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp2, 8);
                            float tmp5[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp5, 8);
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp2, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(tmp2 + static_cast<long>(8L*x2_inner));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(tmp5 + static_cast<long>(8L*x2_inner));
                                auto tmp1 = tmp0.neg();
                                auto tmp4 = tmp1 + tmp3;
                                auto tmp7 = tmp4 * tmp6;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                                tmp_acc1_vec = tmp_acc1_vec + tmp4;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr9 + static_cast<long>(x1 + (192L*x0)));
                        tmp_acc1_vec.store(out_ptr10 + static_cast<long>(x1 + (192L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (192L*x2) + (150528L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (192L*x2) + (150528L*x0)));
                        auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr8[static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                        auto tmp10 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp5);
                        auto tmp8 = tmp7 * tmp6;
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(6.64328231292517e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = tmp31 * tmp32;
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp31.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr2[static_cast<long>(x2 + (784L*x1) + (784L*x1_inner) + (150528L*x0))] = tmpbuf[x1_inner]; }
                        tmp33.store(out_ptr15 + static_cast<long>(x1 + (192L*x2) + (150528L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4816896L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (784L*x2) + (784L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(6.64328231292517e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(6.64328231292517e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(28L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(28L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(6.64328231292517e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))] = tmpbuf[x2_inner]; }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4816896L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (784L*x2) + (784L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(6.64328231292517e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(6.64328231292517e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(28L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(28L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(6.64328231292517e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))] = tmpbuf[x2_inner]; }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4816896L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (784L*x2) + (784L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(6.64328231292517e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(6.64328231292517e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(28L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(28L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(6.64328231292517e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))] = tmpbuf[x2_inner]; }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4816896L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (784L*x2) + (784L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(6.64328231292517e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(6.64328231292517e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(28L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(28L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(6.64328231292517e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))] = tmpbuf[x2_inner]; }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4816896L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_mul_native_group_norm_backward_sub_sum_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (192L*x2) + (150528L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (192L*x2) + (150528L*x0)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (192L*x2) + (150528L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (192L*x2) + (150528L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(192L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(6.64328231292517e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (192L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(6.64328231292517e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (784L*x0) + (150528L*x1)), static_cast<long>(784L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (192L*x2) + (192L*x2_inner) + (150528L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((28L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((28L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((28L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(28L, 2L + x1))))) + (784L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(28L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(28L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(28L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(28L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(28L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(28L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(28L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (28L*x1) + (784L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr6 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp0, 8);
                            float tmp3[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (784L*x1) + (150528L*x0)), static_cast<long>(784L), tmp3, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(tmp3 + static_cast<long>(8L*x2_inner));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (192L*x2) + (192L*x2_inner) + (150528L*x0)));
                                auto tmp2 = tmp1.neg();
                                auto tmp5 = tmp2 + tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr9 + static_cast<long>(x1 + (192L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1536L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(784L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (784L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        tmp_acc0_vec = tmp_acc0_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (192L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(192L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (192L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(192L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (784L*x1) + (150528L*x0) + (150528L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = out_ptr6[static_cast<long>(x2 + (784L*x1) + (150528L*x0) + (150528L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = out_ptr8[static_cast<long>(x2 + (784L*x1) + (150528L*x0) + (150528L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr1[static_cast<long>(x1 + (192L*x2) + (150528L*x0) + (150528L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr12 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                        auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr11 + static_cast<long>(x0));
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 * tmp7;
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = tmp11 * tmp12;
                        auto tmp15 = tmp13 - tmp14;
                        auto tmp16 = tmp15 * tmp5;
                        auto tmp17 = tmp16 * tmp5;
                        auto tmp18 = tmp17 * tmp5;
                        auto tmp19 = static_cast<float>(6.64328231292517e-06);
                        auto tmp20 = at::vec::Vectorized<float>(tmp19);
                        auto tmp21 = tmp18 * tmp20;
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = tmp21.neg();
                        auto tmp25 = tmp24 * tmp12;
                        auto tmp26 = tmp11 * tmp5;
                        auto tmp27 = tmp26 * tmp20;
                        auto tmp28 = tmp25 - tmp27;
                        auto tmp29 = tmp23 + tmp28;
                        auto tmp30 = tmp0 + tmp29;
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp30.store(tmpbuf); for (long x0_inner = 0; x0_inner < 8; x0_inner++) out_ptr15[static_cast<long>(x1 + (192L*x2) + (150528L*x0) + (150528L*x0_inner))] = tmpbuf[x0_inner]; }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_mul_sum_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (96L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(9633792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(96L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (3136L*x2) + (3136L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(3.321641156462585e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(301056L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (301056L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (301056L*x0)));
                    auto tmp2 = out_ptr3[static_cast<long>(x0)];
                    auto tmp3 = in_ptr7[static_cast<long>(x0)];
                    auto tmp5 = out_ptr2[static_cast<long>(x0)];
                    auto tmp7 = in_ptr6[static_cast<long>(x0)];
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                    auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                    auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                    auto tmp11 = static_cast<float>(3.321641156462585e-06);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp13 = decltype(tmp12)(-tmp12);
                    auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                    auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                    auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                    auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                    auto tmp18 = at::vec::Vectorized<float>(tmp17);
                    auto tmp19 = tmp1 + tmp18;
                    auto tmp20 = tmp0 + tmp19;
                    tmp20.store(in_out_ptr1 + static_cast<long>(x1 + (301056L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp2 = tmp0 * tmp1;
                    tmp2.store(out_ptr6 + static_cast<long>(x1 + (96L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(25088L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (96L*x1)));
                        auto tmp3 = tmp1 - tmp2;
                        auto tmp4 = tmp0 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(56L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp12 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp20 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp28 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp36 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp42 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp48 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(std::max(0L, (-1L) + x3), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp56 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(1L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp62 = out_ptr6[static_cast<long>(x1 + (96L*(std::min(2L + (std::max(0L, (-1L) + x3)), (-1L) + (std::min(56L, 2L + x3))))) + (5376L*(std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2))))) + (301056L*x0))];
                            auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))));
                            auto tmp2 = tmp0 / tmp1;
                            auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x2));
                            auto tmp4 = c10::convert<int>(std::min(56L, 2L + x2));
                            auto tmp5 = tmp3 < tmp4;
                            auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x3));
                            auto tmp7 = c10::convert<int>(std::min(56L, 2L + x3));
                            auto tmp8 = tmp6 < tmp7;
                            auto tmp9 = tmp5 & tmp8;
                            auto tmp10 = static_cast<float>(0.0);
                            auto tmp11 = tmp9 ? tmp2 : tmp10;
                            auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x3))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x3))))));
                            auto tmp14 = tmp12 / tmp13;
                            auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x3)));
                            auto tmp16 = tmp15 < tmp7;
                            auto tmp17 = tmp5 & tmp16;
                            auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                            auto tmp19 = tmp17 ? tmp18 : tmp11;
                            auto tmp21 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x3))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x3))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                            auto tmp22 = tmp20 / tmp21;
                            auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x3)));
                            auto tmp24 = tmp23 < tmp7;
                            auto tmp25 = tmp5 & tmp24;
                            auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                            auto tmp27 = tmp25 ? tmp26 : tmp19;
                            auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x3))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))));
                            auto tmp30 = tmp28 / tmp29;
                            auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                            auto tmp32 = tmp31 < tmp4;
                            auto tmp33 = tmp32 & tmp8;
                            auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                            auto tmp35 = tmp33 ? tmp34 : tmp27;
                            auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))));
                            auto tmp38 = tmp36 / tmp37;
                            auto tmp39 = tmp32 & tmp16;
                            auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                            auto tmp41 = tmp39 ? tmp40 : tmp35;
                            auto tmp43 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x2)));
                            auto tmp44 = tmp42 / tmp43;
                            auto tmp45 = tmp32 & tmp24;
                            auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                            auto tmp47 = tmp45 ? tmp46 : tmp41;
                            auto tmp49 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x3))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x3))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x3)))));
                            auto tmp50 = tmp48 / tmp49;
                            auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                            auto tmp52 = tmp51 < tmp4;
                            auto tmp53 = tmp52 & tmp8;
                            auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                            auto tmp55 = tmp53 ? tmp54 : tmp47;
                            auto tmp57 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x3))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x3)));
                            auto tmp58 = tmp56 / tmp57;
                            auto tmp59 = tmp52 & tmp16;
                            auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                            auto tmp61 = tmp59 ? tmp60 : tmp55;
                            auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x3))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + x3))) + ((std::min(56L, 4L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x3))))) + ((-1L)*(std::max(0L, (-1L) + x3))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + x2)) + (std::max(0L, (-1L) + x3)));
                            auto tmp64 = tmp62 / tmp63;
                            auto tmp65 = tmp52 & tmp24;
                            auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                            auto tmp67 = tmp65 ? tmp66 : tmp61;
                            out_ptr8[static_cast<long>(x3 + (56L*x2) + (3136L*x1) + (301056L*x0))] = tmp67;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp2[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp2, 8);
                            float tmp5[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp5, 8);
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp2, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(tmp2 + static_cast<long>(8L*x2_inner));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(tmp5 + static_cast<long>(8L*x2_inner));
                                auto tmp1 = tmp0.neg();
                                auto tmp4 = tmp1 + tmp3;
                                auto tmp7 = tmp4 * tmp6;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                                tmp_acc1_vec = tmp_acc1_vec + tmp4;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr9 + static_cast<long>(x1 + (96L*x0)));
                        tmp_acc1_vec.store(out_ptr10 + static_cast<long>(x1 + (96L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (96L*x2) + (301056L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (96L*x2) + (301056L*x0)));
                        auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = out_ptr8[static_cast<long>(x2 + (3136L*x1) + (3136L*x1_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                        auto tmp10 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_out_ptr2[static_cast<long>(x2 + (3136L*x1) + (3136L*x1_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp5);
                        auto tmp8 = tmp7 * tmp6;
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(3.321641156462585e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = tmp31 * tmp32;
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp31.store(tmpbuf); for (long x1_inner = 0; x1_inner < 8; x1_inner++) in_out_ptr2[static_cast<long>(x2 + (3136L*x1) + (3136L*x1_inner) + (301056L*x0))] = tmpbuf[x1_inner]; }
                        tmp33.store(out_ptr15 + static_cast<long>(x1 + (96L*x2) + (301056L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(9633792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(96L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (3136L*x2) + (3136L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(3.321641156462585e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(3.321641156462585e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(56L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(56L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (56L*x1) + (3136L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(3.321641156462585e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))] = tmpbuf[x2_inner]; }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(9633792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto out_ptr8 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(96L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (3136L*x2) + (3136L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(3.321641156462585e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(3.321641156462585e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(56L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(56L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (56L*x1) + (3136L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(3.321641156462585e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))] = tmpbuf[x2_inner]; }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(9633792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(96L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (3136L*x2) + (3136L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(3.321641156462585e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(3.321641156462585e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(56L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(56L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (56L*x1) + (3136L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(3.321641156462585e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))] = tmpbuf[x2_inner]; }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(9633792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       float* in_out_ptr2,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16)
{
    auto in_ptr0 = in_out_ptr0;
    auto in_ptr1 = in_out_ptr2;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp1, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(tmp1 + static_cast<long>(8L*x2_inner));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                                auto tmp5 = tmp3 - tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                auto tmp8 = tmp2 + tmp7;
                                auto tmp9 = tmp0 * tmp8;
                                tmp_acc0_vec = tmp_acc0_vec + tmp9;
                                tmp_acc1_vec = tmp_acc1_vec + tmp0;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(96L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_ptr1[static_cast<long>(x1 + (3136L*x2) + (3136L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(3.321641156462585e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(3.321641156462585e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(56L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(56L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (56L*x1) + (3136L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        auto tmp5 = tmp3 * tmp4;
                        tmp_acc0_vec = tmp_acc0_vec + tmp5;
                        tmp_acc1_vec = tmp_acc1_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr9[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp5 = in_ptr10[static_cast<long>(x0)];
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_out_ptr2 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp11 = out_ptr12[static_cast<long>(x0)];
                        auto tmp12 = in_ptr9[static_cast<long>(x0)];
                        auto tmp14 = out_ptr11[static_cast<long>(x0)];
                        auto tmp32 = in_ptr11[static_cast<long>(x1)];
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp8 = at::vec::Vectorized<float>(tmp7);
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp15 = decltype(tmp13)(tmp13 - tmp14);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp5);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp5);
                        auto tmp19 = static_cast<float>(3.321641156462585e-06);
                        auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                        auto tmp21 = at::vec::Vectorized<float>(tmp20);
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = decltype(tmp20)(-tmp20);
                        auto tmp25 = decltype(tmp24)(tmp24 * tmp12);
                        auto tmp26 = decltype(tmp11)(tmp11 * tmp5);
                        auto tmp27 = decltype(tmp26)(tmp26 * tmp19);
                        auto tmp28 = decltype(tmp25)(tmp25 - tmp27);
                        auto tmp29 = at::vec::Vectorized<float>(tmp28);
                        auto tmp30 = tmp23 + tmp29;
                        auto tmp31 = tmp0 + tmp30;
                        auto tmp33 = at::vec::Vectorized<float>(tmp32);
                        auto tmp34 = tmp31 * tmp33;
                        tmp31.store(in_out_ptr2 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp34.store(tmpbuf); for (long x2_inner = 0; x2_inner < 8; x2_inner++) out_ptr15[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))] = tmpbuf[x2_inner]; }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr2 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = tmp1 * tmp2;
                                tmp_acc0_vec = tmp_acc0_vec + tmp3;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr16 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_backward_gelu_gelu_backward_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(9633792L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.7071067811865476);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp4.erf();
                auto tmp6 = static_cast<float>(1.0);
                auto tmp7 = at::vec::Vectorized<float>(tmp6);
                auto tmp8 = tmp5 + tmp7;
                auto tmp9 = static_cast<float>(0.5);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp1 * tmp1;
                auto tmp13 = static_cast<float>(-0.5);
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 * tmp14;
                auto tmp16 = tmp15.exp();
                auto tmp17 = static_cast<float>(0.3989422804014327);
                auto tmp18 = at::vec::Vectorized<float>(tmp17);
                auto tmp19 = tmp16 * tmp18;
                auto tmp20 = tmp1 * tmp19;
                auto tmp21 = tmp11 + tmp20;
                auto tmp22 = tmp0 * tmp21;
                tmp22.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_avg_pool2d_backward_mul_native_group_norm_backward_sub_sum_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (96L*x2) + (301056L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (96L*x2) + (301056L*x0)));
                            auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (96L*x2) + (301056L*x0)));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (96L*x2) + (301056L*x0)));
                            auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp4 = tmp2 - tmp3;
                            auto tmp6 = tmp4 * tmp5;
                            auto tmp7 = tmp1 + tmp6;
                            auto tmp8 = tmp0 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                        tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr3[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(96L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp1 = in_ptr6[static_cast<long>(x0)];
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2));
                        auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                        auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2));
                        auto tmp13 = out_ptr3[static_cast<long>(x0)];
                        auto tmp14 = in_ptr7[static_cast<long>(x0)];
                        auto tmp16 = out_ptr2[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>(tmp1);
                        auto tmp4 = tmp3 * tmp2;
                        auto tmp5 = tmp0 * tmp4;
                        auto tmp9 = tmp7 - tmp8;
                        auto tmp11 = tmp9 * tmp10;
                        auto tmp12 = tmp6 + tmp11;
                        auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                        auto tmp17 = decltype(tmp15)(tmp15 - tmp16);
                        auto tmp18 = decltype(tmp17)(tmp17 * tmp1);
                        auto tmp19 = decltype(tmp18)(tmp18 * tmp1);
                        auto tmp20 = decltype(tmp19)(tmp19 * tmp1);
                        auto tmp21 = static_cast<float>(3.321641156462585e-06);
                        auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                        auto tmp23 = at::vec::Vectorized<float>(tmp22);
                        auto tmp24 = tmp12 * tmp23;
                        auto tmp25 = tmp5 + tmp24;
                        tmp25.store(in_out_ptr0 + static_cast<long>(x2 + (96L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr7[static_cast<long>(x1)];
                            auto tmp6 = in_ptr6[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x2_inner = 0; x2_inner < 8; x2_inner++) tmpbuf[x2_inner] = in_out_ptr0[static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp2 = out_ptr3[static_cast<long>(x0)];
                        auto tmp3 = in_ptr7[static_cast<long>(x0)];
                        auto tmp5 = out_ptr2[static_cast<long>(x0)];
                        auto tmp7 = in_ptr6[static_cast<long>(x0)];
                        auto tmp21 = in_ptr4[static_cast<long>(x1)];
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp6 = decltype(tmp4)(tmp4 - tmp5);
                        auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                        auto tmp9 = decltype(tmp8)(tmp8 * tmp7);
                        auto tmp10 = decltype(tmp9)(tmp9 * tmp7);
                        auto tmp11 = static_cast<float>(3.321641156462585e-06);
                        auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                        auto tmp13 = decltype(tmp12)(-tmp12);
                        auto tmp14 = decltype(tmp13)(tmp13 * tmp3);
                        auto tmp15 = decltype(tmp2)(tmp2 * tmp7);
                        auto tmp16 = decltype(tmp15)(tmp15 * tmp11);
                        auto tmp17 = decltype(tmp14)(tmp14 - tmp16);
                        auto tmp18 = at::vec::Vectorized<float>(tmp17);
                        auto tmp19 = tmp1 + tmp18;
                        auto tmp20 = tmp0 + tmp19;
                        auto tmp22 = at::vec::Vectorized<float>(tmp21);
                        auto tmp23 = tmp20 * tmp22;
                        tmp20.store(in_out_ptr1 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                        tmp23.store(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                    {
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(in_out_ptr1 + static_cast<long>(x2 + (3136L*x0) + (301056L*x1)), static_cast<long>(3136L), tmp0, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (96L*x2) + (96L*x2_inner) + (301056L*x1)));
                                auto tmp4 = tmp2 - tmp3;
                                auto tmp5 = tmp1 * tmp4;
                                tmp_acc0_vec = tmp_acc0_vec + tmp5;
                            }
                        }
                    }
                    tmp_acc0_vec.store(out_ptr7 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp12 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp20 = out_ptr6[static_cast<long>((56L*(std::min(std::max(0L, (-1L) + x1), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp28 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp36 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp42 = out_ptr6[static_cast<long>((56L*(std::min(1L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp48 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(std::max(0L, (-1L) + x2), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp56 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(1L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp62 = out_ptr6[static_cast<long>((56L*(std::min(2L + (std::max(0L, (-1L) + x1)), (-1L) + (std::min(56L, 2L + x1))))) + (3136L*x0) + (std::min(2L + (std::max(0L, (-1L) + x2)), (-1L) + (std::min(56L, 2L + x2)))))];
                        auto tmp1 = c10::convert<int>(((std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))));
                        auto tmp2 = tmp0 / tmp1;
                        auto tmp3 = c10::convert<int>(std::max(0L, (-1L) + x1));
                        auto tmp4 = c10::convert<int>(std::min(56L, 2L + x1));
                        auto tmp5 = tmp3 < tmp4;
                        auto tmp6 = c10::convert<int>(std::max(0L, (-1L) + x2));
                        auto tmp7 = c10::convert<int>(std::min(56L, 2L + x2));
                        auto tmp8 = tmp6 < tmp7;
                        auto tmp9 = tmp5 & tmp8;
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = tmp9 ? tmp2 : tmp10;
                        auto tmp13 = c10::convert<int>(((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))));
                        auto tmp14 = tmp12 / tmp13;
                        auto tmp15 = c10::convert<int>(1L + (std::max(0L, (-1L) + x2)));
                        auto tmp16 = tmp15 < tmp7;
                        auto tmp17 = tmp5 & tmp16;
                        auto tmp18 = decltype(tmp11)(tmp11 + tmp14);
                        auto tmp19 = tmp17 ? tmp18 : tmp11;
                        auto tmp21 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x2))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 2L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x1)))));
                        auto tmp22 = tmp20 / tmp21;
                        auto tmp23 = c10::convert<int>(2L + (std::max(0L, (-1L) + x2)));
                        auto tmp24 = tmp23 < tmp7;
                        auto tmp25 = tmp5 & tmp24;
                        auto tmp26 = decltype(tmp19)(tmp19 + tmp22);
                        auto tmp27 = tmp25 ? tmp26 : tmp19;
                        auto tmp29 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp30 = tmp28 / tmp29;
                        auto tmp31 = c10::convert<int>(1L + (std::max(0L, (-1L) + x1)));
                        auto tmp32 = tmp31 < tmp4;
                        auto tmp33 = tmp32 & tmp8;
                        auto tmp34 = decltype(tmp27)(tmp27 + tmp30);
                        auto tmp35 = tmp33 ? tmp34 : tmp27;
                        auto tmp37 = c10::convert<int>(((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))));
                        auto tmp38 = tmp36 / tmp37;
                        auto tmp39 = tmp32 & tmp16;
                        auto tmp40 = decltype(tmp35)(tmp35 + tmp38);
                        auto tmp41 = tmp39 ? tmp40 : tmp35;
                        auto tmp43 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 3L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)));
                        auto tmp44 = tmp42 / tmp43;
                        auto tmp45 = tmp32 & tmp24;
                        auto tmp46 = decltype(tmp41)(tmp41 + tmp44);
                        auto tmp47 = tmp45 ? tmp46 : tmp41;
                        auto tmp49 = c10::convert<int>(((-1L)*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))) + ((std::min(56L, 2L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 2L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + (std::max(0L, (-1L) + x2)))));
                        auto tmp50 = tmp48 / tmp49;
                        auto tmp51 = c10::convert<int>(2L + (std::max(0L, (-1L) + x1)));
                        auto tmp52 = tmp51 < tmp4;
                        auto tmp53 = tmp52 & tmp8;
                        auto tmp54 = decltype(tmp47)(tmp47 + tmp50);
                        auto tmp55 = tmp53 ? tmp54 : tmp47;
                        auto tmp57 = c10::convert<int>(((-1L)*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 3L + (std::max(0L, (-1L) + x2))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 3L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x2)));
                        auto tmp58 = tmp56 / tmp57;
                        auto tmp59 = tmp52 & tmp16;
                        auto tmp60 = decltype(tmp55)(tmp55 + tmp58);
                        auto tmp61 = tmp59 ? tmp60 : tmp55;
                        auto tmp63 = c10::convert<int>(1L + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + ((-1L)*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((std::max(0L, (-1L) + x1))*(std::max(0L, (-1L) + x2))) + ((std::min(56L, 4L + (std::max(0L, (-1L) + x1))))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x1))*(std::min(56L, 4L + (std::max(0L, (-1L) + x2))))) + ((-1L)*(std::max(0L, (-1L) + x2))*(std::min(56L, 4L + (std::max(0L, (-1L) + x1))))) + (std::max(0L, (-1L) + x1)) + (std::max(0L, (-1L) + x2)));
                        auto tmp64 = tmp62 / tmp63;
                        auto tmp65 = tmp52 & tmp24;
                        auto tmp66 = decltype(tmp61)(tmp61 + tmp64);
                        auto tmp67 = tmp65 ? tmp66 : tmp61;
                        out_ptr8[static_cast<long>(x2 + (56L*x1) + (3136L*x0))] = tmp67;
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(8L))
                        {
                            float tmp0[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr6 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp0, 8);
                            float tmp3[8*8] __attribute__ ((aligned (8)));
                            at::vec::transpose_mxn<float,8,8>(out_ptr8 + static_cast<long>(x2 + (3136L*x1) + (301056L*x0)), static_cast<long>(3136L), tmp3, 8);
                            for (long x2_inner = 0; x2_inner < 8; x2_inner++)
                            {
                                auto tmp1 = at::vec::Vectorized<float>::loadu(tmp0 + static_cast<long>(8L*x2_inner));
                                auto tmp4 = at::vec::Vectorized<float>::loadu(tmp3 + static_cast<long>(8L*x2_inner));
                                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (96L*x2) + (96L*x2_inner) + (301056L*x0)));
                                auto tmp2 = tmp1.neg();
                                auto tmp5 = tmp2 + tmp4;
                                auto tmp7 = tmp5 * tmp6;
                                tmp_acc0_vec = tmp_acc0_vec + tmp7;
                            }
                        }
                        tmp_acc0_vec.store(out_ptr9 + static_cast<long>(x1 + (96L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(768L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3136L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr6 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr8 + static_cast<long>(x1 + (3136L*x0)));
                        auto tmp1 = tmp0.neg();
                        auto tmp3 = tmp1 + tmp2;
                        tmp_acc0_vec = tmp_acc0_vec + tmp3;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr10[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(8L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x1 + (96L*x0)));
                            auto tmp2 = tmp0 * tmp1;
                            auto tmp4 = tmp3 * tmp1;
                            tmp_acc0_vec = tmp_acc0_vec + tmp2;
                            tmp_acc1_vec = tmp_acc1_vec + tmp4;
                        }
                        tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                        out_ptr11[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                        tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                        out_ptr12[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(96L); x0+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        float tmp_acc1 = 0;
                        at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                        for(long x1=static_cast<long>(0L); x1<static_cast<long>(8L); x1+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr9 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr10 + static_cast<long>(x0 + (96L*x1)));
                            auto tmp2 = in_ptr9[static_cast<long>(x1)];
                            auto tmp6 = in_ptr10[static_cast<long>(x1)];
                            auto tmp3 = at::vec::Vectorized<float>(tmp2);
                            auto tmp4 = tmp1 * tmp3;
                            auto tmp5 = tmp0 - tmp4;
                            auto tmp7 = at::vec::Vectorized<float>(tmp6);
                            auto tmp8 = tmp5 * tmp7;
                            tmp_acc0_vec = tmp_acc0_vec + tmp8;
                            tmp_acc1_vec = tmp_acc1_vec + tmp1;
                        }
                        tmp_acc0_vec.store(out_ptr13 + static_cast<long>(x0));
                        tmp_acc1_vec.store(out_ptr14 + static_cast<long>(x0));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(96L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_out_ptr1[static_cast<long>(x2 + (3136L*x1) + (301056L*x0) + (301056L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp1 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = out_ptr6[static_cast<long>(x2 + (3136L*x1) + (301056L*x0) + (301056L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp3 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = out_ptr8[static_cast<long>(x2 + (3136L*x1) + (301056L*x0) + (301056L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x0));
                        auto tmp6 = in_ptr8[static_cast<long>(x1)];
                        auto tmp10 = ([&]() { __at_align__ float tmpbuf[8]; for (long x0_inner = 0; x0_inner < 8; x0_inner++) tmpbuf[x0_inner] = in_ptr1[static_cast<long>(x1 + (96L*x2) + (301056L*x0) + (301056L*x0_inner))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr12 + static_cast<long>(x0));
                        auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x0));
                        auto tmp14 = at::vec::Vectorized<float>::loadu(out_ptr11 + static_cast<long>(x0));
                        auto tmp2 = tmp1.neg();
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp7 = at::vec::Vectorized<float>(tmp6);
                        auto tmp8 = tmp5 * tmp7;
                        auto tmp9 = tmp4 * tmp8;
                        auto tmp13 = tmp11 * tmp12;
                        auto tmp15 = tmp13 - tmp14;
                        auto tmp16 = tmp15 * tmp5;
                        auto tmp17 = tmp16 * tmp5;
                        auto tmp18 = tmp17 * tmp5;
                        auto tmp19 = static_cast<float>(3.321641156462585e-06);
                        auto tmp20 = at::vec::Vectorized<float>(tmp19);
                        auto tmp21 = tmp18 * tmp20;
                        auto tmp22 = tmp10 * tmp21;
                        auto tmp23 = tmp9 + tmp22;
                        auto tmp24 = tmp21.neg();
                        auto tmp25 = tmp24 * tmp12;
                        auto tmp26 = tmp11 * tmp5;
                        auto tmp27 = tmp26 * tmp20;
                        auto tmp28 = tmp25 - tmp27;
                        auto tmp29 = tmp23 + tmp28;
                        auto tmp30 = tmp0 + tmp29;
                        { __at_align__ float tmpbuf[8*sizeof(float)/sizeof(float)]; tmp30.store(tmpbuf); for (long x0_inner = 0; x0_inner < 8; x0_inner++) out_ptr15[static_cast<long>(x1 + (96L*x2) + (301056L*x0) + (301056L*x0_inner))] = tmpbuf[x0_inner]; }
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_3, primals_4, primals_6, primals_7, primals_9, primals_10, primals_12, primals_13, primals_15, primals_16, primals_18, primals_19, primals_21, primals_22, primals_24, primals_25, primals_27, primals_28, primals_30, primals_31, primals_33, primals_34, primals_36, primals_37, primals_39, primals_40, primals_42, primals_43, primals_45, primals_46, primals_48, primals_49, primals_51, primals_52, primals_54, primals_55, primals_57, primals_58, primals_60, primals_61, primals_63, primals_64, primals_66, primals_67, primals_69, primals_70, primals_72, primals_73, primals_75, primals_76, primals_78, primals_79, primals_81, primals_82, primals_84, primals_85, primals_87, primals_88, primals_90, primals_91, primals_93, primals_94, primals_96, primals_97, primals_99, primals_100, primals_102, primals_103, primals_105, primals_106, primals_108, primals_109, primals_111, primals_112, primals_114, primals_115, primals_117, primals_118, primals_120, primals_121, primals_123, primals_124, primals_126, primals_127, primals_129, primals_130, primals_132, primals_133, primals_135, primals_136, primals_138, primals_139, primals_141, primals_142, primals_144, primals_145, primals_147, primals_148, primals_150, primals_151, primals_153, primals_154, primals_156, primals_157, primals_159, primals_160, primals_162, primals_163, primals_165, primals_166, primals_168, primals_169, primals_171, primals_172, primals_174, primals_175, primals_177, primals_178, primals_180, primals_181, primals_183, primals_184, primals_186, primals_187, primals_189, primals_190, primals_192, primals_193, primals_195, primals_196, primals_198, primals_199, primals_201, primals_202, primals_204, primals_205, primals_207, primals_208, primals_210, primals_211, primals_213, primals_214, primals_216, primals_217, primals_219, primals_221, primals_223, primals_225, primals_227, primals_229, primals_231, primals_233, primals_235, primals_237, primals_239, primals_241, primals_243, primals_245, primals_247, primals_249, primals_251, primals_253, primals_255, primals_257, primals_259, primals_261, primals_263, primals_265, primals_267, primals_269, primals_271, primals_273, primals_275, primals_277, primals_279, primals_281, primals_283, primals_285, primals_287, primals_289, primals_291, primals_293, primals_295, primals_297, primals_299, primals_301, primals_303, primals_305, primals_307, primals_309, primals_311, primals_313, primals_315, primals_317, primals_319, primals_321, primals_323, primals_325, primals_327, primals_329, primals_331, primals_333, primals_335, primals_337, primals_339, primals_341, primals_343, primals_345, primals_347, primals_349, primals_351, primals_353, primals_355, primals_357, primals_359, primals_361, primals_363, primals_365, primals_367, primals_369, primals_373, convolution, add_1, avg_pool2d, add_4, convolution_1, clone, convolution_2, add_8, avg_pool2d_1, add_11, convolution_3, clone_2, convolution_4, add_15, avg_pool2d_2, add_18, convolution_5, clone_4, convolution_6, add_22, avg_pool2d_3, add_25, convolution_7, clone_6, convolution_8, add_29, avg_pool2d_4, add_32, convolution_9, clone_8, convolution_10, add_36, avg_pool2d_5, add_39, convolution_11, clone_10, convolution_12, add_41, convolution_13, add_43, avg_pool2d_6, add_46, convolution_14, clone_12, convolution_15, add_50, avg_pool2d_7, add_53, convolution_16, clone_14, convolution_17, add_57, avg_pool2d_8, add_60, convolution_18, clone_16, convolution_19, add_64, avg_pool2d_9, add_67, convolution_20, clone_18, convolution_21, add_71, avg_pool2d_10, add_74, convolution_22, clone_20, convolution_23, add_78, avg_pool2d_11, add_81, convolution_24, clone_22, convolution_25, add_83, convolution_26, add_85, avg_pool2d_12, add_88, convolution_27, clone_24, convolution_28, add_92, avg_pool2d_13, add_95, convolution_29, clone_26, convolution_30, add_99, avg_pool2d_14, add_102, convolution_31, clone_28, convolution_32, add_106, avg_pool2d_15, add_109, convolution_33, clone_30, convolution_34, add_113, avg_pool2d_16, add_116, convolution_35, clone_32, convolution_36, add_120, avg_pool2d_17, add_123, convolution_37, clone_34, convolution_38, add_127, avg_pool2d_18, add_130, convolution_39, clone_36, convolution_40, add_134, avg_pool2d_19, add_137, convolution_41, clone_38, convolution_42, add_141, avg_pool2d_20, add_144, convolution_43, clone_40, convolution_44, add_148, avg_pool2d_21, add_151, convolution_45, clone_42, convolution_46, add_155, avg_pool2d_22, add_158, convolution_47, clone_44, convolution_48, add_162, avg_pool2d_23, add_165, convolution_49, clone_46, convolution_50, add_169, avg_pool2d_24, add_172, convolution_51, clone_48, convolution_52, add_176, avg_pool2d_25, add_179, convolution_53, clone_50, convolution_54, add_183, avg_pool2d_26, add_186, convolution_55, clone_52, convolution_56, add_190, avg_pool2d_27, add_193, convolution_57, clone_54, convolution_58, add_197, avg_pool2d_28, add_200, convolution_59, clone_56, convolution_60, add_204, avg_pool2d_29, add_207, convolution_61, clone_58, convolution_62, add_209, convolution_63, add_211, avg_pool2d_30, add_214, convolution_64, clone_60, convolution_65, add_218, avg_pool2d_31, add_221, convolution_66, clone_62, convolution_67, add_225, avg_pool2d_32, add_228, convolution_68, clone_64, convolution_69, add_232, avg_pool2d_33, add_235, convolution_70, clone_66, convolution_71, add_239, avg_pool2d_34, add_242, convolution_72, clone_68, convolution_73, add_246, avg_pool2d_35, add_249, convolution_74, clone_70, convolution_75, mul_324, view_216, permute_3, div, alias_144, alias_145, alias_146, alias_147, alias_148, alias_149, alias_150, alias_151, alias_152, alias_153, alias_154, alias_155, alias_156, alias_157, alias_158, alias_159, alias_160, alias_161, alias_162, alias_163, alias_164, alias_165, alias_166, alias_167, alias_168, alias_169, alias_170, alias_171, alias_172, alias_173, alias_174, alias_175, alias_176, alias_177, alias_178, alias_179, alias_180, alias_181, alias_182, alias_183, alias_184, alias_185, alias_186, alias_187, alias_188, alias_189, alias_190, alias_191, alias_192, alias_193, alias_194, alias_195, alias_196, alias_197, alias_198, alias_199, alias_200, alias_201, alias_202, alias_203, alias_204, alias_205, alias_206, alias_207, alias_208, alias_209, alias_210, alias_211, alias_212, alias_213, alias_214, alias_215, alias_216, alias_217, alias_218, alias_219, alias_220, alias_221, alias_222, alias_223, alias_224, alias_225, alias_226, alias_227, alias_228, alias_229, alias_230, alias_231, alias_232, alias_233, alias_234, alias_235, alias_236, alias_237, alias_238, alias_239, alias_240, alias_241, alias_242, alias_243, alias_244, alias_245, alias_246, alias_247, alias_248, alias_249, alias_250, alias_251, alias_252, alias_253, alias_254, alias_255, alias_256, alias_257, alias_258, alias_259, alias_260, alias_261, alias_262, alias_263, alias_264, alias_265, alias_266, alias_267, alias_268, alias_269, alias_270, alias_271, alias_272, alias_273, alias_274, alias_275, alias_276, alias_277, alias_278, alias_279, alias_280, alias_281, alias_282, alias_283, alias_284, alias_285, alias_286, alias_287, tangents_1 = args
    args.clear()
    assert_size_stride(primals_1, (96, ), (1, ))
    assert_size_stride(primals_3, (96, ), (1, ))
    assert_size_stride(primals_4, (96, ), (1, ))
    assert_size_stride(primals_6, (96, ), (1, ))
    assert_size_stride(primals_7, (96, ), (1, ))
    assert_size_stride(primals_9, (96, ), (1, ))
    assert_size_stride(primals_10, (96, ), (1, ))
    assert_size_stride(primals_12, (96, ), (1, ))
    assert_size_stride(primals_13, (96, ), (1, ))
    assert_size_stride(primals_15, (96, ), (1, ))
    assert_size_stride(primals_16, (96, ), (1, ))
    assert_size_stride(primals_18, (96, ), (1, ))
    assert_size_stride(primals_19, (96, ), (1, ))
    assert_size_stride(primals_21, (96, ), (1, ))
    assert_size_stride(primals_22, (96, ), (1, ))
    assert_size_stride(primals_24, (96, ), (1, ))
    assert_size_stride(primals_25, (96, ), (1, ))
    assert_size_stride(primals_27, (96, ), (1, ))
    assert_size_stride(primals_28, (96, ), (1, ))
    assert_size_stride(primals_30, (96, ), (1, ))
    assert_size_stride(primals_31, (96, ), (1, ))
    assert_size_stride(primals_33, (96, ), (1, ))
    assert_size_stride(primals_34, (96, ), (1, ))
    assert_size_stride(primals_36, (96, ), (1, ))
    assert_size_stride(primals_37, (192, ), (1, ))
    assert_size_stride(primals_39, (192, ), (1, ))
    assert_size_stride(primals_40, (192, ), (1, ))
    assert_size_stride(primals_42, (192, ), (1, ))
    assert_size_stride(primals_43, (192, ), (1, ))
    assert_size_stride(primals_45, (192, ), (1, ))
    assert_size_stride(primals_46, (192, ), (1, ))
    assert_size_stride(primals_48, (192, ), (1, ))
    assert_size_stride(primals_49, (192, ), (1, ))
    assert_size_stride(primals_51, (192, ), (1, ))
    assert_size_stride(primals_52, (192, ), (1, ))
    assert_size_stride(primals_54, (192, ), (1, ))
    assert_size_stride(primals_55, (192, ), (1, ))
    assert_size_stride(primals_57, (192, ), (1, ))
    assert_size_stride(primals_58, (192, ), (1, ))
    assert_size_stride(primals_60, (192, ), (1, ))
    assert_size_stride(primals_61, (192, ), (1, ))
    assert_size_stride(primals_63, (192, ), (1, ))
    assert_size_stride(primals_64, (192, ), (1, ))
    assert_size_stride(primals_66, (192, ), (1, ))
    assert_size_stride(primals_67, (192, ), (1, ))
    assert_size_stride(primals_69, (192, ), (1, ))
    assert_size_stride(primals_70, (192, ), (1, ))
    assert_size_stride(primals_72, (192, ), (1, ))
    assert_size_stride(primals_73, (384, ), (1, ))
    assert_size_stride(primals_75, (384, ), (1, ))
    assert_size_stride(primals_76, (384, ), (1, ))
    assert_size_stride(primals_78, (384, ), (1, ))
    assert_size_stride(primals_79, (384, ), (1, ))
    assert_size_stride(primals_81, (384, ), (1, ))
    assert_size_stride(primals_82, (384, ), (1, ))
    assert_size_stride(primals_84, (384, ), (1, ))
    assert_size_stride(primals_85, (384, ), (1, ))
    assert_size_stride(primals_87, (384, ), (1, ))
    assert_size_stride(primals_88, (384, ), (1, ))
    assert_size_stride(primals_90, (384, ), (1, ))
    assert_size_stride(primals_91, (384, ), (1, ))
    assert_size_stride(primals_93, (384, ), (1, ))
    assert_size_stride(primals_94, (384, ), (1, ))
    assert_size_stride(primals_96, (384, ), (1, ))
    assert_size_stride(primals_97, (384, ), (1, ))
    assert_size_stride(primals_99, (384, ), (1, ))
    assert_size_stride(primals_100, (384, ), (1, ))
    assert_size_stride(primals_102, (384, ), (1, ))
    assert_size_stride(primals_103, (384, ), (1, ))
    assert_size_stride(primals_105, (384, ), (1, ))
    assert_size_stride(primals_106, (384, ), (1, ))
    assert_size_stride(primals_108, (384, ), (1, ))
    assert_size_stride(primals_109, (384, ), (1, ))
    assert_size_stride(primals_111, (384, ), (1, ))
    assert_size_stride(primals_112, (384, ), (1, ))
    assert_size_stride(primals_114, (384, ), (1, ))
    assert_size_stride(primals_115, (384, ), (1, ))
    assert_size_stride(primals_117, (384, ), (1, ))
    assert_size_stride(primals_118, (384, ), (1, ))
    assert_size_stride(primals_120, (384, ), (1, ))
    assert_size_stride(primals_121, (384, ), (1, ))
    assert_size_stride(primals_123, (384, ), (1, ))
    assert_size_stride(primals_124, (384, ), (1, ))
    assert_size_stride(primals_126, (384, ), (1, ))
    assert_size_stride(primals_127, (384, ), (1, ))
    assert_size_stride(primals_129, (384, ), (1, ))
    assert_size_stride(primals_130, (384, ), (1, ))
    assert_size_stride(primals_132, (384, ), (1, ))
    assert_size_stride(primals_133, (384, ), (1, ))
    assert_size_stride(primals_135, (384, ), (1, ))
    assert_size_stride(primals_136, (384, ), (1, ))
    assert_size_stride(primals_138, (384, ), (1, ))
    assert_size_stride(primals_139, (384, ), (1, ))
    assert_size_stride(primals_141, (384, ), (1, ))
    assert_size_stride(primals_142, (384, ), (1, ))
    assert_size_stride(primals_144, (384, ), (1, ))
    assert_size_stride(primals_145, (384, ), (1, ))
    assert_size_stride(primals_147, (384, ), (1, ))
    assert_size_stride(primals_148, (384, ), (1, ))
    assert_size_stride(primals_150, (384, ), (1, ))
    assert_size_stride(primals_151, (384, ), (1, ))
    assert_size_stride(primals_153, (384, ), (1, ))
    assert_size_stride(primals_154, (384, ), (1, ))
    assert_size_stride(primals_156, (384, ), (1, ))
    assert_size_stride(primals_157, (384, ), (1, ))
    assert_size_stride(primals_159, (384, ), (1, ))
    assert_size_stride(primals_160, (384, ), (1, ))
    assert_size_stride(primals_162, (384, ), (1, ))
    assert_size_stride(primals_163, (384, ), (1, ))
    assert_size_stride(primals_165, (384, ), (1, ))
    assert_size_stride(primals_166, (384, ), (1, ))
    assert_size_stride(primals_168, (384, ), (1, ))
    assert_size_stride(primals_169, (384, ), (1, ))
    assert_size_stride(primals_171, (384, ), (1, ))
    assert_size_stride(primals_172, (384, ), (1, ))
    assert_size_stride(primals_174, (384, ), (1, ))
    assert_size_stride(primals_175, (384, ), (1, ))
    assert_size_stride(primals_177, (384, ), (1, ))
    assert_size_stride(primals_178, (384, ), (1, ))
    assert_size_stride(primals_180, (384, ), (1, ))
    assert_size_stride(primals_181, (768, ), (1, ))
    assert_size_stride(primals_183, (768, ), (1, ))
    assert_size_stride(primals_184, (768, ), (1, ))
    assert_size_stride(primals_186, (768, ), (1, ))
    assert_size_stride(primals_187, (768, ), (1, ))
    assert_size_stride(primals_189, (768, ), (1, ))
    assert_size_stride(primals_190, (768, ), (1, ))
    assert_size_stride(primals_192, (768, ), (1, ))
    assert_size_stride(primals_193, (768, ), (1, ))
    assert_size_stride(primals_195, (768, ), (1, ))
    assert_size_stride(primals_196, (768, ), (1, ))
    assert_size_stride(primals_198, (768, ), (1, ))
    assert_size_stride(primals_199, (768, ), (1, ))
    assert_size_stride(primals_201, (768, ), (1, ))
    assert_size_stride(primals_202, (768, ), (1, ))
    assert_size_stride(primals_204, (768, ), (1, ))
    assert_size_stride(primals_205, (768, ), (1, ))
    assert_size_stride(primals_207, (768, ), (1, ))
    assert_size_stride(primals_208, (768, ), (1, ))
    assert_size_stride(primals_210, (768, ), (1, ))
    assert_size_stride(primals_211, (768, ), (1, ))
    assert_size_stride(primals_213, (768, ), (1, ))
    assert_size_stride(primals_214, (768, ), (1, ))
    assert_size_stride(primals_216, (768, ), (1, ))
    assert_size_stride(primals_217, (768, ), (1, ))
    assert_size_stride(primals_219, (96, 3, 7, 7), (147, 1, 21, 3))
    assert_size_stride(primals_221, (384, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_223, (96, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_225, (384, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_227, (96, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_229, (384, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_231, (96, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_233, (384, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_235, (96, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_237, (384, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_239, (96, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_241, (384, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_243, (96, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_245, (192, 96, 3, 3), (864, 1, 288, 96))
    assert_size_stride(primals_247, (768, 192, 1, 1), (192, 1, 1, 1))
    assert_size_stride(primals_249, (192, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_251, (768, 192, 1, 1), (192, 1, 1, 1))
    assert_size_stride(primals_253, (192, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_255, (768, 192, 1, 1), (192, 1, 1, 1))
    assert_size_stride(primals_257, (192, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_259, (768, 192, 1, 1), (192, 1, 1, 1))
    assert_size_stride(primals_261, (192, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_263, (768, 192, 1, 1), (192, 1, 1, 1))
    assert_size_stride(primals_265, (192, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_267, (768, 192, 1, 1), (192, 1, 1, 1))
    assert_size_stride(primals_269, (192, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_271, (384, 192, 3, 3), (1728, 1, 576, 192))
    assert_size_stride(primals_273, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_275, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_277, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_279, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_281, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_283, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_285, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_287, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_289, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_291, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_293, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_295, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_297, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_299, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_301, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_303, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_305, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_307, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_309, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_311, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_313, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_315, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_317, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_319, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_321, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_323, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_325, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_327, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_329, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_331, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_333, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_335, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_337, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_339, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_341, (1536, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_343, (384, 1536, 1, 1), (1536, 1, 1, 1))
    assert_size_stride(primals_345, (768, 384, 3, 3), (3456, 1, 1152, 384))
    assert_size_stride(primals_347, (3072, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_349, (768, 3072, 1, 1), (3072, 1, 1, 1))
    assert_size_stride(primals_351, (3072, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_353, (768, 3072, 1, 1), (3072, 1, 1, 1))
    assert_size_stride(primals_355, (3072, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_357, (768, 3072, 1, 1), (3072, 1, 1, 1))
    assert_size_stride(primals_359, (3072, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_361, (768, 3072, 1, 1), (3072, 1, 1, 1))
    assert_size_stride(primals_363, (3072, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_365, (768, 3072, 1, 1), (3072, 1, 1, 1))
    assert_size_stride(primals_367, (3072, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_369, (768, 3072, 1, 1), (3072, 1, 1, 1))
    assert_size_stride(primals_373, (8, 3, 224, 224), (150528, 1, 672, 3))
    assert_size_stride(convolution, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_1, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(avg_pool2d, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_4, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(convolution_1, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(clone, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(convolution_2, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_8, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(avg_pool2d_1, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_11, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(convolution_3, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(clone_2, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(convolution_4, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_15, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(avg_pool2d_2, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_18, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(convolution_5, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(clone_4, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(convolution_6, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_22, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(avg_pool2d_3, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_25, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(convolution_7, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(clone_6, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(convolution_8, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_29, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(avg_pool2d_4, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_32, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(convolution_9, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(clone_8, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(convolution_10, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_36, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(avg_pool2d_5, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_39, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(convolution_11, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(clone_10, (8, 384, 56, 56), (1204224, 1, 21504, 384))
    assert_size_stride(convolution_12, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(add_41, (8, 96, 56, 56), (301056, 1, 5376, 96))
    assert_size_stride(convolution_13, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_43, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(avg_pool2d_6, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_46, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(convolution_14, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(clone_12, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(convolution_15, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_50, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(avg_pool2d_7, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_53, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(convolution_16, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(clone_14, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(convolution_17, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_57, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(avg_pool2d_8, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_60, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(convolution_18, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(clone_16, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(convolution_19, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_64, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(avg_pool2d_9, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_67, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(convolution_20, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(clone_18, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(convolution_21, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_71, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(avg_pool2d_10, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_74, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(convolution_22, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(clone_20, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(convolution_23, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_78, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(avg_pool2d_11, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_81, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(convolution_24, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(clone_22, (8, 768, 28, 28), (602112, 1, 21504, 768))
    assert_size_stride(convolution_25, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(add_83, (8, 192, 28, 28), (150528, 1, 5376, 192))
    assert_size_stride(convolution_26, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_85, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_12, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_88, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_27, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_24, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_28, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_92, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_13, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_95, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_29, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_26, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_30, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_99, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_14, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_102, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_31, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_28, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_32, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_106, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_15, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_109, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_33, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_30, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_34, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_113, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_16, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_116, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_35, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_32, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_36, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_120, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_17, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_123, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_37, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_34, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_38, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_127, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_18, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_130, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_39, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_36, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_40, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_134, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_19, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_137, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_41, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_38, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_42, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_141, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_20, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_144, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_43, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_40, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_44, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_148, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_21, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_151, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_45, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_42, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_46, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_155, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_22, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_158, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_47, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_44, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_48, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_162, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_23, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_165, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_49, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_46, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_50, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_169, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_24, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_172, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_51, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_48, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_52, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_176, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_25, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_179, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_53, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_50, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_54, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_183, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_26, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_186, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_55, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_52, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_56, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_190, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_27, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_193, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_57, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_54, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_58, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_197, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_28, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_200, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_59, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_56, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_60, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_204, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(avg_pool2d_29, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_207, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_61, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(clone_58, (8, 1536, 14, 14), (301056, 1, 21504, 1536))
    assert_size_stride(convolution_62, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(add_209, (8, 384, 14, 14), (75264, 1, 5376, 384))
    assert_size_stride(convolution_63, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_211, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(avg_pool2d_30, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_214, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(convolution_64, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(clone_60, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(convolution_65, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_218, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(avg_pool2d_31, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_221, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(convolution_66, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(clone_62, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(convolution_67, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_225, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(avg_pool2d_32, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_228, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(convolution_68, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(clone_64, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(convolution_69, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_232, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(avg_pool2d_33, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_235, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(convolution_70, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(clone_66, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(convolution_71, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_239, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(avg_pool2d_34, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_242, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(convolution_72, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(clone_68, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(convolution_73, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_246, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(avg_pool2d_35, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(add_249, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(convolution_74, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(clone_70, (8, 3072, 7, 7), (150528, 1, 21504, 3072))
    assert_size_stride(convolution_75, (8, 768, 7, 7), (37632, 1, 5376, 768))
    assert_size_stride(mul_324, (8, 1, 1, 768), (768, 1, 768, 1))
    assert_size_stride(view_216, (8, 768), (768, 1))
    assert_size_stride(permute_3, (1000, 768), (768, 1))
    assert_size_stride(div, (8, 1, 1, 1), (1, 1, 1, 1))
    assert_size_stride(alias_144, (8, 1), (1, 1))
    assert_size_stride(alias_145, (8, 1), (1, 1))
    assert_size_stride(alias_146, (8, 1), (1, 1))
    assert_size_stride(alias_147, (8, 1), (1, 1))
    assert_size_stride(alias_148, (8, 1), (1, 1))
    assert_size_stride(alias_149, (8, 1), (1, 1))
    assert_size_stride(alias_150, (8, 1), (1, 1))
    assert_size_stride(alias_151, (8, 1), (1, 1))
    assert_size_stride(alias_152, (8, 1), (1, 1))
    assert_size_stride(alias_153, (8, 1), (1, 1))
    assert_size_stride(alias_154, (8, 1), (1, 1))
    assert_size_stride(alias_155, (8, 1), (1, 1))
    assert_size_stride(alias_156, (8, 1), (1, 1))
    assert_size_stride(alias_157, (8, 1), (1, 1))
    assert_size_stride(alias_158, (8, 1), (1, 1))
    assert_size_stride(alias_159, (8, 1), (1, 1))
    assert_size_stride(alias_160, (8, 1), (1, 1))
    assert_size_stride(alias_161, (8, 1), (1, 1))
    assert_size_stride(alias_162, (8, 1), (1, 1))
    assert_size_stride(alias_163, (8, 1), (1, 1))
    assert_size_stride(alias_164, (8, 1), (1, 1))
    assert_size_stride(alias_165, (8, 1), (1, 1))
    assert_size_stride(alias_166, (8, 1), (1, 1))
    assert_size_stride(alias_167, (8, 1), (1, 1))
    assert_size_stride(alias_168, (8, 1), (1, 1))
    assert_size_stride(alias_169, (8, 1), (1, 1))
    assert_size_stride(alias_170, (8, 1), (1, 1))
    assert_size_stride(alias_171, (8, 1), (1, 1))
    assert_size_stride(alias_172, (8, 1), (1, 1))
    assert_size_stride(alias_173, (8, 1), (1, 1))
    assert_size_stride(alias_174, (8, 1), (1, 1))
    assert_size_stride(alias_175, (8, 1), (1, 1))
    assert_size_stride(alias_176, (8, 1), (1, 1))
    assert_size_stride(alias_177, (8, 1), (1, 1))
    assert_size_stride(alias_178, (8, 1), (1, 1))
    assert_size_stride(alias_179, (8, 1), (1, 1))
    assert_size_stride(alias_180, (8, 1), (1, 1))
    assert_size_stride(alias_181, (8, 1), (1, 1))
    assert_size_stride(alias_182, (8, 1), (1, 1))
    assert_size_stride(alias_183, (8, 1), (1, 1))
    assert_size_stride(alias_184, (8, 1), (1, 1))
    assert_size_stride(alias_185, (8, 1), (1, 1))
    assert_size_stride(alias_186, (8, 1), (1, 1))
    assert_size_stride(alias_187, (8, 1), (1, 1))
    assert_size_stride(alias_188, (8, 1), (1, 1))
    assert_size_stride(alias_189, (8, 1), (1, 1))
    assert_size_stride(alias_190, (8, 1), (1, 1))
    assert_size_stride(alias_191, (8, 1), (1, 1))
    assert_size_stride(alias_192, (8, 1), (1, 1))
    assert_size_stride(alias_193, (8, 1), (1, 1))
    assert_size_stride(alias_194, (8, 1), (1, 1))
    assert_size_stride(alias_195, (8, 1), (1, 1))
    assert_size_stride(alias_196, (8, 1), (1, 1))
    assert_size_stride(alias_197, (8, 1), (1, 1))
    assert_size_stride(alias_198, (8, 1), (1, 1))
    assert_size_stride(alias_199, (8, 1), (1, 1))
    assert_size_stride(alias_200, (8, 1), (1, 1))
    assert_size_stride(alias_201, (8, 1), (1, 1))
    assert_size_stride(alias_202, (8, 1), (1, 1))
    assert_size_stride(alias_203, (8, 1), (1, 1))
    assert_size_stride(alias_204, (8, 1), (1, 1))
    assert_size_stride(alias_205, (8, 1), (1, 1))
    assert_size_stride(alias_206, (8, 1), (1, 1))
    assert_size_stride(alias_207, (8, 1), (1, 1))
    assert_size_stride(alias_208, (8, 1), (1, 1))
    assert_size_stride(alias_209, (8, 1), (1, 1))
    assert_size_stride(alias_210, (8, 1), (1, 1))
    assert_size_stride(alias_211, (8, 1), (1, 1))
    assert_size_stride(alias_212, (8, 1), (1, 1))
    assert_size_stride(alias_213, (8, 1), (1, 1))
    assert_size_stride(alias_214, (8, 1), (1, 1))
    assert_size_stride(alias_215, (8, 1), (1, 1))
    assert_size_stride(alias_216, (8, 1), (1, 1))
    assert_size_stride(alias_217, (8, 1), (1, 1))
    assert_size_stride(alias_218, (8, 1), (1, 1))
    assert_size_stride(alias_219, (8, 1), (1, 1))
    assert_size_stride(alias_220, (8, 1), (1, 1))
    assert_size_stride(alias_221, (8, 1), (1, 1))
    assert_size_stride(alias_222, (8, 1), (1, 1))
    assert_size_stride(alias_223, (8, 1), (1, 1))
    assert_size_stride(alias_224, (8, 1), (1, 1))
    assert_size_stride(alias_225, (8, 1), (1, 1))
    assert_size_stride(alias_226, (8, 1), (1, 1))
    assert_size_stride(alias_227, (8, 1), (1, 1))
    assert_size_stride(alias_228, (8, 1), (1, 1))
    assert_size_stride(alias_229, (8, 1), (1, 1))
    assert_size_stride(alias_230, (8, 1), (1, 1))
    assert_size_stride(alias_231, (8, 1), (1, 1))
    assert_size_stride(alias_232, (8, 1), (1, 1))
    assert_size_stride(alias_233, (8, 1), (1, 1))
    assert_size_stride(alias_234, (8, 1), (1, 1))
    assert_size_stride(alias_235, (8, 1), (1, 1))
    assert_size_stride(alias_236, (8, 1), (1, 1))
    assert_size_stride(alias_237, (8, 1), (1, 1))
    assert_size_stride(alias_238, (8, 1), (1, 1))
    assert_size_stride(alias_239, (8, 1), (1, 1))
    assert_size_stride(alias_240, (8, 1), (1, 1))
    assert_size_stride(alias_241, (8, 1), (1, 1))
    assert_size_stride(alias_242, (8, 1), (1, 1))
    assert_size_stride(alias_243, (8, 1), (1, 1))
    assert_size_stride(alias_244, (8, 1), (1, 1))
    assert_size_stride(alias_245, (8, 1), (1, 1))
    assert_size_stride(alias_246, (8, 1), (1, 1))
    assert_size_stride(alias_247, (8, 1), (1, 1))
    assert_size_stride(alias_248, (8, 1), (1, 1))
    assert_size_stride(alias_249, (8, 1), (1, 1))
    assert_size_stride(alias_250, (8, 1), (1, 1))
    assert_size_stride(alias_251, (8, 1), (1, 1))
    assert_size_stride(alias_252, (8, 1), (1, 1))
    assert_size_stride(alias_253, (8, 1), (1, 1))
    assert_size_stride(alias_254, (8, 1), (1, 1))
    assert_size_stride(alias_255, (8, 1), (1, 1))
    assert_size_stride(alias_256, (8, 1), (1, 1))
    assert_size_stride(alias_257, (8, 1), (1, 1))
    assert_size_stride(alias_258, (8, 1), (1, 1))
    assert_size_stride(alias_259, (8, 1), (1, 1))
    assert_size_stride(alias_260, (8, 1), (1, 1))
    assert_size_stride(alias_261, (8, 1), (1, 1))
    assert_size_stride(alias_262, (8, 1), (1, 1))
    assert_size_stride(alias_263, (8, 1), (1, 1))
    assert_size_stride(alias_264, (8, 1), (1, 1))
    assert_size_stride(alias_265, (8, 1), (1, 1))
    assert_size_stride(alias_266, (8, 1), (1, 1))
    assert_size_stride(alias_267, (8, 1), (1, 1))
    assert_size_stride(alias_268, (8, 1), (1, 1))
    assert_size_stride(alias_269, (8, 1), (1, 1))
    assert_size_stride(alias_270, (8, 1), (1, 1))
    assert_size_stride(alias_271, (8, 1), (1, 1))
    assert_size_stride(alias_272, (8, 1), (1, 1))
    assert_size_stride(alias_273, (8, 1), (1, 1))
    assert_size_stride(alias_274, (8, 1), (1, 1))
    assert_size_stride(alias_275, (8, 1), (1, 1))
    assert_size_stride(alias_276, (8, 1), (1, 1))
    assert_size_stride(alias_277, (8, 1), (1, 1))
    assert_size_stride(alias_278, (8, 1), (1, 1))
    assert_size_stride(alias_279, (8, 1), (1, 1))
    assert_size_stride(alias_280, (8, 1), (1, 1))
    assert_size_stride(alias_281, (8, 1), (1, 1))
    assert_size_stride(alias_282, (8, 1), (1, 1))
    assert_size_stride(alias_283, (8, 1), (1, 1))
    assert_size_stride(alias_284, (8, 1), (1, 1))
    assert_size_stride(alias_285, (8, 1), (1, 1))
    assert_size_stride(alias_286, (8, 1), (1, 1))
    assert_size_stride(alias_287, (8, 1), (1, 1))
    assert_size_stride(tangents_1, (8, 1000), (1000, 1))
    buf0 = empty((8, 96, 56, 56), device='cpu', dtype=torch.float32)
    buf1 = empty((8, 96, 56, 56), device='cpu', dtype=torch.float32)
    buf2 = empty((8, 96, 56, 56), device='cpu', dtype=torch.float32)
    buf3 = empty((8, 96, 56, 56), device='cpu', dtype=torch.float32)
    buf4 = empty((8, 96, 56, 56), device='cpu', dtype=torch.float32)
    buf5 = empty((8, 192, 28, 28), device='cpu', dtype=torch.float32)
    buf6 = empty((8, 192, 28, 28), device='cpu', dtype=torch.float32)
    buf7 = empty((8, 192, 28, 28), device='cpu', dtype=torch.float32)
    buf8 = empty((8, 192, 28, 28), device='cpu', dtype=torch.float32)
    buf9 = empty((8, 192, 28, 28), device='cpu', dtype=torch.float32)
    buf10 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf11 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf12 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf13 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf14 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf15 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf16 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf17 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf18 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf19 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf20 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf21 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf22 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf23 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf24 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf25 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf26 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf27 = empty((8, 768, 7, 7), device='cpu', dtype=torch.float32)
    buf28 = empty((8, 768, 7, 7), device='cpu', dtype=torch.float32)
    buf29 = empty((8, 768, 7, 7), device='cpu', dtype=torch.float32)
    buf30 = empty((8, 768, 7, 7), device='cpu', dtype=torch.float32)
    buf31 = empty((8, 768, 7, 7), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sub_0(c_void_p(convolution.data_ptr()), c_void_p(avg_pool2d.data_ptr()), c_void_p(add_1.data_ptr()), c_void_p(primals_3.data_ptr()), c_void_p(convolution_2.data_ptr()), c_void_p(primals_6.data_ptr()), c_void_p(avg_pool2d_1.data_ptr()), c_void_p(add_8.data_ptr()), c_void_p(primals_9.data_ptr()), c_void_p(convolution_4.data_ptr()), c_void_p(primals_12.data_ptr()), c_void_p(avg_pool2d_2.data_ptr()), c_void_p(add_15.data_ptr()), c_void_p(primals_15.data_ptr()), c_void_p(convolution_6.data_ptr()), c_void_p(primals_18.data_ptr()), c_void_p(avg_pool2d_3.data_ptr()), c_void_p(add_22.data_ptr()), c_void_p(primals_21.data_ptr()), c_void_p(convolution_8.data_ptr()), c_void_p(primals_24.data_ptr()), c_void_p(avg_pool2d_4.data_ptr()), c_void_p(add_29.data_ptr()), c_void_p(primals_27.data_ptr()), c_void_p(convolution_10.data_ptr()), c_void_p(primals_30.data_ptr()), c_void_p(convolution_13.data_ptr()), c_void_p(avg_pool2d_6.data_ptr()), c_void_p(add_43.data_ptr()), c_void_p(primals_39.data_ptr()), c_void_p(convolution_15.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(avg_pool2d_7.data_ptr()), c_void_p(add_50.data_ptr()), c_void_p(primals_45.data_ptr()), c_void_p(convolution_17.data_ptr()), c_void_p(primals_48.data_ptr()), c_void_p(avg_pool2d_8.data_ptr()), c_void_p(add_57.data_ptr()), c_void_p(primals_51.data_ptr()), c_void_p(convolution_19.data_ptr()), c_void_p(primals_54.data_ptr()), c_void_p(avg_pool2d_9.data_ptr()), c_void_p(add_64.data_ptr()), c_void_p(primals_57.data_ptr()), c_void_p(convolution_21.data_ptr()), c_void_p(primals_60.data_ptr()), c_void_p(avg_pool2d_10.data_ptr()), c_void_p(add_71.data_ptr()), c_void_p(primals_63.data_ptr()), c_void_p(convolution_23.data_ptr()), c_void_p(primals_66.data_ptr()), c_void_p(convolution_26.data_ptr()), c_void_p(avg_pool2d_12.data_ptr()), c_void_p(add_85.data_ptr()), c_void_p(primals_75.data_ptr()), c_void_p(convolution_28.data_ptr()), c_void_p(primals_78.data_ptr()), c_void_p(avg_pool2d_13.data_ptr()), c_void_p(add_92.data_ptr()), c_void_p(primals_81.data_ptr()), c_void_p(convolution_30.data_ptr()), c_void_p(primals_84.data_ptr()), c_void_p(avg_pool2d_14.data_ptr()), c_void_p(add_99.data_ptr()), c_void_p(primals_87.data_ptr()), c_void_p(convolution_32.data_ptr()), c_void_p(primals_90.data_ptr()), c_void_p(avg_pool2d_15.data_ptr()), c_void_p(add_106.data_ptr()), c_void_p(primals_93.data_ptr()), c_void_p(convolution_34.data_ptr()), c_void_p(primals_96.data_ptr()), c_void_p(avg_pool2d_16.data_ptr()), c_void_p(add_113.data_ptr()), c_void_p(primals_99.data_ptr()), c_void_p(convolution_36.data_ptr()), c_void_p(primals_102.data_ptr()), c_void_p(avg_pool2d_17.data_ptr()), c_void_p(add_120.data_ptr()), c_void_p(primals_105.data_ptr()), c_void_p(convolution_38.data_ptr()), c_void_p(primals_108.data_ptr()), c_void_p(avg_pool2d_18.data_ptr()), c_void_p(add_127.data_ptr()), c_void_p(primals_111.data_ptr()), c_void_p(convolution_40.data_ptr()), c_void_p(primals_114.data_ptr()), c_void_p(avg_pool2d_19.data_ptr()), c_void_p(add_134.data_ptr()), c_void_p(primals_117.data_ptr()), c_void_p(convolution_42.data_ptr()), c_void_p(primals_120.data_ptr()), c_void_p(avg_pool2d_20.data_ptr()), c_void_p(add_141.data_ptr()), c_void_p(primals_123.data_ptr()), c_void_p(convolution_44.data_ptr()), c_void_p(primals_126.data_ptr()), c_void_p(avg_pool2d_21.data_ptr()), c_void_p(add_148.data_ptr()), c_void_p(primals_129.data_ptr()), c_void_p(convolution_46.data_ptr()), c_void_p(primals_132.data_ptr()), c_void_p(avg_pool2d_22.data_ptr()), c_void_p(add_155.data_ptr()), c_void_p(primals_135.data_ptr()), c_void_p(convolution_48.data_ptr()), c_void_p(primals_138.data_ptr()), c_void_p(avg_pool2d_23.data_ptr()), c_void_p(add_162.data_ptr()), c_void_p(primals_141.data_ptr()), c_void_p(convolution_50.data_ptr()), c_void_p(primals_144.data_ptr()), c_void_p(avg_pool2d_24.data_ptr()), c_void_p(add_169.data_ptr()), c_void_p(primals_147.data_ptr()), c_void_p(convolution_52.data_ptr()), c_void_p(primals_150.data_ptr()), c_void_p(avg_pool2d_25.data_ptr()), c_void_p(add_176.data_ptr()), c_void_p(primals_153.data_ptr()), c_void_p(convolution_54.data_ptr()), c_void_p(primals_156.data_ptr()), c_void_p(avg_pool2d_26.data_ptr()), c_void_p(add_183.data_ptr()), c_void_p(primals_159.data_ptr()), c_void_p(convolution_56.data_ptr()), c_void_p(primals_162.data_ptr()), c_void_p(avg_pool2d_27.data_ptr()), c_void_p(add_190.data_ptr()), c_void_p(primals_165.data_ptr()), c_void_p(convolution_58.data_ptr()), c_void_p(primals_168.data_ptr()), c_void_p(avg_pool2d_28.data_ptr()), c_void_p(add_197.data_ptr()), c_void_p(primals_171.data_ptr()), c_void_p(convolution_60.data_ptr()), c_void_p(primals_174.data_ptr()), c_void_p(convolution_63.data_ptr()), c_void_p(avg_pool2d_30.data_ptr()), c_void_p(add_211.data_ptr()), c_void_p(primals_183.data_ptr()), c_void_p(convolution_65.data_ptr()), c_void_p(primals_186.data_ptr()), c_void_p(avg_pool2d_31.data_ptr()), c_void_p(add_218.data_ptr()), c_void_p(primals_189.data_ptr()), c_void_p(convolution_67.data_ptr()), c_void_p(primals_192.data_ptr()), c_void_p(avg_pool2d_32.data_ptr()), c_void_p(add_225.data_ptr()), c_void_p(primals_195.data_ptr()), c_void_p(convolution_69.data_ptr()), c_void_p(primals_198.data_ptr()), c_void_p(avg_pool2d_33.data_ptr()), c_void_p(add_232.data_ptr()), c_void_p(primals_201.data_ptr()), c_void_p(convolution_71.data_ptr()), c_void_p(primals_204.data_ptr()), c_void_p(avg_pool2d_34.data_ptr()), c_void_p(add_239.data_ptr()), c_void_p(primals_207.data_ptr()), c_void_p(convolution_73.data_ptr()), c_void_p(primals_210.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(buf17.data_ptr()), c_void_p(buf18.data_ptr()), c_void_p(buf19.data_ptr()), c_void_p(buf20.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf23.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf25.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf27.data_ptr()), c_void_p(buf28.data_ptr()), c_void_p(buf29.data_ptr()), c_void_p(buf30.data_ptr()), c_void_p(buf31.data_ptr()))
    buf32 = empty((8, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(tangents_1, permute_3, out=buf32)
    del permute_3
    buf33 = empty((1000, 768), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 8), (1, 1000), 0), view_216, out=buf33)
    del view_216
    buf34 = empty((1, 1000), device='cpu', dtype=torch.float32)
    buf35 = empty_strided((8, 1, 1, 1), (1, 8, 8, 8), device='cpu', dtype=torch.float32)
    buf36 = empty_strided((8, 1, 1, 1), (1, 8, 8, 8), device='cpu', dtype=torch.float32)
    buf37 = empty((768, ), device='cpu', dtype=torch.float32)
    buf38 = empty((768, ), device='cpu', dtype=torch.float32)
    buf39 = reinterpret_tensor(buf32, (8, 1, 1, 768), (768, 6144, 6144, 1), 0); del buf32  # reuse
    buf40 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    buf41 = empty((8, 768, 7, 7), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_div_mul_native_layer_norm_backward_sum_1(c_void_p(buf39.data_ptr()), c_void_p(tangents_1.data_ptr()), c_void_p(primals_217.data_ptr()), c_void_p(mul_324.data_ptr()), c_void_p(div.data_ptr()), c_void_p(convolution_75.data_ptr()), c_void_p(primals_216.data_ptr()), c_void_p(buf34.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(buf37.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(buf40.data_ptr()), c_void_p(buf41.data_ptr()))
    del convolution_75
    del div
    del mul_324
    del primals_216
    del primals_217
    del tangents_1
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.div, aten.mul]
    buf42 = aten.convolution_backward(buf41, clone_70, primals_369, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_70
    del primals_369
    buf43 = buf42[0]
    buf44 = buf42[1]
    buf45 = buf42[2]
    del buf42
    buf46 = buf43; del buf43  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_2(c_void_p(buf46.data_ptr()), c_void_p(convolution_74.data_ptr()))
    del convolution_74
    # Source Nodes: [x_298], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf47 = aten.convolution_backward(buf46, add_249, primals_367, [3072], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_249
    del buf46
    del primals_367
    buf48 = buf47[0]
    buf49 = buf47[1]
    buf50 = buf47[2]
    del buf47
    buf51 = empty((8, 768), device='cpu', dtype=torch.float32)
    buf52 = empty((8, 768), device='cpu', dtype=torch.float32)
    buf53 = reinterpret_tensor(buf36, (8, 1), (1, 8), 0); del buf36  # reuse
    buf54 = reinterpret_tensor(buf35, (8, 1), (1, 8), 0); del buf35  # reuse
    buf55 = reinterpret_tensor(buf48, (8, 1, 768, 49), (37632, 301056, 1, 768), 0); del buf48  # reuse
    buf58 = reinterpret_tensor(buf55, (8, 768, 7, 7), (37632, 1, 5376, 768), 0); del buf55  # reuse
    buf56 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf57 = empty((768, ), device='cpu', dtype=torch.float32)
    buf59 = reinterpret_tensor(buf41, (8, 768, 7, 7), (37632, 1, 5376, 768), 0); del buf41  # reuse
    buf60 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    buf61 = empty((8, 768, 7, 7), device='cpu', dtype=torch.float32)
    buf62 = empty((8, 768), device='cpu', dtype=torch.float32)
    buf63 = empty((8, 768), device='cpu', dtype=torch.float32)
    buf64 = empty_strided((8, 1), (1, 8), device='cpu', dtype=torch.float32)
    buf65 = empty_strided((8, 1), (1, 8), device='cpu', dtype=torch.float32)
    buf66 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf67 = empty((768, ), device='cpu', dtype=torch.float32)
    buf68 = buf31; del buf31  # reuse
    buf70 = empty((8, 768, 7, 7), device='cpu', dtype=torch.float32)
    buf69 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_div_mul_native_group_norm_backward_sub_sum_3(c_void_p(buf58.data_ptr()), c_void_p(buf68.data_ptr()), c_void_p(avg_pool2d_35.data_ptr()), c_void_p(add_246.data_ptr()), c_void_p(primals_213.data_ptr()), c_void_p(primals_214.data_ptr()), c_void_p(alias_145.data_ptr()), c_void_p(alias_144.data_ptr()), c_void_p(buf39.data_ptr()), c_void_p(primals_211.data_ptr()), c_void_p(alias_146.data_ptr()), c_void_p(alias_147.data_ptr()), c_void_p(primals_210.data_ptr()), c_void_p(convolution_73.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(buf52.data_ptr()), c_void_p(buf53.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf60.data_ptr()), c_void_p(buf61.data_ptr()), c_void_p(buf62.data_ptr()), c_void_p(buf63.data_ptr()), c_void_p(buf64.data_ptr()), c_void_p(buf65.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf67.data_ptr()), c_void_p(buf70.data_ptr()), c_void_p(buf69.data_ptr()))
    del add_246
    del alias_144
    del alias_145
    del alias_146
    del alias_147
    del avg_pool2d_35
    del buf39
    del buf58
    del convolution_73
    del primals_210
    del primals_211
    del primals_213
    del primals_214
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf71 = aten.convolution_backward(buf70, clone_68, primals_365, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_68
    del primals_365
    buf72 = buf71[0]
    buf73 = buf71[1]
    buf74 = buf71[2]
    del buf71
    buf75 = buf72; del buf72  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_4(c_void_p(buf75.data_ptr()), c_void_p(convolution_72.data_ptr()))
    del convolution_72
    # Source Nodes: [x_290], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf76 = aten.convolution_backward(buf75, add_242, primals_363, [3072], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_242
    del buf75
    del primals_363
    buf77 = buf76[0]
    buf78 = buf76[1]
    buf79 = buf76[2]
    del buf76
    buf80 = buf63; del buf63  # reuse
    buf81 = buf62; del buf62  # reuse
    buf82 = buf65; del buf65  # reuse
    buf83 = buf64; del buf64  # reuse
    buf84 = reinterpret_tensor(buf77, (8, 1, 768, 49), (37632, 301056, 1, 768), 0); del buf77  # reuse
    buf85 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf86 = empty((768, ), device='cpu', dtype=torch.float32)
    buf87 = buf68; del buf68  # reuse
    buf88 = buf70; del buf70  # reuse
    buf89 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    buf90 = buf61; del buf61  # reuse
    buf91 = buf52; del buf52  # reuse
    buf92 = buf51; del buf51  # reuse
    buf93 = buf54; del buf54  # reuse
    buf94 = buf53; del buf53  # reuse
    buf95 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf96 = empty((768, ), device='cpu', dtype=torch.float32)
    buf97 = buf30; del buf30  # reuse
    buf99 = reinterpret_tensor(buf59, (8, 768, 7, 7), (37632, 49, 7, 1), 0); del buf59  # reuse
    buf98 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_5(c_void_p(buf84.data_ptr()), c_void_p(buf87.data_ptr()), c_void_p(buf97.data_ptr()), c_void_p(avg_pool2d_34.data_ptr()), c_void_p(add_239.data_ptr()), c_void_p(primals_207.data_ptr()), c_void_p(primals_208.data_ptr()), c_void_p(alias_149.data_ptr()), c_void_p(alias_148.data_ptr()), c_void_p(primals_205.data_ptr()), c_void_p(alias_150.data_ptr()), c_void_p(alias_151.data_ptr()), c_void_p(primals_204.data_ptr()), c_void_p(convolution_71.data_ptr()), c_void_p(buf80.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf82.data_ptr()), c_void_p(buf83.data_ptr()), c_void_p(buf85.data_ptr()), c_void_p(buf86.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(buf89.data_ptr()), c_void_p(buf90.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(buf92.data_ptr()), c_void_p(buf93.data_ptr()), c_void_p(buf94.data_ptr()), c_void_p(buf95.data_ptr()), c_void_p(buf96.data_ptr()), c_void_p(buf99.data_ptr()), c_void_p(buf98.data_ptr()))
    del add_239
    del alias_148
    del alias_149
    del alias_150
    del alias_151
    del avg_pool2d_34
    del buf84
    del buf87
    del convolution_71
    del primals_204
    del primals_205
    del primals_207
    del primals_208
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf100 = aten.convolution_backward(buf99, clone_66, primals_361, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_66
    del primals_361
    buf101 = buf100[0]
    buf102 = buf100[1]
    buf103 = buf100[2]
    del buf100
    buf104 = buf101; del buf101  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_6(c_void_p(buf104.data_ptr()), c_void_p(convolution_70.data_ptr()))
    del convolution_70
    # Source Nodes: [x_282], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf105 = aten.convolution_backward(buf104, add_235, primals_359, [3072], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_235
    del buf104
    del primals_359
    buf106 = buf105[0]
    buf107 = buf105[1]
    buf108 = buf105[2]
    del buf105
    buf109 = buf92; del buf92  # reuse
    buf110 = buf91; del buf91  # reuse
    buf111 = buf94; del buf94  # reuse
    buf112 = buf93; del buf93  # reuse
    buf113 = reinterpret_tensor(buf106, (8, 1, 768, 49), (37632, 301056, 1, 768), 0); del buf106  # reuse
    buf114 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf115 = empty((768, ), device='cpu', dtype=torch.float32)
    buf116 = buf97; del buf97  # reuse
    buf117 = buf99; del buf99  # reuse
    buf118 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    buf119 = buf90; del buf90  # reuse
    buf120 = buf81; del buf81  # reuse
    buf121 = buf80; del buf80  # reuse
    buf122 = buf83; del buf83  # reuse
    buf123 = buf82; del buf82  # reuse
    buf124 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf125 = empty((768, ), device='cpu', dtype=torch.float32)
    buf126 = buf116; del buf116  # reuse
    buf128 = buf88; del buf88  # reuse
    buf127 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_7(c_void_p(buf113.data_ptr()), c_void_p(buf126.data_ptr()), c_void_p(buf29.data_ptr()), c_void_p(avg_pool2d_33.data_ptr()), c_void_p(add_232.data_ptr()), c_void_p(primals_201.data_ptr()), c_void_p(primals_202.data_ptr()), c_void_p(alias_153.data_ptr()), c_void_p(alias_152.data_ptr()), c_void_p(primals_199.data_ptr()), c_void_p(alias_154.data_ptr()), c_void_p(alias_155.data_ptr()), c_void_p(primals_198.data_ptr()), c_void_p(convolution_69.data_ptr()), c_void_p(buf109.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(buf111.data_ptr()), c_void_p(buf112.data_ptr()), c_void_p(buf114.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(buf117.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf121.data_ptr()), c_void_p(buf122.data_ptr()), c_void_p(buf123.data_ptr()), c_void_p(buf124.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(buf128.data_ptr()), c_void_p(buf127.data_ptr()))
    del add_232
    del alias_152
    del alias_153
    del alias_154
    del alias_155
    del avg_pool2d_33
    del buf113
    del buf117
    del convolution_69
    del primals_198
    del primals_199
    del primals_201
    del primals_202
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf129 = aten.convolution_backward(buf128, clone_64, primals_357, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_64
    del primals_357
    buf130 = buf129[0]
    buf131 = buf129[1]
    buf132 = buf129[2]
    del buf129
    buf133 = buf130; del buf130  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_8(c_void_p(buf133.data_ptr()), c_void_p(convolution_68.data_ptr()))
    del convolution_68
    # Source Nodes: [x_274], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf134 = aten.convolution_backward(buf133, add_228, primals_355, [3072], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_228
    del primals_355
    buf135 = buf134[0]
    buf136 = buf134[1]
    buf137 = buf134[2]
    del buf134
    buf138 = buf121; del buf121  # reuse
    buf139 = buf120; del buf120  # reuse
    buf140 = buf123; del buf123  # reuse
    buf141 = buf122; del buf122  # reuse
    buf142 = reinterpret_tensor(buf135, (8, 1, 768, 49), (37632, 301056, 1, 768), 0); del buf135  # reuse
    buf143 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf144 = empty((768, ), device='cpu', dtype=torch.float32)
    buf145 = buf126; del buf126  # reuse
    buf146 = buf128; del buf128  # reuse
    buf147 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    buf148 = buf29; del buf29  # reuse
    buf149 = buf110; del buf110  # reuse
    buf150 = buf109; del buf109  # reuse
    buf151 = buf112; del buf112  # reuse
    buf152 = buf111; del buf111  # reuse
    buf153 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf154 = empty((768, ), device='cpu', dtype=torch.float32)
    buf155 = buf145; del buf145  # reuse
    buf157 = buf119; del buf119  # reuse
    buf156 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_9(c_void_p(buf142.data_ptr()), c_void_p(buf155.data_ptr()), c_void_p(buf28.data_ptr()), c_void_p(avg_pool2d_32.data_ptr()), c_void_p(add_225.data_ptr()), c_void_p(primals_195.data_ptr()), c_void_p(primals_196.data_ptr()), c_void_p(alias_157.data_ptr()), c_void_p(alias_156.data_ptr()), c_void_p(primals_193.data_ptr()), c_void_p(alias_158.data_ptr()), c_void_p(alias_159.data_ptr()), c_void_p(primals_192.data_ptr()), c_void_p(convolution_67.data_ptr()), c_void_p(buf138.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf140.data_ptr()), c_void_p(buf141.data_ptr()), c_void_p(buf143.data_ptr()), c_void_p(buf144.data_ptr()), c_void_p(buf146.data_ptr()), c_void_p(buf147.data_ptr()), c_void_p(buf148.data_ptr()), c_void_p(buf149.data_ptr()), c_void_p(buf150.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(buf153.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf157.data_ptr()), c_void_p(buf156.data_ptr()))
    del add_225
    del alias_156
    del alias_157
    del alias_158
    del alias_159
    del avg_pool2d_32
    del buf142
    del buf146
    del convolution_67
    del primals_192
    del primals_193
    del primals_195
    del primals_196
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf158 = aten.convolution_backward(buf157, clone_62, primals_353, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_62
    del primals_353
    buf159 = buf158[0]
    buf160 = buf158[1]
    buf161 = buf158[2]
    del buf158
    buf162 = buf159; del buf159  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_10(c_void_p(buf162.data_ptr()), c_void_p(convolution_66.data_ptr()))
    del convolution_66
    # Source Nodes: [x_266], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf163 = aten.convolution_backward(buf162, add_221, primals_351, [3072], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_221
    del primals_351
    buf164 = buf163[0]
    buf165 = buf163[1]
    buf166 = buf163[2]
    del buf163
    buf167 = buf150; del buf150  # reuse
    buf168 = buf149; del buf149  # reuse
    buf169 = buf152; del buf152  # reuse
    buf170 = buf151; del buf151  # reuse
    buf171 = reinterpret_tensor(buf164, (8, 1, 768, 49), (37632, 301056, 1, 768), 0); del buf164  # reuse
    buf172 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf173 = empty((768, ), device='cpu', dtype=torch.float32)
    buf174 = buf155; del buf155  # reuse
    buf175 = buf157; del buf157  # reuse
    buf176 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    buf177 = buf28; del buf28  # reuse
    buf178 = buf139; del buf139  # reuse
    buf179 = buf138; del buf138  # reuse
    buf180 = buf141; del buf141  # reuse
    buf181 = buf140; del buf140  # reuse
    buf182 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf183 = empty((768, ), device='cpu', dtype=torch.float32)
    buf184 = buf174; del buf174  # reuse
    buf186 = buf148; del buf148  # reuse
    buf185 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_11(c_void_p(buf171.data_ptr()), c_void_p(buf184.data_ptr()), c_void_p(buf27.data_ptr()), c_void_p(avg_pool2d_31.data_ptr()), c_void_p(add_218.data_ptr()), c_void_p(primals_189.data_ptr()), c_void_p(primals_190.data_ptr()), c_void_p(alias_161.data_ptr()), c_void_p(alias_160.data_ptr()), c_void_p(primals_187.data_ptr()), c_void_p(alias_162.data_ptr()), c_void_p(alias_163.data_ptr()), c_void_p(primals_186.data_ptr()), c_void_p(convolution_65.data_ptr()), c_void_p(buf167.data_ptr()), c_void_p(buf168.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(buf170.data_ptr()), c_void_p(buf172.data_ptr()), c_void_p(buf173.data_ptr()), c_void_p(buf175.data_ptr()), c_void_p(buf176.data_ptr()), c_void_p(buf177.data_ptr()), c_void_p(buf178.data_ptr()), c_void_p(buf179.data_ptr()), c_void_p(buf180.data_ptr()), c_void_p(buf181.data_ptr()), c_void_p(buf182.data_ptr()), c_void_p(buf183.data_ptr()), c_void_p(buf186.data_ptr()), c_void_p(buf185.data_ptr()))
    del add_218
    del alias_160
    del alias_161
    del alias_162
    del alias_163
    del avg_pool2d_31
    del buf171
    del buf175
    del buf177
    del convolution_65
    del primals_186
    del primals_187
    del primals_189
    del primals_190
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf187 = aten.convolution_backward(buf186, clone_60, primals_349, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_60
    del primals_349
    buf188 = buf187[0]
    buf189 = buf187[1]
    buf190 = buf187[2]
    del buf187
    buf191 = buf188; del buf188  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_12(c_void_p(buf191.data_ptr()), c_void_p(convolution_64.data_ptr()))
    del convolution_64
    # Source Nodes: [x_258], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf192 = aten.convolution_backward(buf191, add_214, primals_347, [3072], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_214
    del primals_347
    buf193 = buf192[0]
    buf194 = buf192[1]
    buf195 = buf192[2]
    del buf192
    buf196 = buf179; del buf179  # reuse
    buf197 = buf178; del buf178  # reuse
    buf198 = buf181; del buf181  # reuse
    buf199 = buf180; del buf180  # reuse
    buf200 = reinterpret_tensor(buf193, (8, 1, 768, 49), (37632, 301056, 1, 768), 0); del buf193  # reuse
    buf201 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf202 = empty((768, ), device='cpu', dtype=torch.float32)
    buf203 = buf184; del buf184  # reuse
    buf204 = buf186; del buf186  # reuse
    buf205 = empty((1, 768, 1, 1), device='cpu', dtype=torch.float32)
    buf206 = buf27; del buf27  # reuse
    buf207 = buf168; del buf168  # reuse
    buf208 = buf167; del buf167  # reuse
    buf209 = buf170; del buf170  # reuse
    buf210 = buf169; del buf169  # reuse
    buf211 = empty((1, 768), device='cpu', dtype=torch.float32)
    buf212 = empty((768, ), device='cpu', dtype=torch.float32)
    buf213 = buf203; del buf203  # reuse
    cpp_fused_add_avg_pool2d_backward_mul_native_group_norm_backward_sub_sum_13(c_void_p(buf200.data_ptr()), c_void_p(buf213.data_ptr()), c_void_p(convolution_63.data_ptr()), c_void_p(avg_pool2d_30.data_ptr()), c_void_p(add_211.data_ptr()), c_void_p(primals_183.data_ptr()), c_void_p(primals_184.data_ptr()), c_void_p(alias_165.data_ptr()), c_void_p(alias_164.data_ptr()), c_void_p(primals_181.data_ptr()), c_void_p(alias_166.data_ptr()), c_void_p(alias_167.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(buf197.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf201.data_ptr()), c_void_p(buf202.data_ptr()), c_void_p(buf204.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(buf206.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(buf208.data_ptr()), c_void_p(buf209.data_ptr()), c_void_p(buf210.data_ptr()), c_void_p(buf211.data_ptr()), c_void_p(buf212.data_ptr()))
    del add_211
    del alias_164
    del alias_165
    del alias_166
    del alias_167
    del avg_pool2d_30
    del buf196
    del buf197
    del buf200
    del buf204
    del buf206
    del buf207
    del buf208
    del convolution_63
    del primals_181
    del primals_183
    del primals_184
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf214 = aten.convolution_backward(buf213, add_209, primals_345, [768], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_209
    del buf213
    del primals_345
    buf215 = buf214[0]
    buf216 = buf214[1]
    buf217 = buf214[2]
    del buf214
    buf218 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf219 = empty_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_backward_mul_sum_14(c_void_p(buf215.data_ptr()), c_void_p(convolution_62.data_ptr()), c_void_p(primals_180.data_ptr()), c_void_p(buf218.data_ptr()), c_void_p(buf219.data_ptr()))
    del convolution_62
    del primals_180
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf220 = aten.convolution_backward(buf219, clone_58, primals_343, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_58
    del primals_343
    buf221 = buf220[0]
    buf222 = buf220[1]
    buf223 = buf220[2]
    del buf220
    buf224 = buf221; del buf221  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_15(c_void_p(buf224.data_ptr()), c_void_p(convolution_61.data_ptr()))
    del convolution_61
    # Source Nodes: [x_246], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf225 = aten.convolution_backward(buf224, add_207, primals_341, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_207
    del buf224
    del primals_341
    buf226 = buf225[0]
    buf227 = buf225[1]
    buf228 = buf225[2]
    del buf225
    buf229 = empty((8, 384), device='cpu', dtype=torch.float32)
    buf230 = empty((8, 384), device='cpu', dtype=torch.float32)
    buf231 = buf210; del buf210  # reuse
    buf232 = buf209; del buf209  # reuse
    buf233 = reinterpret_tensor(buf226, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf226  # reuse
    buf234 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf235 = empty((384, ), device='cpu', dtype=torch.float32)
    buf236 = buf215; del buf215  # reuse
    buf237 = buf219; del buf219  # reuse
    buf238 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf239 = empty((8, 384, 14, 14), device='cpu', dtype=torch.float32)
    buf240 = empty((8, 384), device='cpu', dtype=torch.float32)
    buf241 = empty((8, 384), device='cpu', dtype=torch.float32)
    buf242 = buf199; del buf199  # reuse
    buf243 = buf198; del buf198  # reuse
    buf244 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf245 = empty((384, ), device='cpu', dtype=torch.float32)
    buf246 = buf239; del buf239  # reuse
    buf248 = empty_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    buf247 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_16(c_void_p(buf233.data_ptr()), c_void_p(buf236.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(avg_pool2d_29.data_ptr()), c_void_p(add_204.data_ptr()), c_void_p(primals_177.data_ptr()), c_void_p(primals_178.data_ptr()), c_void_p(alias_169.data_ptr()), c_void_p(alias_168.data_ptr()), c_void_p(primals_175.data_ptr()), c_void_p(alias_170.data_ptr()), c_void_p(alias_171.data_ptr()), c_void_p(primals_174.data_ptr()), c_void_p(convolution_60.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf230.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf234.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(buf238.data_ptr()), c_void_p(buf240.data_ptr()), c_void_p(buf241.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(buf243.data_ptr()), c_void_p(buf244.data_ptr()), c_void_p(buf245.data_ptr()), c_void_p(buf248.data_ptr()), c_void_p(buf247.data_ptr()))
    del add_204
    del alias_168
    del alias_169
    del alias_170
    del alias_171
    del avg_pool2d_29
    del buf233
    del buf236
    del convolution_60
    del primals_174
    del primals_175
    del primals_177
    del primals_178
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf249 = aten.convolution_backward(buf248, clone_56, primals_339, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_56
    del primals_339
    buf250 = buf249[0]
    buf251 = buf249[1]
    buf252 = buf249[2]
    del buf249
    buf253 = buf250; del buf250  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_17(c_void_p(buf253.data_ptr()), c_void_p(convolution_59.data_ptr()))
    del convolution_59
    # Source Nodes: [x_238], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf254 = aten.convolution_backward(buf253, add_200, primals_337, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_200
    del buf253
    del primals_337
    buf255 = buf254[0]
    buf256 = buf254[1]
    buf257 = buf254[2]
    del buf254
    buf258 = buf241; del buf241  # reuse
    buf259 = buf240; del buf240  # reuse
    buf260 = buf243; del buf243  # reuse
    buf261 = buf242; del buf242  # reuse
    buf262 = reinterpret_tensor(buf255, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf255  # reuse
    buf263 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf264 = empty((384, ), device='cpu', dtype=torch.float32)
    buf265 = buf246; del buf246  # reuse
    buf266 = reinterpret_tensor(buf248, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf248  # reuse
    buf267 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf268 = buf26; del buf26  # reuse
    buf269 = buf230; del buf230  # reuse
    buf270 = buf229; del buf229  # reuse
    buf271 = buf232; del buf232  # reuse
    buf272 = buf231; del buf231  # reuse
    buf273 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf274 = empty((384, ), device='cpu', dtype=torch.float32)
    buf275 = buf25; del buf25  # reuse
    buf277 = buf237; del buf237  # reuse
    buf276 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_18(c_void_p(buf262.data_ptr()), c_void_p(buf265.data_ptr()), c_void_p(buf275.data_ptr()), c_void_p(avg_pool2d_28.data_ptr()), c_void_p(add_197.data_ptr()), c_void_p(primals_171.data_ptr()), c_void_p(primals_172.data_ptr()), c_void_p(alias_173.data_ptr()), c_void_p(alias_172.data_ptr()), c_void_p(primals_169.data_ptr()), c_void_p(alias_174.data_ptr()), c_void_p(alias_175.data_ptr()), c_void_p(primals_168.data_ptr()), c_void_p(convolution_58.data_ptr()), c_void_p(buf258.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(buf261.data_ptr()), c_void_p(buf263.data_ptr()), c_void_p(buf264.data_ptr()), c_void_p(buf266.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(buf268.data_ptr()), c_void_p(buf269.data_ptr()), c_void_p(buf270.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(buf277.data_ptr()), c_void_p(buf276.data_ptr()))
    del add_197
    del alias_172
    del alias_173
    del alias_174
    del alias_175
    del avg_pool2d_28
    del buf262
    del buf265
    del convolution_58
    del primals_168
    del primals_169
    del primals_171
    del primals_172
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf278 = aten.convolution_backward(buf277, clone_54, primals_335, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_54
    del primals_335
    buf279 = buf278[0]
    buf280 = buf278[1]
    buf281 = buf278[2]
    del buf278
    buf282 = buf279; del buf279  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_19(c_void_p(buf282.data_ptr()), c_void_p(convolution_57.data_ptr()))
    del convolution_57
    # Source Nodes: [x_230], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf283 = aten.convolution_backward(buf282, add_193, primals_333, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_193
    del buf282
    del primals_333
    buf284 = buf283[0]
    buf285 = buf283[1]
    buf286 = buf283[2]
    del buf283
    buf287 = buf270; del buf270  # reuse
    buf288 = buf269; del buf269  # reuse
    buf289 = buf272; del buf272  # reuse
    buf290 = buf271; del buf271  # reuse
    buf291 = reinterpret_tensor(buf284, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf284  # reuse
    buf292 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf293 = empty((384, ), device='cpu', dtype=torch.float32)
    buf294 = buf275; del buf275  # reuse
    buf295 = reinterpret_tensor(buf277, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf277  # reuse
    buf296 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf297 = buf268; del buf268  # reuse
    buf298 = buf259; del buf259  # reuse
    buf299 = buf258; del buf258  # reuse
    buf300 = buf261; del buf261  # reuse
    buf301 = buf260; del buf260  # reuse
    buf302 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf303 = empty((384, ), device='cpu', dtype=torch.float32)
    buf304 = buf24; del buf24  # reuse
    buf306 = reinterpret_tensor(buf266, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf266  # reuse
    buf305 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_20(c_void_p(buf291.data_ptr()), c_void_p(buf294.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(avg_pool2d_27.data_ptr()), c_void_p(add_190.data_ptr()), c_void_p(primals_165.data_ptr()), c_void_p(primals_166.data_ptr()), c_void_p(alias_177.data_ptr()), c_void_p(alias_176.data_ptr()), c_void_p(primals_163.data_ptr()), c_void_p(alias_178.data_ptr()), c_void_p(alias_179.data_ptr()), c_void_p(primals_162.data_ptr()), c_void_p(convolution_56.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(buf288.data_ptr()), c_void_p(buf289.data_ptr()), c_void_p(buf290.data_ptr()), c_void_p(buf292.data_ptr()), c_void_p(buf293.data_ptr()), c_void_p(buf295.data_ptr()), c_void_p(buf296.data_ptr()), c_void_p(buf297.data_ptr()), c_void_p(buf298.data_ptr()), c_void_p(buf299.data_ptr()), c_void_p(buf300.data_ptr()), c_void_p(buf301.data_ptr()), c_void_p(buf302.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf306.data_ptr()), c_void_p(buf305.data_ptr()))
    del add_190
    del alias_176
    del alias_177
    del alias_178
    del alias_179
    del avg_pool2d_27
    del buf291
    del buf294
    del convolution_56
    del primals_162
    del primals_163
    del primals_165
    del primals_166
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf307 = aten.convolution_backward(buf306, clone_52, primals_331, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_52
    del primals_331
    buf308 = buf307[0]
    buf309 = buf307[1]
    buf310 = buf307[2]
    del buf307
    buf311 = buf308; del buf308  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_21(c_void_p(buf311.data_ptr()), c_void_p(convolution_55.data_ptr()))
    del convolution_55
    # Source Nodes: [x_222], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf312 = aten.convolution_backward(buf311, add_186, primals_329, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_186
    del buf311
    del primals_329
    buf313 = buf312[0]
    buf314 = buf312[1]
    buf315 = buf312[2]
    del buf312
    buf316 = buf299; del buf299  # reuse
    buf317 = buf298; del buf298  # reuse
    buf318 = buf301; del buf301  # reuse
    buf319 = buf300; del buf300  # reuse
    buf320 = reinterpret_tensor(buf313, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf313  # reuse
    buf321 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf322 = empty((384, ), device='cpu', dtype=torch.float32)
    buf323 = buf304; del buf304  # reuse
    buf324 = reinterpret_tensor(buf306, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf306  # reuse
    buf325 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf326 = buf297; del buf297  # reuse
    buf327 = buf288; del buf288  # reuse
    buf328 = buf287; del buf287  # reuse
    buf329 = buf290; del buf290  # reuse
    buf330 = buf289; del buf289  # reuse
    buf331 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf332 = empty((384, ), device='cpu', dtype=torch.float32)
    buf333 = buf23; del buf23  # reuse
    buf335 = reinterpret_tensor(buf295, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf295  # reuse
    buf334 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_22(c_void_p(buf320.data_ptr()), c_void_p(buf323.data_ptr()), c_void_p(buf333.data_ptr()), c_void_p(avg_pool2d_26.data_ptr()), c_void_p(add_183.data_ptr()), c_void_p(primals_159.data_ptr()), c_void_p(primals_160.data_ptr()), c_void_p(alias_181.data_ptr()), c_void_p(alias_180.data_ptr()), c_void_p(primals_157.data_ptr()), c_void_p(alias_182.data_ptr()), c_void_p(alias_183.data_ptr()), c_void_p(primals_156.data_ptr()), c_void_p(convolution_54.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(buf317.data_ptr()), c_void_p(buf318.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(buf321.data_ptr()), c_void_p(buf322.data_ptr()), c_void_p(buf324.data_ptr()), c_void_p(buf325.data_ptr()), c_void_p(buf326.data_ptr()), c_void_p(buf327.data_ptr()), c_void_p(buf328.data_ptr()), c_void_p(buf329.data_ptr()), c_void_p(buf330.data_ptr()), c_void_p(buf331.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(buf335.data_ptr()), c_void_p(buf334.data_ptr()))
    del add_183
    del alias_180
    del alias_181
    del alias_182
    del alias_183
    del avg_pool2d_26
    del buf320
    del buf323
    del convolution_54
    del primals_156
    del primals_157
    del primals_159
    del primals_160
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf336 = aten.convolution_backward(buf335, clone_50, primals_327, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_50
    del primals_327
    buf337 = buf336[0]
    buf338 = buf336[1]
    buf339 = buf336[2]
    del buf336
    buf340 = buf337; del buf337  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_23(c_void_p(buf340.data_ptr()), c_void_p(convolution_53.data_ptr()))
    del convolution_53
    # Source Nodes: [x_214], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf341 = aten.convolution_backward(buf340, add_179, primals_325, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_179
    del buf340
    del primals_325
    buf342 = buf341[0]
    buf343 = buf341[1]
    buf344 = buf341[2]
    del buf341
    buf345 = buf328; del buf328  # reuse
    buf346 = buf327; del buf327  # reuse
    buf347 = buf330; del buf330  # reuse
    buf348 = buf329; del buf329  # reuse
    buf349 = reinterpret_tensor(buf342, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf342  # reuse
    buf350 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf351 = empty((384, ), device='cpu', dtype=torch.float32)
    buf352 = buf333; del buf333  # reuse
    buf353 = reinterpret_tensor(buf335, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf335  # reuse
    buf354 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf355 = buf326; del buf326  # reuse
    buf356 = buf317; del buf317  # reuse
    buf357 = buf316; del buf316  # reuse
    buf358 = buf319; del buf319  # reuse
    buf359 = buf318; del buf318  # reuse
    buf360 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf361 = empty((384, ), device='cpu', dtype=torch.float32)
    buf362 = buf22; del buf22  # reuse
    buf364 = reinterpret_tensor(buf324, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf324  # reuse
    buf363 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_24(c_void_p(buf349.data_ptr()), c_void_p(buf352.data_ptr()), c_void_p(buf362.data_ptr()), c_void_p(avg_pool2d_25.data_ptr()), c_void_p(add_176.data_ptr()), c_void_p(primals_153.data_ptr()), c_void_p(primals_154.data_ptr()), c_void_p(alias_185.data_ptr()), c_void_p(alias_184.data_ptr()), c_void_p(primals_151.data_ptr()), c_void_p(alias_186.data_ptr()), c_void_p(alias_187.data_ptr()), c_void_p(primals_150.data_ptr()), c_void_p(convolution_52.data_ptr()), c_void_p(buf345.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(buf347.data_ptr()), c_void_p(buf348.data_ptr()), c_void_p(buf350.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(buf354.data_ptr()), c_void_p(buf355.data_ptr()), c_void_p(buf356.data_ptr()), c_void_p(buf357.data_ptr()), c_void_p(buf358.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(buf360.data_ptr()), c_void_p(buf361.data_ptr()), c_void_p(buf364.data_ptr()), c_void_p(buf363.data_ptr()))
    del add_176
    del alias_184
    del alias_185
    del alias_186
    del alias_187
    del avg_pool2d_25
    del buf349
    del buf352
    del convolution_52
    del primals_150
    del primals_151
    del primals_153
    del primals_154
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf365 = aten.convolution_backward(buf364, clone_48, primals_323, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_48
    del primals_323
    buf366 = buf365[0]
    buf367 = buf365[1]
    buf368 = buf365[2]
    del buf365
    buf369 = buf366; del buf366  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_25(c_void_p(buf369.data_ptr()), c_void_p(convolution_51.data_ptr()))
    del convolution_51
    # Source Nodes: [x_206], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf370 = aten.convolution_backward(buf369, add_172, primals_321, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_172
    del buf369
    del primals_321
    buf371 = buf370[0]
    buf372 = buf370[1]
    buf373 = buf370[2]
    del buf370
    buf374 = buf357; del buf357  # reuse
    buf375 = buf356; del buf356  # reuse
    buf376 = buf359; del buf359  # reuse
    buf377 = buf358; del buf358  # reuse
    buf378 = reinterpret_tensor(buf371, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf371  # reuse
    buf379 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf380 = empty((384, ), device='cpu', dtype=torch.float32)
    buf381 = buf362; del buf362  # reuse
    buf382 = reinterpret_tensor(buf364, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf364  # reuse
    buf383 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf384 = buf355; del buf355  # reuse
    buf385 = buf346; del buf346  # reuse
    buf386 = buf345; del buf345  # reuse
    buf387 = buf348; del buf348  # reuse
    buf388 = buf347; del buf347  # reuse
    buf389 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf390 = empty((384, ), device='cpu', dtype=torch.float32)
    buf391 = buf21; del buf21  # reuse
    buf393 = reinterpret_tensor(buf353, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf353  # reuse
    buf392 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_26(c_void_p(buf378.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf391.data_ptr()), c_void_p(avg_pool2d_24.data_ptr()), c_void_p(add_169.data_ptr()), c_void_p(primals_147.data_ptr()), c_void_p(primals_148.data_ptr()), c_void_p(alias_189.data_ptr()), c_void_p(alias_188.data_ptr()), c_void_p(primals_145.data_ptr()), c_void_p(alias_190.data_ptr()), c_void_p(alias_191.data_ptr()), c_void_p(primals_144.data_ptr()), c_void_p(convolution_50.data_ptr()), c_void_p(buf374.data_ptr()), c_void_p(buf375.data_ptr()), c_void_p(buf376.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(buf380.data_ptr()), c_void_p(buf382.data_ptr()), c_void_p(buf383.data_ptr()), c_void_p(buf384.data_ptr()), c_void_p(buf385.data_ptr()), c_void_p(buf386.data_ptr()), c_void_p(buf387.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(buf389.data_ptr()), c_void_p(buf390.data_ptr()), c_void_p(buf393.data_ptr()), c_void_p(buf392.data_ptr()))
    del add_169
    del alias_188
    del alias_189
    del alias_190
    del alias_191
    del avg_pool2d_24
    del buf378
    del buf381
    del convolution_50
    del primals_144
    del primals_145
    del primals_147
    del primals_148
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf394 = aten.convolution_backward(buf393, clone_46, primals_319, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_46
    del primals_319
    buf395 = buf394[0]
    buf396 = buf394[1]
    buf397 = buf394[2]
    del buf394
    buf398 = buf395; del buf395  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_27(c_void_p(buf398.data_ptr()), c_void_p(convolution_49.data_ptr()))
    del convolution_49
    # Source Nodes: [x_198], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf399 = aten.convolution_backward(buf398, add_165, primals_317, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_165
    del buf398
    del primals_317
    buf400 = buf399[0]
    buf401 = buf399[1]
    buf402 = buf399[2]
    del buf399
    buf403 = buf386; del buf386  # reuse
    buf404 = buf385; del buf385  # reuse
    buf405 = buf388; del buf388  # reuse
    buf406 = buf387; del buf387  # reuse
    buf407 = reinterpret_tensor(buf400, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf400  # reuse
    buf408 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf409 = empty((384, ), device='cpu', dtype=torch.float32)
    buf410 = buf391; del buf391  # reuse
    buf411 = reinterpret_tensor(buf393, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf393  # reuse
    buf412 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf413 = buf384; del buf384  # reuse
    buf414 = buf375; del buf375  # reuse
    buf415 = buf374; del buf374  # reuse
    buf416 = buf377; del buf377  # reuse
    buf417 = buf376; del buf376  # reuse
    buf418 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf419 = empty((384, ), device='cpu', dtype=torch.float32)
    buf420 = buf20; del buf20  # reuse
    buf422 = reinterpret_tensor(buf382, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf382  # reuse
    buf421 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_28(c_void_p(buf407.data_ptr()), c_void_p(buf410.data_ptr()), c_void_p(buf420.data_ptr()), c_void_p(avg_pool2d_23.data_ptr()), c_void_p(add_162.data_ptr()), c_void_p(primals_141.data_ptr()), c_void_p(primals_142.data_ptr()), c_void_p(alias_193.data_ptr()), c_void_p(alias_192.data_ptr()), c_void_p(primals_139.data_ptr()), c_void_p(alias_194.data_ptr()), c_void_p(alias_195.data_ptr()), c_void_p(primals_138.data_ptr()), c_void_p(convolution_48.data_ptr()), c_void_p(buf403.data_ptr()), c_void_p(buf404.data_ptr()), c_void_p(buf405.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(buf408.data_ptr()), c_void_p(buf409.data_ptr()), c_void_p(buf411.data_ptr()), c_void_p(buf412.data_ptr()), c_void_p(buf413.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(buf416.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(buf418.data_ptr()), c_void_p(buf419.data_ptr()), c_void_p(buf422.data_ptr()), c_void_p(buf421.data_ptr()))
    del add_162
    del alias_192
    del alias_193
    del alias_194
    del alias_195
    del avg_pool2d_23
    del buf407
    del buf410
    del convolution_48
    del primals_138
    del primals_139
    del primals_141
    del primals_142
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf423 = aten.convolution_backward(buf422, clone_44, primals_315, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_44
    del primals_315
    buf424 = buf423[0]
    buf425 = buf423[1]
    buf426 = buf423[2]
    del buf423
    buf427 = buf424; del buf424  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_29(c_void_p(buf427.data_ptr()), c_void_p(convolution_47.data_ptr()))
    del convolution_47
    # Source Nodes: [x_190], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf428 = aten.convolution_backward(buf427, add_158, primals_313, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_158
    del buf427
    del primals_313
    buf429 = buf428[0]
    buf430 = buf428[1]
    buf431 = buf428[2]
    del buf428
    buf432 = buf415; del buf415  # reuse
    buf433 = buf414; del buf414  # reuse
    buf434 = buf417; del buf417  # reuse
    buf435 = buf416; del buf416  # reuse
    buf436 = reinterpret_tensor(buf429, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf429  # reuse
    buf437 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf438 = empty((384, ), device='cpu', dtype=torch.float32)
    buf439 = buf420; del buf420  # reuse
    buf440 = reinterpret_tensor(buf422, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf422  # reuse
    buf441 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf442 = buf413; del buf413  # reuse
    buf443 = buf404; del buf404  # reuse
    buf444 = buf403; del buf403  # reuse
    buf445 = buf406; del buf406  # reuse
    buf446 = buf405; del buf405  # reuse
    buf447 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf448 = empty((384, ), device='cpu', dtype=torch.float32)
    buf449 = buf19; del buf19  # reuse
    buf451 = reinterpret_tensor(buf411, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf411  # reuse
    buf450 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_30(c_void_p(buf436.data_ptr()), c_void_p(buf439.data_ptr()), c_void_p(buf449.data_ptr()), c_void_p(avg_pool2d_22.data_ptr()), c_void_p(add_155.data_ptr()), c_void_p(primals_135.data_ptr()), c_void_p(primals_136.data_ptr()), c_void_p(alias_197.data_ptr()), c_void_p(alias_196.data_ptr()), c_void_p(primals_133.data_ptr()), c_void_p(alias_198.data_ptr()), c_void_p(alias_199.data_ptr()), c_void_p(primals_132.data_ptr()), c_void_p(convolution_46.data_ptr()), c_void_p(buf432.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf434.data_ptr()), c_void_p(buf435.data_ptr()), c_void_p(buf437.data_ptr()), c_void_p(buf438.data_ptr()), c_void_p(buf440.data_ptr()), c_void_p(buf441.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(buf443.data_ptr()), c_void_p(buf444.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(buf446.data_ptr()), c_void_p(buf447.data_ptr()), c_void_p(buf448.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(buf450.data_ptr()))
    del add_155
    del alias_196
    del alias_197
    del alias_198
    del alias_199
    del avg_pool2d_22
    del buf436
    del buf439
    del convolution_46
    del primals_132
    del primals_133
    del primals_135
    del primals_136
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf452 = aten.convolution_backward(buf451, clone_42, primals_311, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_42
    del primals_311
    buf453 = buf452[0]
    buf454 = buf452[1]
    buf455 = buf452[2]
    del buf452
    buf456 = buf453; del buf453  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_31(c_void_p(buf456.data_ptr()), c_void_p(convolution_45.data_ptr()))
    del convolution_45
    # Source Nodes: [x_182], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf457 = aten.convolution_backward(buf456, add_151, primals_309, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_151
    del buf456
    del primals_309
    buf458 = buf457[0]
    buf459 = buf457[1]
    buf460 = buf457[2]
    del buf457
    buf461 = buf444; del buf444  # reuse
    buf462 = buf443; del buf443  # reuse
    buf463 = buf446; del buf446  # reuse
    buf464 = buf445; del buf445  # reuse
    buf465 = reinterpret_tensor(buf458, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf458  # reuse
    buf466 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf467 = empty((384, ), device='cpu', dtype=torch.float32)
    buf468 = buf449; del buf449  # reuse
    buf469 = reinterpret_tensor(buf451, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf451  # reuse
    buf470 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf471 = buf442; del buf442  # reuse
    buf472 = buf433; del buf433  # reuse
    buf473 = buf432; del buf432  # reuse
    buf474 = buf435; del buf435  # reuse
    buf475 = buf434; del buf434  # reuse
    buf476 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf477 = empty((384, ), device='cpu', dtype=torch.float32)
    buf478 = buf18; del buf18  # reuse
    buf480 = reinterpret_tensor(buf440, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf440  # reuse
    buf479 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_32(c_void_p(buf465.data_ptr()), c_void_p(buf468.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(avg_pool2d_21.data_ptr()), c_void_p(add_148.data_ptr()), c_void_p(primals_129.data_ptr()), c_void_p(primals_130.data_ptr()), c_void_p(alias_201.data_ptr()), c_void_p(alias_200.data_ptr()), c_void_p(primals_127.data_ptr()), c_void_p(alias_202.data_ptr()), c_void_p(alias_203.data_ptr()), c_void_p(primals_126.data_ptr()), c_void_p(convolution_44.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(buf462.data_ptr()), c_void_p(buf463.data_ptr()), c_void_p(buf464.data_ptr()), c_void_p(buf466.data_ptr()), c_void_p(buf467.data_ptr()), c_void_p(buf469.data_ptr()), c_void_p(buf470.data_ptr()), c_void_p(buf471.data_ptr()), c_void_p(buf472.data_ptr()), c_void_p(buf473.data_ptr()), c_void_p(buf474.data_ptr()), c_void_p(buf475.data_ptr()), c_void_p(buf476.data_ptr()), c_void_p(buf477.data_ptr()), c_void_p(buf480.data_ptr()), c_void_p(buf479.data_ptr()))
    del add_148
    del alias_200
    del alias_201
    del alias_202
    del alias_203
    del avg_pool2d_21
    del buf465
    del buf468
    del convolution_44
    del primals_126
    del primals_127
    del primals_129
    del primals_130
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf481 = aten.convolution_backward(buf480, clone_40, primals_307, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_40
    del primals_307
    buf482 = buf481[0]
    buf483 = buf481[1]
    buf484 = buf481[2]
    del buf481
    buf485 = buf482; del buf482  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_33(c_void_p(buf485.data_ptr()), c_void_p(convolution_43.data_ptr()))
    del convolution_43
    # Source Nodes: [x_174], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf486 = aten.convolution_backward(buf485, add_144, primals_305, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_144
    del buf485
    del primals_305
    buf487 = buf486[0]
    buf488 = buf486[1]
    buf489 = buf486[2]
    del buf486
    buf490 = buf473; del buf473  # reuse
    buf491 = buf472; del buf472  # reuse
    buf492 = buf475; del buf475  # reuse
    buf493 = buf474; del buf474  # reuse
    buf494 = reinterpret_tensor(buf487, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf487  # reuse
    buf495 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf496 = empty((384, ), device='cpu', dtype=torch.float32)
    buf497 = buf478; del buf478  # reuse
    buf498 = reinterpret_tensor(buf480, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf480  # reuse
    buf499 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf500 = buf471; del buf471  # reuse
    buf501 = buf462; del buf462  # reuse
    buf502 = buf461; del buf461  # reuse
    buf503 = buf464; del buf464  # reuse
    buf504 = buf463; del buf463  # reuse
    buf505 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf506 = empty((384, ), device='cpu', dtype=torch.float32)
    buf507 = buf17; del buf17  # reuse
    buf509 = reinterpret_tensor(buf469, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf469  # reuse
    buf508 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_34(c_void_p(buf494.data_ptr()), c_void_p(buf497.data_ptr()), c_void_p(buf507.data_ptr()), c_void_p(avg_pool2d_20.data_ptr()), c_void_p(add_141.data_ptr()), c_void_p(primals_123.data_ptr()), c_void_p(primals_124.data_ptr()), c_void_p(alias_205.data_ptr()), c_void_p(alias_204.data_ptr()), c_void_p(primals_121.data_ptr()), c_void_p(alias_206.data_ptr()), c_void_p(alias_207.data_ptr()), c_void_p(primals_120.data_ptr()), c_void_p(convolution_42.data_ptr()), c_void_p(buf490.data_ptr()), c_void_p(buf491.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(buf493.data_ptr()), c_void_p(buf495.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf500.data_ptr()), c_void_p(buf501.data_ptr()), c_void_p(buf502.data_ptr()), c_void_p(buf503.data_ptr()), c_void_p(buf504.data_ptr()), c_void_p(buf505.data_ptr()), c_void_p(buf506.data_ptr()), c_void_p(buf509.data_ptr()), c_void_p(buf508.data_ptr()))
    del add_141
    del alias_204
    del alias_205
    del alias_206
    del alias_207
    del avg_pool2d_20
    del buf494
    del buf497
    del convolution_42
    del primals_120
    del primals_121
    del primals_123
    del primals_124
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf510 = aten.convolution_backward(buf509, clone_38, primals_303, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_38
    del primals_303
    buf511 = buf510[0]
    buf512 = buf510[1]
    buf513 = buf510[2]
    del buf510
    buf514 = buf511; del buf511  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_35(c_void_p(buf514.data_ptr()), c_void_p(convolution_41.data_ptr()))
    del convolution_41
    # Source Nodes: [x_166], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf515 = aten.convolution_backward(buf514, add_137, primals_301, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_137
    del buf514
    del primals_301
    buf516 = buf515[0]
    buf517 = buf515[1]
    buf518 = buf515[2]
    del buf515
    buf519 = buf502; del buf502  # reuse
    buf520 = buf501; del buf501  # reuse
    buf521 = buf504; del buf504  # reuse
    buf522 = buf503; del buf503  # reuse
    buf523 = reinterpret_tensor(buf516, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf516  # reuse
    buf524 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf525 = empty((384, ), device='cpu', dtype=torch.float32)
    buf526 = buf507; del buf507  # reuse
    buf527 = reinterpret_tensor(buf509, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf509  # reuse
    buf528 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf529 = buf500; del buf500  # reuse
    buf530 = buf491; del buf491  # reuse
    buf531 = buf490; del buf490  # reuse
    buf532 = buf493; del buf493  # reuse
    buf533 = buf492; del buf492  # reuse
    buf534 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf535 = empty((384, ), device='cpu', dtype=torch.float32)
    buf536 = buf16; del buf16  # reuse
    buf538 = reinterpret_tensor(buf498, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf498  # reuse
    buf537 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_36(c_void_p(buf523.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(buf536.data_ptr()), c_void_p(avg_pool2d_19.data_ptr()), c_void_p(add_134.data_ptr()), c_void_p(primals_117.data_ptr()), c_void_p(primals_118.data_ptr()), c_void_p(alias_209.data_ptr()), c_void_p(alias_208.data_ptr()), c_void_p(primals_115.data_ptr()), c_void_p(alias_210.data_ptr()), c_void_p(alias_211.data_ptr()), c_void_p(primals_114.data_ptr()), c_void_p(convolution_40.data_ptr()), c_void_p(buf519.data_ptr()), c_void_p(buf520.data_ptr()), c_void_p(buf521.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf525.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(buf528.data_ptr()), c_void_p(buf529.data_ptr()), c_void_p(buf530.data_ptr()), c_void_p(buf531.data_ptr()), c_void_p(buf532.data_ptr()), c_void_p(buf533.data_ptr()), c_void_p(buf534.data_ptr()), c_void_p(buf535.data_ptr()), c_void_p(buf538.data_ptr()), c_void_p(buf537.data_ptr()))
    del add_134
    del alias_208
    del alias_209
    del alias_210
    del alias_211
    del avg_pool2d_19
    del buf523
    del buf526
    del convolution_40
    del primals_114
    del primals_115
    del primals_117
    del primals_118
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf539 = aten.convolution_backward(buf538, clone_36, primals_299, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_36
    del primals_299
    buf540 = buf539[0]
    buf541 = buf539[1]
    buf542 = buf539[2]
    del buf539
    buf543 = buf540; del buf540  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_37(c_void_p(buf543.data_ptr()), c_void_p(convolution_39.data_ptr()))
    del convolution_39
    # Source Nodes: [x_158], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf544 = aten.convolution_backward(buf543, add_130, primals_297, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_130
    del buf543
    del primals_297
    buf545 = buf544[0]
    buf546 = buf544[1]
    buf547 = buf544[2]
    del buf544
    buf548 = buf531; del buf531  # reuse
    buf549 = buf530; del buf530  # reuse
    buf550 = buf533; del buf533  # reuse
    buf551 = buf532; del buf532  # reuse
    buf552 = reinterpret_tensor(buf545, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf545  # reuse
    buf553 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf554 = empty((384, ), device='cpu', dtype=torch.float32)
    buf555 = buf536; del buf536  # reuse
    buf556 = reinterpret_tensor(buf538, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf538  # reuse
    buf557 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf558 = buf529; del buf529  # reuse
    buf559 = buf520; del buf520  # reuse
    buf560 = buf519; del buf519  # reuse
    buf561 = buf522; del buf522  # reuse
    buf562 = buf521; del buf521  # reuse
    buf563 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf564 = empty((384, ), device='cpu', dtype=torch.float32)
    buf565 = buf15; del buf15  # reuse
    buf567 = reinterpret_tensor(buf527, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf527  # reuse
    buf566 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_38(c_void_p(buf552.data_ptr()), c_void_p(buf555.data_ptr()), c_void_p(buf565.data_ptr()), c_void_p(avg_pool2d_18.data_ptr()), c_void_p(add_127.data_ptr()), c_void_p(primals_111.data_ptr()), c_void_p(primals_112.data_ptr()), c_void_p(alias_213.data_ptr()), c_void_p(alias_212.data_ptr()), c_void_p(primals_109.data_ptr()), c_void_p(alias_214.data_ptr()), c_void_p(alias_215.data_ptr()), c_void_p(primals_108.data_ptr()), c_void_p(convolution_38.data_ptr()), c_void_p(buf548.data_ptr()), c_void_p(buf549.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(buf551.data_ptr()), c_void_p(buf553.data_ptr()), c_void_p(buf554.data_ptr()), c_void_p(buf556.data_ptr()), c_void_p(buf557.data_ptr()), c_void_p(buf558.data_ptr()), c_void_p(buf559.data_ptr()), c_void_p(buf560.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(buf562.data_ptr()), c_void_p(buf563.data_ptr()), c_void_p(buf564.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(buf566.data_ptr()))
    del add_127
    del alias_212
    del alias_213
    del alias_214
    del alias_215
    del avg_pool2d_18
    del buf552
    del buf555
    del convolution_38
    del primals_108
    del primals_109
    del primals_111
    del primals_112
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf568 = aten.convolution_backward(buf567, clone_34, primals_295, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_34
    del primals_295
    buf569 = buf568[0]
    buf570 = buf568[1]
    buf571 = buf568[2]
    del buf568
    buf572 = buf569; del buf569  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_39(c_void_p(buf572.data_ptr()), c_void_p(convolution_37.data_ptr()))
    del convolution_37
    # Source Nodes: [x_150], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf573 = aten.convolution_backward(buf572, add_123, primals_293, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_123
    del buf572
    del primals_293
    buf574 = buf573[0]
    buf575 = buf573[1]
    buf576 = buf573[2]
    del buf573
    buf577 = buf560; del buf560  # reuse
    buf578 = buf559; del buf559  # reuse
    buf579 = buf562; del buf562  # reuse
    buf580 = buf561; del buf561  # reuse
    buf581 = reinterpret_tensor(buf574, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf574  # reuse
    buf582 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf583 = empty((384, ), device='cpu', dtype=torch.float32)
    buf584 = buf565; del buf565  # reuse
    buf585 = reinterpret_tensor(buf567, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf567  # reuse
    buf586 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf587 = buf558; del buf558  # reuse
    buf588 = buf549; del buf549  # reuse
    buf589 = buf548; del buf548  # reuse
    buf590 = buf551; del buf551  # reuse
    buf591 = buf550; del buf550  # reuse
    buf592 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf593 = empty((384, ), device='cpu', dtype=torch.float32)
    buf594 = buf14; del buf14  # reuse
    buf596 = reinterpret_tensor(buf556, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf556  # reuse
    buf595 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_40(c_void_p(buf581.data_ptr()), c_void_p(buf584.data_ptr()), c_void_p(buf594.data_ptr()), c_void_p(avg_pool2d_17.data_ptr()), c_void_p(add_120.data_ptr()), c_void_p(primals_105.data_ptr()), c_void_p(primals_106.data_ptr()), c_void_p(alias_217.data_ptr()), c_void_p(alias_216.data_ptr()), c_void_p(primals_103.data_ptr()), c_void_p(alias_218.data_ptr()), c_void_p(alias_219.data_ptr()), c_void_p(primals_102.data_ptr()), c_void_p(convolution_36.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(buf578.data_ptr()), c_void_p(buf579.data_ptr()), c_void_p(buf580.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(buf585.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf587.data_ptr()), c_void_p(buf588.data_ptr()), c_void_p(buf589.data_ptr()), c_void_p(buf590.data_ptr()), c_void_p(buf591.data_ptr()), c_void_p(buf592.data_ptr()), c_void_p(buf593.data_ptr()), c_void_p(buf596.data_ptr()), c_void_p(buf595.data_ptr()))
    del add_120
    del alias_216
    del alias_217
    del alias_218
    del alias_219
    del avg_pool2d_17
    del buf581
    del buf584
    del convolution_36
    del primals_102
    del primals_103
    del primals_105
    del primals_106
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf597 = aten.convolution_backward(buf596, clone_32, primals_291, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_32
    del primals_291
    buf598 = buf597[0]
    buf599 = buf597[1]
    buf600 = buf597[2]
    del buf597
    buf601 = buf598; del buf598  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_41(c_void_p(buf601.data_ptr()), c_void_p(convolution_35.data_ptr()))
    del convolution_35
    # Source Nodes: [x_142], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf602 = aten.convolution_backward(buf601, add_116, primals_289, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_116
    del buf601
    del primals_289
    buf603 = buf602[0]
    buf604 = buf602[1]
    buf605 = buf602[2]
    del buf602
    buf606 = buf589; del buf589  # reuse
    buf607 = buf588; del buf588  # reuse
    buf608 = buf591; del buf591  # reuse
    buf609 = buf590; del buf590  # reuse
    buf610 = reinterpret_tensor(buf603, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf603  # reuse
    buf611 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf612 = empty((384, ), device='cpu', dtype=torch.float32)
    buf613 = buf594; del buf594  # reuse
    buf614 = reinterpret_tensor(buf596, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf596  # reuse
    buf615 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf616 = buf587; del buf587  # reuse
    buf617 = buf578; del buf578  # reuse
    buf618 = buf577; del buf577  # reuse
    buf619 = buf580; del buf580  # reuse
    buf620 = buf579; del buf579  # reuse
    buf621 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf622 = empty((384, ), device='cpu', dtype=torch.float32)
    buf623 = buf13; del buf13  # reuse
    buf625 = reinterpret_tensor(buf585, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf585  # reuse
    buf624 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_42(c_void_p(buf610.data_ptr()), c_void_p(buf613.data_ptr()), c_void_p(buf623.data_ptr()), c_void_p(avg_pool2d_16.data_ptr()), c_void_p(add_113.data_ptr()), c_void_p(primals_99.data_ptr()), c_void_p(primals_100.data_ptr()), c_void_p(alias_221.data_ptr()), c_void_p(alias_220.data_ptr()), c_void_p(primals_97.data_ptr()), c_void_p(alias_222.data_ptr()), c_void_p(alias_223.data_ptr()), c_void_p(primals_96.data_ptr()), c_void_p(convolution_34.data_ptr()), c_void_p(buf606.data_ptr()), c_void_p(buf607.data_ptr()), c_void_p(buf608.data_ptr()), c_void_p(buf609.data_ptr()), c_void_p(buf611.data_ptr()), c_void_p(buf612.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(buf615.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf617.data_ptr()), c_void_p(buf618.data_ptr()), c_void_p(buf619.data_ptr()), c_void_p(buf620.data_ptr()), c_void_p(buf621.data_ptr()), c_void_p(buf622.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(buf624.data_ptr()))
    del add_113
    del alias_220
    del alias_221
    del alias_222
    del alias_223
    del avg_pool2d_16
    del buf610
    del buf613
    del convolution_34
    del primals_100
    del primals_96
    del primals_97
    del primals_99
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf626 = aten.convolution_backward(buf625, clone_30, primals_287, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_30
    del primals_287
    buf627 = buf626[0]
    buf628 = buf626[1]
    buf629 = buf626[2]
    del buf626
    buf630 = buf627; del buf627  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_43(c_void_p(buf630.data_ptr()), c_void_p(convolution_33.data_ptr()))
    del convolution_33
    # Source Nodes: [x_134], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf631 = aten.convolution_backward(buf630, add_109, primals_285, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_109
    del buf630
    del primals_285
    buf632 = buf631[0]
    buf633 = buf631[1]
    buf634 = buf631[2]
    del buf631
    buf635 = buf618; del buf618  # reuse
    buf636 = buf617; del buf617  # reuse
    buf637 = buf620; del buf620  # reuse
    buf638 = buf619; del buf619  # reuse
    buf639 = reinterpret_tensor(buf632, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf632  # reuse
    buf640 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf641 = empty((384, ), device='cpu', dtype=torch.float32)
    buf642 = buf623; del buf623  # reuse
    buf643 = reinterpret_tensor(buf625, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf625  # reuse
    buf644 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf645 = buf616; del buf616  # reuse
    buf646 = buf607; del buf607  # reuse
    buf647 = buf606; del buf606  # reuse
    buf648 = buf609; del buf609  # reuse
    buf649 = buf608; del buf608  # reuse
    buf650 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf651 = empty((384, ), device='cpu', dtype=torch.float32)
    buf652 = buf12; del buf12  # reuse
    buf654 = reinterpret_tensor(buf614, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf614  # reuse
    buf653 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_44(c_void_p(buf639.data_ptr()), c_void_p(buf642.data_ptr()), c_void_p(buf652.data_ptr()), c_void_p(avg_pool2d_15.data_ptr()), c_void_p(add_106.data_ptr()), c_void_p(primals_93.data_ptr()), c_void_p(primals_94.data_ptr()), c_void_p(alias_225.data_ptr()), c_void_p(alias_224.data_ptr()), c_void_p(primals_91.data_ptr()), c_void_p(alias_226.data_ptr()), c_void_p(alias_227.data_ptr()), c_void_p(primals_90.data_ptr()), c_void_p(convolution_32.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf637.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(buf640.data_ptr()), c_void_p(buf641.data_ptr()), c_void_p(buf643.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(buf645.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(buf647.data_ptr()), c_void_p(buf648.data_ptr()), c_void_p(buf649.data_ptr()), c_void_p(buf650.data_ptr()), c_void_p(buf651.data_ptr()), c_void_p(buf654.data_ptr()), c_void_p(buf653.data_ptr()))
    del add_106
    del alias_224
    del alias_225
    del alias_226
    del alias_227
    del avg_pool2d_15
    del buf639
    del buf642
    del convolution_32
    del primals_90
    del primals_91
    del primals_93
    del primals_94
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf655 = aten.convolution_backward(buf654, clone_28, primals_283, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_28
    del primals_283
    buf656 = buf655[0]
    buf657 = buf655[1]
    buf658 = buf655[2]
    del buf655
    buf659 = buf656; del buf656  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_45(c_void_p(buf659.data_ptr()), c_void_p(convolution_31.data_ptr()))
    del convolution_31
    # Source Nodes: [x_126], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf660 = aten.convolution_backward(buf659, add_102, primals_281, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_102
    del primals_281
    buf661 = buf660[0]
    buf662 = buf660[1]
    buf663 = buf660[2]
    del buf660
    buf664 = buf647; del buf647  # reuse
    buf665 = buf646; del buf646  # reuse
    buf666 = buf649; del buf649  # reuse
    buf667 = buf648; del buf648  # reuse
    buf668 = reinterpret_tensor(buf661, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf661  # reuse
    buf669 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf670 = empty((384, ), device='cpu', dtype=torch.float32)
    buf671 = buf652; del buf652  # reuse
    buf672 = reinterpret_tensor(buf654, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf654  # reuse
    buf673 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf674 = buf645; del buf645  # reuse
    buf675 = buf636; del buf636  # reuse
    buf676 = buf635; del buf635  # reuse
    buf677 = buf638; del buf638  # reuse
    buf678 = buf637; del buf637  # reuse
    buf679 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf680 = empty((384, ), device='cpu', dtype=torch.float32)
    buf681 = buf11; del buf11  # reuse
    buf683 = reinterpret_tensor(buf643, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf643  # reuse
    buf682 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_46(c_void_p(buf668.data_ptr()), c_void_p(buf671.data_ptr()), c_void_p(buf681.data_ptr()), c_void_p(avg_pool2d_14.data_ptr()), c_void_p(add_99.data_ptr()), c_void_p(primals_87.data_ptr()), c_void_p(primals_88.data_ptr()), c_void_p(alias_229.data_ptr()), c_void_p(alias_228.data_ptr()), c_void_p(primals_85.data_ptr()), c_void_p(alias_230.data_ptr()), c_void_p(alias_231.data_ptr()), c_void_p(primals_84.data_ptr()), c_void_p(convolution_30.data_ptr()), c_void_p(buf664.data_ptr()), c_void_p(buf665.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(buf670.data_ptr()), c_void_p(buf672.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf674.data_ptr()), c_void_p(buf675.data_ptr()), c_void_p(buf676.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(buf678.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(buf683.data_ptr()), c_void_p(buf682.data_ptr()))
    del add_99
    del alias_228
    del alias_229
    del alias_230
    del alias_231
    del avg_pool2d_14
    del buf668
    del buf671
    del convolution_30
    del primals_84
    del primals_85
    del primals_87
    del primals_88
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf684 = aten.convolution_backward(buf683, clone_26, primals_279, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_26
    del primals_279
    buf685 = buf684[0]
    buf686 = buf684[1]
    buf687 = buf684[2]
    del buf684
    buf688 = buf685; del buf685  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_47(c_void_p(buf688.data_ptr()), c_void_p(convolution_29.data_ptr()))
    del convolution_29
    # Source Nodes: [x_118], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf689 = aten.convolution_backward(buf688, add_95, primals_277, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_95
    del primals_277
    buf690 = buf689[0]
    buf691 = buf689[1]
    buf692 = buf689[2]
    del buf689
    buf693 = buf676; del buf676  # reuse
    buf694 = buf675; del buf675  # reuse
    buf695 = buf678; del buf678  # reuse
    buf696 = buf677; del buf677  # reuse
    buf697 = reinterpret_tensor(buf690, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf690  # reuse
    buf698 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf699 = empty((384, ), device='cpu', dtype=torch.float32)
    buf700 = buf681; del buf681  # reuse
    buf701 = reinterpret_tensor(buf683, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf683  # reuse
    buf702 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf703 = buf674; del buf674  # reuse
    buf704 = buf665; del buf665  # reuse
    buf705 = buf664; del buf664  # reuse
    buf706 = buf667; del buf667  # reuse
    buf707 = buf666; del buf666  # reuse
    buf708 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf709 = empty((384, ), device='cpu', dtype=torch.float32)
    buf710 = buf10; del buf10  # reuse
    buf712 = reinterpret_tensor(buf672, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf672  # reuse
    buf711 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_48(c_void_p(buf697.data_ptr()), c_void_p(buf700.data_ptr()), c_void_p(buf710.data_ptr()), c_void_p(avg_pool2d_13.data_ptr()), c_void_p(add_92.data_ptr()), c_void_p(primals_81.data_ptr()), c_void_p(primals_82.data_ptr()), c_void_p(alias_233.data_ptr()), c_void_p(alias_232.data_ptr()), c_void_p(primals_79.data_ptr()), c_void_p(alias_234.data_ptr()), c_void_p(alias_235.data_ptr()), c_void_p(primals_78.data_ptr()), c_void_p(convolution_28.data_ptr()), c_void_p(buf693.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(buf695.data_ptr()), c_void_p(buf696.data_ptr()), c_void_p(buf698.data_ptr()), c_void_p(buf699.data_ptr()), c_void_p(buf701.data_ptr()), c_void_p(buf702.data_ptr()), c_void_p(buf703.data_ptr()), c_void_p(buf704.data_ptr()), c_void_p(buf705.data_ptr()), c_void_p(buf706.data_ptr()), c_void_p(buf707.data_ptr()), c_void_p(buf708.data_ptr()), c_void_p(buf709.data_ptr()), c_void_p(buf712.data_ptr()), c_void_p(buf711.data_ptr()))
    del add_92
    del alias_232
    del alias_233
    del alias_234
    del alias_235
    del avg_pool2d_13
    del buf697
    del buf700
    del convolution_28
    del primals_78
    del primals_79
    del primals_81
    del primals_82
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf713 = aten.convolution_backward(buf712, clone_24, primals_275, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_24
    del primals_275
    buf714 = buf713[0]
    buf715 = buf713[1]
    buf716 = buf713[2]
    del buf713
    buf717 = buf714; del buf714  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_49(c_void_p(buf717.data_ptr()), c_void_p(convolution_27.data_ptr()))
    del convolution_27
    # Source Nodes: [x_110], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf718 = aten.convolution_backward(buf717, add_88, primals_273, [1536], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_88
    del primals_273
    buf719 = buf718[0]
    buf720 = buf718[1]
    buf721 = buf718[2]
    del buf718
    buf722 = buf705; del buf705  # reuse
    buf723 = buf704; del buf704  # reuse
    buf724 = buf707; del buf707  # reuse
    buf725 = buf706; del buf706  # reuse
    buf726 = reinterpret_tensor(buf719, (8, 1, 384, 196), (75264, 602112, 1, 384), 0); del buf719  # reuse
    buf727 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf728 = empty((384, ), device='cpu', dtype=torch.float32)
    buf729 = buf710; del buf710  # reuse
    buf730 = reinterpret_tensor(buf712, (8, 384, 14, 14), (75264, 196, 14, 1), 0); del buf712  # reuse
    buf731 = empty((1, 384, 1, 1), device='cpu', dtype=torch.float32)
    buf732 = buf703; del buf703  # reuse
    buf733 = buf694; del buf694  # reuse
    buf734 = buf693; del buf693  # reuse
    buf735 = buf696; del buf696  # reuse
    buf736 = buf695; del buf695  # reuse
    buf737 = empty((1, 384), device='cpu', dtype=torch.float32)
    buf738 = empty((384, ), device='cpu', dtype=torch.float32)
    buf739 = reinterpret_tensor(buf701, (8, 384, 14, 14), (75264, 1, 5376, 384), 0); del buf701  # reuse
    cpp_fused_add_avg_pool2d_backward_mul_native_group_norm_backward_sub_sum_50(c_void_p(buf726.data_ptr()), c_void_p(buf729.data_ptr()), c_void_p(convolution_26.data_ptr()), c_void_p(avg_pool2d_12.data_ptr()), c_void_p(add_85.data_ptr()), c_void_p(primals_75.data_ptr()), c_void_p(primals_76.data_ptr()), c_void_p(alias_237.data_ptr()), c_void_p(alias_236.data_ptr()), c_void_p(primals_73.data_ptr()), c_void_p(alias_238.data_ptr()), c_void_p(alias_239.data_ptr()), c_void_p(buf722.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(buf727.data_ptr()), c_void_p(buf728.data_ptr()), c_void_p(buf730.data_ptr()), c_void_p(buf731.data_ptr()), c_void_p(buf732.data_ptr()), c_void_p(buf733.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf735.data_ptr()), c_void_p(buf736.data_ptr()), c_void_p(buf737.data_ptr()), c_void_p(buf738.data_ptr()), c_void_p(buf739.data_ptr()))
    del add_85
    del alias_236
    del alias_237
    del alias_238
    del alias_239
    del avg_pool2d_12
    del buf722
    del buf723
    del buf726
    del buf729
    del buf730
    del buf732
    del buf733
    del buf734
    del convolution_26
    del primals_73
    del primals_75
    del primals_76
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf740 = aten.convolution_backward(buf739, add_83, primals_271, [384], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_83
    del buf739
    del primals_271
    buf741 = buf740[0]
    buf742 = buf740[1]
    buf743 = buf740[2]
    del buf740
    buf744 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    buf745 = reinterpret_tensor(buf191, (8, 192, 28, 28), (150528, 1, 5376, 192), 0); del buf191  # reuse
    cpp_fused_convolution_backward_mul_sum_51(c_void_p(buf741.data_ptr()), c_void_p(convolution_25.data_ptr()), c_void_p(primals_72.data_ptr()), c_void_p(buf744.data_ptr()), c_void_p(buf745.data_ptr()))
    del convolution_25
    del primals_72
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf746 = aten.convolution_backward(buf745, clone_22, primals_269, [192], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_22
    del primals_269
    buf747 = buf746[0]
    buf748 = buf746[1]
    buf749 = buf746[2]
    del buf746
    buf750 = buf747; del buf747  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_52(c_void_p(buf750.data_ptr()), c_void_p(convolution_24.data_ptr()))
    del convolution_24
    # Source Nodes: [x_98], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf751 = aten.convolution_backward(buf750, add_81, primals_267, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_81
    del buf750
    del primals_267
    buf752 = buf751[0]
    buf753 = buf751[1]
    buf754 = buf751[2]
    del buf751
    buf755 = empty((8, 192), device='cpu', dtype=torch.float32)
    buf756 = empty((8, 192), device='cpu', dtype=torch.float32)
    buf757 = buf736; del buf736  # reuse
    buf758 = buf735; del buf735  # reuse
    buf759 = reinterpret_tensor(buf752, (8, 1, 192, 784), (150528, 1204224, 1, 192), 0); del buf752  # reuse
    buf760 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf761 = empty((192, ), device='cpu', dtype=torch.float32)
    buf762 = buf741; del buf741  # reuse
    buf763 = buf745; del buf745  # reuse
    buf764 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    buf765 = reinterpret_tensor(buf162, (8, 192, 28, 28), (150528, 784, 28, 1), 0); del buf162  # reuse
    buf766 = empty((8, 192), device='cpu', dtype=torch.float32)
    buf767 = empty((8, 192), device='cpu', dtype=torch.float32)
    buf768 = buf725; del buf725  # reuse
    buf769 = buf724; del buf724  # reuse
    buf770 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf771 = empty((192, ), device='cpu', dtype=torch.float32)
    buf772 = buf765; del buf765  # reuse
    buf774 = reinterpret_tensor(buf133, (8, 192, 28, 28), (150528, 1, 5376, 192), 0); del buf133  # reuse
    buf773 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_53(c_void_p(buf759.data_ptr()), c_void_p(buf762.data_ptr()), c_void_p(buf772.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(avg_pool2d_11.data_ptr()), c_void_p(add_78.data_ptr()), c_void_p(primals_69.data_ptr()), c_void_p(primals_70.data_ptr()), c_void_p(alias_241.data_ptr()), c_void_p(alias_240.data_ptr()), c_void_p(primals_67.data_ptr()), c_void_p(alias_242.data_ptr()), c_void_p(alias_243.data_ptr()), c_void_p(primals_66.data_ptr()), c_void_p(convolution_23.data_ptr()), c_void_p(buf755.data_ptr()), c_void_p(buf756.data_ptr()), c_void_p(buf757.data_ptr()), c_void_p(buf758.data_ptr()), c_void_p(buf760.data_ptr()), c_void_p(buf761.data_ptr()), c_void_p(buf763.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(buf767.data_ptr()), c_void_p(buf768.data_ptr()), c_void_p(buf769.data_ptr()), c_void_p(buf770.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(buf774.data_ptr()), c_void_p(buf773.data_ptr()))
    del add_78
    del alias_240
    del alias_241
    del alias_242
    del alias_243
    del avg_pool2d_11
    del buf759
    del buf762
    del convolution_23
    del primals_66
    del primals_67
    del primals_69
    del primals_70
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf775 = aten.convolution_backward(buf774, clone_20, primals_265, [192], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_20
    del primals_265
    buf776 = buf775[0]
    buf777 = buf775[1]
    buf778 = buf775[2]
    del buf775
    buf779 = buf776; del buf776  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_54(c_void_p(buf779.data_ptr()), c_void_p(convolution_22.data_ptr()))
    del convolution_22
    # Source Nodes: [x_90], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf780 = aten.convolution_backward(buf779, add_74, primals_263, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_74
    del buf779
    del primals_263
    buf781 = buf780[0]
    buf782 = buf780[1]
    buf783 = buf780[2]
    del buf780
    buf784 = buf767; del buf767  # reuse
    buf785 = buf766; del buf766  # reuse
    buf786 = buf769; del buf769  # reuse
    buf787 = buf768; del buf768  # reuse
    buf788 = reinterpret_tensor(buf781, (8, 1, 192, 784), (150528, 1204224, 1, 192), 0); del buf781  # reuse
    buf789 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf790 = empty((192, ), device='cpu', dtype=torch.float32)
    buf791 = buf772; del buf772  # reuse
    buf792 = reinterpret_tensor(buf774, (8, 192, 28, 28), (150528, 784, 28, 1), 0); del buf774  # reuse
    buf793 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    buf794 = buf9; del buf9  # reuse
    buf795 = buf756; del buf756  # reuse
    buf796 = buf755; del buf755  # reuse
    buf797 = buf758; del buf758  # reuse
    buf798 = buf757; del buf757  # reuse
    buf799 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf800 = empty((192, ), device='cpu', dtype=torch.float32)
    buf801 = buf791; del buf791  # reuse
    buf803 = buf763; del buf763  # reuse
    buf802 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_55(c_void_p(buf788.data_ptr()), c_void_p(buf801.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(avg_pool2d_10.data_ptr()), c_void_p(add_71.data_ptr()), c_void_p(primals_63.data_ptr()), c_void_p(primals_64.data_ptr()), c_void_p(alias_245.data_ptr()), c_void_p(alias_244.data_ptr()), c_void_p(primals_61.data_ptr()), c_void_p(alias_246.data_ptr()), c_void_p(alias_247.data_ptr()), c_void_p(primals_60.data_ptr()), c_void_p(convolution_21.data_ptr()), c_void_p(buf784.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(buf786.data_ptr()), c_void_p(buf787.data_ptr()), c_void_p(buf789.data_ptr()), c_void_p(buf790.data_ptr()), c_void_p(buf792.data_ptr()), c_void_p(buf793.data_ptr()), c_void_p(buf794.data_ptr()), c_void_p(buf795.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf797.data_ptr()), c_void_p(buf798.data_ptr()), c_void_p(buf799.data_ptr()), c_void_p(buf800.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(buf802.data_ptr()))
    del add_71
    del alias_244
    del alias_245
    del alias_246
    del alias_247
    del avg_pool2d_10
    del buf788
    del buf792
    del convolution_21
    del primals_60
    del primals_61
    del primals_63
    del primals_64
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf804 = aten.convolution_backward(buf803, clone_18, primals_261, [192], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_18
    del primals_261
    buf805 = buf804[0]
    buf806 = buf804[1]
    buf807 = buf804[2]
    del buf804
    buf808 = buf805; del buf805  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_56(c_void_p(buf808.data_ptr()), c_void_p(convolution_20.data_ptr()))
    del convolution_20
    # Source Nodes: [x_82], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf809 = aten.convolution_backward(buf808, add_67, primals_259, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_67
    del buf808
    del primals_259
    buf810 = buf809[0]
    buf811 = buf809[1]
    buf812 = buf809[2]
    del buf809
    buf813 = buf796; del buf796  # reuse
    buf814 = buf795; del buf795  # reuse
    buf815 = buf798; del buf798  # reuse
    buf816 = buf797; del buf797  # reuse
    buf817 = reinterpret_tensor(buf810, (8, 1, 192, 784), (150528, 1204224, 1, 192), 0); del buf810  # reuse
    buf818 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf819 = empty((192, ), device='cpu', dtype=torch.float32)
    buf820 = buf801; del buf801  # reuse
    buf821 = reinterpret_tensor(buf803, (8, 192, 28, 28), (150528, 784, 28, 1), 0); del buf803  # reuse
    buf822 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    buf823 = buf8; del buf8  # reuse
    buf824 = buf785; del buf785  # reuse
    buf825 = buf784; del buf784  # reuse
    buf826 = buf787; del buf787  # reuse
    buf827 = buf786; del buf786  # reuse
    buf828 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf829 = empty((192, ), device='cpu', dtype=torch.float32)
    buf830 = buf7; del buf7  # reuse
    buf832 = reinterpret_tensor(buf794, (8, 192, 28, 28), (150528, 1, 5376, 192), 0); del buf794  # reuse
    buf831 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_57(c_void_p(buf817.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf830.data_ptr()), c_void_p(avg_pool2d_9.data_ptr()), c_void_p(add_64.data_ptr()), c_void_p(primals_57.data_ptr()), c_void_p(primals_58.data_ptr()), c_void_p(alias_249.data_ptr()), c_void_p(alias_248.data_ptr()), c_void_p(primals_55.data_ptr()), c_void_p(alias_250.data_ptr()), c_void_p(alias_251.data_ptr()), c_void_p(primals_54.data_ptr()), c_void_p(convolution_19.data_ptr()), c_void_p(buf813.data_ptr()), c_void_p(buf814.data_ptr()), c_void_p(buf815.data_ptr()), c_void_p(buf816.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(buf821.data_ptr()), c_void_p(buf822.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(buf824.data_ptr()), c_void_p(buf825.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(buf827.data_ptr()), c_void_p(buf828.data_ptr()), c_void_p(buf829.data_ptr()), c_void_p(buf832.data_ptr()), c_void_p(buf831.data_ptr()))
    del add_64
    del alias_248
    del alias_249
    del alias_250
    del alias_251
    del avg_pool2d_9
    del buf817
    del buf820
    del convolution_19
    del primals_54
    del primals_55
    del primals_57
    del primals_58
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf833 = aten.convolution_backward(buf832, clone_16, primals_257, [192], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_16
    del primals_257
    buf834 = buf833[0]
    buf835 = buf833[1]
    buf836 = buf833[2]
    del buf833
    buf837 = buf834; del buf834  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_58(c_void_p(buf837.data_ptr()), c_void_p(convolution_18.data_ptr()))
    del convolution_18
    # Source Nodes: [x_74], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf838 = aten.convolution_backward(buf837, add_60, primals_255, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_60
    del buf837
    del primals_255
    buf839 = buf838[0]
    buf840 = buf838[1]
    buf841 = buf838[2]
    del buf838
    buf842 = buf825; del buf825  # reuse
    buf843 = buf824; del buf824  # reuse
    buf844 = buf827; del buf827  # reuse
    buf845 = buf826; del buf826  # reuse
    buf846 = reinterpret_tensor(buf839, (8, 1, 192, 784), (150528, 1204224, 1, 192), 0); del buf839  # reuse
    buf847 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf848 = empty((192, ), device='cpu', dtype=torch.float32)
    buf849 = buf830; del buf830  # reuse
    buf850 = reinterpret_tensor(buf832, (8, 192, 28, 28), (150528, 784, 28, 1), 0); del buf832  # reuse
    buf851 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    buf852 = buf823; del buf823  # reuse
    buf853 = buf814; del buf814  # reuse
    buf854 = buf813; del buf813  # reuse
    buf855 = buf816; del buf816  # reuse
    buf856 = buf815; del buf815  # reuse
    buf857 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf858 = empty((192, ), device='cpu', dtype=torch.float32)
    buf859 = buf6; del buf6  # reuse
    buf861 = reinterpret_tensor(buf821, (8, 192, 28, 28), (150528, 1, 5376, 192), 0); del buf821  # reuse
    buf860 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_59(c_void_p(buf846.data_ptr()), c_void_p(buf849.data_ptr()), c_void_p(buf859.data_ptr()), c_void_p(avg_pool2d_8.data_ptr()), c_void_p(add_57.data_ptr()), c_void_p(primals_51.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(alias_253.data_ptr()), c_void_p(alias_252.data_ptr()), c_void_p(primals_49.data_ptr()), c_void_p(alias_254.data_ptr()), c_void_p(alias_255.data_ptr()), c_void_p(primals_48.data_ptr()), c_void_p(convolution_17.data_ptr()), c_void_p(buf842.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(buf844.data_ptr()), c_void_p(buf845.data_ptr()), c_void_p(buf847.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(buf850.data_ptr()), c_void_p(buf851.data_ptr()), c_void_p(buf852.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(buf854.data_ptr()), c_void_p(buf855.data_ptr()), c_void_p(buf856.data_ptr()), c_void_p(buf857.data_ptr()), c_void_p(buf858.data_ptr()), c_void_p(buf861.data_ptr()), c_void_p(buf860.data_ptr()))
    del add_57
    del alias_252
    del alias_253
    del alias_254
    del alias_255
    del avg_pool2d_8
    del buf846
    del buf849
    del convolution_17
    del primals_48
    del primals_49
    del primals_51
    del primals_52
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf862 = aten.convolution_backward(buf861, clone_14, primals_253, [192], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_14
    del primals_253
    buf863 = buf862[0]
    buf864 = buf862[1]
    buf865 = buf862[2]
    del buf862
    buf866 = buf863; del buf863  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_60(c_void_p(buf866.data_ptr()), c_void_p(convolution_16.data_ptr()))
    del convolution_16
    # Source Nodes: [x_66], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf867 = aten.convolution_backward(buf866, add_53, primals_251, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_53
    del buf866
    del primals_251
    buf868 = buf867[0]
    buf869 = buf867[1]
    buf870 = buf867[2]
    del buf867
    buf871 = buf854; del buf854  # reuse
    buf872 = buf853; del buf853  # reuse
    buf873 = buf856; del buf856  # reuse
    buf874 = buf855; del buf855  # reuse
    buf875 = reinterpret_tensor(buf868, (8, 1, 192, 784), (150528, 1204224, 1, 192), 0); del buf868  # reuse
    buf876 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf877 = empty((192, ), device='cpu', dtype=torch.float32)
    buf878 = buf859; del buf859  # reuse
    buf879 = reinterpret_tensor(buf861, (8, 192, 28, 28), (150528, 784, 28, 1), 0); del buf861  # reuse
    buf880 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    buf881 = buf852; del buf852  # reuse
    buf882 = buf843; del buf843  # reuse
    buf883 = buf842; del buf842  # reuse
    buf884 = buf845; del buf845  # reuse
    buf885 = buf844; del buf844  # reuse
    buf886 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf887 = empty((192, ), device='cpu', dtype=torch.float32)
    buf888 = buf5; del buf5  # reuse
    buf890 = reinterpret_tensor(buf850, (8, 192, 28, 28), (150528, 1, 5376, 192), 0); del buf850  # reuse
    buf889 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_61(c_void_p(buf875.data_ptr()), c_void_p(buf878.data_ptr()), c_void_p(buf888.data_ptr()), c_void_p(avg_pool2d_7.data_ptr()), c_void_p(add_50.data_ptr()), c_void_p(primals_45.data_ptr()), c_void_p(primals_46.data_ptr()), c_void_p(alias_257.data_ptr()), c_void_p(alias_256.data_ptr()), c_void_p(primals_43.data_ptr()), c_void_p(alias_258.data_ptr()), c_void_p(alias_259.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(convolution_15.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(buf872.data_ptr()), c_void_p(buf873.data_ptr()), c_void_p(buf874.data_ptr()), c_void_p(buf876.data_ptr()), c_void_p(buf877.data_ptr()), c_void_p(buf879.data_ptr()), c_void_p(buf880.data_ptr()), c_void_p(buf881.data_ptr()), c_void_p(buf882.data_ptr()), c_void_p(buf883.data_ptr()), c_void_p(buf884.data_ptr()), c_void_p(buf885.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(buf887.data_ptr()), c_void_p(buf890.data_ptr()), c_void_p(buf889.data_ptr()))
    del add_50
    del alias_256
    del alias_257
    del alias_258
    del alias_259
    del avg_pool2d_7
    del buf875
    del buf878
    del convolution_15
    del primals_42
    del primals_43
    del primals_45
    del primals_46
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf891 = aten.convolution_backward(buf890, clone_12, primals_249, [192], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_12
    del primals_249
    buf892 = buf891[0]
    buf893 = buf891[1]
    buf894 = buf891[2]
    del buf891
    buf895 = buf892; del buf892  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_62(c_void_p(buf895.data_ptr()), c_void_p(convolution_14.data_ptr()))
    del convolution_14
    # Source Nodes: [x_58], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf896 = aten.convolution_backward(buf895, add_46, primals_247, [768], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_46
    del buf895
    del primals_247
    buf897 = buf896[0]
    buf898 = buf896[1]
    buf899 = buf896[2]
    del buf896
    buf900 = buf883; del buf883  # reuse
    buf901 = buf882; del buf882  # reuse
    buf902 = buf885; del buf885  # reuse
    buf903 = buf884; del buf884  # reuse
    buf904 = reinterpret_tensor(buf897, (8, 1, 192, 784), (150528, 1204224, 1, 192), 0); del buf897  # reuse
    buf905 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf906 = empty((192, ), device='cpu', dtype=torch.float32)
    buf907 = buf888; del buf888  # reuse
    buf908 = reinterpret_tensor(buf890, (8, 192, 28, 28), (150528, 784, 28, 1), 0); del buf890  # reuse
    buf909 = empty((1, 192, 1, 1), device='cpu', dtype=torch.float32)
    buf910 = buf881; del buf881  # reuse
    buf911 = buf872; del buf872  # reuse
    buf912 = buf871; del buf871  # reuse
    buf913 = buf874; del buf874  # reuse
    buf914 = buf873; del buf873  # reuse
    buf915 = empty((1, 192), device='cpu', dtype=torch.float32)
    buf916 = empty((192, ), device='cpu', dtype=torch.float32)
    buf917 = reinterpret_tensor(buf879, (8, 192, 28, 28), (150528, 1, 5376, 192), 0); del buf879  # reuse
    cpp_fused_add_avg_pool2d_backward_mul_native_group_norm_backward_sub_sum_63(c_void_p(buf904.data_ptr()), c_void_p(buf907.data_ptr()), c_void_p(convolution_13.data_ptr()), c_void_p(avg_pool2d_6.data_ptr()), c_void_p(add_43.data_ptr()), c_void_p(primals_39.data_ptr()), c_void_p(primals_40.data_ptr()), c_void_p(alias_261.data_ptr()), c_void_p(alias_260.data_ptr()), c_void_p(primals_37.data_ptr()), c_void_p(alias_262.data_ptr()), c_void_p(alias_263.data_ptr()), c_void_p(buf900.data_ptr()), c_void_p(buf901.data_ptr()), c_void_p(buf902.data_ptr()), c_void_p(buf903.data_ptr()), c_void_p(buf905.data_ptr()), c_void_p(buf906.data_ptr()), c_void_p(buf908.data_ptr()), c_void_p(buf909.data_ptr()), c_void_p(buf910.data_ptr()), c_void_p(buf911.data_ptr()), c_void_p(buf912.data_ptr()), c_void_p(buf913.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf915.data_ptr()), c_void_p(buf916.data_ptr()), c_void_p(buf917.data_ptr()))
    del add_43
    del alias_260
    del alias_261
    del alias_262
    del alias_263
    del avg_pool2d_6
    del buf900
    del buf901
    del buf904
    del buf907
    del buf908
    del buf910
    del buf911
    del buf912
    del convolution_13
    del primals_37
    del primals_39
    del primals_40
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf918 = aten.convolution_backward(buf917, add_41, primals_245, [192], [2, 2], [1, 1], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_41
    del buf917
    del primals_245
    buf919 = buf918[0]
    buf920 = buf918[1]
    buf921 = buf918[2]
    del buf918
    buf922 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    buf923 = reinterpret_tensor(buf717, (8, 96, 56, 56), (301056, 1, 5376, 96), 0); del buf717  # reuse
    cpp_fused_convolution_backward_mul_sum_64(c_void_p(buf919.data_ptr()), c_void_p(convolution_12.data_ptr()), c_void_p(primals_36.data_ptr()), c_void_p(buf922.data_ptr()), c_void_p(buf923.data_ptr()))
    del convolution_12
    del primals_36
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf924 = aten.convolution_backward(buf923, clone_10, primals_243, [96], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_10
    del primals_243
    buf925 = buf924[0]
    buf926 = buf924[1]
    buf927 = buf924[2]
    del buf924
    buf928 = buf925; del buf925  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_65(c_void_p(buf928.data_ptr()), c_void_p(convolution_11.data_ptr()))
    del convolution_11
    # Source Nodes: [x_46], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf929 = aten.convolution_backward(buf928, add_39, primals_241, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_39
    del buf928
    del primals_241
    buf930 = buf929[0]
    buf931 = buf929[1]
    buf932 = buf929[2]
    del buf929
    buf933 = empty((8, 96), device='cpu', dtype=torch.float32)
    buf934 = empty((8, 96), device='cpu', dtype=torch.float32)
    buf935 = buf914; del buf914  # reuse
    buf936 = buf913; del buf913  # reuse
    buf937 = reinterpret_tensor(buf930, (8, 1, 96, 3136), (301056, 2408448, 1, 96), 0); del buf930  # reuse
    buf938 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf939 = empty((96, ), device='cpu', dtype=torch.float32)
    buf940 = buf919; del buf919  # reuse
    buf941 = buf923; del buf923  # reuse
    buf942 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    buf943 = reinterpret_tensor(buf688, (8, 96, 56, 56), (301056, 3136, 56, 1), 0); del buf688  # reuse
    buf944 = empty((8, 96), device='cpu', dtype=torch.float32)
    buf945 = empty((8, 96), device='cpu', dtype=torch.float32)
    buf946 = buf903; del buf903  # reuse
    buf947 = buf902; del buf902  # reuse
    buf948 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf949 = empty((96, ), device='cpu', dtype=torch.float32)
    buf950 = buf4; del buf4  # reuse
    buf952 = reinterpret_tensor(buf659, (8, 96, 56, 56), (301056, 1, 5376, 96), 0); del buf659  # reuse
    buf951 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_66(c_void_p(buf937.data_ptr()), c_void_p(buf940.data_ptr()), c_void_p(buf950.data_ptr()), c_void_p(avg_pool2d_5.data_ptr()), c_void_p(add_36.data_ptr()), c_void_p(primals_33.data_ptr()), c_void_p(primals_34.data_ptr()), c_void_p(alias_265.data_ptr()), c_void_p(alias_264.data_ptr()), c_void_p(primals_31.data_ptr()), c_void_p(alias_266.data_ptr()), c_void_p(alias_267.data_ptr()), c_void_p(primals_30.data_ptr()), c_void_p(convolution_10.data_ptr()), c_void_p(buf933.data_ptr()), c_void_p(buf934.data_ptr()), c_void_p(buf935.data_ptr()), c_void_p(buf936.data_ptr()), c_void_p(buf938.data_ptr()), c_void_p(buf939.data_ptr()), c_void_p(buf941.data_ptr()), c_void_p(buf942.data_ptr()), c_void_p(buf943.data_ptr()), c_void_p(buf944.data_ptr()), c_void_p(buf945.data_ptr()), c_void_p(buf946.data_ptr()), c_void_p(buf947.data_ptr()), c_void_p(buf948.data_ptr()), c_void_p(buf949.data_ptr()), c_void_p(buf952.data_ptr()), c_void_p(buf951.data_ptr()))
    del add_36
    del alias_264
    del alias_265
    del alias_266
    del alias_267
    del avg_pool2d_5
    del buf937
    del buf940
    del convolution_10
    del primals_30
    del primals_31
    del primals_33
    del primals_34
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf953 = aten.convolution_backward(buf952, clone_8, primals_239, [96], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_8
    del primals_239
    buf954 = buf953[0]
    buf955 = buf953[1]
    buf956 = buf953[2]
    del buf953
    buf957 = buf954; del buf954  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_67(c_void_p(buf957.data_ptr()), c_void_p(convolution_9.data_ptr()))
    del convolution_9
    # Source Nodes: [x_38], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf958 = aten.convolution_backward(buf957, add_32, primals_237, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_32
    del buf957
    del primals_237
    buf959 = buf958[0]
    buf960 = buf958[1]
    buf961 = buf958[2]
    del buf958
    buf962 = buf945; del buf945  # reuse
    buf963 = buf944; del buf944  # reuse
    buf964 = buf947; del buf947  # reuse
    buf965 = buf946; del buf946  # reuse
    buf966 = reinterpret_tensor(buf959, (8, 1, 96, 3136), (301056, 2408448, 1, 96), 0); del buf959  # reuse
    buf967 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf968 = empty((96, ), device='cpu', dtype=torch.float32)
    buf969 = buf950; del buf950  # reuse
    buf970 = reinterpret_tensor(buf952, (8, 96, 56, 56), (301056, 3136, 56, 1), 0); del buf952  # reuse
    buf971 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    buf972 = buf943; del buf943  # reuse
    buf973 = buf934; del buf934  # reuse
    buf974 = buf933; del buf933  # reuse
    buf975 = buf936; del buf936  # reuse
    buf976 = buf935; del buf935  # reuse
    buf977 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf978 = empty((96, ), device='cpu', dtype=torch.float32)
    buf979 = buf3; del buf3  # reuse
    buf981 = buf941; del buf941  # reuse
    buf980 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_68(c_void_p(buf966.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(buf979.data_ptr()), c_void_p(avg_pool2d_4.data_ptr()), c_void_p(add_29.data_ptr()), c_void_p(primals_27.data_ptr()), c_void_p(primals_28.data_ptr()), c_void_p(alias_269.data_ptr()), c_void_p(alias_268.data_ptr()), c_void_p(primals_25.data_ptr()), c_void_p(alias_270.data_ptr()), c_void_p(alias_271.data_ptr()), c_void_p(primals_24.data_ptr()), c_void_p(convolution_8.data_ptr()), c_void_p(buf962.data_ptr()), c_void_p(buf963.data_ptr()), c_void_p(buf964.data_ptr()), c_void_p(buf965.data_ptr()), c_void_p(buf967.data_ptr()), c_void_p(buf968.data_ptr()), c_void_p(buf970.data_ptr()), c_void_p(buf971.data_ptr()), c_void_p(buf972.data_ptr()), c_void_p(buf973.data_ptr()), c_void_p(buf974.data_ptr()), c_void_p(buf975.data_ptr()), c_void_p(buf976.data_ptr()), c_void_p(buf977.data_ptr()), c_void_p(buf978.data_ptr()), c_void_p(buf981.data_ptr()), c_void_p(buf980.data_ptr()))
    del add_29
    del alias_268
    del alias_269
    del alias_270
    del alias_271
    del avg_pool2d_4
    del buf966
    del buf969
    del convolution_8
    del primals_24
    del primals_25
    del primals_27
    del primals_28
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf982 = aten.convolution_backward(buf981, clone_6, primals_235, [96], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_6
    del primals_235
    buf983 = buf982[0]
    buf984 = buf982[1]
    buf985 = buf982[2]
    del buf982
    buf986 = buf983; del buf983  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_69(c_void_p(buf986.data_ptr()), c_void_p(convolution_7.data_ptr()))
    del convolution_7
    # Source Nodes: [x_30], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf987 = aten.convolution_backward(buf986, add_25, primals_233, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_25
    del buf986
    del primals_233
    buf988 = buf987[0]
    buf989 = buf987[1]
    buf990 = buf987[2]
    del buf987
    buf991 = buf974; del buf974  # reuse
    buf992 = buf973; del buf973  # reuse
    buf993 = buf976; del buf976  # reuse
    buf994 = buf975; del buf975  # reuse
    buf995 = reinterpret_tensor(buf988, (8, 1, 96, 3136), (301056, 2408448, 1, 96), 0); del buf988  # reuse
    buf996 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf997 = empty((96, ), device='cpu', dtype=torch.float32)
    buf998 = buf979; del buf979  # reuse
    buf999 = reinterpret_tensor(buf981, (8, 96, 56, 56), (301056, 3136, 56, 1), 0); del buf981  # reuse
    buf1000 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    buf1001 = buf972; del buf972  # reuse
    buf1002 = buf963; del buf963  # reuse
    buf1003 = buf962; del buf962  # reuse
    buf1004 = buf965; del buf965  # reuse
    buf1005 = buf964; del buf964  # reuse
    buf1006 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf1007 = empty((96, ), device='cpu', dtype=torch.float32)
    buf1008 = buf1001; del buf1001  # reuse
    buf1010 = reinterpret_tensor(buf970, (8, 96, 56, 56), (301056, 1, 5376, 96), 0); del buf970  # reuse
    buf1009 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_70(c_void_p(buf995.data_ptr()), c_void_p(buf998.data_ptr()), c_void_p(buf1008.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(avg_pool2d_3.data_ptr()), c_void_p(add_22.data_ptr()), c_void_p(primals_21.data_ptr()), c_void_p(primals_22.data_ptr()), c_void_p(alias_273.data_ptr()), c_void_p(alias_272.data_ptr()), c_void_p(primals_19.data_ptr()), c_void_p(alias_274.data_ptr()), c_void_p(alias_275.data_ptr()), c_void_p(primals_18.data_ptr()), c_void_p(convolution_6.data_ptr()), c_void_p(buf991.data_ptr()), c_void_p(buf992.data_ptr()), c_void_p(buf993.data_ptr()), c_void_p(buf994.data_ptr()), c_void_p(buf996.data_ptr()), c_void_p(buf997.data_ptr()), c_void_p(buf999.data_ptr()), c_void_p(buf1000.data_ptr()), c_void_p(buf1002.data_ptr()), c_void_p(buf1003.data_ptr()), c_void_p(buf1004.data_ptr()), c_void_p(buf1005.data_ptr()), c_void_p(buf1006.data_ptr()), c_void_p(buf1007.data_ptr()), c_void_p(buf1010.data_ptr()), c_void_p(buf1009.data_ptr()))
    del add_22
    del alias_272
    del alias_273
    del alias_274
    del alias_275
    del avg_pool2d_3
    del buf2
    del buf995
    del convolution_6
    del primals_18
    del primals_19
    del primals_21
    del primals_22
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf1011 = aten.convolution_backward(buf1010, clone_4, primals_231, [96], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_4
    del primals_231
    buf1012 = buf1011[0]
    buf1013 = buf1011[1]
    buf1014 = buf1011[2]
    del buf1011
    buf1015 = buf1012; del buf1012  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_71(c_void_p(buf1015.data_ptr()), c_void_p(convolution_5.data_ptr()))
    del convolution_5
    # Source Nodes: [x_22], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf1016 = aten.convolution_backward(buf1015, add_18, primals_229, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_18
    del buf1015
    del primals_229
    buf1017 = buf1016[0]
    buf1018 = buf1016[1]
    buf1019 = buf1016[2]
    del buf1016
    buf1020 = buf992; del buf992  # reuse
    buf1021 = buf991; del buf991  # reuse
    buf1022 = buf994; del buf994  # reuse
    buf1023 = buf993; del buf993  # reuse
    buf1024 = reinterpret_tensor(buf1017, (8, 1, 96, 3136), (301056, 2408448, 1, 96), 0); del buf1017  # reuse
    buf1025 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf1026 = empty((96, ), device='cpu', dtype=torch.float32)
    buf1027 = buf1008; del buf1008  # reuse
    buf1028 = reinterpret_tensor(buf1010, (8, 96, 56, 56), (301056, 3136, 56, 1), 0); del buf1010  # reuse
    buf1029 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    buf1030 = buf999; del buf999  # reuse
    buf1031 = buf1003; del buf1003  # reuse
    buf1032 = buf1002; del buf1002  # reuse
    buf1033 = buf1005; del buf1005  # reuse
    buf1034 = buf1004; del buf1004  # reuse
    buf1035 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf1036 = empty((96, ), device='cpu', dtype=torch.float32)
    buf1037 = buf1; del buf1  # reuse
    buf1039 = reinterpret_tensor(buf998, (8, 96, 56, 56), (301056, 1, 5376, 96), 0); del buf998  # reuse
    buf1038 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_72(c_void_p(buf1024.data_ptr()), c_void_p(buf1027.data_ptr()), c_void_p(buf1037.data_ptr()), c_void_p(avg_pool2d_2.data_ptr()), c_void_p(add_15.data_ptr()), c_void_p(primals_15.data_ptr()), c_void_p(primals_16.data_ptr()), c_void_p(alias_277.data_ptr()), c_void_p(alias_276.data_ptr()), c_void_p(primals_13.data_ptr()), c_void_p(alias_278.data_ptr()), c_void_p(alias_279.data_ptr()), c_void_p(primals_12.data_ptr()), c_void_p(convolution_4.data_ptr()), c_void_p(buf1020.data_ptr()), c_void_p(buf1021.data_ptr()), c_void_p(buf1022.data_ptr()), c_void_p(buf1023.data_ptr()), c_void_p(buf1025.data_ptr()), c_void_p(buf1026.data_ptr()), c_void_p(buf1028.data_ptr()), c_void_p(buf1029.data_ptr()), c_void_p(buf1030.data_ptr()), c_void_p(buf1031.data_ptr()), c_void_p(buf1032.data_ptr()), c_void_p(buf1033.data_ptr()), c_void_p(buf1034.data_ptr()), c_void_p(buf1035.data_ptr()), c_void_p(buf1036.data_ptr()), c_void_p(buf1039.data_ptr()), c_void_p(buf1038.data_ptr()))
    del add_15
    del alias_276
    del alias_277
    del alias_278
    del alias_279
    del avg_pool2d_2
    del buf1024
    del buf1027
    del convolution_4
    del primals_12
    del primals_13
    del primals_15
    del primals_16
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf1040 = aten.convolution_backward(buf1039, clone_2, primals_227, [96], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone_2
    del primals_227
    buf1041 = buf1040[0]
    buf1042 = buf1040[1]
    buf1043 = buf1040[2]
    del buf1040
    buf1044 = buf1041; del buf1041  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_73(c_void_p(buf1044.data_ptr()), c_void_p(convolution_3.data_ptr()))
    del convolution_3
    # Source Nodes: [x_14], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf1045 = aten.convolution_backward(buf1044, add_11, primals_225, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_11
    del buf1044
    del primals_225
    buf1046 = buf1045[0]
    buf1047 = buf1045[1]
    buf1048 = buf1045[2]
    del buf1045
    buf1049 = buf1032; del buf1032  # reuse
    buf1050 = buf1031; del buf1031  # reuse
    buf1051 = buf1034; del buf1034  # reuse
    buf1052 = buf1033; del buf1033  # reuse
    buf1053 = reinterpret_tensor(buf1046, (8, 1, 96, 3136), (301056, 2408448, 1, 96), 0); del buf1046  # reuse
    buf1054 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf1055 = empty((96, ), device='cpu', dtype=torch.float32)
    buf1056 = buf1037; del buf1037  # reuse
    buf1057 = reinterpret_tensor(buf1039, (8, 96, 56, 56), (301056, 3136, 56, 1), 0); del buf1039  # reuse
    buf1058 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    buf1059 = buf1030; del buf1030  # reuse
    buf1060 = buf1021; del buf1021  # reuse
    buf1061 = buf1020; del buf1020  # reuse
    buf1062 = buf1023; del buf1023  # reuse
    buf1063 = buf1022; del buf1022  # reuse
    buf1064 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf1065 = empty((96, ), device='cpu', dtype=torch.float32)
    buf1066 = buf0; del buf0  # reuse
    buf1068 = reinterpret_tensor(buf1028, (8, 96, 56, 56), (301056, 1, 5376, 96), 0); del buf1028  # reuse
    buf1067 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    cpp_fused_add_avg_pool2d_backward_convolution_backward_mul_native_group_norm_backward_sub_sum_74(c_void_p(buf1053.data_ptr()), c_void_p(buf1056.data_ptr()), c_void_p(buf1066.data_ptr()), c_void_p(avg_pool2d_1.data_ptr()), c_void_p(add_8.data_ptr()), c_void_p(primals_9.data_ptr()), c_void_p(primals_10.data_ptr()), c_void_p(alias_281.data_ptr()), c_void_p(alias_280.data_ptr()), c_void_p(primals_7.data_ptr()), c_void_p(alias_282.data_ptr()), c_void_p(alias_283.data_ptr()), c_void_p(primals_6.data_ptr()), c_void_p(convolution_2.data_ptr()), c_void_p(buf1049.data_ptr()), c_void_p(buf1050.data_ptr()), c_void_p(buf1051.data_ptr()), c_void_p(buf1052.data_ptr()), c_void_p(buf1054.data_ptr()), c_void_p(buf1055.data_ptr()), c_void_p(buf1057.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(buf1059.data_ptr()), c_void_p(buf1060.data_ptr()), c_void_p(buf1061.data_ptr()), c_void_p(buf1062.data_ptr()), c_void_p(buf1063.data_ptr()), c_void_p(buf1064.data_ptr()), c_void_p(buf1065.data_ptr()), c_void_p(buf1068.data_ptr()), c_void_p(buf1067.data_ptr()))
    del add_8
    del alias_280
    del alias_281
    del alias_282
    del alias_283
    del avg_pool2d_1
    del buf1053
    del buf1056
    del convolution_2
    del primals_10
    del primals_6
    del primals_7
    del primals_9
    # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.mul]
    buf1069 = aten.convolution_backward(buf1068, clone, primals_223, [96], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del clone
    del primals_223
    buf1070 = buf1069[0]
    buf1071 = buf1069[1]
    buf1072 = buf1069[2]
    del buf1069
    buf1073 = buf1070; del buf1070  # reuse
    cpp_fused_convolution_backward_gelu_gelu_backward_75(c_void_p(buf1073.data_ptr()), c_void_p(convolution_1.data_ptr()))
    del convolution_1
    # Source Nodes: [x_6], Original ATen: [aten.convolution_backward, aten.gelu, aten.gelu_backward]
    buf1074 = aten.convolution_backward(buf1073, add_4, primals_221, [384], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, True])
    del add_4
    del buf1073
    del primals_221
    buf1075 = buf1074[0]
    buf1076 = buf1074[1]
    buf1077 = buf1074[2]
    del buf1074
    buf1078 = buf1061; del buf1061  # reuse
    buf1079 = buf1060; del buf1060  # reuse
    buf1080 = buf1063; del buf1063  # reuse
    buf1081 = buf1062; del buf1062  # reuse
    buf1082 = reinterpret_tensor(buf1075, (8, 1, 96, 3136), (301056, 2408448, 1, 96), 0); del buf1075  # reuse
    buf1083 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf1084 = empty((96, ), device='cpu', dtype=torch.float32)
    buf1085 = buf1066; del buf1066  # reuse
    buf1086 = reinterpret_tensor(buf1068, (8, 96, 56, 56), (301056, 3136, 56, 1), 0); del buf1068  # reuse
    buf1087 = empty((1, 96, 1, 1), device='cpu', dtype=torch.float32)
    buf1088 = buf1059; del buf1059  # reuse
    buf1089 = buf1050; del buf1050  # reuse
    buf1090 = buf1049; del buf1049  # reuse
    buf1091 = buf1052; del buf1052  # reuse
    buf1092 = buf1051; del buf1051  # reuse
    buf1093 = empty((1, 96), device='cpu', dtype=torch.float32)
    buf1094 = empty((96, ), device='cpu', dtype=torch.float32)
    buf1095 = reinterpret_tensor(buf1057, (8, 96, 56, 56), (301056, 1, 5376, 96), 0); del buf1057  # reuse
    cpp_fused_add_avg_pool2d_backward_mul_native_group_norm_backward_sub_sum_76(c_void_p(buf1082.data_ptr()), c_void_p(buf1085.data_ptr()), c_void_p(convolution.data_ptr()), c_void_p(avg_pool2d.data_ptr()), c_void_p(add_1.data_ptr()), c_void_p(primals_3.data_ptr()), c_void_p(primals_4.data_ptr()), c_void_p(alias_285.data_ptr()), c_void_p(alias_284.data_ptr()), c_void_p(primals_1.data_ptr()), c_void_p(alias_286.data_ptr()), c_void_p(alias_287.data_ptr()), c_void_p(buf1078.data_ptr()), c_void_p(buf1079.data_ptr()), c_void_p(buf1080.data_ptr()), c_void_p(buf1081.data_ptr()), c_void_p(buf1083.data_ptr()), c_void_p(buf1084.data_ptr()), c_void_p(buf1086.data_ptr()), c_void_p(buf1087.data_ptr()), c_void_p(buf1088.data_ptr()), c_void_p(buf1089.data_ptr()), c_void_p(buf1090.data_ptr()), c_void_p(buf1091.data_ptr()), c_void_p(buf1092.data_ptr()), c_void_p(buf1093.data_ptr()), c_void_p(buf1094.data_ptr()), c_void_p(buf1095.data_ptr()))
    del add_1
    del alias_284
    del alias_285
    del alias_286
    del alias_287
    del avg_pool2d
    del buf1078
    del buf1079
    del buf1080
    del buf1081
    del buf1082
    del buf1085
    del buf1086
    del buf1088
    del buf1089
    del buf1090
    del buf1091
    del buf1092
    del convolution
    del primals_1
    del primals_3
    del primals_4
    # Source Nodes: [], Original ATen: [aten.convolution_backward]
    buf1096 = aten.convolution_backward(buf1095, primals_373, primals_219, [96], [4, 4], [2, 2], [1, 1], False, [0, 0], 1, [False, True, True])
    del buf1095
    del primals_219
    del primals_373
    buf1097 = buf1096[1]
    buf1098 = buf1096[2]
    return (reinterpret_tensor(buf1093, (96, ), (1, ), 0), buf1094, reinterpret_tensor(buf1087, (96, ), (1, ), 0), reinterpret_tensor(buf1083, (96, ), (1, ), 0), buf1084, reinterpret_tensor(buf1067, (96, ), (1, ), 0), reinterpret_tensor(buf1064, (96, ), (1, ), 0), buf1065, reinterpret_tensor(buf1058, (96, ), (1, ), 0), reinterpret_tensor(buf1054, (96, ), (1, ), 0), buf1055, reinterpret_tensor(buf1038, (96, ), (1, ), 0), reinterpret_tensor(buf1035, (96, ), (1, ), 0), buf1036, reinterpret_tensor(buf1029, (96, ), (1, ), 0), reinterpret_tensor(buf1025, (96, ), (1, ), 0), buf1026, reinterpret_tensor(buf1009, (96, ), (1, ), 0), reinterpret_tensor(buf1006, (96, ), (1, ), 0), buf1007, reinterpret_tensor(buf1000, (96, ), (1, ), 0), reinterpret_tensor(buf996, (96, ), (1, ), 0), buf997, reinterpret_tensor(buf980, (96, ), (1, ), 0), reinterpret_tensor(buf977, (96, ), (1, ), 0), buf978, reinterpret_tensor(buf971, (96, ), (1, ), 0), reinterpret_tensor(buf967, (96, ), (1, ), 0), buf968, reinterpret_tensor(buf951, (96, ), (1, ), 0), reinterpret_tensor(buf948, (96, ), (1, ), 0), buf949, reinterpret_tensor(buf942, (96, ), (1, ), 0), reinterpret_tensor(buf938, (96, ), (1, ), 0), buf939, reinterpret_tensor(buf922, (96, ), (1, ), 0), reinterpret_tensor(buf915, (192, ), (1, ), 0), buf916, reinterpret_tensor(buf909, (192, ), (1, ), 0), reinterpret_tensor(buf905, (192, ), (1, ), 0), buf906, reinterpret_tensor(buf889, (192, ), (1, ), 0), reinterpret_tensor(buf886, (192, ), (1, ), 0), buf887, reinterpret_tensor(buf880, (192, ), (1, ), 0), reinterpret_tensor(buf876, (192, ), (1, ), 0), buf877, reinterpret_tensor(buf860, (192, ), (1, ), 0), reinterpret_tensor(buf857, (192, ), (1, ), 0), buf858, reinterpret_tensor(buf851, (192, ), (1, ), 0), reinterpret_tensor(buf847, (192, ), (1, ), 0), buf848, reinterpret_tensor(buf831, (192, ), (1, ), 0), reinterpret_tensor(buf828, (192, ), (1, ), 0), buf829, reinterpret_tensor(buf822, (192, ), (1, ), 0), reinterpret_tensor(buf818, (192, ), (1, ), 0), buf819, reinterpret_tensor(buf802, (192, ), (1, ), 0), reinterpret_tensor(buf799, (192, ), (1, ), 0), buf800, reinterpret_tensor(buf793, (192, ), (1, ), 0), reinterpret_tensor(buf789, (192, ), (1, ), 0), buf790, reinterpret_tensor(buf773, (192, ), (1, ), 0), reinterpret_tensor(buf770, (192, ), (1, ), 0), buf771, reinterpret_tensor(buf764, (192, ), (1, ), 0), reinterpret_tensor(buf760, (192, ), (1, ), 0), buf761, reinterpret_tensor(buf744, (192, ), (1, ), 0), reinterpret_tensor(buf737, (384, ), (1, ), 0), buf738, reinterpret_tensor(buf731, (384, ), (1, ), 0), reinterpret_tensor(buf727, (384, ), (1, ), 0), buf728, reinterpret_tensor(buf711, (384, ), (1, ), 0), reinterpret_tensor(buf708, (384, ), (1, ), 0), buf709, reinterpret_tensor(buf702, (384, ), (1, ), 0), reinterpret_tensor(buf698, (384, ), (1, ), 0), buf699, reinterpret_tensor(buf682, (384, ), (1, ), 0), reinterpret_tensor(buf679, (384, ), (1, ), 0), buf680, reinterpret_tensor(buf673, (384, ), (1, ), 0), reinterpret_tensor(buf669, (384, ), (1, ), 0), buf670, reinterpret_tensor(buf653, (384, ), (1, ), 0), reinterpret_tensor(buf650, (384, ), (1, ), 0), buf651, reinterpret_tensor(buf644, (384, ), (1, ), 0), reinterpret_tensor(buf640, (384, ), (1, ), 0), buf641, reinterpret_tensor(buf624, (384, ), (1, ), 0), reinterpret_tensor(buf621, (384, ), (1, ), 0), buf622, reinterpret_tensor(buf615, (384, ), (1, ), 0), reinterpret_tensor(buf611, (384, ), (1, ), 0), buf612, reinterpret_tensor(buf595, (384, ), (1, ), 0), reinterpret_tensor(buf592, (384, ), (1, ), 0), buf593, reinterpret_tensor(buf586, (384, ), (1, ), 0), reinterpret_tensor(buf582, (384, ), (1, ), 0), buf583, reinterpret_tensor(buf566, (384, ), (1, ), 0), reinterpret_tensor(buf563, (384, ), (1, ), 0), buf564, reinterpret_tensor(buf557, (384, ), (1, ), 0), reinterpret_tensor(buf553, (384, ), (1, ), 0), buf554, reinterpret_tensor(buf537, (384, ), (1, ), 0), reinterpret_tensor(buf534, (384, ), (1, ), 0), buf535, reinterpret_tensor(buf528, (384, ), (1, ), 0), reinterpret_tensor(buf524, (384, ), (1, ), 0), buf525, reinterpret_tensor(buf508, (384, ), (1, ), 0), reinterpret_tensor(buf505, (384, ), (1, ), 0), buf506, reinterpret_tensor(buf499, (384, ), (1, ), 0), reinterpret_tensor(buf495, (384, ), (1, ), 0), buf496, reinterpret_tensor(buf479, (384, ), (1, ), 0), reinterpret_tensor(buf476, (384, ), (1, ), 0), buf477, reinterpret_tensor(buf470, (384, ), (1, ), 0), reinterpret_tensor(buf466, (384, ), (1, ), 0), buf467, reinterpret_tensor(buf450, (384, ), (1, ), 0), reinterpret_tensor(buf447, (384, ), (1, ), 0), buf448, reinterpret_tensor(buf441, (384, ), (1, ), 0), reinterpret_tensor(buf437, (384, ), (1, ), 0), buf438, reinterpret_tensor(buf421, (384, ), (1, ), 0), reinterpret_tensor(buf418, (384, ), (1, ), 0), buf419, reinterpret_tensor(buf412, (384, ), (1, ), 0), reinterpret_tensor(buf408, (384, ), (1, ), 0), buf409, reinterpret_tensor(buf392, (384, ), (1, ), 0), reinterpret_tensor(buf389, (384, ), (1, ), 0), buf390, reinterpret_tensor(buf383, (384, ), (1, ), 0), reinterpret_tensor(buf379, (384, ), (1, ), 0), buf380, reinterpret_tensor(buf363, (384, ), (1, ), 0), reinterpret_tensor(buf360, (384, ), (1, ), 0), buf361, reinterpret_tensor(buf354, (384, ), (1, ), 0), reinterpret_tensor(buf350, (384, ), (1, ), 0), buf351, reinterpret_tensor(buf334, (384, ), (1, ), 0), reinterpret_tensor(buf331, (384, ), (1, ), 0), buf332, reinterpret_tensor(buf325, (384, ), (1, ), 0), reinterpret_tensor(buf321, (384, ), (1, ), 0), buf322, reinterpret_tensor(buf305, (384, ), (1, ), 0), reinterpret_tensor(buf302, (384, ), (1, ), 0), buf303, reinterpret_tensor(buf296, (384, ), (1, ), 0), reinterpret_tensor(buf292, (384, ), (1, ), 0), buf293, reinterpret_tensor(buf276, (384, ), (1, ), 0), reinterpret_tensor(buf273, (384, ), (1, ), 0), buf274, reinterpret_tensor(buf267, (384, ), (1, ), 0), reinterpret_tensor(buf263, (384, ), (1, ), 0), buf264, reinterpret_tensor(buf247, (384, ), (1, ), 0), reinterpret_tensor(buf244, (384, ), (1, ), 0), buf245, reinterpret_tensor(buf238, (384, ), (1, ), 0), reinterpret_tensor(buf234, (384, ), (1, ), 0), buf235, reinterpret_tensor(buf218, (384, ), (1, ), 0), reinterpret_tensor(buf211, (768, ), (1, ), 0), buf212, reinterpret_tensor(buf205, (768, ), (1, ), 0), reinterpret_tensor(buf201, (768, ), (1, ), 0), buf202, reinterpret_tensor(buf185, (768, ), (1, ), 0), reinterpret_tensor(buf182, (768, ), (1, ), 0), buf183, reinterpret_tensor(buf176, (768, ), (1, ), 0), reinterpret_tensor(buf172, (768, ), (1, ), 0), buf173, reinterpret_tensor(buf156, (768, ), (1, ), 0), reinterpret_tensor(buf153, (768, ), (1, ), 0), buf154, reinterpret_tensor(buf147, (768, ), (1, ), 0), reinterpret_tensor(buf143, (768, ), (1, ), 0), buf144, reinterpret_tensor(buf127, (768, ), (1, ), 0), reinterpret_tensor(buf124, (768, ), (1, ), 0), buf125, reinterpret_tensor(buf118, (768, ), (1, ), 0), reinterpret_tensor(buf114, (768, ), (1, ), 0), buf115, reinterpret_tensor(buf98, (768, ), (1, ), 0), reinterpret_tensor(buf95, (768, ), (1, ), 0), buf96, reinterpret_tensor(buf89, (768, ), (1, ), 0), reinterpret_tensor(buf85, (768, ), (1, ), 0), buf86, reinterpret_tensor(buf69, (768, ), (1, ), 0), reinterpret_tensor(buf66, (768, ), (1, ), 0), buf67, reinterpret_tensor(buf60, (768, ), (1, ), 0), reinterpret_tensor(buf56, (768, ), (1, ), 0), buf57, reinterpret_tensor(buf40, (768, ), (1, ), 0), buf37, buf38, buf1097, buf1098, buf1076, buf1077, buf1071, buf1072, buf1047, buf1048, buf1042, buf1043, buf1018, buf1019, buf1013, buf1014, buf989, buf990, buf984, buf985, buf960, buf961, buf955, buf956, buf931, buf932, buf926, buf927, buf920, buf921, buf898, buf899, buf893, buf894, buf869, buf870, buf864, buf865, buf840, buf841, buf835, buf836, buf811, buf812, buf806, buf807, buf782, buf783, buf777, buf778, buf753, buf754, buf748, buf749, buf742, buf743, buf720, buf721, buf715, buf716, buf691, buf692, buf686, buf687, buf662, buf663, buf657, buf658, buf633, buf634, buf628, buf629, buf604, buf605, buf599, buf600, buf575, buf576, buf570, buf571, buf546, buf547, buf541, buf542, buf517, buf518, buf512, buf513, buf488, buf489, buf483, buf484, buf459, buf460, buf454, buf455, buf430, buf431, buf425, buf426, buf401, buf402, buf396, buf397, buf372, buf373, buf367, buf368, buf343, buf344, buf338, buf339, buf314, buf315, buf309, buf310, buf285, buf286, buf280, buf281, buf256, buf257, buf251, buf252, buf227, buf228, buf222, buf223, buf216, buf217, buf194, buf195, buf189, buf190, buf165, buf166, buf160, buf161, buf136, buf137, buf131, buf132, buf107, buf108, buf102, buf103, buf78, buf79, buf73, buf74, buf49, buf50, buf44, buf45, reinterpret_tensor(buf33, (1000, 768), (768, 1), 0), reinterpret_tensor(buf34, (1000, ), (1, ), 0), None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_3 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_6 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_7 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_9 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_12 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_13 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_15 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_16 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_18 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_19 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_21 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_22 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_24 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_25 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_27 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_30 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_31 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_33 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_36 = rand_strided((96, ), (1, ), device='cpu', dtype=torch.float32)
    primals_37 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_39 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_42 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_43 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_45 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_48 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_49 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_51 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_54 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_55 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_57 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_58 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_60 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_61 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_63 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_64 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_66 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_67 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_69 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_70 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_72 = rand_strided((192, ), (1, ), device='cpu', dtype=torch.float32)
    primals_73 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_75 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_76 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_78 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_79 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_81 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_82 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_84 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_85 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_87 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_88 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_90 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_91 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_93 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_94 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_96 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_97 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_99 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_100 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_102 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_103 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_105 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_106 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_108 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_109 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_111 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_114 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_115 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_117 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_118 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_120 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_121 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_123 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_124 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_126 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_127 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_129 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_130 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_132 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_133 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_135 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_136 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_138 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_141 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_144 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_145 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_147 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_148 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_150 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_151 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_153 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_154 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_156 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_157 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_159 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_160 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_162 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_163 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_165 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_166 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_168 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_169 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_171 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_174 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_175 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_177 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_180 = rand_strided((384, ), (1, ), device='cpu', dtype=torch.float32)
    primals_181 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_183 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_184 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_186 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_187 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_189 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_190 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_192 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_193 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_195 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_196 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_198 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_199 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_201 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_204 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_207 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_208 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_210 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_211 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_213 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_214 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_216 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_217 = rand_strided((768, ), (1, ), device='cpu', dtype=torch.float32)
    primals_219 = rand_strided((96, 3, 7, 7), (147, 1, 21, 3), device='cpu', dtype=torch.float32)
    primals_221 = rand_strided((384, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_223 = rand_strided((96, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_225 = rand_strided((384, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_227 = rand_strided((96, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_229 = rand_strided((384, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_231 = rand_strided((96, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_233 = rand_strided((384, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_235 = rand_strided((96, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_237 = rand_strided((384, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_239 = rand_strided((96, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_241 = rand_strided((384, 96, 1, 1), (96, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_243 = rand_strided((96, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_245 = rand_strided((192, 96, 3, 3), (864, 1, 288, 96), device='cpu', dtype=torch.float32)
    primals_247 = rand_strided((768, 192, 1, 1), (192, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_249 = rand_strided((192, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_251 = rand_strided((768, 192, 1, 1), (192, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_253 = rand_strided((192, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_255 = rand_strided((768, 192, 1, 1), (192, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_257 = rand_strided((192, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_259 = rand_strided((768, 192, 1, 1), (192, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_261 = rand_strided((192, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_263 = rand_strided((768, 192, 1, 1), (192, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_265 = rand_strided((192, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_267 = rand_strided((768, 192, 1, 1), (192, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_269 = rand_strided((192, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_271 = rand_strided((384, 192, 3, 3), (1728, 1, 576, 192), device='cpu', dtype=torch.float32)
    primals_273 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_275 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_277 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_279 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_281 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_283 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_285 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_287 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_289 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_291 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_293 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_295 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_297 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_299 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_301 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_303 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_305 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_307 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_309 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_311 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_313 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_315 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_317 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_319 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_321 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_323 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_325 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_327 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_329 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_331 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_333 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_335 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_337 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_339 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_341 = rand_strided((1536, 384, 1, 1), (384, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_343 = rand_strided((384, 1536, 1, 1), (1536, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_345 = rand_strided((768, 384, 3, 3), (3456, 1, 1152, 384), device='cpu', dtype=torch.float32)
    primals_347 = rand_strided((3072, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_349 = rand_strided((768, 3072, 1, 1), (3072, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_351 = rand_strided((3072, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_353 = rand_strided((768, 3072, 1, 1), (3072, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_355 = rand_strided((3072, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_357 = rand_strided((768, 3072, 1, 1), (3072, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_359 = rand_strided((3072, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_361 = rand_strided((768, 3072, 1, 1), (3072, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_363 = rand_strided((3072, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((768, 3072, 1, 1), (3072, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_367 = rand_strided((3072, 768, 1, 1), (768, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_369 = rand_strided((768, 3072, 1, 1), (3072, 1, 1, 1), device='cpu', dtype=torch.float32)
    primals_373 = rand_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    convolution = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_1 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    avg_pool2d = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_4 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    convolution_1 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    clone = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    convolution_2 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_8 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    avg_pool2d_1 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_11 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    convolution_3 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    clone_2 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    convolution_4 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_15 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    avg_pool2d_2 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_18 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    convolution_5 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    clone_4 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    convolution_6 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_22 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    avg_pool2d_3 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_25 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    convolution_7 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    clone_6 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    convolution_8 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_29 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    avg_pool2d_4 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_32 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    convolution_9 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    clone_8 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    convolution_10 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_36 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    avg_pool2d_5 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_39 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    convolution_11 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    clone_10 = rand_strided((8, 384, 56, 56), (1204224, 1, 21504, 384), device='cpu', dtype=torch.float32)
    convolution_12 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    add_41 = rand_strided((8, 96, 56, 56), (301056, 1, 5376, 96), device='cpu', dtype=torch.float32)
    convolution_13 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_43 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    avg_pool2d_6 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_46 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    convolution_14 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    clone_12 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    convolution_15 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_50 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    avg_pool2d_7 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_53 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    convolution_16 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    clone_14 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    convolution_17 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_57 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    avg_pool2d_8 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_60 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    convolution_18 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    clone_16 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    convolution_19 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_64 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    avg_pool2d_9 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_67 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    convolution_20 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    clone_18 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    convolution_21 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_71 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    avg_pool2d_10 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_74 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    convolution_22 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    clone_20 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    convolution_23 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_78 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    avg_pool2d_11 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_81 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    convolution_24 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    clone_22 = rand_strided((8, 768, 28, 28), (602112, 1, 21504, 768), device='cpu', dtype=torch.float32)
    convolution_25 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    add_83 = rand_strided((8, 192, 28, 28), (150528, 1, 5376, 192), device='cpu', dtype=torch.float32)
    convolution_26 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_85 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_12 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_88 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_27 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_24 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_28 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_92 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_13 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_95 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_29 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_26 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_30 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_99 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_14 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_102 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_31 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_28 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_32 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_106 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_15 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_109 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_33 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_30 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_34 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_113 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_16 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_116 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_35 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_32 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_36 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_120 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_17 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_123 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_37 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_34 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_38 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_127 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_18 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_130 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_39 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_36 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_40 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_134 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_19 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_137 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_41 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_38 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_42 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_141 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_20 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_144 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_43 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_40 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_44 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_148 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_21 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_151 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_45 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_42 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_46 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_155 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_22 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_158 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_47 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_44 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_48 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_162 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_23 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_165 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_49 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_46 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_50 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_169 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_24 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_172 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_51 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_48 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_52 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_176 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_25 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_179 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_53 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_50 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_54 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_183 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_26 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_186 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_55 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_52 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_56 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_190 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_27 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_193 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_57 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_54 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_58 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_197 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_28 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_200 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_59 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_56 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_60 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_204 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    avg_pool2d_29 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_207 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_61 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    clone_58 = rand_strided((8, 1536, 14, 14), (301056, 1, 21504, 1536), device='cpu', dtype=torch.float32)
    convolution_62 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    add_209 = rand_strided((8, 384, 14, 14), (75264, 1, 5376, 384), device='cpu', dtype=torch.float32)
    convolution_63 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_211 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    avg_pool2d_30 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_214 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    convolution_64 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    clone_60 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    convolution_65 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_218 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    avg_pool2d_31 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_221 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    convolution_66 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    clone_62 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    convolution_67 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_225 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    avg_pool2d_32 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_228 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    convolution_68 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    clone_64 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    convolution_69 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_232 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    avg_pool2d_33 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_235 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    convolution_70 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    clone_66 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    convolution_71 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_239 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    avg_pool2d_34 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_242 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    convolution_72 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    clone_68 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    convolution_73 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_246 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    avg_pool2d_35 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    add_249 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    convolution_74 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    clone_70 = rand_strided((8, 3072, 7, 7), (150528, 1, 21504, 3072), device='cpu', dtype=torch.float32)
    convolution_75 = rand_strided((8, 768, 7, 7), (37632, 1, 5376, 768), device='cpu', dtype=torch.float32)
    mul_324 = rand_strided((8, 1, 1, 768), (768, 1, 768, 1), device='cpu', dtype=torch.float32)
    view_216 = rand_strided((8, 768), (768, 1), device='cpu', dtype=torch.float32)
    permute_3 = rand_strided((1000, 768), (768, 1), device='cpu', dtype=torch.float32)
    div = rand_strided((8, 1, 1, 1), (1, 1, 1, 1), device='cpu', dtype=torch.float32)
    alias_144 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_145 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_146 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_147 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_148 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_149 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_150 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_151 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_152 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_153 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_154 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_155 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_156 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_157 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_158 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_159 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_160 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_161 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_162 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_163 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_164 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_165 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_166 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_167 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_168 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_169 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_170 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_171 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_172 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_173 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_174 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_175 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_176 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_177 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_178 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_179 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_180 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_181 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_182 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_183 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_184 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_185 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_186 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_187 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_188 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_189 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_190 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_191 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_192 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_193 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_194 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_195 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_196 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_197 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_198 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_199 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_200 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_201 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_202 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_203 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_204 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_205 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_206 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_207 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_208 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_209 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_210 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_211 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_212 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_213 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_214 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_215 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_216 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_217 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_218 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_219 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_220 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_221 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_222 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_223 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_224 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_225 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_226 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_227 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_228 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_229 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_230 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_231 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_232 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_233 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_234 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_235 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_236 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_237 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_238 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_239 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_240 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_241 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_242 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_243 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_244 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_245 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_246 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_247 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_248 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_249 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_250 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_251 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_252 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_253 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_254 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_255 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_256 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_257 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_258 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_259 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_260 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_261 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_262 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_263 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_264 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_265 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_266 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_267 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_268 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_269 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_270 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_271 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_272 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_273 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_274 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_275 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_276 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_277 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_278 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_279 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_280 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_281 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_282 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_283 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_284 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_285 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_286 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    alias_287 = rand_strided((8, 1), (1, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((8, 1000), (1000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_3, primals_4, primals_6, primals_7, primals_9, primals_10, primals_12, primals_13, primals_15, primals_16, primals_18, primals_19, primals_21, primals_22, primals_24, primals_25, primals_27, primals_28, primals_30, primals_31, primals_33, primals_34, primals_36, primals_37, primals_39, primals_40, primals_42, primals_43, primals_45, primals_46, primals_48, primals_49, primals_51, primals_52, primals_54, primals_55, primals_57, primals_58, primals_60, primals_61, primals_63, primals_64, primals_66, primals_67, primals_69, primals_70, primals_72, primals_73, primals_75, primals_76, primals_78, primals_79, primals_81, primals_82, primals_84, primals_85, primals_87, primals_88, primals_90, primals_91, primals_93, primals_94, primals_96, primals_97, primals_99, primals_100, primals_102, primals_103, primals_105, primals_106, primals_108, primals_109, primals_111, primals_112, primals_114, primals_115, primals_117, primals_118, primals_120, primals_121, primals_123, primals_124, primals_126, primals_127, primals_129, primals_130, primals_132, primals_133, primals_135, primals_136, primals_138, primals_139, primals_141, primals_142, primals_144, primals_145, primals_147, primals_148, primals_150, primals_151, primals_153, primals_154, primals_156, primals_157, primals_159, primals_160, primals_162, primals_163, primals_165, primals_166, primals_168, primals_169, primals_171, primals_172, primals_174, primals_175, primals_177, primals_178, primals_180, primals_181, primals_183, primals_184, primals_186, primals_187, primals_189, primals_190, primals_192, primals_193, primals_195, primals_196, primals_198, primals_199, primals_201, primals_202, primals_204, primals_205, primals_207, primals_208, primals_210, primals_211, primals_213, primals_214, primals_216, primals_217, primals_219, primals_221, primals_223, primals_225, primals_227, primals_229, primals_231, primals_233, primals_235, primals_237, primals_239, primals_241, primals_243, primals_245, primals_247, primals_249, primals_251, primals_253, primals_255, primals_257, primals_259, primals_261, primals_263, primals_265, primals_267, primals_269, primals_271, primals_273, primals_275, primals_277, primals_279, primals_281, primals_283, primals_285, primals_287, primals_289, primals_291, primals_293, primals_295, primals_297, primals_299, primals_301, primals_303, primals_305, primals_307, primals_309, primals_311, primals_313, primals_315, primals_317, primals_319, primals_321, primals_323, primals_325, primals_327, primals_329, primals_331, primals_333, primals_335, primals_337, primals_339, primals_341, primals_343, primals_345, primals_347, primals_349, primals_351, primals_353, primals_355, primals_357, primals_359, primals_361, primals_363, primals_365, primals_367, primals_369, primals_373, convolution, add_1, avg_pool2d, add_4, convolution_1, clone, convolution_2, add_8, avg_pool2d_1, add_11, convolution_3, clone_2, convolution_4, add_15, avg_pool2d_2, add_18, convolution_5, clone_4, convolution_6, add_22, avg_pool2d_3, add_25, convolution_7, clone_6, convolution_8, add_29, avg_pool2d_4, add_32, convolution_9, clone_8, convolution_10, add_36, avg_pool2d_5, add_39, convolution_11, clone_10, convolution_12, add_41, convolution_13, add_43, avg_pool2d_6, add_46, convolution_14, clone_12, convolution_15, add_50, avg_pool2d_7, add_53, convolution_16, clone_14, convolution_17, add_57, avg_pool2d_8, add_60, convolution_18, clone_16, convolution_19, add_64, avg_pool2d_9, add_67, convolution_20, clone_18, convolution_21, add_71, avg_pool2d_10, add_74, convolution_22, clone_20, convolution_23, add_78, avg_pool2d_11, add_81, convolution_24, clone_22, convolution_25, add_83, convolution_26, add_85, avg_pool2d_12, add_88, convolution_27, clone_24, convolution_28, add_92, avg_pool2d_13, add_95, convolution_29, clone_26, convolution_30, add_99, avg_pool2d_14, add_102, convolution_31, clone_28, convolution_32, add_106, avg_pool2d_15, add_109, convolution_33, clone_30, convolution_34, add_113, avg_pool2d_16, add_116, convolution_35, clone_32, convolution_36, add_120, avg_pool2d_17, add_123, convolution_37, clone_34, convolution_38, add_127, avg_pool2d_18, add_130, convolution_39, clone_36, convolution_40, add_134, avg_pool2d_19, add_137, convolution_41, clone_38, convolution_42, add_141, avg_pool2d_20, add_144, convolution_43, clone_40, convolution_44, add_148, avg_pool2d_21, add_151, convolution_45, clone_42, convolution_46, add_155, avg_pool2d_22, add_158, convolution_47, clone_44, convolution_48, add_162, avg_pool2d_23, add_165, convolution_49, clone_46, convolution_50, add_169, avg_pool2d_24, add_172, convolution_51, clone_48, convolution_52, add_176, avg_pool2d_25, add_179, convolution_53, clone_50, convolution_54, add_183, avg_pool2d_26, add_186, convolution_55, clone_52, convolution_56, add_190, avg_pool2d_27, add_193, convolution_57, clone_54, convolution_58, add_197, avg_pool2d_28, add_200, convolution_59, clone_56, convolution_60, add_204, avg_pool2d_29, add_207, convolution_61, clone_58, convolution_62, add_209, convolution_63, add_211, avg_pool2d_30, add_214, convolution_64, clone_60, convolution_65, add_218, avg_pool2d_31, add_221, convolution_66, clone_62, convolution_67, add_225, avg_pool2d_32, add_228, convolution_68, clone_64, convolution_69, add_232, avg_pool2d_33, add_235, convolution_70, clone_66, convolution_71, add_239, avg_pool2d_34, add_242, convolution_72, clone_68, convolution_73, add_246, avg_pool2d_35, add_249, convolution_74, clone_70, convolution_75, mul_324, view_216, permute_3, div, alias_144, alias_145, alias_146, alias_147, alias_148, alias_149, alias_150, alias_151, alias_152, alias_153, alias_154, alias_155, alias_156, alias_157, alias_158, alias_159, alias_160, alias_161, alias_162, alias_163, alias_164, alias_165, alias_166, alias_167, alias_168, alias_169, alias_170, alias_171, alias_172, alias_173, alias_174, alias_175, alias_176, alias_177, alias_178, alias_179, alias_180, alias_181, alias_182, alias_183, alias_184, alias_185, alias_186, alias_187, alias_188, alias_189, alias_190, alias_191, alias_192, alias_193, alias_194, alias_195, alias_196, alias_197, alias_198, alias_199, alias_200, alias_201, alias_202, alias_203, alias_204, alias_205, alias_206, alias_207, alias_208, alias_209, alias_210, alias_211, alias_212, alias_213, alias_214, alias_215, alias_216, alias_217, alias_218, alias_219, alias_220, alias_221, alias_222, alias_223, alias_224, alias_225, alias_226, alias_227, alias_228, alias_229, alias_230, alias_231, alias_232, alias_233, alias_234, alias_235, alias_236, alias_237, alias_238, alias_239, alias_240, alias_241, alias_242, alias_243, alias_244, alias_245, alias_246, alias_247, alias_248, alias_249, alias_250, alias_251, alias_252, alias_253, alias_254, alias_255, alias_256, alias_257, alias_258, alias_259, alias_260, alias_261, alias_262, alias_263, alias_264, alias_265, alias_266, alias_267, alias_268, alias_269, alias_270, alias_271, alias_272, alias_273, alias_274, alias_275, alias_276, alias_277, alias_278, alias_279, alias_280, alias_281, alias_282, alias_283, alias_284, alias_285, alias_286, alias_287, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('poolformer_m36', benchmark_compiled_module)
