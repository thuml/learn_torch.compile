
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_convolution_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(3L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(50176L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x2 + (50176L*x1) + (150528L*x0))];
                        out_ptr0[static_cast<long>(x1 + (3L*x2) + (150528L*x0))] = tmp0;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(3L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr1[static_cast<long>(x2 + (9L*x1) + (27L*x0))];
                            out_ptr1[static_cast<long>(x1 + (3L*x2) + (27L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(100352L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)), static_cast<long>(64L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)), static_cast<long>(64L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp19 = tmp17 - tmp18;
                    auto tmp21 = tmp20 + tmp5;
                    auto tmp22 = tmp21.sqrt();
                    auto tmp23 = tmp22.reciprocal();
                    auto tmp24 = tmp23 * tmp10;
                    auto tmp25 = tmp19 * tmp24;
                    auto tmp27 = tmp25 * tmp26;
                    auto tmp29 = tmp27 + tmp28;
                    auto tmp30 = tmp16 + tmp29;
                    tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6422528L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                tmp1.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)), static_cast<long>(64L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)), static_cast<long>(64L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)), static_cast<long>(64L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (2304L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (256L*x2) + (2304L*x0)), static_cast<long>(256L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (2304L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (256L*x2) + (2304L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (2304L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (256L*x2) + (2304L*x0)), static_cast<long>(256L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (2304L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (256L*x2) + (2304L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    auto tmp22 = tmp20 - tmp21;
                    auto tmp24 = tmp23 + tmp5;
                    auto tmp25 = tmp24.sqrt();
                    auto tmp26 = tmp25.reciprocal();
                    auto tmp27 = tmp26 * tmp10;
                    auto tmp28 = tmp22 * tmp27;
                    auto tmp30 = tmp28 * tmp29;
                    auto tmp32 = tmp30 + tmp31;
                    auto tmp33 = tmp32 + tmp19;
                    auto tmp34 = at::vec::clamp_min(tmp33, decltype(tmp33)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    tmp34.store(in_out_ptr1 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp18 = in_out_ptr1[static_cast<long>(x1 + (36L*x0))];
                    auto tmp19 = in_ptr5[static_cast<long>(x1)];
                    auto tmp21 = in_ptr6[static_cast<long>(x1)];
                    auto tmp27 = in_ptr7[static_cast<long>(x1)];
                    auto tmp29 = in_ptr8[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    auto tmp20 = decltype(tmp18)(tmp18 - tmp19);
                    auto tmp22 = decltype(tmp21)(tmp21 + tmp4);
                    auto tmp23 = std::sqrt(tmp22);
                    auto tmp24 = 1 / tmp23;
                    auto tmp25 = decltype(tmp24)(tmp24 * tmp8);
                    auto tmp26 = decltype(tmp20)(tmp20 * tmp25);
                    auto tmp28 = decltype(tmp26)(tmp26 * tmp27);
                    auto tmp30 = decltype(tmp28)(tmp28 + tmp29);
                    auto tmp31 = decltype(tmp30)(tmp30 + tmp17);
                    auto tmp32 = tmp31 * (tmp31>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                    in_out_ptr1[static_cast<long>(x1 + (36L*x0))] = tmp32;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(18L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))];
                            auto tmp22 = in_ptr1[static_cast<long>(x3)];
                            auto tmp24 = in_ptr2[static_cast<long>(x3)];
                            auto tmp32 = in_ptr3[static_cast<long>(x3)];
                            auto tmp34 = in_ptr4[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(x1);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.5);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x2);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr0[static_cast<long>(x3 + (18L*tmp20) + (504L*tmp12) + (14112L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = tmp36 * (tmp36>0);
                            in_out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))] = tmp37;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp15 = in_ptr4[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr1)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(18L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))];
                            auto tmp22 = in_ptr2[static_cast<long>(x3)];
                            auto tmp24 = in_ptr3[static_cast<long>(x3)];
                            auto tmp32 = in_ptr4[static_cast<long>(x3)];
                            auto tmp34 = in_ptr5[static_cast<long>(x3)];
                            auto tmp43 = in_ptr7[static_cast<long>(x3)];
                            auto tmp45 = in_ptr8[static_cast<long>(x3)];
                            auto tmp51 = in_ptr9[static_cast<long>(x3)];
                            auto tmp53 = in_ptr10[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(x1);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.5);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x2);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr1[static_cast<long>(x3 + (18L*tmp20) + (504L*tmp12) + (14112L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = static_cast<float>(0.25);
                            auto tmp38 = decltype(tmp9)(tmp9 * tmp37);
                            auto tmp39 = c10::convert<long>(tmp38);
                            auto tmp40 = decltype(tmp18)(tmp18 * tmp37);
                            auto tmp41 = c10::convert<long>(tmp40);
                            auto tmp42 = in_ptr6[static_cast<long>(x3 + (18L*tmp41) + (252L*tmp39) + (3528L*x0))];
                            auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                            auto tmp46 = decltype(tmp45)(tmp45 + tmp25);
                            auto tmp47 = std::sqrt(tmp46);
                            auto tmp48 = 1 / tmp47;
                            auto tmp49 = decltype(tmp48)(tmp48 * tmp29);
                            auto tmp50 = decltype(tmp44)(tmp44 * tmp49);
                            auto tmp52 = decltype(tmp50)(tmp50 * tmp51);
                            auto tmp54 = decltype(tmp52)(tmp52 + tmp53);
                            auto tmp55 = decltype(tmp36)(tmp36 + tmp54);
                            out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))] = tmp55;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (56448L*x0)));
                        auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                        tmp1.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x2) + (56448L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr0[static_cast<long>(x1 + (18L*x2) + (56448L*x0))];
                        auto tmp1 = tmp0 * (tmp0>0);
                        in_out_ptr0[static_cast<long>(x1 + (18L*x2) + (56448L*x0))] = tmp1;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr1 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr11[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr1 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr11[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr1[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(36L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp1 = in_ptr0[static_cast<long>(x3)];
                            auto tmp3 = in_ptr1[static_cast<long>(x3)];
                            auto tmp11 = in_ptr2[static_cast<long>(x3)];
                            auto tmp13 = in_ptr3[static_cast<long>(x3)];
                            auto tmp15 = in_ptr4[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp38 = in_ptr6[static_cast<long>(x3)];
                            auto tmp40 = in_ptr7[static_cast<long>(x3)];
                            auto tmp46 = in_ptr8[static_cast<long>(x3)];
                            auto tmp48 = in_ptr9[static_cast<long>(x3)];
                            auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                            auto tmp4 = static_cast<float>(1e-05);
                            auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                            auto tmp6 = std::sqrt(tmp5);
                            auto tmp7 = 1 / tmp6;
                            auto tmp8 = static_cast<float>(1.0);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                            auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                            auto tmp17 = c10::convert<long>(x1);
                            auto tmp18 = c10::convert<double>(tmp17);
                            auto tmp19 = static_cast<double>(1.0);
                            auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                            auto tmp21 = static_cast<double>(0.0);
                            auto tmp22 = decltype(tmp20)(tmp20 + tmp21);
                            auto tmp23 = c10::convert<float>(tmp22);
                            auto tmp24 = static_cast<float>(0.0);
                            auto tmp25 = decltype(tmp23)(tmp23 + tmp24);
                            auto tmp26 = static_cast<float>(0.5);
                            auto tmp27 = decltype(tmp25)(tmp25 * tmp26);
                            auto tmp28 = c10::convert<long>(tmp27);
                            auto tmp29 = c10::convert<long>(x2);
                            auto tmp30 = c10::convert<double>(tmp29);
                            auto tmp31 = decltype(tmp30)(tmp30 * tmp19);
                            auto tmp32 = decltype(tmp31)(tmp31 + tmp21);
                            auto tmp33 = c10::convert<float>(tmp32);
                            auto tmp34 = decltype(tmp33)(tmp33 + tmp24);
                            auto tmp35 = decltype(tmp34)(tmp34 * tmp26);
                            auto tmp36 = c10::convert<long>(tmp35);
                            auto tmp37 = in_ptr5[static_cast<long>(x3 + (36L*tmp36) + (504L*tmp28) + (7056L*x0))];
                            auto tmp39 = decltype(tmp37)(tmp37 - tmp38);
                            auto tmp41 = decltype(tmp40)(tmp40 + tmp4);
                            auto tmp42 = std::sqrt(tmp41);
                            auto tmp43 = 1 / tmp42;
                            auto tmp44 = decltype(tmp43)(tmp43 * tmp8);
                            auto tmp45 = decltype(tmp39)(tmp39 * tmp44);
                            auto tmp47 = decltype(tmp45)(tmp45 * tmp46);
                            auto tmp49 = decltype(tmp47)(tmp47 + tmp48);
                            auto tmp50 = decltype(tmp16)(tmp16 + tmp49);
                            in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))] = tmp50;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x2) + (28224L*x0)));
                        auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                        tmp1.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x2) + (28224L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x2) + (28224L*x0))];
                        auto tmp1 = tmp0 * (tmp0>0);
                        in_out_ptr0[static_cast<long>(x1 + (36L*x2) + (28224L*x0))] = tmp1;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr10[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr10[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp19 = tmp17 - tmp18;
                auto tmp21 = tmp20 + tmp5;
                auto tmp22 = tmp21.sqrt();
                auto tmp23 = tmp22.reciprocal();
                auto tmp24 = tmp23 * tmp10;
                auto tmp25 = tmp19 * tmp24;
                auto tmp27 = tmp25 * tmp26;
                auto tmp29 = tmp27 + tmp28;
                auto tmp30 = tmp16 + tmp29;
                tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
            auto tmp2 = tmp0 + tmp1;
            auto tmp3 = at::vec::clamp_min(tmp2, decltype(tmp2)(0));
            tmp3.store(in_out_ptr1 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr9[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr1)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(18L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))];
                            auto tmp22 = in_ptr2[static_cast<long>(x3)];
                            auto tmp24 = in_ptr3[static_cast<long>(x3)];
                            auto tmp32 = in_ptr4[static_cast<long>(x3)];
                            auto tmp34 = in_ptr5[static_cast<long>(x3)];
                            auto tmp43 = in_ptr7[static_cast<long>(x3)];
                            auto tmp45 = in_ptr8[static_cast<long>(x3)];
                            auto tmp51 = in_ptr9[static_cast<long>(x3)];
                            auto tmp53 = in_ptr10[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(x1);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.5);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x2);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr1[static_cast<long>(x3 + (18L*tmp20) + (504L*tmp12) + (14112L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = static_cast<float>(0.25);
                            auto tmp38 = decltype(tmp9)(tmp9 * tmp37);
                            auto tmp39 = c10::convert<long>(tmp38);
                            auto tmp40 = decltype(tmp18)(tmp18 * tmp37);
                            auto tmp41 = c10::convert<long>(tmp40);
                            auto tmp42 = in_ptr6[static_cast<long>(x3 + (18L*tmp41) + (252L*tmp39) + (3528L*x0))];
                            auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                            auto tmp46 = decltype(tmp45)(tmp45 + tmp25);
                            auto tmp47 = std::sqrt(tmp46);
                            auto tmp48 = 1 / tmp47;
                            auto tmp49 = decltype(tmp48)(tmp48 * tmp29);
                            auto tmp50 = decltype(tmp44)(tmp44 * tmp49);
                            auto tmp52 = decltype(tmp50)(tmp50 * tmp51);
                            auto tmp54 = decltype(tmp52)(tmp52 + tmp53);
                            auto tmp55 = decltype(tmp36)(tmp36 + tmp54);
                            out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))] = tmp55;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (56448L*x0)));
                        auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                        tmp1.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x2) + (56448L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr0[static_cast<long>(x1 + (18L*x2) + (56448L*x0))];
                        auto tmp1 = tmp0 * (tmp0>0);
                        in_out_ptr0[static_cast<long>(x1 + (18L*x2) + (56448L*x0))] = tmp1;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr1 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr11[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr1 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr11[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr1[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(36L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp1 = in_ptr0[static_cast<long>(x3)];
                            auto tmp3 = in_ptr1[static_cast<long>(x3)];
                            auto tmp11 = in_ptr2[static_cast<long>(x3)];
                            auto tmp13 = in_ptr3[static_cast<long>(x3)];
                            auto tmp15 = in_ptr4[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp38 = in_ptr6[static_cast<long>(x3)];
                            auto tmp40 = in_ptr7[static_cast<long>(x3)];
                            auto tmp46 = in_ptr8[static_cast<long>(x3)];
                            auto tmp48 = in_ptr9[static_cast<long>(x3)];
                            auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                            auto tmp4 = static_cast<float>(1e-05);
                            auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                            auto tmp6 = std::sqrt(tmp5);
                            auto tmp7 = 1 / tmp6;
                            auto tmp8 = static_cast<float>(1.0);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                            auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                            auto tmp17 = c10::convert<long>(x1);
                            auto tmp18 = c10::convert<double>(tmp17);
                            auto tmp19 = static_cast<double>(1.0);
                            auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                            auto tmp21 = static_cast<double>(0.0);
                            auto tmp22 = decltype(tmp20)(tmp20 + tmp21);
                            auto tmp23 = c10::convert<float>(tmp22);
                            auto tmp24 = static_cast<float>(0.0);
                            auto tmp25 = decltype(tmp23)(tmp23 + tmp24);
                            auto tmp26 = static_cast<float>(0.5);
                            auto tmp27 = decltype(tmp25)(tmp25 * tmp26);
                            auto tmp28 = c10::convert<long>(tmp27);
                            auto tmp29 = c10::convert<long>(x2);
                            auto tmp30 = c10::convert<double>(tmp29);
                            auto tmp31 = decltype(tmp30)(tmp30 * tmp19);
                            auto tmp32 = decltype(tmp31)(tmp31 + tmp21);
                            auto tmp33 = c10::convert<float>(tmp32);
                            auto tmp34 = decltype(tmp33)(tmp33 + tmp24);
                            auto tmp35 = decltype(tmp34)(tmp34 * tmp26);
                            auto tmp36 = c10::convert<long>(tmp35);
                            auto tmp37 = in_ptr5[static_cast<long>(x3 + (36L*tmp36) + (504L*tmp28) + (7056L*x0))];
                            auto tmp39 = decltype(tmp37)(tmp37 - tmp38);
                            auto tmp41 = decltype(tmp40)(tmp40 + tmp4);
                            auto tmp42 = std::sqrt(tmp41);
                            auto tmp43 = 1 / tmp42;
                            auto tmp44 = decltype(tmp43)(tmp43 * tmp8);
                            auto tmp45 = decltype(tmp39)(tmp39 * tmp44);
                            auto tmp47 = decltype(tmp45)(tmp45 * tmp46);
                            auto tmp49 = decltype(tmp47)(tmp47 + tmp48);
                            auto tmp50 = decltype(tmp16)(tmp16 + tmp49);
                            in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))] = tmp50;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x2) + (28224L*x0)));
                        auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                        tmp1.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x2) + (28224L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x2) + (28224L*x0))];
                        auto tmp1 = tmp0 * (tmp0>0);
                        in_out_ptr0[static_cast<long>(x1 + (36L*x2) + (28224L*x0))] = tmp1;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr10[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr10[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp19 = tmp17 - tmp18;
                auto tmp21 = tmp20 + tmp5;
                auto tmp22 = tmp21.sqrt();
                auto tmp23 = tmp22.reciprocal();
                auto tmp24 = tmp23 * tmp10;
                auto tmp25 = tmp19 * tmp24;
                auto tmp27 = tmp25 * tmp26;
                auto tmp29 = tmp27 + tmp28;
                auto tmp30 = tmp16 + tmp29;
                tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
            auto tmp2 = tmp0 + tmp1;
            auto tmp3 = at::vec::clamp_min(tmp2, decltype(tmp2)(0));
            tmp3.store(in_out_ptr1 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr9[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr1)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(18L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))];
                            auto tmp22 = in_ptr2[static_cast<long>(x3)];
                            auto tmp24 = in_ptr3[static_cast<long>(x3)];
                            auto tmp32 = in_ptr4[static_cast<long>(x3)];
                            auto tmp34 = in_ptr5[static_cast<long>(x3)];
                            auto tmp43 = in_ptr7[static_cast<long>(x3)];
                            auto tmp45 = in_ptr8[static_cast<long>(x3)];
                            auto tmp51 = in_ptr9[static_cast<long>(x3)];
                            auto tmp53 = in_ptr10[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(x1);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.5);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x2);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr1[static_cast<long>(x3 + (18L*tmp20) + (504L*tmp12) + (14112L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = static_cast<float>(0.25);
                            auto tmp38 = decltype(tmp9)(tmp9 * tmp37);
                            auto tmp39 = c10::convert<long>(tmp38);
                            auto tmp40 = decltype(tmp18)(tmp18 * tmp37);
                            auto tmp41 = c10::convert<long>(tmp40);
                            auto tmp42 = in_ptr6[static_cast<long>(x3 + (18L*tmp41) + (252L*tmp39) + (3528L*x0))];
                            auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                            auto tmp46 = decltype(tmp45)(tmp45 + tmp25);
                            auto tmp47 = std::sqrt(tmp46);
                            auto tmp48 = 1 / tmp47;
                            auto tmp49 = decltype(tmp48)(tmp48 * tmp29);
                            auto tmp50 = decltype(tmp44)(tmp44 * tmp49);
                            auto tmp52 = decltype(tmp50)(tmp50 * tmp51);
                            auto tmp54 = decltype(tmp52)(tmp52 + tmp53);
                            auto tmp55 = decltype(tmp36)(tmp36 + tmp54);
                            out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))] = tmp55;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (56448L*x0)));
                        auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                        tmp1.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x2) + (56448L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr0[static_cast<long>(x1 + (18L*x2) + (56448L*x0))];
                        auto tmp1 = tmp0 * (tmp0>0);
                        in_out_ptr0[static_cast<long>(x1 + (18L*x2) + (56448L*x0))] = tmp1;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr1 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr11[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr1 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr11[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr1[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(36L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp1 = in_ptr0[static_cast<long>(x3)];
                            auto tmp3 = in_ptr1[static_cast<long>(x3)];
                            auto tmp11 = in_ptr2[static_cast<long>(x3)];
                            auto tmp13 = in_ptr3[static_cast<long>(x3)];
                            auto tmp15 = in_ptr4[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp38 = in_ptr6[static_cast<long>(x3)];
                            auto tmp40 = in_ptr7[static_cast<long>(x3)];
                            auto tmp46 = in_ptr8[static_cast<long>(x3)];
                            auto tmp48 = in_ptr9[static_cast<long>(x3)];
                            auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                            auto tmp4 = static_cast<float>(1e-05);
                            auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                            auto tmp6 = std::sqrt(tmp5);
                            auto tmp7 = 1 / tmp6;
                            auto tmp8 = static_cast<float>(1.0);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                            auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                            auto tmp17 = c10::convert<long>(x1);
                            auto tmp18 = c10::convert<double>(tmp17);
                            auto tmp19 = static_cast<double>(1.0);
                            auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                            auto tmp21 = static_cast<double>(0.0);
                            auto tmp22 = decltype(tmp20)(tmp20 + tmp21);
                            auto tmp23 = c10::convert<float>(tmp22);
                            auto tmp24 = static_cast<float>(0.0);
                            auto tmp25 = decltype(tmp23)(tmp23 + tmp24);
                            auto tmp26 = static_cast<float>(0.5);
                            auto tmp27 = decltype(tmp25)(tmp25 * tmp26);
                            auto tmp28 = c10::convert<long>(tmp27);
                            auto tmp29 = c10::convert<long>(x2);
                            auto tmp30 = c10::convert<double>(tmp29);
                            auto tmp31 = decltype(tmp30)(tmp30 * tmp19);
                            auto tmp32 = decltype(tmp31)(tmp31 + tmp21);
                            auto tmp33 = c10::convert<float>(tmp32);
                            auto tmp34 = decltype(tmp33)(tmp33 + tmp24);
                            auto tmp35 = decltype(tmp34)(tmp34 * tmp26);
                            auto tmp36 = c10::convert<long>(tmp35);
                            auto tmp37 = in_ptr5[static_cast<long>(x3 + (36L*tmp36) + (504L*tmp28) + (7056L*x0))];
                            auto tmp39 = decltype(tmp37)(tmp37 - tmp38);
                            auto tmp41 = decltype(tmp40)(tmp40 + tmp4);
                            auto tmp42 = std::sqrt(tmp41);
                            auto tmp43 = 1 / tmp42;
                            auto tmp44 = decltype(tmp43)(tmp43 * tmp8);
                            auto tmp45 = decltype(tmp39)(tmp39 * tmp44);
                            auto tmp47 = decltype(tmp45)(tmp45 * tmp46);
                            auto tmp49 = decltype(tmp47)(tmp47 + tmp48);
                            auto tmp50 = decltype(tmp16)(tmp16 + tmp49);
                            in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))] = tmp50;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x2) + (28224L*x0)));
                        auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                        tmp1.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x2) + (28224L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x2) + (28224L*x0))];
                        auto tmp1 = tmp0 * (tmp0>0);
                        in_out_ptr0[static_cast<long>(x1 + (36L*x2) + (28224L*x0))] = tmp1;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr10[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr10[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp19 = tmp17 - tmp18;
                auto tmp21 = tmp20 + tmp5;
                auto tmp22 = tmp21.sqrt();
                auto tmp23 = tmp22.reciprocal();
                auto tmp24 = tmp23 * tmp10;
                auto tmp25 = tmp19 * tmp24;
                auto tmp27 = tmp25 * tmp26;
                auto tmp29 = tmp27 + tmp28;
                auto tmp30 = tmp16 + tmp29;
                tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
            auto tmp2 = tmp0 + tmp1;
            auto tmp3 = at::vec::clamp_min(tmp2, decltype(tmp2)(0));
            tmp3.store(in_out_ptr1 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr9[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr1)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(18L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))];
                            auto tmp22 = in_ptr2[static_cast<long>(x3)];
                            auto tmp24 = in_ptr3[static_cast<long>(x3)];
                            auto tmp32 = in_ptr4[static_cast<long>(x3)];
                            auto tmp34 = in_ptr5[static_cast<long>(x3)];
                            auto tmp43 = in_ptr7[static_cast<long>(x3)];
                            auto tmp45 = in_ptr8[static_cast<long>(x3)];
                            auto tmp51 = in_ptr9[static_cast<long>(x3)];
                            auto tmp53 = in_ptr10[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(x1);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.5);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x2);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr1[static_cast<long>(x3 + (18L*tmp20) + (504L*tmp12) + (14112L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = static_cast<float>(0.25);
                            auto tmp38 = decltype(tmp9)(tmp9 * tmp37);
                            auto tmp39 = c10::convert<long>(tmp38);
                            auto tmp40 = decltype(tmp18)(tmp18 * tmp37);
                            auto tmp41 = c10::convert<long>(tmp40);
                            auto tmp42 = in_ptr6[static_cast<long>(x3 + (18L*tmp41) + (252L*tmp39) + (3528L*x0))];
                            auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                            auto tmp46 = decltype(tmp45)(tmp45 + tmp25);
                            auto tmp47 = std::sqrt(tmp46);
                            auto tmp48 = 1 / tmp47;
                            auto tmp49 = decltype(tmp48)(tmp48 * tmp29);
                            auto tmp50 = decltype(tmp44)(tmp44 * tmp49);
                            auto tmp52 = decltype(tmp50)(tmp50 * tmp51);
                            auto tmp54 = decltype(tmp52)(tmp52 + tmp53);
                            auto tmp55 = decltype(tmp36)(tmp36 + tmp54);
                            out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))] = tmp55;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (56448L*x0)));
                        auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                        tmp1.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x2) + (56448L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(3136L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = out_ptr0[static_cast<long>(x1 + (18L*x2) + (56448L*x0))];
                        auto tmp1 = tmp0 * (tmp0>0);
                        in_out_ptr0[static_cast<long>(x1 + (18L*x2) + (56448L*x0))] = tmp1;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr1 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr11[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr1 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr11[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr1[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(36L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp1 = in_ptr0[static_cast<long>(x3)];
                            auto tmp3 = in_ptr1[static_cast<long>(x3)];
                            auto tmp11 = in_ptr2[static_cast<long>(x3)];
                            auto tmp13 = in_ptr3[static_cast<long>(x3)];
                            auto tmp15 = in_ptr4[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp38 = in_ptr6[static_cast<long>(x3)];
                            auto tmp40 = in_ptr7[static_cast<long>(x3)];
                            auto tmp46 = in_ptr8[static_cast<long>(x3)];
                            auto tmp48 = in_ptr9[static_cast<long>(x3)];
                            auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                            auto tmp4 = static_cast<float>(1e-05);
                            auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                            auto tmp6 = std::sqrt(tmp5);
                            auto tmp7 = 1 / tmp6;
                            auto tmp8 = static_cast<float>(1.0);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                            auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                            auto tmp17 = c10::convert<long>(x1);
                            auto tmp18 = c10::convert<double>(tmp17);
                            auto tmp19 = static_cast<double>(1.0);
                            auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                            auto tmp21 = static_cast<double>(0.0);
                            auto tmp22 = decltype(tmp20)(tmp20 + tmp21);
                            auto tmp23 = c10::convert<float>(tmp22);
                            auto tmp24 = static_cast<float>(0.0);
                            auto tmp25 = decltype(tmp23)(tmp23 + tmp24);
                            auto tmp26 = static_cast<float>(0.5);
                            auto tmp27 = decltype(tmp25)(tmp25 * tmp26);
                            auto tmp28 = c10::convert<long>(tmp27);
                            auto tmp29 = c10::convert<long>(x2);
                            auto tmp30 = c10::convert<double>(tmp29);
                            auto tmp31 = decltype(tmp30)(tmp30 * tmp19);
                            auto tmp32 = decltype(tmp31)(tmp31 + tmp21);
                            auto tmp33 = c10::convert<float>(tmp32);
                            auto tmp34 = decltype(tmp33)(tmp33 + tmp24);
                            auto tmp35 = decltype(tmp34)(tmp34 * tmp26);
                            auto tmp36 = c10::convert<long>(tmp35);
                            auto tmp37 = in_ptr5[static_cast<long>(x3 + (36L*tmp36) + (504L*tmp28) + (7056L*x0))];
                            auto tmp39 = decltype(tmp37)(tmp37 - tmp38);
                            auto tmp41 = decltype(tmp40)(tmp40 + tmp4);
                            auto tmp42 = std::sqrt(tmp41);
                            auto tmp43 = 1 / tmp42;
                            auto tmp44 = decltype(tmp43)(tmp43 * tmp8);
                            auto tmp45 = decltype(tmp39)(tmp39 * tmp44);
                            auto tmp47 = decltype(tmp45)(tmp45 * tmp46);
                            auto tmp49 = decltype(tmp47)(tmp47 + tmp48);
                            auto tmp50 = decltype(tmp16)(tmp16 + tmp49);
                            in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))] = tmp50;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x2) + (28224L*x0)));
                        auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                        tmp1.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x2) + (28224L*x0)));
                    }
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(784L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x2) + (28224L*x0))];
                        auto tmp1 = tmp0 * (tmp0>0);
                        in_out_ptr0[static_cast<long>(x1 + (36L*x2) + (28224L*x0))] = tmp1;
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr10[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr10[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp19 = tmp17 - tmp18;
                auto tmp21 = tmp20 + tmp5;
                auto tmp22 = tmp21.sqrt();
                auto tmp23 = tmp22.reciprocal();
                auto tmp24 = tmp23 * tmp10;
                auto tmp25 = tmp19 * tmp24;
                auto tmp27 = tmp25 * tmp26;
                auto tmp29 = tmp27 + tmp28;
                auto tmp30 = tmp16 + tmp29;
                tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(112896L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x0));
            auto tmp2 = tmp0 + tmp1;
            auto tmp3 = at::vec::clamp_min(tmp2, decltype(tmp2)(0));
            tmp3.store(in_out_ptr1 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr9[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_173 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_174 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_175 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_176 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_177 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_178 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_179 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_180 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_181 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(18L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))];
                            auto tmp22 = in_ptr2[static_cast<long>(x3)];
                            auto tmp24 = in_ptr3[static_cast<long>(x3)];
                            auto tmp32 = in_ptr4[static_cast<long>(x3)];
                            auto tmp34 = in_ptr5[static_cast<long>(x3)];
                            auto tmp43 = in_ptr7[static_cast<long>(x3)];
                            auto tmp45 = in_ptr8[static_cast<long>(x3)];
                            auto tmp51 = in_ptr9[static_cast<long>(x3)];
                            auto tmp53 = in_ptr10[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(x1);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.5);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x2);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr1[static_cast<long>(x3 + (18L*tmp20) + (504L*tmp12) + (14112L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = static_cast<float>(0.25);
                            auto tmp38 = decltype(tmp9)(tmp9 * tmp37);
                            auto tmp39 = c10::convert<long>(tmp38);
                            auto tmp40 = decltype(tmp18)(tmp18 * tmp37);
                            auto tmp41 = c10::convert<long>(tmp40);
                            auto tmp42 = in_ptr6[static_cast<long>(x3 + (18L*tmp41) + (252L*tmp39) + (3528L*x0))];
                            auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                            auto tmp46 = decltype(tmp45)(tmp45 + tmp25);
                            auto tmp47 = std::sqrt(tmp46);
                            auto tmp48 = 1 / tmp47;
                            auto tmp49 = decltype(tmp48)(tmp48 * tmp29);
                            auto tmp50 = decltype(tmp44)(tmp44 * tmp49);
                            auto tmp52 = decltype(tmp50)(tmp50 * tmp51);
                            auto tmp54 = decltype(tmp52)(tmp52 + tmp53);
                            auto tmp55 = decltype(tmp36)(tmp36 + tmp54);
                            out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))] = tmp55;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr1 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr11[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr1 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_182 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_183 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_184 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_185 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_186 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_187 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_188 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_189 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_190 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_191 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_192 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_193 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_194 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_195 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_196 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       const float* in_ptr16,
                       const float* in_ptr17,
                       const float* in_ptr18)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (144L*x0)));
                auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp36 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp42 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp44 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                auto tmp47 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1 + (144L*x0)));
                auto tmp48 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x1));
                auto tmp50 = at::vec::Vectorized<float>::loadu(in_ptr16 + static_cast<long>(x1));
                auto tmp56 = at::vec::Vectorized<float>::loadu(in_ptr17 + static_cast<long>(x1));
                auto tmp58 = at::vec::Vectorized<float>::loadu(in_ptr18 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                auto tmp22 = tmp20 - tmp21;
                auto tmp24 = tmp23 + tmp5;
                auto tmp25 = tmp24.sqrt();
                auto tmp26 = tmp25.reciprocal();
                auto tmp27 = tmp26 * tmp10;
                auto tmp28 = tmp22 * tmp27;
                auto tmp30 = tmp28 * tmp29;
                auto tmp32 = tmp30 + tmp31;
                auto tmp35 = tmp33 - tmp34;
                auto tmp37 = tmp36 + tmp5;
                auto tmp38 = tmp37.sqrt();
                auto tmp39 = tmp38.reciprocal();
                auto tmp40 = tmp39 * tmp10;
                auto tmp41 = tmp35 * tmp40;
                auto tmp43 = tmp41 * tmp42;
                auto tmp45 = tmp43 + tmp44;
                auto tmp46 = tmp32 + tmp45;
                auto tmp49 = tmp47 - tmp48;
                auto tmp51 = tmp50 + tmp5;
                auto tmp52 = tmp51.sqrt();
                auto tmp53 = tmp52.reciprocal();
                auto tmp54 = tmp53 * tmp10;
                auto tmp55 = tmp49 * tmp54;
                auto tmp57 = tmp55 * tmp56;
                auto tmp59 = tmp57 + tmp58;
                auto tmp60 = tmp46 + tmp59;
                auto tmp61 = tmp60 + tmp19;
                auto tmp62 = at::vec::clamp_min(tmp61, decltype(tmp61)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                tmp62.store(in_out_ptr1 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_197 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(56L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x3) + (1008L*x2) + (56448L*x0))];
                            auto tmp22 = in_ptr1[static_cast<long>(x1)];
                            auto tmp24 = in_ptr2[static_cast<long>(x1)];
                            auto tmp32 = in_ptr3[static_cast<long>(x1)];
                            auto tmp34 = in_ptr4[static_cast<long>(x1)];
                            auto tmp1 = c10::convert<long>(x2);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.125);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x3);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr0[static_cast<long>(x1 + (18L*tmp20) + (126L*tmp12) + (882L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = tmp36 * (tmp36>0);
                            in_out_ptr0[static_cast<long>(x1 + (18L*x3) + (1008L*x2) + (56448L*x0))] = tmp37;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_198 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_199 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_200 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_201 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_202 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_203 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_204 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_205 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_206 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(36L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp1 = in_ptr0[static_cast<long>(x3)];
                            auto tmp3 = in_ptr1[static_cast<long>(x3)];
                            auto tmp11 = in_ptr2[static_cast<long>(x3)];
                            auto tmp13 = in_ptr3[static_cast<long>(x3)];
                            auto tmp15 = in_ptr4[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp38 = in_ptr6[static_cast<long>(x3)];
                            auto tmp40 = in_ptr7[static_cast<long>(x3)];
                            auto tmp46 = in_ptr8[static_cast<long>(x3)];
                            auto tmp48 = in_ptr9[static_cast<long>(x3)];
                            auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                            auto tmp4 = static_cast<float>(1e-05);
                            auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                            auto tmp6 = std::sqrt(tmp5);
                            auto tmp7 = 1 / tmp6;
                            auto tmp8 = static_cast<float>(1.0);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                            auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                            auto tmp17 = c10::convert<long>(x1);
                            auto tmp18 = c10::convert<double>(tmp17);
                            auto tmp19 = static_cast<double>(1.0);
                            auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                            auto tmp21 = static_cast<double>(0.0);
                            auto tmp22 = decltype(tmp20)(tmp20 + tmp21);
                            auto tmp23 = c10::convert<float>(tmp22);
                            auto tmp24 = static_cast<float>(0.0);
                            auto tmp25 = decltype(tmp23)(tmp23 + tmp24);
                            auto tmp26 = static_cast<float>(0.5);
                            auto tmp27 = decltype(tmp25)(tmp25 * tmp26);
                            auto tmp28 = c10::convert<long>(tmp27);
                            auto tmp29 = c10::convert<long>(x2);
                            auto tmp30 = c10::convert<double>(tmp29);
                            auto tmp31 = decltype(tmp30)(tmp30 * tmp19);
                            auto tmp32 = decltype(tmp31)(tmp31 + tmp21);
                            auto tmp33 = c10::convert<float>(tmp32);
                            auto tmp34 = decltype(tmp33)(tmp33 + tmp24);
                            auto tmp35 = decltype(tmp34)(tmp34 * tmp26);
                            auto tmp36 = c10::convert<long>(tmp35);
                            auto tmp37 = in_ptr5[static_cast<long>(x3 + (36L*tmp36) + (504L*tmp28) + (7056L*x0))];
                            auto tmp39 = decltype(tmp37)(tmp37 - tmp38);
                            auto tmp41 = decltype(tmp40)(tmp40 + tmp4);
                            auto tmp42 = std::sqrt(tmp41);
                            auto tmp43 = 1 / tmp42;
                            auto tmp44 = decltype(tmp43)(tmp43 * tmp8);
                            auto tmp45 = decltype(tmp39)(tmp39 * tmp44);
                            auto tmp47 = decltype(tmp45)(tmp45 * tmp46);
                            auto tmp49 = decltype(tmp47)(tmp47 + tmp48);
                            auto tmp50 = decltype(tmp16)(tmp16 + tmp49);
                            in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))] = tmp50;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_207 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x3) + (1008L*x2) + (28224L*x0))];
                            auto tmp22 = in_ptr1[static_cast<long>(x1)];
                            auto tmp24 = in_ptr2[static_cast<long>(x1)];
                            auto tmp32 = in_ptr3[static_cast<long>(x1)];
                            auto tmp34 = in_ptr4[static_cast<long>(x1)];
                            auto tmp1 = c10::convert<long>(x2);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.25);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x3);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr0[static_cast<long>(x1 + (36L*tmp20) + (252L*tmp12) + (1764L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = tmp36 * (tmp36>0);
                            in_out_ptr0[static_cast<long>(x1 + (36L*x3) + (1008L*x2) + (28224L*x0))] = tmp37;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_208 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_209 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_210 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_211 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_212 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_213 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_214 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_215 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_216 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_217 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_218 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_219 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp19 = tmp17 - tmp18;
                auto tmp21 = tmp20 + tmp5;
                auto tmp22 = tmp21.sqrt();
                auto tmp23 = tmp22.reciprocal();
                auto tmp24 = tmp23 * tmp10;
                auto tmp25 = tmp19 * tmp24;
                auto tmp27 = tmp25 * tmp26;
                auto tmp29 = tmp27 + tmp28;
                auto tmp30 = tmp16 + tmp29;
                tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_220 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(72L); x3+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))];
                        auto tmp24 = in_ptr2[static_cast<long>(x3)];
                        auto tmp26 = in_ptr3[static_cast<long>(x3)];
                        auto tmp34 = in_ptr4[static_cast<long>(x3)];
                        auto tmp36 = in_ptr5[static_cast<long>(x3)];
                        auto tmp2 = decltype(tmp0)(tmp0 + tmp1);
                        auto tmp3 = c10::convert<long>(x1);
                        auto tmp4 = c10::convert<double>(tmp3);
                        auto tmp5 = static_cast<double>(1.0);
                        auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                        auto tmp7 = static_cast<double>(0.0);
                        auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                        auto tmp9 = c10::convert<float>(tmp8);
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                        auto tmp12 = static_cast<float>(0.5);
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp14 = c10::convert<long>(tmp13);
                        auto tmp15 = c10::convert<long>(x2);
                        auto tmp16 = c10::convert<double>(tmp15);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 + tmp7);
                        auto tmp19 = c10::convert<float>(tmp18);
                        auto tmp20 = decltype(tmp19)(tmp19 + tmp10);
                        auto tmp21 = decltype(tmp20)(tmp20 * tmp12);
                        auto tmp22 = c10::convert<long>(tmp21);
                        auto tmp23 = in_ptr1[static_cast<long>(x3 + (72L*tmp22) + (504L*tmp14) + (3528L*x0))];
                        auto tmp25 = decltype(tmp23)(tmp23 - tmp24);
                        auto tmp27 = static_cast<float>(1e-05);
                        auto tmp28 = decltype(tmp26)(tmp26 + tmp27);
                        auto tmp29 = std::sqrt(tmp28);
                        auto tmp30 = 1 / tmp29;
                        auto tmp31 = static_cast<float>(1.0);
                        auto tmp32 = decltype(tmp30)(tmp30 * tmp31);
                        auto tmp33 = decltype(tmp25)(tmp25 * tmp32);
                        auto tmp35 = decltype(tmp33)(tmp33 * tmp34);
                        auto tmp37 = decltype(tmp35)(tmp35 + tmp36);
                        auto tmp38 = decltype(tmp2)(tmp2 + tmp37);
                        auto tmp39 = tmp38 * (tmp38>0);
                        in_out_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))] = tmp39;
                    }
                }
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr6[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_221 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_222 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_223 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_224 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_225 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_226 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_227 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_228 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_229 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(18L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))];
                            auto tmp22 = in_ptr2[static_cast<long>(x3)];
                            auto tmp24 = in_ptr3[static_cast<long>(x3)];
                            auto tmp32 = in_ptr4[static_cast<long>(x3)];
                            auto tmp34 = in_ptr5[static_cast<long>(x3)];
                            auto tmp43 = in_ptr7[static_cast<long>(x3)];
                            auto tmp45 = in_ptr8[static_cast<long>(x3)];
                            auto tmp51 = in_ptr9[static_cast<long>(x3)];
                            auto tmp53 = in_ptr10[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(x1);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.5);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x2);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr1[static_cast<long>(x3 + (18L*tmp20) + (504L*tmp12) + (14112L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = static_cast<float>(0.25);
                            auto tmp38 = decltype(tmp9)(tmp9 * tmp37);
                            auto tmp39 = c10::convert<long>(tmp38);
                            auto tmp40 = decltype(tmp18)(tmp18 * tmp37);
                            auto tmp41 = c10::convert<long>(tmp40);
                            auto tmp42 = in_ptr6[static_cast<long>(x3 + (18L*tmp41) + (252L*tmp39) + (3528L*x0))];
                            auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                            auto tmp46 = decltype(tmp45)(tmp45 + tmp25);
                            auto tmp47 = std::sqrt(tmp46);
                            auto tmp48 = 1 / tmp47;
                            auto tmp49 = decltype(tmp48)(tmp48 * tmp29);
                            auto tmp50 = decltype(tmp44)(tmp44 * tmp49);
                            auto tmp52 = decltype(tmp50)(tmp50 * tmp51);
                            auto tmp54 = decltype(tmp52)(tmp52 + tmp53);
                            auto tmp55 = decltype(tmp36)(tmp36 + tmp54);
                            out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))] = tmp55;
                        }
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr1 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr11[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr1 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_230 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_231 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_232 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_233 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_234 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_235 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_236 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_convolution_237 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_238 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_239 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_240 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_241 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_242 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_243 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       const float* in_ptr16,
                       const float* in_ptr17,
                       const float* in_ptr18)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp21 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp23 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (144L*x0)));
                auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp36 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp42 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp44 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                auto tmp47 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1 + (144L*x0)));
                auto tmp48 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x1));
                auto tmp50 = at::vec::Vectorized<float>::loadu(in_ptr16 + static_cast<long>(x1));
                auto tmp56 = at::vec::Vectorized<float>::loadu(in_ptr17 + static_cast<long>(x1));
                auto tmp58 = at::vec::Vectorized<float>::loadu(in_ptr18 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                auto tmp22 = tmp20 - tmp21;
                auto tmp24 = tmp23 + tmp5;
                auto tmp25 = tmp24.sqrt();
                auto tmp26 = tmp25.reciprocal();
                auto tmp27 = tmp26 * tmp10;
                auto tmp28 = tmp22 * tmp27;
                auto tmp30 = tmp28 * tmp29;
                auto tmp32 = tmp30 + tmp31;
                auto tmp35 = tmp33 - tmp34;
                auto tmp37 = tmp36 + tmp5;
                auto tmp38 = tmp37.sqrt();
                auto tmp39 = tmp38.reciprocal();
                auto tmp40 = tmp39 * tmp10;
                auto tmp41 = tmp35 * tmp40;
                auto tmp43 = tmp41 * tmp42;
                auto tmp45 = tmp43 + tmp44;
                auto tmp46 = tmp32 + tmp45;
                auto tmp49 = tmp47 - tmp48;
                auto tmp51 = tmp50 + tmp5;
                auto tmp52 = tmp51.sqrt();
                auto tmp53 = tmp52.reciprocal();
                auto tmp54 = tmp53 * tmp10;
                auto tmp55 = tmp49 * tmp54;
                auto tmp57 = tmp55 * tmp56;
                auto tmp59 = tmp57 + tmp58;
                auto tmp60 = tmp46 + tmp59;
                auto tmp61 = tmp60 + tmp19;
                auto tmp62 = at::vec::clamp_min(tmp61, decltype(tmp61)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                tmp62.store(in_out_ptr1 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_244 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(56L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x3) + (1008L*x2) + (56448L*x0))];
                            auto tmp22 = in_ptr1[static_cast<long>(x1)];
                            auto tmp24 = in_ptr2[static_cast<long>(x1)];
                            auto tmp32 = in_ptr3[static_cast<long>(x1)];
                            auto tmp34 = in_ptr4[static_cast<long>(x1)];
                            auto tmp1 = c10::convert<long>(x2);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.125);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x3);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr0[static_cast<long>(x1 + (18L*tmp20) + (126L*tmp12) + (882L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = tmp36 * (tmp36>0);
                            in_out_ptr0[static_cast<long>(x1 + (18L*x3) + (1008L*x2) + (56448L*x0))] = tmp37;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_245 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_246 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_247 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_248 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_249 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_250 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_251 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_252 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                            out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_253 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_254 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_255 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_256 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(36L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp1 = in_ptr0[static_cast<long>(x3)];
                            auto tmp3 = in_ptr1[static_cast<long>(x3)];
                            auto tmp11 = in_ptr2[static_cast<long>(x3)];
                            auto tmp13 = in_ptr3[static_cast<long>(x3)];
                            auto tmp15 = in_ptr4[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp38 = in_ptr6[static_cast<long>(x3)];
                            auto tmp40 = in_ptr7[static_cast<long>(x3)];
                            auto tmp46 = in_ptr8[static_cast<long>(x3)];
                            auto tmp48 = in_ptr9[static_cast<long>(x3)];
                            auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                            auto tmp4 = static_cast<float>(1e-05);
                            auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                            auto tmp6 = std::sqrt(tmp5);
                            auto tmp7 = 1 / tmp6;
                            auto tmp8 = static_cast<float>(1.0);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                            auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                            auto tmp17 = c10::convert<long>(x1);
                            auto tmp18 = c10::convert<double>(tmp17);
                            auto tmp19 = static_cast<double>(1.0);
                            auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                            auto tmp21 = static_cast<double>(0.0);
                            auto tmp22 = decltype(tmp20)(tmp20 + tmp21);
                            auto tmp23 = c10::convert<float>(tmp22);
                            auto tmp24 = static_cast<float>(0.0);
                            auto tmp25 = decltype(tmp23)(tmp23 + tmp24);
                            auto tmp26 = static_cast<float>(0.5);
                            auto tmp27 = decltype(tmp25)(tmp25 * tmp26);
                            auto tmp28 = c10::convert<long>(tmp27);
                            auto tmp29 = c10::convert<long>(x2);
                            auto tmp30 = c10::convert<double>(tmp29);
                            auto tmp31 = decltype(tmp30)(tmp30 * tmp19);
                            auto tmp32 = decltype(tmp31)(tmp31 + tmp21);
                            auto tmp33 = c10::convert<float>(tmp32);
                            auto tmp34 = decltype(tmp33)(tmp33 + tmp24);
                            auto tmp35 = decltype(tmp34)(tmp34 * tmp26);
                            auto tmp36 = c10::convert<long>(tmp35);
                            auto tmp37 = in_ptr5[static_cast<long>(x3 + (36L*tmp36) + (504L*tmp28) + (7056L*x0))];
                            auto tmp39 = decltype(tmp37)(tmp37 - tmp38);
                            auto tmp41 = decltype(tmp40)(tmp40 + tmp4);
                            auto tmp42 = std::sqrt(tmp41);
                            auto tmp43 = 1 / tmp42;
                            auto tmp44 = decltype(tmp43)(tmp43 * tmp8);
                            auto tmp45 = decltype(tmp39)(tmp39 * tmp44);
                            auto tmp47 = decltype(tmp45)(tmp45 * tmp46);
                            auto tmp49 = decltype(tmp47)(tmp47 + tmp48);
                            auto tmp50 = decltype(tmp16)(tmp16 + tmp49);
                            in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))] = tmp50;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_257 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x3) + (1008L*x2) + (28224L*x0))];
                            auto tmp22 = in_ptr1[static_cast<long>(x1)];
                            auto tmp24 = in_ptr2[static_cast<long>(x1)];
                            auto tmp32 = in_ptr3[static_cast<long>(x1)];
                            auto tmp34 = in_ptr4[static_cast<long>(x1)];
                            auto tmp1 = c10::convert<long>(x2);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.25);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x3);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr0[static_cast<long>(x1 + (36L*tmp20) + (252L*tmp12) + (1764L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = tmp36 * (tmp36>0);
                            in_out_ptr0[static_cast<long>(x1 + (36L*x3) + (1008L*x2) + (28224L*x0))] = tmp37;
                        }
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_258 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_259 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_260 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_261 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_262 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_263 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_264 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1)];
                    auto tmp3 = in_ptr1[static_cast<long>(x1)];
                    auto tmp11 = in_ptr2[static_cast<long>(x1)];
                    auto tmp13 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp15 = tmp14 * (tmp14>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_265 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp18 = tmp16 + tmp17;
                    auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                    tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1)];
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp11 = in_ptr3[static_cast<long>(x1)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1)];
                    auto tmp15 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                    auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp6 = std::sqrt(tmp5);
                    auto tmp7 = 1 / tmp6;
                    auto tmp8 = static_cast<float>(1.0);
                    auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                    auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                    auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                    auto tmp17 = tmp16 * (tmp16>0);
                    in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp17;
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                        }
                    }
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_ptr5[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                            out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_266 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (36L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (36L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_267 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_268 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_269 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_270 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp19 = tmp17 - tmp18;
                auto tmp21 = tmp20 + tmp5;
                auto tmp22 = tmp21.sqrt();
                auto tmp23 = tmp22.reciprocal();
                auto tmp24 = tmp23 * tmp10;
                auto tmp25 = tmp19 * tmp24;
                auto tmp27 = tmp25 * tmp26;
                auto tmp29 = tmp27 + tmp28;
                auto tmp30 = tmp16 + tmp29;
                tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_271 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(72L); x3+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))];
                        auto tmp1 = in_out_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))];
                        auto tmp24 = in_ptr2[static_cast<long>(x3)];
                        auto tmp26 = in_ptr3[static_cast<long>(x3)];
                        auto tmp34 = in_ptr4[static_cast<long>(x3)];
                        auto tmp36 = in_ptr5[static_cast<long>(x3)];
                        auto tmp2 = decltype(tmp0)(tmp0 + tmp1);
                        auto tmp3 = c10::convert<long>(x1);
                        auto tmp4 = c10::convert<double>(tmp3);
                        auto tmp5 = static_cast<double>(1.0);
                        auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                        auto tmp7 = static_cast<double>(0.0);
                        auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                        auto tmp9 = c10::convert<float>(tmp8);
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                        auto tmp12 = static_cast<float>(0.5);
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp14 = c10::convert<long>(tmp13);
                        auto tmp15 = c10::convert<long>(x2);
                        auto tmp16 = c10::convert<double>(tmp15);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 + tmp7);
                        auto tmp19 = c10::convert<float>(tmp18);
                        auto tmp20 = decltype(tmp19)(tmp19 + tmp10);
                        auto tmp21 = decltype(tmp20)(tmp20 * tmp12);
                        auto tmp22 = c10::convert<long>(tmp21);
                        auto tmp23 = in_ptr1[static_cast<long>(x3 + (72L*tmp22) + (504L*tmp14) + (3528L*x0))];
                        auto tmp25 = decltype(tmp23)(tmp23 - tmp24);
                        auto tmp27 = static_cast<float>(1e-05);
                        auto tmp28 = decltype(tmp26)(tmp26 + tmp27);
                        auto tmp29 = std::sqrt(tmp28);
                        auto tmp30 = 1 / tmp29;
                        auto tmp31 = static_cast<float>(1.0);
                        auto tmp32 = decltype(tmp30)(tmp30 * tmp31);
                        auto tmp33 = decltype(tmp25)(tmp25 * tmp32);
                        auto tmp35 = decltype(tmp33)(tmp33 * tmp34);
                        auto tmp37 = decltype(tmp35)(tmp35 + tmp36);
                        auto tmp38 = decltype(tmp2)(tmp2 + tmp37);
                        auto tmp39 = tmp38 * (tmp38>0);
                        in_out_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))] = tmp39;
                    }
                }
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr6[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_272 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_273 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_274 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_275 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_276 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_277 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_278 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_279 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)), static_cast<long>(72L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (648L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (72L*x2) + (648L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_280 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_281 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_282 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_283 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_284 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_285 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_286 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = at::vec::clamp_min(tmp18, decltype(tmp18)(0));
                tmp19.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr5[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_287 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(144L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)), static_cast<long>(144L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1296L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (144L*x2) + (1296L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_288 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       float* in_out_ptr1,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       const float* in_ptr16,
                       const float* in_ptr17,
                       const float* in_ptr18)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(144L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (144L*x0)));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp31 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (144L*x0)));
                auto tmp32 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp40 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp42 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                auto tmp44 = at::vec::Vectorized<float>::loadu(in_out_ptr1 + static_cast<long>(x1 + (144L*x0)));
                auto tmp47 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1 + (144L*x0)));
                auto tmp48 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x1));
                auto tmp50 = at::vec::Vectorized<float>::loadu(in_ptr16 + static_cast<long>(x1));
                auto tmp56 = at::vec::Vectorized<float>::loadu(in_ptr17 + static_cast<long>(x1));
                auto tmp58 = at::vec::Vectorized<float>::loadu(in_ptr18 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp19 = tmp17 - tmp18;
                auto tmp21 = tmp20 + tmp5;
                auto tmp22 = tmp21.sqrt();
                auto tmp23 = tmp22.reciprocal();
                auto tmp24 = tmp23 * tmp10;
                auto tmp25 = tmp19 * tmp24;
                auto tmp27 = tmp25 * tmp26;
                auto tmp29 = tmp27 + tmp28;
                auto tmp30 = tmp16 + tmp29;
                auto tmp33 = tmp31 - tmp32;
                auto tmp35 = tmp34 + tmp5;
                auto tmp36 = tmp35.sqrt();
                auto tmp37 = tmp36.reciprocal();
                auto tmp38 = tmp37 * tmp10;
                auto tmp39 = tmp33 * tmp38;
                auto tmp41 = tmp39 * tmp40;
                auto tmp43 = tmp41 + tmp42;
                auto tmp45 = tmp43 + tmp44;
                auto tmp46 = at::vec::clamp_min(tmp45, decltype(tmp45)(0));
                auto tmp49 = tmp47 - tmp48;
                auto tmp51 = tmp50 + tmp5;
                auto tmp52 = tmp51.sqrt();
                auto tmp53 = tmp52.reciprocal();
                auto tmp54 = tmp53 * tmp10;
                auto tmp55 = tmp49 * tmp54;
                auto tmp57 = tmp55 * tmp56;
                auto tmp59 = tmp57 + tmp58;
                auto tmp60 = tmp30 + tmp59;
                auto tmp61 = tmp60 + tmp46;
                auto tmp62 = at::vec::clamp_min(tmp61, decltype(tmp61)(0));
                tmp46.store(in_out_ptr1 + static_cast<long>(x1 + (144L*x0)));
                tmp62.store(in_out_ptr0 + static_cast<long>(x1 + (144L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_289 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (2304L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (256L*x2) + (2304L*x0)), static_cast<long>(256L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (2304L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (256L*x2) + (2304L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_290 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
            }
        }
    }
}
''')


cpp_fused_convolution_291 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(18L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_292 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (18L*x0)));
            }
            #pragma omp simd simdlen(4) 
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x0))];
                auto tmp1 = in_ptr0[static_cast<long>(x1)];
                auto tmp3 = in_ptr1[static_cast<long>(x1)];
                auto tmp11 = in_ptr2[static_cast<long>(x1)];
                auto tmp13 = in_ptr3[static_cast<long>(x1)];
                auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                auto tmp6 = std::sqrt(tmp5);
                auto tmp7 = 1 / tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                auto tmp15 = tmp14 * (tmp14>0);
                in_out_ptr0[static_cast<long>(x1 + (18L*x0))] = tmp15;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused_convolution_293 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(72L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)), static_cast<long>(36L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (324L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (36L*x2) + (324L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(32L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (324L*x0))];
                    out_ptr0[static_cast<long>(x1 + (36L*x2) + (324L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_294 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(72L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (72L*x0)));
                auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                auto tmp2 = tmp0 - tmp1;
                auto tmp4 = static_cast<float>(1e-05);
                auto tmp5 = at::vec::Vectorized<float>(tmp4);
                auto tmp6 = tmp3 + tmp5;
                auto tmp7 = tmp6.sqrt();
                auto tmp8 = tmp7.reciprocal();
                auto tmp9 = static_cast<float>(1.0);
                auto tmp10 = at::vec::Vectorized<float>(tmp9);
                auto tmp11 = tmp8 * tmp10;
                auto tmp12 = tmp2 * tmp11;
                auto tmp14 = tmp12 * tmp13;
                auto tmp16 = tmp14 + tmp15;
                auto tmp19 = tmp17 - tmp18;
                auto tmp21 = tmp20 + tmp5;
                auto tmp22 = tmp21.sqrt();
                auto tmp23 = tmp22.reciprocal();
                auto tmp24 = tmp23 * tmp10;
                auto tmp25 = tmp19 * tmp24;
                auto tmp27 = tmp25 * tmp26;
                auto tmp29 = tmp27 + tmp28;
                auto tmp30 = tmp16 + tmp29;
                tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (72L*x0)));
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_295 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(14L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(14L); x2+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x3=static_cast<long>(0L); x3<static_cast<long>(72L); x3+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))];
                        auto tmp1 = in_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))];
                        auto tmp24 = in_ptr2[static_cast<long>(x3)];
                        auto tmp26 = in_ptr3[static_cast<long>(x3)];
                        auto tmp34 = in_ptr4[static_cast<long>(x3)];
                        auto tmp36 = in_ptr5[static_cast<long>(x3)];
                        auto tmp2 = decltype(tmp0)(tmp0 + tmp1);
                        auto tmp3 = c10::convert<long>(x1);
                        auto tmp4 = c10::convert<double>(tmp3);
                        auto tmp5 = static_cast<double>(1.0);
                        auto tmp6 = decltype(tmp4)(tmp4 * tmp5);
                        auto tmp7 = static_cast<double>(0.0);
                        auto tmp8 = decltype(tmp6)(tmp6 + tmp7);
                        auto tmp9 = c10::convert<float>(tmp8);
                        auto tmp10 = static_cast<float>(0.0);
                        auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                        auto tmp12 = static_cast<float>(0.5);
                        auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                        auto tmp14 = c10::convert<long>(tmp13);
                        auto tmp15 = c10::convert<long>(x2);
                        auto tmp16 = c10::convert<double>(tmp15);
                        auto tmp17 = decltype(tmp16)(tmp16 * tmp5);
                        auto tmp18 = decltype(tmp17)(tmp17 + tmp7);
                        auto tmp19 = c10::convert<float>(tmp18);
                        auto tmp20 = decltype(tmp19)(tmp19 + tmp10);
                        auto tmp21 = decltype(tmp20)(tmp20 * tmp12);
                        auto tmp22 = c10::convert<long>(tmp21);
                        auto tmp23 = in_ptr1[static_cast<long>(x3 + (72L*tmp22) + (504L*tmp14) + (3528L*x0))];
                        auto tmp25 = decltype(tmp23)(tmp23 - tmp24);
                        auto tmp27 = static_cast<float>(1e-05);
                        auto tmp28 = decltype(tmp26)(tmp26 + tmp27);
                        auto tmp29 = std::sqrt(tmp28);
                        auto tmp30 = 1 / tmp29;
                        auto tmp31 = static_cast<float>(1.0);
                        auto tmp32 = decltype(tmp30)(tmp30 * tmp31);
                        auto tmp33 = decltype(tmp25)(tmp25 * tmp32);
                        auto tmp35 = decltype(tmp33)(tmp33 * tmp34);
                        auto tmp37 = decltype(tmp35)(tmp35 + tmp36);
                        auto tmp38 = decltype(tmp2)(tmp2 + tmp37);
                        auto tmp39 = tmp38 * (tmp38>0);
                        in_out_ptr0[static_cast<long>(x3 + (72L*x2) + (1008L*x1) + (14112L*x0))] = tmp39;
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_296 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1152L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (128L*x2) + (1152L*x0)), static_cast<long>(128L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1152L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x2) + (1152L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_297 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_convolution_298 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(36L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(8L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                {
                    float tmp1[8*8] __attribute__ ((aligned (8)));
                    for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0)));
                        tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                    }
                    at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)), static_cast<long>(18L));
                }
                #pragma GCC ivdep
                for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (162L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (18L*x2) + (162L*x0)));
                }
            }
            #pragma GCC ivdep
            for(long x1=static_cast<long>(16L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x2=static_cast<long>(0L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x2 + (9L*x1) + (162L*x0))];
                    out_ptr0[static_cast<long>(x1 + (18L*x2) + (162L*x0))] = tmp0;
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_299 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(28L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(36L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp1 = in_ptr0[static_cast<long>(x3)];
                            auto tmp3 = in_ptr1[static_cast<long>(x3)];
                            auto tmp11 = in_ptr2[static_cast<long>(x3)];
                            auto tmp13 = in_ptr3[static_cast<long>(x3)];
                            auto tmp15 = in_ptr4[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))];
                            auto tmp38 = in_ptr6[static_cast<long>(x3)];
                            auto tmp40 = in_ptr7[static_cast<long>(x3)];
                            auto tmp46 = in_ptr8[static_cast<long>(x3)];
                            auto tmp48 = in_ptr9[static_cast<long>(x3)];
                            auto tmp2 = decltype(tmp0)(tmp0 - tmp1);
                            auto tmp4 = static_cast<float>(1e-05);
                            auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                            auto tmp6 = std::sqrt(tmp5);
                            auto tmp7 = 1 / tmp6;
                            auto tmp8 = static_cast<float>(1.0);
                            auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                            auto tmp10 = decltype(tmp2)(tmp2 * tmp9);
                            auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                            auto tmp14 = decltype(tmp12)(tmp12 + tmp13);
                            auto tmp16 = decltype(tmp14)(tmp14 + tmp15);
                            auto tmp17 = c10::convert<long>(x1);
                            auto tmp18 = c10::convert<double>(tmp17);
                            auto tmp19 = static_cast<double>(1.0);
                            auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                            auto tmp21 = static_cast<double>(0.0);
                            auto tmp22 = decltype(tmp20)(tmp20 + tmp21);
                            auto tmp23 = c10::convert<float>(tmp22);
                            auto tmp24 = static_cast<float>(0.0);
                            auto tmp25 = decltype(tmp23)(tmp23 + tmp24);
                            auto tmp26 = static_cast<float>(0.5);
                            auto tmp27 = decltype(tmp25)(tmp25 * tmp26);
                            auto tmp28 = c10::convert<long>(tmp27);
                            auto tmp29 = c10::convert<long>(x2);
                            auto tmp30 = c10::convert<double>(tmp29);
                            auto tmp31 = decltype(tmp30)(tmp30 * tmp19);
                            auto tmp32 = decltype(tmp31)(tmp31 + tmp21);
                            auto tmp33 = c10::convert<float>(tmp32);
                            auto tmp34 = decltype(tmp33)(tmp33 + tmp24);
                            auto tmp35 = decltype(tmp34)(tmp34 * tmp26);
                            auto tmp36 = c10::convert<long>(tmp35);
                            auto tmp37 = in_ptr5[static_cast<long>(x3 + (36L*tmp36) + (504L*tmp28) + (7056L*x0))];
                            auto tmp39 = decltype(tmp37)(tmp37 - tmp38);
                            auto tmp41 = decltype(tmp40)(tmp40 + tmp4);
                            auto tmp42 = std::sqrt(tmp41);
                            auto tmp43 = 1 / tmp42;
                            auto tmp44 = decltype(tmp43)(tmp43 * tmp8);
                            auto tmp45 = decltype(tmp39)(tmp39 * tmp44);
                            auto tmp47 = decltype(tmp45)(tmp45 * tmp46);
                            auto tmp49 = decltype(tmp47)(tmp47 + tmp48);
                            auto tmp50 = decltype(tmp16)(tmp16 + tmp49);
                            in_out_ptr0[static_cast<long>(x3 + (36L*x2) + (1008L*x1) + (28224L*x0))] = tmp50;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_300 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(36L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(28L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(28L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (36L*x3) + (1008L*x2) + (28224L*x0))];
                            auto tmp22 = in_ptr1[static_cast<long>(x1)];
                            auto tmp24 = in_ptr2[static_cast<long>(x1)];
                            auto tmp32 = in_ptr3[static_cast<long>(x1)];
                            auto tmp34 = in_ptr4[static_cast<long>(x1)];
                            auto tmp1 = c10::convert<long>(x2);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.25);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x3);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr0[static_cast<long>(x1 + (36L*tmp20) + (252L*tmp12) + (1764L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = tmp36 * (tmp36>0);
                            in_out_ptr0[static_cast<long>(x1 + (36L*x3) + (1008L*x2) + (28224L*x0))] = tmp37;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_301 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(64L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)), static_cast<long>(64L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (576L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (64L*x2) + (576L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_302 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_303 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(56L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(18L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))];
                            auto tmp22 = in_ptr1[static_cast<long>(x3)];
                            auto tmp24 = in_ptr2[static_cast<long>(x3)];
                            auto tmp32 = in_ptr3[static_cast<long>(x3)];
                            auto tmp34 = in_ptr4[static_cast<long>(x3)];
                            auto tmp43 = in_ptr6[static_cast<long>(x3)];
                            auto tmp45 = in_ptr7[static_cast<long>(x3)];
                            auto tmp51 = in_ptr8[static_cast<long>(x3)];
                            auto tmp53 = in_ptr9[static_cast<long>(x3)];
                            auto tmp1 = c10::convert<long>(x1);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.5);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x2);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr0[static_cast<long>(x3 + (18L*tmp20) + (504L*tmp12) + (14112L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = static_cast<float>(0.25);
                            auto tmp38 = decltype(tmp9)(tmp9 * tmp37);
                            auto tmp39 = c10::convert<long>(tmp38);
                            auto tmp40 = decltype(tmp18)(tmp18 * tmp37);
                            auto tmp41 = c10::convert<long>(tmp40);
                            auto tmp42 = in_ptr5[static_cast<long>(x3 + (18L*tmp41) + (252L*tmp39) + (3528L*x0))];
                            auto tmp44 = decltype(tmp42)(tmp42 - tmp43);
                            auto tmp46 = decltype(tmp45)(tmp45 + tmp25);
                            auto tmp47 = std::sqrt(tmp46);
                            auto tmp48 = 1 / tmp47;
                            auto tmp49 = decltype(tmp48)(tmp48 * tmp29);
                            auto tmp50 = decltype(tmp44)(tmp44 * tmp49);
                            auto tmp52 = decltype(tmp50)(tmp50 * tmp51);
                            auto tmp54 = decltype(tmp52)(tmp52 + tmp53);
                            auto tmp55 = decltype(tmp36)(tmp36 + tmp54);
                            in_out_ptr0[static_cast<long>(x3 + (18L*x2) + (1008L*x1) + (56448L*x0))] = tmp55;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_304 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(18L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(56L); x2+=static_cast<long>(1L))
                    {
                        #pragma GCC ivdep
                        for(long x3=static_cast<long>(0L); x3<static_cast<long>(56L); x3+=static_cast<long>(1L))
                        {
                            auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (18L*x3) + (1008L*x2) + (56448L*x0))];
                            auto tmp22 = in_ptr1[static_cast<long>(x1)];
                            auto tmp24 = in_ptr2[static_cast<long>(x1)];
                            auto tmp32 = in_ptr3[static_cast<long>(x1)];
                            auto tmp34 = in_ptr4[static_cast<long>(x1)];
                            auto tmp1 = c10::convert<long>(x2);
                            auto tmp2 = c10::convert<double>(tmp1);
                            auto tmp3 = static_cast<double>(1.0);
                            auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                            auto tmp5 = static_cast<double>(0.0);
                            auto tmp6 = decltype(tmp4)(tmp4 + tmp5);
                            auto tmp7 = c10::convert<float>(tmp6);
                            auto tmp8 = static_cast<float>(0.0);
                            auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                            auto tmp10 = static_cast<float>(0.125);
                            auto tmp11 = decltype(tmp9)(tmp9 * tmp10);
                            auto tmp12 = c10::convert<long>(tmp11);
                            auto tmp13 = c10::convert<long>(x3);
                            auto tmp14 = c10::convert<double>(tmp13);
                            auto tmp15 = decltype(tmp14)(tmp14 * tmp3);
                            auto tmp16 = decltype(tmp15)(tmp15 + tmp5);
                            auto tmp17 = c10::convert<float>(tmp16);
                            auto tmp18 = decltype(tmp17)(tmp17 + tmp8);
                            auto tmp19 = decltype(tmp18)(tmp18 * tmp10);
                            auto tmp20 = c10::convert<long>(tmp19);
                            auto tmp21 = in_ptr0[static_cast<long>(x1 + (18L*tmp20) + (126L*tmp12) + (882L*x0))];
                            auto tmp23 = decltype(tmp21)(tmp21 - tmp22);
                            auto tmp25 = static_cast<float>(1e-05);
                            auto tmp26 = decltype(tmp24)(tmp24 + tmp25);
                            auto tmp27 = std::sqrt(tmp26);
                            auto tmp28 = 1 / tmp27;
                            auto tmp29 = static_cast<float>(1.0);
                            auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                            auto tmp31 = decltype(tmp23)(tmp23 * tmp30);
                            auto tmp33 = decltype(tmp31)(tmp31 * tmp32);
                            auto tmp35 = decltype(tmp33)(tmp33 + tmp34);
                            auto tmp36 = decltype(tmp0)(tmp0 + tmp35);
                            auto tmp37 = tmp36 * (tmp36>0);
                            in_out_ptr0[static_cast<long>(x1 + (18L*x3) + (1008L*x2) + (56448L*x0))] = tmp37;
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_convolution_relu_305 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (32L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (32L*x0)));
                }
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(32L); x0+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                    {
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                        {
                            float tmp1[8*8] __attribute__ ((aligned (8)));
                            for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                            {
                                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (288L*x0)));
                                tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                            }
                            at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (32L*x2) + (288L*x0)), static_cast<long>(32L));
                        }
                        #pragma GCC ivdep
                        for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr4[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (288L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                            tmp0.store(out_ptr0 + static_cast<long>(x1 + (32L*x2) + (288L*x0)));
                        }
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_relu_306 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (32L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                    tmp17.store(in_out_ptr0 + static_cast<long>(x1 + (32L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_307 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(25088L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (128L*x0)));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp19 = tmp17 - tmp18;
                    auto tmp21 = tmp20 + tmp5;
                    auto tmp22 = tmp21.sqrt();
                    auto tmp23 = tmp22.reciprocal();
                    auto tmp24 = tmp23 * tmp10;
                    auto tmp25 = tmp19 * tmp24;
                    auto tmp27 = tmp25 * tmp26;
                    auto tmp29 = tmp27 + tmp28;
                    auto tmp30 = tmp16 + tmp29;
                    tmp30.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3211264L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                tmp1.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(256L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1152L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (128L*x2) + (1152L*x0)), static_cast<long>(128L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr9[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (1152L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x2) + (1152L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_308 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(6272L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp32 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (256L*x0)));
                    auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp43 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp19 = tmp17 - tmp18;
                    auto tmp21 = tmp20 + tmp5;
                    auto tmp22 = tmp21.sqrt();
                    auto tmp23 = tmp22.reciprocal();
                    auto tmp24 = tmp23 * tmp10;
                    auto tmp25 = tmp19 * tmp24;
                    auto tmp27 = tmp25 * tmp26;
                    auto tmp29 = tmp27 + tmp28;
                    auto tmp30 = tmp16 + tmp29;
                    auto tmp31 = at::vec::clamp_min(tmp30, decltype(tmp30)(0));
                    auto tmp34 = tmp32 - tmp33;
                    auto tmp36 = tmp35 + tmp5;
                    auto tmp37 = tmp36.sqrt();
                    auto tmp38 = tmp37.reciprocal();
                    auto tmp39 = tmp38 * tmp10;
                    auto tmp40 = tmp34 * tmp39;
                    auto tmp42 = tmp40 * tmp41;
                    auto tmp44 = tmp42 + tmp43;
                    auto tmp45 = at::vec::clamp_min(tmp44, decltype(tmp44)(0));
                    auto tmp46 = tmp31 + tmp45;
                    tmp46.store(in_out_ptr0 + static_cast<long>(x1 + (256L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(256L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (2304L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (256L*x2) + (2304L*x0)), static_cast<long>(256L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr14[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (2304L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (256L*x2) + (2304L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_309 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1568L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp32 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp43 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp19 = tmp17 - tmp18;
                    auto tmp21 = tmp20 + tmp5;
                    auto tmp22 = tmp21.sqrt();
                    auto tmp23 = tmp22.reciprocal();
                    auto tmp24 = tmp23 * tmp10;
                    auto tmp25 = tmp19 * tmp24;
                    auto tmp27 = tmp25 * tmp26;
                    auto tmp29 = tmp27 + tmp28;
                    auto tmp30 = tmp16 + tmp29;
                    auto tmp31 = at::vec::clamp_min(tmp30, decltype(tmp30)(0));
                    auto tmp34 = tmp32 - tmp33;
                    auto tmp36 = tmp35 + tmp5;
                    auto tmp37 = tmp36.sqrt();
                    auto tmp38 = tmp37.reciprocal();
                    auto tmp39 = tmp38 * tmp10;
                    auto tmp40 = tmp34 * tmp39;
                    auto tmp42 = tmp40 * tmp41;
                    auto tmp44 = tmp42 + tmp43;
                    auto tmp45 = at::vec::clamp_min(tmp44, decltype(tmp44)(0));
                    auto tmp46 = tmp31 + tmp45;
                    tmp46.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(8L); x2+=static_cast<long>(8L))
                    {
                        float tmp1[8*8] __attribute__ ((aligned (8)));
                        for (long x1_inner = 0; x1_inner < 8; x1_inner++)
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (4608L*x0)));
                            tmp0.store(tmp1 + static_cast<long>(8L*x1_inner));
                        }
                        at::vec::transpose_mxn<float,8,8>(tmp1, 8, out_ptr0 + static_cast<long>(x1 + (512L*x2) + (4608L*x0)), static_cast<long>(512L));
                    }
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(8L); x2<static_cast<long>(9L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr14[static_cast<long>(x2 + (9L*x1) + (9L*x1_inner) + (4608L*x0))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                        tmp0.store(out_ptr0 + static_cast<long>(x1 + (512L*x2) + (4608L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_add_relu_310 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(392L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp18 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                    auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                    auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1));
                    auto tmp28 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1));
                    auto tmp32 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp33 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                    auto tmp35 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                    auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                    auto tmp43 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1));
                    auto tmp2 = tmp0 - tmp1;
                    auto tmp4 = static_cast<float>(1e-05);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 + tmp5;
                    auto tmp7 = tmp6.sqrt();
                    auto tmp8 = tmp7.reciprocal();
                    auto tmp9 = static_cast<float>(1.0);
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp2 * tmp11;
                    auto tmp14 = tmp12 * tmp13;
                    auto tmp16 = tmp14 + tmp15;
                    auto tmp19 = tmp17 - tmp18;
                    auto tmp21 = tmp20 + tmp5;
                    auto tmp22 = tmp21.sqrt();
                    auto tmp23 = tmp22.reciprocal();
                    auto tmp24 = tmp23 * tmp10;
                    auto tmp25 = tmp19 * tmp24;
                    auto tmp27 = tmp25 * tmp26;
                    auto tmp29 = tmp27 + tmp28;
                    auto tmp30 = tmp16 + tmp29;
                    auto tmp31 = at::vec::clamp_min(tmp30, decltype(tmp30)(0));
                    auto tmp34 = tmp32 - tmp33;
                    auto tmp36 = tmp35 + tmp5;
                    auto tmp37 = tmp36.sqrt();
                    auto tmp38 = tmp37.reciprocal();
                    auto tmp39 = tmp38 * tmp10;
                    auto tmp40 = tmp34 * tmp39;
                    auto tmp42 = tmp40 * tmp41;
                    auto tmp44 = tmp42 + tmp43;
                    auto tmp45 = at::vec::clamp_min(tmp44, decltype(tmp44)(0));
                    auto tmp46 = tmp31 + tmp45;
                    tmp46.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused__native_batch_norm_legit_no_training_mean_relu_311 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(2048L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(49L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (2048L*x2) + (100352L*x0)));
                            auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                            auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                            auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                            auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                            auto tmp2 = tmp0 - tmp1;
                            auto tmp4 = static_cast<float>(1e-05);
                            auto tmp5 = at::vec::Vectorized<float>(tmp4);
                            auto tmp6 = tmp3 + tmp5;
                            auto tmp7 = tmp6.sqrt();
                            auto tmp8 = tmp7.reciprocal();
                            auto tmp9 = static_cast<float>(1.0);
                            auto tmp10 = at::vec::Vectorized<float>(tmp9);
                            auto tmp11 = tmp8 * tmp10;
                            auto tmp12 = tmp2 * tmp11;
                            auto tmp14 = tmp12 * tmp13;
                            auto tmp16 = tmp14 + tmp15;
                            auto tmp17 = at::vec::clamp_min(tmp16, decltype(tmp16)(0));
                            tmp_acc0_vec = tmp_acc0_vec + tmp17;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (2048L*x0)));
                    }
                }
            }
        }
        #pragma omp single
        {
            {
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0));
                    auto tmp1 = static_cast<float>(49.0);
                    auto tmp2 = at::vec::Vectorized<float>(tmp1);
                    auto tmp3 = tmp0 / tmp2;
                    tmp3.store(in_out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1, arg200_1, arg201_1, arg202_1, arg203_1, arg204_1, arg205_1, arg206_1, arg207_1, arg208_1, arg209_1, arg210_1, arg211_1, arg212_1, arg213_1, arg214_1, arg215_1, arg216_1, arg217_1, arg218_1, arg219_1, arg220_1, arg221_1, arg222_1, arg223_1, arg224_1, arg225_1, arg226_1, arg227_1, arg228_1, arg229_1, arg230_1, arg231_1, arg232_1, arg233_1, arg234_1, arg235_1, arg236_1, arg237_1, arg238_1, arg239_1, arg240_1, arg241_1, arg242_1, arg243_1, arg244_1, arg245_1, arg246_1, arg247_1, arg248_1, arg249_1, arg250_1, arg251_1, arg252_1, arg253_1, arg254_1, arg255_1, arg256_1, arg257_1, arg258_1, arg259_1, arg260_1, arg261_1, arg262_1, arg263_1, arg264_1, arg265_1, arg266_1, arg267_1, arg268_1, arg269_1, arg270_1, arg271_1, arg272_1, arg273_1, arg274_1, arg275_1, arg276_1, arg277_1, arg278_1, arg279_1, arg280_1, arg281_1, arg282_1, arg283_1, arg284_1, arg285_1, arg286_1, arg287_1, arg288_1, arg289_1, arg290_1, arg291_1, arg292_1, arg293_1, arg294_1, arg295_1, arg296_1, arg297_1, arg298_1, arg299_1, arg300_1, arg301_1, arg302_1, arg303_1, arg304_1, arg305_1, arg306_1, arg307_1, arg308_1, arg309_1, arg310_1, arg311_1, arg312_1, arg313_1, arg314_1, arg315_1, arg316_1, arg317_1, arg318_1, arg319_1, arg320_1, arg321_1, arg322_1, arg323_1, arg324_1, arg325_1, arg326_1, arg327_1, arg328_1, arg329_1, arg330_1, arg331_1, arg332_1, arg333_1, arg334_1, arg335_1, arg336_1, arg337_1, arg338_1, arg339_1, arg340_1, arg341_1, arg342_1, arg343_1, arg344_1, arg345_1, arg346_1, arg347_1, arg348_1, arg349_1, arg350_1, arg351_1, arg352_1, arg353_1, arg354_1, arg355_1, arg356_1, arg357_1, arg358_1, arg359_1, arg360_1, arg361_1, arg362_1, arg363_1, arg364_1, arg365_1, arg366_1, arg367_1, arg368_1, arg369_1, arg370_1, arg371_1, arg372_1, arg373_1, arg374_1, arg375_1, arg376_1, arg377_1, arg378_1, arg379_1, arg380_1, arg381_1, arg382_1, arg383_1, arg384_1, arg385_1, arg386_1, arg387_1, arg388_1, arg389_1, arg390_1, arg391_1, arg392_1, arg393_1, arg394_1, arg395_1, arg396_1, arg397_1, arg398_1, arg399_1, arg400_1, arg401_1, arg402_1, arg403_1, arg404_1, arg405_1, arg406_1, arg407_1, arg408_1, arg409_1, arg410_1, arg411_1, arg412_1, arg413_1, arg414_1, arg415_1, arg416_1, arg417_1, arg418_1, arg419_1, arg420_1, arg421_1, arg422_1, arg423_1, arg424_1, arg425_1, arg426_1, arg427_1, arg428_1, arg429_1, arg430_1, arg431_1, arg432_1, arg433_1, arg434_1, arg435_1, arg436_1, arg437_1, arg438_1, arg439_1, arg440_1, arg441_1, arg442_1, arg443_1, arg444_1, arg445_1, arg446_1, arg447_1, arg448_1, arg449_1, arg450_1, arg451_1, arg452_1, arg453_1, arg454_1, arg455_1, arg456_1, arg457_1, arg458_1, arg459_1, arg460_1, arg461_1, arg462_1, arg463_1, arg464_1, arg465_1, arg466_1, arg467_1, arg468_1, arg469_1, arg470_1, arg471_1, arg472_1, arg473_1, arg474_1, arg475_1, arg476_1, arg477_1, arg478_1, arg479_1, arg480_1, arg481_1, arg482_1, arg483_1, arg484_1, arg485_1, arg486_1, arg487_1, arg488_1, arg489_1, arg490_1, arg491_1, arg492_1, arg493_1, arg494_1, arg495_1, arg496_1, arg497_1, arg498_1, arg499_1, arg500_1, arg501_1, arg502_1, arg503_1, arg504_1, arg505_1, arg506_1, arg507_1, arg508_1, arg509_1, arg510_1, arg511_1, arg512_1, arg513_1, arg514_1, arg515_1, arg516_1, arg517_1, arg518_1, arg519_1, arg520_1, arg521_1, arg522_1, arg523_1, arg524_1, arg525_1, arg526_1, arg527_1, arg528_1, arg529_1, arg530_1, arg531_1, arg532_1, arg533_1, arg534_1, arg535_1, arg536_1, arg537_1, arg538_1, arg539_1, arg540_1, arg541_1, arg542_1, arg543_1, arg544_1, arg545_1, arg546_1, arg547_1, arg548_1, arg549_1, arg550_1, arg551_1, arg552_1, arg553_1, arg554_1, arg555_1, arg556_1, arg557_1, arg558_1, arg559_1, arg560_1, arg561_1, arg562_1, arg563_1, arg564_1, arg565_1, arg566_1, arg567_1, arg568_1, arg569_1, arg570_1, arg571_1, arg572_1, arg573_1, arg574_1, arg575_1, arg576_1, arg577_1, arg578_1, arg579_1, arg580_1, arg581_1, arg582_1, arg583_1, arg584_1, arg585_1, arg586_1, arg587_1, arg588_1, arg589_1, arg590_1, arg591_1, arg592_1, arg593_1, arg594_1, arg595_1, arg596_1, arg597_1, arg598_1, arg599_1, arg600_1, arg601_1, arg602_1, arg603_1, arg604_1, arg605_1, arg606_1, arg607_1, arg608_1, arg609_1, arg610_1, arg611_1, arg612_1, arg613_1, arg614_1, arg615_1, arg616_1, arg617_1, arg618_1, arg619_1, arg620_1, arg621_1, arg622_1, arg623_1, arg624_1, arg625_1, arg626_1, arg627_1, arg628_1, arg629_1, arg630_1, arg631_1, arg632_1, arg633_1, arg634_1, arg635_1, arg636_1, arg637_1, arg638_1, arg639_1, arg640_1, arg641_1, arg642_1, arg643_1, arg644_1, arg645_1, arg646_1, arg647_1, arg648_1, arg649_1, arg650_1, arg651_1, arg652_1, arg653_1, arg654_1, arg655_1, arg656_1, arg657_1, arg658_1, arg659_1, arg660_1, arg661_1, arg662_1, arg663_1, arg664_1, arg665_1, arg666_1, arg667_1, arg668_1, arg669_1, arg670_1, arg671_1, arg672_1, arg673_1, arg674_1, arg675_1, arg676_1, arg677_1, arg678_1, arg679_1, arg680_1, arg681_1, arg682_1, arg683_1, arg684_1, arg685_1, arg686_1, arg687_1, arg688_1, arg689_1, arg690_1, arg691_1, arg692_1, arg693_1, arg694_1, arg695_1, arg696_1, arg697_1, arg698_1, arg699_1, arg700_1, arg701_1, arg702_1, arg703_1, arg704_1, arg705_1, arg706_1, arg707_1, arg708_1, arg709_1, arg710_1, arg711_1, arg712_1, arg713_1, arg714_1, arg715_1, arg716_1, arg717_1, arg718_1, arg719_1, arg720_1, arg721_1, arg722_1, arg723_1, arg724_1, arg725_1, arg726_1, arg727_1, arg728_1, arg729_1, arg730_1, arg731_1, arg732_1, arg733_1, arg734_1, arg735_1, arg736_1, arg737_1, arg738_1, arg739_1, arg740_1, arg741_1, arg742_1, arg743_1, arg744_1, arg745_1, arg746_1, arg747_1, arg748_1, arg749_1, arg750_1, arg751_1, arg752_1, arg753_1, arg754_1, arg755_1, arg756_1, arg757_1, arg758_1, arg759_1, arg760_1, arg761_1, arg762_1, arg763_1, arg764_1, arg765_1, arg766_1, arg767_1, arg768_1, arg769_1, arg770_1, arg771_1, arg772_1, arg773_1, arg774_1, arg775_1, arg776_1, arg777_1, arg778_1, arg779_1, arg780_1, arg781_1, arg782_1, arg783_1, arg784_1, arg785_1, arg786_1, arg787_1, arg788_1, arg789_1, arg790_1, arg791_1, arg792_1, arg793_1, arg794_1, arg795_1, arg796_1, arg797_1, arg798_1, arg799_1, arg800_1, arg801_1, arg802_1, arg803_1, arg804_1, arg805_1, arg806_1, arg807_1, arg808_1, arg809_1, arg810_1, arg811_1, arg812_1, arg813_1, arg814_1, arg815_1, arg816_1, arg817_1, arg818_1, arg819_1, arg820_1, arg821_1, arg822_1, arg823_1, arg824_1, arg825_1, arg826_1, arg827_1, arg828_1, arg829_1, arg830_1, arg831_1, arg832_1, arg833_1, arg834_1, arg835_1, arg836_1, arg837_1, arg838_1, arg839_1, arg840_1, arg841_1, arg842_1, arg843_1, arg844_1, arg845_1, arg846_1, arg847_1, arg848_1, arg849_1, arg850_1, arg851_1, arg852_1, arg853_1, arg854_1, arg855_1, arg856_1, arg857_1, arg858_1, arg859_1, arg860_1, arg861_1, arg862_1, arg863_1, arg864_1, arg865_1, arg866_1, arg867_1, arg868_1, arg869_1, arg870_1, arg871_1, arg872_1, arg873_1, arg874_1, arg875_1, arg876_1, arg877_1, arg878_1, arg879_1, arg880_1, arg881_1, arg882_1, arg883_1, arg884_1, arg885_1, arg886_1, arg887_1, arg888_1, arg889_1, arg890_1, arg891_1, arg892_1, arg893_1, arg894_1, arg895_1, arg896_1, arg897_1, arg898_1, arg899_1, arg900_1, arg901_1, arg902_1, arg903_1, arg904_1, arg905_1, arg906_1, arg907_1, arg908_1, arg909_1, arg910_1, arg911_1, arg912_1, arg913_1, arg914_1, arg915_1, arg916_1, arg917_1, arg918_1, arg919_1, arg920_1, arg921_1, arg922_1, arg923_1, arg924_1, arg925_1, arg926_1, arg927_1, arg928_1, arg929_1, arg930_1, arg931_1, arg932_1, arg933_1, arg934_1, arg935_1, arg936_1, arg937_1, arg938_1, arg939_1, arg940_1, arg941_1, arg942_1, arg943_1, arg944_1, arg945_1, arg946_1, arg947_1, arg948_1, arg949_1, arg950_1, arg951_1, arg952_1, arg953_1, arg954_1, arg955_1, arg956_1, arg957_1, arg958_1, arg959_1, arg960_1, arg961_1, arg962_1, arg963_1, arg964_1, arg965_1, arg966_1, arg967_1, arg968_1, arg969_1, arg970_1, arg971_1, arg972_1, arg973_1, arg974_1, arg975_1, arg976_1, arg977_1, arg978_1, arg979_1, arg980_1, arg981_1, arg982_1, arg983_1, arg984_1, arg985_1, arg986_1, arg987_1, arg988_1, arg989_1, arg990_1, arg991_1, arg992_1, arg993_1, arg994_1, arg995_1, arg996_1, arg997_1, arg998_1, arg999_1, arg1000_1, arg1001_1, arg1002_1, arg1003_1, arg1004_1, arg1005_1, arg1006_1, arg1007_1, arg1008_1, arg1009_1, arg1010_1, arg1011_1, arg1012_1, arg1013_1, arg1014_1, arg1015_1, arg1016_1, arg1017_1, arg1018_1, arg1019_1, arg1020_1, arg1021_1, arg1022_1, arg1023_1, arg1024_1, arg1025_1, arg1026_1, arg1027_1, arg1028_1, arg1029_1, arg1030_1, arg1031_1, arg1032_1, arg1033_1, arg1034_1, arg1035_1, arg1036_1, arg1037_1, arg1038_1, arg1039_1, arg1040_1, arg1041_1, arg1042_1, arg1043_1, arg1044_1, arg1045_1, arg1046_1, arg1047_1, arg1048_1, arg1049_1, arg1050_1, arg1051_1, arg1052_1, arg1053_1, arg1054_1, arg1055_1, arg1056_1, arg1057_1, arg1058_1, arg1059_1, arg1060_1, arg1061_1, arg1062_1, arg1063_1, arg1064_1, arg1065_1, arg1066_1, arg1067_1, arg1068_1, arg1069_1, arg1070_1, arg1071_1, arg1072_1, arg1073_1, arg1074_1, arg1075_1, arg1076_1, arg1077_1, arg1078_1, arg1079_1, arg1080_1, arg1081_1, arg1082_1, arg1083_1, arg1084_1, arg1085_1, arg1086_1, arg1087_1, arg1088_1, arg1089_1, arg1090_1, arg1091_1, arg1092_1, arg1093_1, arg1094_1, arg1095_1, arg1096_1, arg1097_1, arg1098_1, arg1099_1, arg1100_1, arg1101_1, arg1102_1, arg1103_1, arg1104_1, arg1105_1, arg1106_1, arg1107_1, arg1108_1, arg1109_1, arg1110_1, arg1111_1, arg1112_1, arg1113_1, arg1114_1, arg1115_1, arg1116_1, arg1117_1, arg1118_1, arg1119_1, arg1120_1, arg1121_1, arg1122_1, arg1123_1, arg1124_1, arg1125_1, arg1126_1, arg1127_1, arg1128_1, arg1129_1, arg1130_1, arg1131_1, arg1132_1, arg1133_1, arg1134_1, arg1135_1, arg1136_1, arg1137_1, arg1138_1, arg1139_1, arg1140_1, arg1141_1, arg1142_1, arg1143_1, arg1144_1, arg1145_1, arg1146_1, arg1147_1, arg1148_1, arg1149_1, arg1150_1, arg1151_1, arg1152_1, arg1153_1, arg1154_1, arg1155_1, arg1156_1, arg1157_1, arg1158_1, arg1159_1, arg1160_1, arg1161_1, arg1162_1, arg1163_1, arg1164_1, arg1165_1, arg1166_1, arg1167_1, arg1168_1, arg1169_1, arg1170_1, arg1171_1, arg1172_1, arg1173_1, arg1174_1, arg1175_1, arg1176_1, arg1177_1, arg1178_1, arg1179_1, arg1180_1, arg1181_1, arg1182_1, arg1183_1, arg1184_1, arg1185_1, arg1186_1, arg1187_1, arg1188_1, arg1189_1, arg1190_1, arg1191_1, arg1192_1, arg1193_1, arg1194_1, arg1195_1, arg1196_1, arg1197_1, arg1198_1, arg1199_1, arg1200_1, arg1201_1, arg1202_1, arg1203_1, arg1204_1, arg1205_1, arg1206_1, arg1207_1, arg1208_1, arg1209_1, arg1210_1, arg1211_1, arg1212_1, arg1213_1, arg1214_1, arg1215_1, arg1216_1, arg1217_1, arg1218_1, arg1219_1, arg1220_1, arg1221_1, arg1222_1, arg1223_1, arg1224_1, arg1225_1, arg1226_1, arg1227_1, arg1228_1, arg1229_1, arg1230_1, arg1231_1, arg1232_1, arg1233_1, arg1234_1, arg1235_1, arg1236_1, arg1237_1, arg1238_1, arg1239_1, arg1240_1, arg1241_1, arg1242_1, arg1243_1, arg1244_1, arg1245_1, arg1246_1, arg1247_1, arg1248_1, arg1249_1, arg1250_1, arg1251_1, arg1252_1, arg1253_1, arg1254_1, arg1255_1, arg1256_1, arg1257_1, arg1258_1, arg1259_1, arg1260_1, arg1261_1, arg1262_1, arg1263_1, arg1264_1, arg1265_1, arg1266_1, arg1267_1, arg1268_1, arg1269_1, arg1270_1, arg1271_1, arg1272_1, arg1273_1, arg1274_1, arg1275_1, arg1276_1, arg1277_1, arg1278_1, arg1279_1, arg1280_1, arg1281_1, arg1282_1, arg1283_1, arg1284_1, arg1285_1, arg1286_1, arg1287_1, arg1288_1, arg1289_1, arg1290_1, arg1291_1, arg1292_1, arg1293_1, arg1294_1, arg1295_1, arg1296_1, arg1297_1, arg1298_1, arg1299_1, arg1300_1, arg1301_1, arg1302_1, arg1303_1, arg1304_1, arg1305_1, arg1306_1, arg1307_1, arg1308_1, arg1309_1, arg1310_1, arg1311_1, arg1312_1, arg1313_1, arg1314_1, arg1315_1, arg1316_1, arg1317_1, arg1318_1, arg1319_1, arg1320_1, arg1321_1, arg1322_1, arg1323_1, arg1324_1, arg1325_1, arg1326_1, arg1327_1, arg1328_1, arg1329_1, arg1330_1, arg1331_1, arg1332_1, arg1333_1, arg1334_1, arg1335_1, arg1336_1, arg1337_1, arg1338_1, arg1339_1, arg1340_1, arg1341_1, arg1342_1, arg1343_1, arg1344_1, arg1345_1, arg1346_1, arg1347_1, arg1348_1, arg1349_1, arg1350_1, arg1351_1, arg1352_1, arg1353_1, arg1354_1, arg1355_1, arg1356_1, arg1357_1, arg1358_1, arg1359_1, arg1360_1, arg1361_1, arg1362_1, arg1363_1, arg1364_1, arg1365_1, arg1366_1, arg1367_1, arg1368_1, arg1369_1, arg1370_1, arg1371_1, arg1372_1, arg1373_1, arg1374_1, arg1375_1, arg1376_1, arg1377_1, arg1378_1, arg1379_1, arg1380_1, arg1381_1, arg1382_1, arg1383_1, arg1384_1, arg1385_1, arg1386_1, arg1387_1, arg1388_1, arg1389_1, arg1390_1, arg1391_1, arg1392_1, arg1393_1, arg1394_1, arg1395_1, arg1396_1, arg1397_1, arg1398_1, arg1399_1, arg1400_1, arg1401_1, arg1402_1, arg1403_1, arg1404_1, arg1405_1, arg1406_1, arg1407_1, arg1408_1, arg1409_1, arg1410_1, arg1411_1, arg1412_1, arg1413_1, arg1414_1, arg1415_1, arg1416_1, arg1417_1, arg1418_1, arg1419_1, arg1420_1, arg1421_1, arg1422_1, arg1423_1, arg1424_1, arg1425_1, arg1426_1, arg1427_1, arg1428_1, arg1429_1, arg1430_1, arg1431_1, arg1432_1, arg1433_1, arg1434_1, arg1435_1, arg1436_1, arg1437_1, arg1438_1, arg1439_1, arg1440_1, arg1441_1, arg1442_1, arg1443_1, arg1444_1, arg1445_1, arg1446_1, arg1447_1, arg1448_1, arg1449_1, arg1450_1, arg1451_1, arg1452_1, arg1453_1, arg1454_1, arg1455_1, arg1456_1, arg1457_1, arg1458_1, arg1459_1, arg1460_1, arg1461_1, arg1462_1, arg1463_1, arg1464_1, arg1465_1, arg1466_1, arg1467_1, arg1468_1, arg1469_1, arg1470_1, arg1471_1, arg1472_1, arg1473_1, arg1474_1, arg1475_1, arg1476_1, arg1477_1, arg1478_1, arg1479_1, arg1480_1, arg1481_1, arg1482_1, arg1483_1, arg1484_1, arg1485_1, arg1486_1, arg1487_1, arg1488_1, arg1489_1, arg1490_1, arg1491_1, arg1492_1, arg1493_1, arg1494_1, arg1495_1, arg1496_1, arg1497_1, arg1498_1, arg1499_1, arg1500_1, arg1501_1, arg1502_1, arg1503_1, arg1504_1, arg1505_1, arg1506_1, arg1507_1, arg1508_1, arg1509_1, arg1510_1, arg1511_1, arg1512_1, arg1513_1, arg1514_1, arg1515_1, arg1516_1, arg1517_1, arg1518_1, arg1519_1, arg1520_1, arg1521_1, arg1522_1, arg1523_1, arg1524_1, arg1525_1, arg1526_1, arg1527_1, arg1528_1, arg1529_1, arg1530_1, arg1531_1, arg1532_1, arg1533_1, arg1534_1, arg1535_1, arg1536_1, arg1537_1, arg1538_1, arg1539_1, arg1540_1, arg1541_1, arg1542_1, arg1543_1, arg1544_1, arg1545_1, arg1546_1, arg1547_1, arg1548_1, arg1549_1, arg1550_1, arg1551_1, arg1552_1, arg1553_1, arg1554_1, arg1555_1, arg1556_1, arg1557_1, arg1558_1, arg1559_1, arg1560_1, arg1561_1, arg1562_1, arg1563_1, arg1564_1, arg1565_1, arg1566_1, arg1567_1, arg1568_1, arg1569_1, arg1570_1, arg1571_1, arg1572_1, arg1573_1, arg1574_1, arg1575_1, arg1576_1, arg1577_1, arg1578_1, arg1579_1, arg1580_1, arg1581_1, arg1582_1, arg1583_1, arg1584_1, arg1585_1, arg1586_1, arg1587_1, arg1588_1, arg1589_1, arg1590_1, arg1591_1, arg1592_1, arg1593_1, arg1594_1, arg1595_1, arg1596_1, arg1597_1, arg1598_1, arg1599_1, arg1600_1, arg1601_1, arg1602_1, arg1603_1, arg1604_1, arg1605_1, arg1606_1, arg1607_1, arg1608_1, arg1609_1, arg1610_1, arg1611_1, arg1612_1, arg1613_1, arg1614_1, arg1615_1, arg1616_1, arg1617_1, arg1618_1, arg1619_1, arg1620_1, arg1621_1, arg1622_1, arg1623_1, arg1624_1, arg1625_1, arg1626_1, arg1627_1, arg1628_1, arg1629_1, arg1630_1, arg1631_1, arg1632_1, arg1633_1, arg1634_1, arg1635_1, arg1636_1, arg1637_1, arg1638_1, arg1639_1, arg1640_1, arg1641_1, arg1642_1, arg1643_1, arg1644_1, arg1645_1, arg1646_1, arg1647_1, arg1648_1, arg1649_1, arg1650_1, arg1651_1, arg1652_1, arg1653_1, arg1654_1, arg1655_1, arg1656_1, arg1657_1, arg1658_1, arg1659_1, arg1660_1, arg1661_1, arg1662_1, arg1663_1, arg1664_1, arg1665_1, arg1666_1, arg1667_1, arg1668_1, arg1669_1, arg1670_1, arg1671_1, arg1672_1, arg1673_1, arg1674_1, arg1675_1, arg1676_1, arg1677_1, arg1678_1, arg1679_1, arg1680_1, arg1681_1, arg1682_1, arg1683_1, arg1684_1, arg1685_1, arg1686_1, arg1687_1, arg1688_1, arg1689_1, arg1690_1, arg1691_1, arg1692_1, arg1693_1, arg1694_1, arg1695_1, arg1696_1, arg1697_1, arg1698_1, arg1699_1, arg1700_1, arg1701_1, arg1702_1, arg1703_1, arg1704_1, arg1705_1, arg1706_1, arg1707_1, arg1708_1, arg1709_1, arg1710_1, arg1711_1, arg1712_1, arg1713_1, arg1714_1, arg1715_1, arg1716_1, arg1717_1, arg1718_1, arg1719_1, arg1720_1, arg1721_1, arg1722_1, arg1723_1, arg1724_1, arg1725_1, arg1726_1, arg1727_1, arg1728_1, arg1729_1, arg1730_1, arg1731_1, arg1732_1, arg1733_1, arg1734_1, arg1735_1, arg1736_1, arg1737_1, arg1738_1, arg1739_1, arg1740_1, arg1741_1, arg1742_1, arg1743_1, arg1744_1, arg1745_1, arg1746_1, arg1747_1, arg1748_1, arg1749_1, arg1750_1, arg1751_1, arg1752_1, arg1753_1, arg1754_1, arg1755_1, arg1756_1, arg1757_1, arg1758_1, arg1759_1, arg1760_1, arg1761_1, arg1762_1, arg1763_1, arg1764_1, arg1765_1, arg1766_1, arg1767_1, arg1768_1, arg1769_1, arg1770_1, arg1771_1, arg1772_1, arg1773_1, arg1774_1, arg1775_1, arg1776_1, arg1777_1, arg1778_1, arg1779_1, arg1780_1, arg1781_1, arg1782_1, arg1783_1, arg1784_1, arg1785_1, arg1786_1, arg1787_1, arg1788_1, arg1789_1, arg1790_1, arg1791_1, arg1792_1, arg1793_1, arg1794_1, arg1795_1, arg1796_1, arg1797_1, arg1798_1, arg1799_1, arg1800_1, arg1801_1, arg1802_1, arg1803_1, arg1804_1, arg1805_1, arg1806_1, arg1807_1, arg1808_1, arg1809_1, arg1810_1, arg1811_1, arg1812_1, arg1813_1, arg1814_1, arg1815_1, arg1816_1, arg1817_1, arg1818_1, arg1819_1, arg1820_1, arg1821_1, arg1822_1, arg1823_1, arg1824_1, arg1825_1, arg1826_1, arg1827_1, arg1828_1, arg1829_1, arg1830_1, arg1831_1, arg1832_1, arg1833_1, arg1834_1, arg1835_1, arg1836_1, arg1837_1, arg1838_1, arg1839_1, arg1840_1, arg1841_1, arg1842_1, arg1843_1, arg1844_1, arg1845_1, arg1846_1, arg1847_1, arg1848_1, arg1849_1, arg1850_1, arg1851_1, arg1852_1, arg1853_1, arg1854_1, arg1855_1, arg1856_1, arg1857_1, arg1858_1, arg1859_1, arg1860_1, arg1861_1, arg1862_1, arg1863_1, arg1864_1, arg1865_1, arg1866_1, arg1867_1, arg1868_1, arg1869_1, arg1870_1, arg1871_1, arg1872_1, arg1873_1, arg1874_1, arg1875_1, arg1876_1, arg1877_1, arg1878_1, arg1879_1, arg1880_1, arg1881_1, arg1882_1, arg1883_1, arg1884_1, arg1885_1, arg1886_1, arg1887_1, arg1888_1, arg1889_1, arg1890_1, arg1891_1, arg1892_1, arg1893_1, arg1894_1, arg1895_1, arg1896_1, arg1897_1, arg1898_1, arg1899_1, arg1900_1, arg1901_1, arg1902_1, arg1903_1, arg1904_1, arg1905_1, arg1906_1, arg1907_1, arg1908_1, arg1909_1, arg1910_1, arg1911_1, arg1912_1, arg1913_1, arg1914_1, arg1915_1, arg1916_1, arg1917_1, arg1918_1, arg1919_1, arg1920_1, arg1921_1, arg1922_1, arg1923_1, arg1924_1, arg1925_1, arg1926_1, arg1927_1, arg1928_1, arg1929_1, arg1930_1, arg1931_1, arg1932_1, arg1933_1, arg1934_1, arg1935_1, arg1936_1, arg1937_1, arg1938_1, arg1939_1, arg1940_1, arg1941_1, arg1942_1, arg1943_1, arg1944_1, arg1945_1, arg1946_1, arg1947_1, arg1948_1, arg1949_1, arg1950_1, arg1951_1, arg1952_1, arg1953_1, arg1954_1, arg1955_1, arg1956_1 = args
    args.clear()
    assert_size_stride(arg0_1, (64, 3, 3, 3), (27, 9, 3, 1))
    assert_size_stride(arg1_1, (64, ), (1, ))
    assert_size_stride(arg2_1, (64, ), (1, ))
    assert_size_stride(arg3_1, (64, 64, 3, 3), (576, 9, 3, 1))
    assert_size_stride(arg4_1, (64, ), (1, ))
    assert_size_stride(arg5_1, (64, ), (1, ))
    assert_size_stride(arg6_1, (64, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(arg7_1, (64, ), (1, ))
    assert_size_stride(arg8_1, (64, ), (1, ))
    assert_size_stride(arg9_1, (64, 64, 3, 3), (576, 9, 3, 1))
    assert_size_stride(arg10_1, (64, ), (1, ))
    assert_size_stride(arg11_1, (64, ), (1, ))
    assert_size_stride(arg12_1, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(arg13_1, (256, ), (1, ))
    assert_size_stride(arg14_1, (256, ), (1, ))
    assert_size_stride(arg15_1, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(arg16_1, (256, ), (1, ))
    assert_size_stride(arg17_1, (256, ), (1, ))
    assert_size_stride(arg18_1, (64, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(arg19_1, (64, ), (1, ))
    assert_size_stride(arg20_1, (64, ), (1, ))
    assert_size_stride(arg21_1, (64, 64, 3, 3), (576, 9, 3, 1))
    assert_size_stride(arg22_1, (64, ), (1, ))
    assert_size_stride(arg23_1, (64, ), (1, ))
    assert_size_stride(arg24_1, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(arg25_1, (256, ), (1, ))
    assert_size_stride(arg26_1, (256, ), (1, ))
    assert_size_stride(arg27_1, (64, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(arg28_1, (64, ), (1, ))
    assert_size_stride(arg29_1, (64, ), (1, ))
    assert_size_stride(arg30_1, (64, 64, 3, 3), (576, 9, 3, 1))
    assert_size_stride(arg31_1, (64, ), (1, ))
    assert_size_stride(arg32_1, (64, ), (1, ))
    assert_size_stride(arg33_1, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(arg34_1, (256, ), (1, ))
    assert_size_stride(arg35_1, (256, ), (1, ))
    assert_size_stride(arg36_1, (64, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(arg37_1, (64, ), (1, ))
    assert_size_stride(arg38_1, (64, ), (1, ))
    assert_size_stride(arg39_1, (64, 64, 3, 3), (576, 9, 3, 1))
    assert_size_stride(arg40_1, (64, ), (1, ))
    assert_size_stride(arg41_1, (64, ), (1, ))
    assert_size_stride(arg42_1, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(arg43_1, (256, ), (1, ))
    assert_size_stride(arg44_1, (256, ), (1, ))
    assert_size_stride(arg45_1, (18, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(arg46_1, (18, ), (1, ))
    assert_size_stride(arg47_1, (18, ), (1, ))
    assert_size_stride(arg48_1, (36, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(arg49_1, (36, ), (1, ))
    assert_size_stride(arg50_1, (36, ), (1, ))
    assert_size_stride(arg51_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg52_1, (18, ), (1, ))
    assert_size_stride(arg53_1, (18, ), (1, ))
    assert_size_stride(arg54_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg55_1, (18, ), (1, ))
    assert_size_stride(arg56_1, (18, ), (1, ))
    assert_size_stride(arg57_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg58_1, (18, ), (1, ))
    assert_size_stride(arg59_1, (18, ), (1, ))
    assert_size_stride(arg60_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg61_1, (18, ), (1, ))
    assert_size_stride(arg62_1, (18, ), (1, ))
    assert_size_stride(arg63_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg64_1, (18, ), (1, ))
    assert_size_stride(arg65_1, (18, ), (1, ))
    assert_size_stride(arg66_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg67_1, (18, ), (1, ))
    assert_size_stride(arg68_1, (18, ), (1, ))
    assert_size_stride(arg69_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg70_1, (18, ), (1, ))
    assert_size_stride(arg71_1, (18, ), (1, ))
    assert_size_stride(arg72_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg73_1, (18, ), (1, ))
    assert_size_stride(arg74_1, (18, ), (1, ))
    assert_size_stride(arg75_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg76_1, (36, ), (1, ))
    assert_size_stride(arg77_1, (36, ), (1, ))
    assert_size_stride(arg78_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg79_1, (36, ), (1, ))
    assert_size_stride(arg80_1, (36, ), (1, ))
    assert_size_stride(arg81_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg82_1, (36, ), (1, ))
    assert_size_stride(arg83_1, (36, ), (1, ))
    assert_size_stride(arg84_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg85_1, (36, ), (1, ))
    assert_size_stride(arg86_1, (36, ), (1, ))
    assert_size_stride(arg87_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg88_1, (36, ), (1, ))
    assert_size_stride(arg89_1, (36, ), (1, ))
    assert_size_stride(arg90_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg91_1, (36, ), (1, ))
    assert_size_stride(arg92_1, (36, ), (1, ))
    assert_size_stride(arg93_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg94_1, (36, ), (1, ))
    assert_size_stride(arg95_1, (36, ), (1, ))
    assert_size_stride(arg96_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg97_1, (36, ), (1, ))
    assert_size_stride(arg98_1, (36, ), (1, ))
    assert_size_stride(arg99_1, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg100_1, (18, ), (1, ))
    assert_size_stride(arg101_1, (18, ), (1, ))
    assert_size_stride(arg102_1, (36, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg103_1, (36, ), (1, ))
    assert_size_stride(arg104_1, (36, ), (1, ))
    assert_size_stride(arg105_1, (72, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg106_1, (72, ), (1, ))
    assert_size_stride(arg107_1, (72, ), (1, ))
    assert_size_stride(arg108_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg109_1, (18, ), (1, ))
    assert_size_stride(arg110_1, (18, ), (1, ))
    assert_size_stride(arg111_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg112_1, (18, ), (1, ))
    assert_size_stride(arg113_1, (18, ), (1, ))
    assert_size_stride(arg114_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg115_1, (18, ), (1, ))
    assert_size_stride(arg116_1, (18, ), (1, ))
    assert_size_stride(arg117_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg118_1, (18, ), (1, ))
    assert_size_stride(arg119_1, (18, ), (1, ))
    assert_size_stride(arg120_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg121_1, (18, ), (1, ))
    assert_size_stride(arg122_1, (18, ), (1, ))
    assert_size_stride(arg123_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg124_1, (18, ), (1, ))
    assert_size_stride(arg125_1, (18, ), (1, ))
    assert_size_stride(arg126_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg127_1, (18, ), (1, ))
    assert_size_stride(arg128_1, (18, ), (1, ))
    assert_size_stride(arg129_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg130_1, (18, ), (1, ))
    assert_size_stride(arg131_1, (18, ), (1, ))
    assert_size_stride(arg132_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg133_1, (36, ), (1, ))
    assert_size_stride(arg134_1, (36, ), (1, ))
    assert_size_stride(arg135_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg136_1, (36, ), (1, ))
    assert_size_stride(arg137_1, (36, ), (1, ))
    assert_size_stride(arg138_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg139_1, (36, ), (1, ))
    assert_size_stride(arg140_1, (36, ), (1, ))
    assert_size_stride(arg141_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg142_1, (36, ), (1, ))
    assert_size_stride(arg143_1, (36, ), (1, ))
    assert_size_stride(arg144_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg145_1, (36, ), (1, ))
    assert_size_stride(arg146_1, (36, ), (1, ))
    assert_size_stride(arg147_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg148_1, (36, ), (1, ))
    assert_size_stride(arg149_1, (36, ), (1, ))
    assert_size_stride(arg150_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg151_1, (36, ), (1, ))
    assert_size_stride(arg152_1, (36, ), (1, ))
    assert_size_stride(arg153_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg154_1, (36, ), (1, ))
    assert_size_stride(arg155_1, (36, ), (1, ))
    assert_size_stride(arg156_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg157_1, (72, ), (1, ))
    assert_size_stride(arg158_1, (72, ), (1, ))
    assert_size_stride(arg159_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg160_1, (72, ), (1, ))
    assert_size_stride(arg161_1, (72, ), (1, ))
    assert_size_stride(arg162_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg163_1, (72, ), (1, ))
    assert_size_stride(arg164_1, (72, ), (1, ))
    assert_size_stride(arg165_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg166_1, (72, ), (1, ))
    assert_size_stride(arg167_1, (72, ), (1, ))
    assert_size_stride(arg168_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg169_1, (72, ), (1, ))
    assert_size_stride(arg170_1, (72, ), (1, ))
    assert_size_stride(arg171_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg172_1, (72, ), (1, ))
    assert_size_stride(arg173_1, (72, ), (1, ))
    assert_size_stride(arg174_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg175_1, (72, ), (1, ))
    assert_size_stride(arg176_1, (72, ), (1, ))
    assert_size_stride(arg177_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg178_1, (72, ), (1, ))
    assert_size_stride(arg179_1, (72, ), (1, ))
    assert_size_stride(arg180_1, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg181_1, (18, ), (1, ))
    assert_size_stride(arg182_1, (18, ), (1, ))
    assert_size_stride(arg183_1, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg184_1, (18, ), (1, ))
    assert_size_stride(arg185_1, (18, ), (1, ))
    assert_size_stride(arg186_1, (36, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg187_1, (36, ), (1, ))
    assert_size_stride(arg188_1, (36, ), (1, ))
    assert_size_stride(arg189_1, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg190_1, (36, ), (1, ))
    assert_size_stride(arg191_1, (36, ), (1, ))
    assert_size_stride(arg192_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg193_1, (18, ), (1, ))
    assert_size_stride(arg194_1, (18, ), (1, ))
    assert_size_stride(arg195_1, (72, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg196_1, (72, ), (1, ))
    assert_size_stride(arg197_1, (72, ), (1, ))
    assert_size_stride(arg198_1, (72, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg199_1, (72, ), (1, ))
    assert_size_stride(arg200_1, (72, ), (1, ))
    assert_size_stride(arg201_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg202_1, (18, ), (1, ))
    assert_size_stride(arg203_1, (18, ), (1, ))
    assert_size_stride(arg204_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg205_1, (18, ), (1, ))
    assert_size_stride(arg206_1, (18, ), (1, ))
    assert_size_stride(arg207_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg208_1, (18, ), (1, ))
    assert_size_stride(arg209_1, (18, ), (1, ))
    assert_size_stride(arg210_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg211_1, (18, ), (1, ))
    assert_size_stride(arg212_1, (18, ), (1, ))
    assert_size_stride(arg213_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg214_1, (18, ), (1, ))
    assert_size_stride(arg215_1, (18, ), (1, ))
    assert_size_stride(arg216_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg217_1, (18, ), (1, ))
    assert_size_stride(arg218_1, (18, ), (1, ))
    assert_size_stride(arg219_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg220_1, (18, ), (1, ))
    assert_size_stride(arg221_1, (18, ), (1, ))
    assert_size_stride(arg222_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg223_1, (18, ), (1, ))
    assert_size_stride(arg224_1, (18, ), (1, ))
    assert_size_stride(arg225_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg226_1, (36, ), (1, ))
    assert_size_stride(arg227_1, (36, ), (1, ))
    assert_size_stride(arg228_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg229_1, (36, ), (1, ))
    assert_size_stride(arg230_1, (36, ), (1, ))
    assert_size_stride(arg231_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg232_1, (36, ), (1, ))
    assert_size_stride(arg233_1, (36, ), (1, ))
    assert_size_stride(arg234_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg235_1, (36, ), (1, ))
    assert_size_stride(arg236_1, (36, ), (1, ))
    assert_size_stride(arg237_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg238_1, (36, ), (1, ))
    assert_size_stride(arg239_1, (36, ), (1, ))
    assert_size_stride(arg240_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg241_1, (36, ), (1, ))
    assert_size_stride(arg242_1, (36, ), (1, ))
    assert_size_stride(arg243_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg244_1, (36, ), (1, ))
    assert_size_stride(arg245_1, (36, ), (1, ))
    assert_size_stride(arg246_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg247_1, (36, ), (1, ))
    assert_size_stride(arg248_1, (36, ), (1, ))
    assert_size_stride(arg249_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg250_1, (72, ), (1, ))
    assert_size_stride(arg251_1, (72, ), (1, ))
    assert_size_stride(arg252_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg253_1, (72, ), (1, ))
    assert_size_stride(arg254_1, (72, ), (1, ))
    assert_size_stride(arg255_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg256_1, (72, ), (1, ))
    assert_size_stride(arg257_1, (72, ), (1, ))
    assert_size_stride(arg258_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg259_1, (72, ), (1, ))
    assert_size_stride(arg260_1, (72, ), (1, ))
    assert_size_stride(arg261_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg262_1, (72, ), (1, ))
    assert_size_stride(arg263_1, (72, ), (1, ))
    assert_size_stride(arg264_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg265_1, (72, ), (1, ))
    assert_size_stride(arg266_1, (72, ), (1, ))
    assert_size_stride(arg267_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg268_1, (72, ), (1, ))
    assert_size_stride(arg269_1, (72, ), (1, ))
    assert_size_stride(arg270_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg271_1, (72, ), (1, ))
    assert_size_stride(arg272_1, (72, ), (1, ))
    assert_size_stride(arg273_1, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg274_1, (18, ), (1, ))
    assert_size_stride(arg275_1, (18, ), (1, ))
    assert_size_stride(arg276_1, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg277_1, (18, ), (1, ))
    assert_size_stride(arg278_1, (18, ), (1, ))
    assert_size_stride(arg279_1, (36, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg280_1, (36, ), (1, ))
    assert_size_stride(arg281_1, (36, ), (1, ))
    assert_size_stride(arg282_1, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg283_1, (36, ), (1, ))
    assert_size_stride(arg284_1, (36, ), (1, ))
    assert_size_stride(arg285_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg286_1, (18, ), (1, ))
    assert_size_stride(arg287_1, (18, ), (1, ))
    assert_size_stride(arg288_1, (72, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg289_1, (72, ), (1, ))
    assert_size_stride(arg290_1, (72, ), (1, ))
    assert_size_stride(arg291_1, (72, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg292_1, (72, ), (1, ))
    assert_size_stride(arg293_1, (72, ), (1, ))
    assert_size_stride(arg294_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg295_1, (18, ), (1, ))
    assert_size_stride(arg296_1, (18, ), (1, ))
    assert_size_stride(arg297_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg298_1, (18, ), (1, ))
    assert_size_stride(arg299_1, (18, ), (1, ))
    assert_size_stride(arg300_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg301_1, (18, ), (1, ))
    assert_size_stride(arg302_1, (18, ), (1, ))
    assert_size_stride(arg303_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg304_1, (18, ), (1, ))
    assert_size_stride(arg305_1, (18, ), (1, ))
    assert_size_stride(arg306_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg307_1, (18, ), (1, ))
    assert_size_stride(arg308_1, (18, ), (1, ))
    assert_size_stride(arg309_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg310_1, (18, ), (1, ))
    assert_size_stride(arg311_1, (18, ), (1, ))
    assert_size_stride(arg312_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg313_1, (18, ), (1, ))
    assert_size_stride(arg314_1, (18, ), (1, ))
    assert_size_stride(arg315_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg316_1, (18, ), (1, ))
    assert_size_stride(arg317_1, (18, ), (1, ))
    assert_size_stride(arg318_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg319_1, (36, ), (1, ))
    assert_size_stride(arg320_1, (36, ), (1, ))
    assert_size_stride(arg321_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg322_1, (36, ), (1, ))
    assert_size_stride(arg323_1, (36, ), (1, ))
    assert_size_stride(arg324_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg325_1, (36, ), (1, ))
    assert_size_stride(arg326_1, (36, ), (1, ))
    assert_size_stride(arg327_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg328_1, (36, ), (1, ))
    assert_size_stride(arg329_1, (36, ), (1, ))
    assert_size_stride(arg330_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg331_1, (36, ), (1, ))
    assert_size_stride(arg332_1, (36, ), (1, ))
    assert_size_stride(arg333_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg334_1, (36, ), (1, ))
    assert_size_stride(arg335_1, (36, ), (1, ))
    assert_size_stride(arg336_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg337_1, (36, ), (1, ))
    assert_size_stride(arg338_1, (36, ), (1, ))
    assert_size_stride(arg339_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg340_1, (36, ), (1, ))
    assert_size_stride(arg341_1, (36, ), (1, ))
    assert_size_stride(arg342_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg343_1, (72, ), (1, ))
    assert_size_stride(arg344_1, (72, ), (1, ))
    assert_size_stride(arg345_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg346_1, (72, ), (1, ))
    assert_size_stride(arg347_1, (72, ), (1, ))
    assert_size_stride(arg348_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg349_1, (72, ), (1, ))
    assert_size_stride(arg350_1, (72, ), (1, ))
    assert_size_stride(arg351_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg352_1, (72, ), (1, ))
    assert_size_stride(arg353_1, (72, ), (1, ))
    assert_size_stride(arg354_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg355_1, (72, ), (1, ))
    assert_size_stride(arg356_1, (72, ), (1, ))
    assert_size_stride(arg357_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg358_1, (72, ), (1, ))
    assert_size_stride(arg359_1, (72, ), (1, ))
    assert_size_stride(arg360_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg361_1, (72, ), (1, ))
    assert_size_stride(arg362_1, (72, ), (1, ))
    assert_size_stride(arg363_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg364_1, (72, ), (1, ))
    assert_size_stride(arg365_1, (72, ), (1, ))
    assert_size_stride(arg366_1, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg367_1, (18, ), (1, ))
    assert_size_stride(arg368_1, (18, ), (1, ))
    assert_size_stride(arg369_1, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg370_1, (18, ), (1, ))
    assert_size_stride(arg371_1, (18, ), (1, ))
    assert_size_stride(arg372_1, (36, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg373_1, (36, ), (1, ))
    assert_size_stride(arg374_1, (36, ), (1, ))
    assert_size_stride(arg375_1, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg376_1, (36, ), (1, ))
    assert_size_stride(arg377_1, (36, ), (1, ))
    assert_size_stride(arg378_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg379_1, (18, ), (1, ))
    assert_size_stride(arg380_1, (18, ), (1, ))
    assert_size_stride(arg381_1, (72, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg382_1, (72, ), (1, ))
    assert_size_stride(arg383_1, (72, ), (1, ))
    assert_size_stride(arg384_1, (72, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg385_1, (72, ), (1, ))
    assert_size_stride(arg386_1, (72, ), (1, ))
    assert_size_stride(arg387_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg388_1, (18, ), (1, ))
    assert_size_stride(arg389_1, (18, ), (1, ))
    assert_size_stride(arg390_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg391_1, (18, ), (1, ))
    assert_size_stride(arg392_1, (18, ), (1, ))
    assert_size_stride(arg393_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg394_1, (18, ), (1, ))
    assert_size_stride(arg395_1, (18, ), (1, ))
    assert_size_stride(arg396_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg397_1, (18, ), (1, ))
    assert_size_stride(arg398_1, (18, ), (1, ))
    assert_size_stride(arg399_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg400_1, (18, ), (1, ))
    assert_size_stride(arg401_1, (18, ), (1, ))
    assert_size_stride(arg402_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg403_1, (18, ), (1, ))
    assert_size_stride(arg404_1, (18, ), (1, ))
    assert_size_stride(arg405_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg406_1, (18, ), (1, ))
    assert_size_stride(arg407_1, (18, ), (1, ))
    assert_size_stride(arg408_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg409_1, (18, ), (1, ))
    assert_size_stride(arg410_1, (18, ), (1, ))
    assert_size_stride(arg411_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg412_1, (36, ), (1, ))
    assert_size_stride(arg413_1, (36, ), (1, ))
    assert_size_stride(arg414_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg415_1, (36, ), (1, ))
    assert_size_stride(arg416_1, (36, ), (1, ))
    assert_size_stride(arg417_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg418_1, (36, ), (1, ))
    assert_size_stride(arg419_1, (36, ), (1, ))
    assert_size_stride(arg420_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg421_1, (36, ), (1, ))
    assert_size_stride(arg422_1, (36, ), (1, ))
    assert_size_stride(arg423_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg424_1, (36, ), (1, ))
    assert_size_stride(arg425_1, (36, ), (1, ))
    assert_size_stride(arg426_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg427_1, (36, ), (1, ))
    assert_size_stride(arg428_1, (36, ), (1, ))
    assert_size_stride(arg429_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg430_1, (36, ), (1, ))
    assert_size_stride(arg431_1, (36, ), (1, ))
    assert_size_stride(arg432_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg433_1, (36, ), (1, ))
    assert_size_stride(arg434_1, (36, ), (1, ))
    assert_size_stride(arg435_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg436_1, (72, ), (1, ))
    assert_size_stride(arg437_1, (72, ), (1, ))
    assert_size_stride(arg438_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg439_1, (72, ), (1, ))
    assert_size_stride(arg440_1, (72, ), (1, ))
    assert_size_stride(arg441_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg442_1, (72, ), (1, ))
    assert_size_stride(arg443_1, (72, ), (1, ))
    assert_size_stride(arg444_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg445_1, (72, ), (1, ))
    assert_size_stride(arg446_1, (72, ), (1, ))
    assert_size_stride(arg447_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg448_1, (72, ), (1, ))
    assert_size_stride(arg449_1, (72, ), (1, ))
    assert_size_stride(arg450_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg451_1, (72, ), (1, ))
    assert_size_stride(arg452_1, (72, ), (1, ))
    assert_size_stride(arg453_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg454_1, (72, ), (1, ))
    assert_size_stride(arg455_1, (72, ), (1, ))
    assert_size_stride(arg456_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg457_1, (72, ), (1, ))
    assert_size_stride(arg458_1, (72, ), (1, ))
    assert_size_stride(arg459_1, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg460_1, (18, ), (1, ))
    assert_size_stride(arg461_1, (18, ), (1, ))
    assert_size_stride(arg462_1, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg463_1, (18, ), (1, ))
    assert_size_stride(arg464_1, (18, ), (1, ))
    assert_size_stride(arg465_1, (36, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg466_1, (36, ), (1, ))
    assert_size_stride(arg467_1, (36, ), (1, ))
    assert_size_stride(arg468_1, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg469_1, (36, ), (1, ))
    assert_size_stride(arg470_1, (36, ), (1, ))
    assert_size_stride(arg471_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg472_1, (18, ), (1, ))
    assert_size_stride(arg473_1, (18, ), (1, ))
    assert_size_stride(arg474_1, (72, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg475_1, (72, ), (1, ))
    assert_size_stride(arg476_1, (72, ), (1, ))
    assert_size_stride(arg477_1, (72, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg478_1, (72, ), (1, ))
    assert_size_stride(arg479_1, (72, ), (1, ))
    assert_size_stride(arg480_1, (144, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg481_1, (144, ), (1, ))
    assert_size_stride(arg482_1, (144, ), (1, ))
    assert_size_stride(arg483_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg484_1, (18, ), (1, ))
    assert_size_stride(arg485_1, (18, ), (1, ))
    assert_size_stride(arg486_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg487_1, (18, ), (1, ))
    assert_size_stride(arg488_1, (18, ), (1, ))
    assert_size_stride(arg489_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg490_1, (18, ), (1, ))
    assert_size_stride(arg491_1, (18, ), (1, ))
    assert_size_stride(arg492_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg493_1, (18, ), (1, ))
    assert_size_stride(arg494_1, (18, ), (1, ))
    assert_size_stride(arg495_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg496_1, (18, ), (1, ))
    assert_size_stride(arg497_1, (18, ), (1, ))
    assert_size_stride(arg498_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg499_1, (18, ), (1, ))
    assert_size_stride(arg500_1, (18, ), (1, ))
    assert_size_stride(arg501_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg502_1, (18, ), (1, ))
    assert_size_stride(arg503_1, (18, ), (1, ))
    assert_size_stride(arg504_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg505_1, (18, ), (1, ))
    assert_size_stride(arg506_1, (18, ), (1, ))
    assert_size_stride(arg507_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg508_1, (36, ), (1, ))
    assert_size_stride(arg509_1, (36, ), (1, ))
    assert_size_stride(arg510_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg511_1, (36, ), (1, ))
    assert_size_stride(arg512_1, (36, ), (1, ))
    assert_size_stride(arg513_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg514_1, (36, ), (1, ))
    assert_size_stride(arg515_1, (36, ), (1, ))
    assert_size_stride(arg516_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg517_1, (36, ), (1, ))
    assert_size_stride(arg518_1, (36, ), (1, ))
    assert_size_stride(arg519_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg520_1, (36, ), (1, ))
    assert_size_stride(arg521_1, (36, ), (1, ))
    assert_size_stride(arg522_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg523_1, (36, ), (1, ))
    assert_size_stride(arg524_1, (36, ), (1, ))
    assert_size_stride(arg525_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg526_1, (36, ), (1, ))
    assert_size_stride(arg527_1, (36, ), (1, ))
    assert_size_stride(arg528_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg529_1, (36, ), (1, ))
    assert_size_stride(arg530_1, (36, ), (1, ))
    assert_size_stride(arg531_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg532_1, (72, ), (1, ))
    assert_size_stride(arg533_1, (72, ), (1, ))
    assert_size_stride(arg534_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg535_1, (72, ), (1, ))
    assert_size_stride(arg536_1, (72, ), (1, ))
    assert_size_stride(arg537_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg538_1, (72, ), (1, ))
    assert_size_stride(arg539_1, (72, ), (1, ))
    assert_size_stride(arg540_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg541_1, (72, ), (1, ))
    assert_size_stride(arg542_1, (72, ), (1, ))
    assert_size_stride(arg543_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg544_1, (72, ), (1, ))
    assert_size_stride(arg545_1, (72, ), (1, ))
    assert_size_stride(arg546_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg547_1, (72, ), (1, ))
    assert_size_stride(arg548_1, (72, ), (1, ))
    assert_size_stride(arg549_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg550_1, (72, ), (1, ))
    assert_size_stride(arg551_1, (72, ), (1, ))
    assert_size_stride(arg552_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg553_1, (72, ), (1, ))
    assert_size_stride(arg554_1, (72, ), (1, ))
    assert_size_stride(arg555_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg556_1, (144, ), (1, ))
    assert_size_stride(arg557_1, (144, ), (1, ))
    assert_size_stride(arg558_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg559_1, (144, ), (1, ))
    assert_size_stride(arg560_1, (144, ), (1, ))
    assert_size_stride(arg561_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg562_1, (144, ), (1, ))
    assert_size_stride(arg563_1, (144, ), (1, ))
    assert_size_stride(arg564_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg565_1, (144, ), (1, ))
    assert_size_stride(arg566_1, (144, ), (1, ))
    assert_size_stride(arg567_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg568_1, (144, ), (1, ))
    assert_size_stride(arg569_1, (144, ), (1, ))
    assert_size_stride(arg570_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg571_1, (144, ), (1, ))
    assert_size_stride(arg572_1, (144, ), (1, ))
    assert_size_stride(arg573_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg574_1, (144, ), (1, ))
    assert_size_stride(arg575_1, (144, ), (1, ))
    assert_size_stride(arg576_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg577_1, (144, ), (1, ))
    assert_size_stride(arg578_1, (144, ), (1, ))
    assert_size_stride(arg579_1, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg580_1, (18, ), (1, ))
    assert_size_stride(arg581_1, (18, ), (1, ))
    assert_size_stride(arg582_1, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg583_1, (18, ), (1, ))
    assert_size_stride(arg584_1, (18, ), (1, ))
    assert_size_stride(arg585_1, (18, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg586_1, (18, ), (1, ))
    assert_size_stride(arg587_1, (18, ), (1, ))
    assert_size_stride(arg588_1, (36, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg589_1, (36, ), (1, ))
    assert_size_stride(arg590_1, (36, ), (1, ))
    assert_size_stride(arg591_1, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg592_1, (36, ), (1, ))
    assert_size_stride(arg593_1, (36, ), (1, ))
    assert_size_stride(arg594_1, (36, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg595_1, (36, ), (1, ))
    assert_size_stride(arg596_1, (36, ), (1, ))
    assert_size_stride(arg597_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg598_1, (18, ), (1, ))
    assert_size_stride(arg599_1, (18, ), (1, ))
    assert_size_stride(arg600_1, (72, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg601_1, (72, ), (1, ))
    assert_size_stride(arg602_1, (72, ), (1, ))
    assert_size_stride(arg603_1, (72, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg604_1, (72, ), (1, ))
    assert_size_stride(arg605_1, (72, ), (1, ))
    assert_size_stride(arg606_1, (72, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg607_1, (72, ), (1, ))
    assert_size_stride(arg608_1, (72, ), (1, ))
    assert_size_stride(arg609_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg610_1, (18, ), (1, ))
    assert_size_stride(arg611_1, (18, ), (1, ))
    assert_size_stride(arg612_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg613_1, (18, ), (1, ))
    assert_size_stride(arg614_1, (18, ), (1, ))
    assert_size_stride(arg615_1, (144, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg616_1, (144, ), (1, ))
    assert_size_stride(arg617_1, (144, ), (1, ))
    assert_size_stride(arg618_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg619_1, (36, ), (1, ))
    assert_size_stride(arg620_1, (36, ), (1, ))
    assert_size_stride(arg621_1, (144, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg622_1, (144, ), (1, ))
    assert_size_stride(arg623_1, (144, ), (1, ))
    assert_size_stride(arg624_1, (144, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg625_1, (144, ), (1, ))
    assert_size_stride(arg626_1, (144, ), (1, ))
    assert_size_stride(arg627_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg628_1, (18, ), (1, ))
    assert_size_stride(arg629_1, (18, ), (1, ))
    assert_size_stride(arg630_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg631_1, (18, ), (1, ))
    assert_size_stride(arg632_1, (18, ), (1, ))
    assert_size_stride(arg633_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg634_1, (18, ), (1, ))
    assert_size_stride(arg635_1, (18, ), (1, ))
    assert_size_stride(arg636_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg637_1, (18, ), (1, ))
    assert_size_stride(arg638_1, (18, ), (1, ))
    assert_size_stride(arg639_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg640_1, (18, ), (1, ))
    assert_size_stride(arg641_1, (18, ), (1, ))
    assert_size_stride(arg642_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg643_1, (18, ), (1, ))
    assert_size_stride(arg644_1, (18, ), (1, ))
    assert_size_stride(arg645_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg646_1, (18, ), (1, ))
    assert_size_stride(arg647_1, (18, ), (1, ))
    assert_size_stride(arg648_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg649_1, (18, ), (1, ))
    assert_size_stride(arg650_1, (18, ), (1, ))
    assert_size_stride(arg651_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg652_1, (36, ), (1, ))
    assert_size_stride(arg653_1, (36, ), (1, ))
    assert_size_stride(arg654_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg655_1, (36, ), (1, ))
    assert_size_stride(arg656_1, (36, ), (1, ))
    assert_size_stride(arg657_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg658_1, (36, ), (1, ))
    assert_size_stride(arg659_1, (36, ), (1, ))
    assert_size_stride(arg660_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg661_1, (36, ), (1, ))
    assert_size_stride(arg662_1, (36, ), (1, ))
    assert_size_stride(arg663_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg664_1, (36, ), (1, ))
    assert_size_stride(arg665_1, (36, ), (1, ))
    assert_size_stride(arg666_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg667_1, (36, ), (1, ))
    assert_size_stride(arg668_1, (36, ), (1, ))
    assert_size_stride(arg669_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg670_1, (36, ), (1, ))
    assert_size_stride(arg671_1, (36, ), (1, ))
    assert_size_stride(arg672_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg673_1, (36, ), (1, ))
    assert_size_stride(arg674_1, (36, ), (1, ))
    assert_size_stride(arg675_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg676_1, (72, ), (1, ))
    assert_size_stride(arg677_1, (72, ), (1, ))
    assert_size_stride(arg678_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg679_1, (72, ), (1, ))
    assert_size_stride(arg680_1, (72, ), (1, ))
    assert_size_stride(arg681_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg682_1, (72, ), (1, ))
    assert_size_stride(arg683_1, (72, ), (1, ))
    assert_size_stride(arg684_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg685_1, (72, ), (1, ))
    assert_size_stride(arg686_1, (72, ), (1, ))
    assert_size_stride(arg687_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg688_1, (72, ), (1, ))
    assert_size_stride(arg689_1, (72, ), (1, ))
    assert_size_stride(arg690_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg691_1, (72, ), (1, ))
    assert_size_stride(arg692_1, (72, ), (1, ))
    assert_size_stride(arg693_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg694_1, (72, ), (1, ))
    assert_size_stride(arg695_1, (72, ), (1, ))
    assert_size_stride(arg696_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg697_1, (72, ), (1, ))
    assert_size_stride(arg698_1, (72, ), (1, ))
    assert_size_stride(arg699_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg700_1, (144, ), (1, ))
    assert_size_stride(arg701_1, (144, ), (1, ))
    assert_size_stride(arg702_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg703_1, (144, ), (1, ))
    assert_size_stride(arg704_1, (144, ), (1, ))
    assert_size_stride(arg705_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg706_1, (144, ), (1, ))
    assert_size_stride(arg707_1, (144, ), (1, ))
    assert_size_stride(arg708_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg709_1, (144, ), (1, ))
    assert_size_stride(arg710_1, (144, ), (1, ))
    assert_size_stride(arg711_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg712_1, (144, ), (1, ))
    assert_size_stride(arg713_1, (144, ), (1, ))
    assert_size_stride(arg714_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg715_1, (144, ), (1, ))
    assert_size_stride(arg716_1, (144, ), (1, ))
    assert_size_stride(arg717_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg718_1, (144, ), (1, ))
    assert_size_stride(arg719_1, (144, ), (1, ))
    assert_size_stride(arg720_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg721_1, (144, ), (1, ))
    assert_size_stride(arg722_1, (144, ), (1, ))
    assert_size_stride(arg723_1, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg724_1, (18, ), (1, ))
    assert_size_stride(arg725_1, (18, ), (1, ))
    assert_size_stride(arg726_1, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg727_1, (18, ), (1, ))
    assert_size_stride(arg728_1, (18, ), (1, ))
    assert_size_stride(arg729_1, (18, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg730_1, (18, ), (1, ))
    assert_size_stride(arg731_1, (18, ), (1, ))
    assert_size_stride(arg732_1, (36, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg733_1, (36, ), (1, ))
    assert_size_stride(arg734_1, (36, ), (1, ))
    assert_size_stride(arg735_1, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg736_1, (36, ), (1, ))
    assert_size_stride(arg737_1, (36, ), (1, ))
    assert_size_stride(arg738_1, (36, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg739_1, (36, ), (1, ))
    assert_size_stride(arg740_1, (36, ), (1, ))
    assert_size_stride(arg741_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg742_1, (18, ), (1, ))
    assert_size_stride(arg743_1, (18, ), (1, ))
    assert_size_stride(arg744_1, (72, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg745_1, (72, ), (1, ))
    assert_size_stride(arg746_1, (72, ), (1, ))
    assert_size_stride(arg747_1, (72, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg748_1, (72, ), (1, ))
    assert_size_stride(arg749_1, (72, ), (1, ))
    assert_size_stride(arg750_1, (72, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg751_1, (72, ), (1, ))
    assert_size_stride(arg752_1, (72, ), (1, ))
    assert_size_stride(arg753_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg754_1, (18, ), (1, ))
    assert_size_stride(arg755_1, (18, ), (1, ))
    assert_size_stride(arg756_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg757_1, (18, ), (1, ))
    assert_size_stride(arg758_1, (18, ), (1, ))
    assert_size_stride(arg759_1, (144, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg760_1, (144, ), (1, ))
    assert_size_stride(arg761_1, (144, ), (1, ))
    assert_size_stride(arg762_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg763_1, (36, ), (1, ))
    assert_size_stride(arg764_1, (36, ), (1, ))
    assert_size_stride(arg765_1, (144, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg766_1, (144, ), (1, ))
    assert_size_stride(arg767_1, (144, ), (1, ))
    assert_size_stride(arg768_1, (144, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg769_1, (144, ), (1, ))
    assert_size_stride(arg770_1, (144, ), (1, ))
    assert_size_stride(arg771_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg772_1, (18, ), (1, ))
    assert_size_stride(arg773_1, (18, ), (1, ))
    assert_size_stride(arg774_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg775_1, (18, ), (1, ))
    assert_size_stride(arg776_1, (18, ), (1, ))
    assert_size_stride(arg777_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg778_1, (18, ), (1, ))
    assert_size_stride(arg779_1, (18, ), (1, ))
    assert_size_stride(arg780_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg781_1, (18, ), (1, ))
    assert_size_stride(arg782_1, (18, ), (1, ))
    assert_size_stride(arg783_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg784_1, (18, ), (1, ))
    assert_size_stride(arg785_1, (18, ), (1, ))
    assert_size_stride(arg786_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg787_1, (18, ), (1, ))
    assert_size_stride(arg788_1, (18, ), (1, ))
    assert_size_stride(arg789_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg790_1, (18, ), (1, ))
    assert_size_stride(arg791_1, (18, ), (1, ))
    assert_size_stride(arg792_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg793_1, (18, ), (1, ))
    assert_size_stride(arg794_1, (18, ), (1, ))
    assert_size_stride(arg795_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg796_1, (36, ), (1, ))
    assert_size_stride(arg797_1, (36, ), (1, ))
    assert_size_stride(arg798_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg799_1, (36, ), (1, ))
    assert_size_stride(arg800_1, (36, ), (1, ))
    assert_size_stride(arg801_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg802_1, (36, ), (1, ))
    assert_size_stride(arg803_1, (36, ), (1, ))
    assert_size_stride(arg804_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg805_1, (36, ), (1, ))
    assert_size_stride(arg806_1, (36, ), (1, ))
    assert_size_stride(arg807_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg808_1, (36, ), (1, ))
    assert_size_stride(arg809_1, (36, ), (1, ))
    assert_size_stride(arg810_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg811_1, (36, ), (1, ))
    assert_size_stride(arg812_1, (36, ), (1, ))
    assert_size_stride(arg813_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg814_1, (36, ), (1, ))
    assert_size_stride(arg815_1, (36, ), (1, ))
    assert_size_stride(arg816_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg817_1, (36, ), (1, ))
    assert_size_stride(arg818_1, (36, ), (1, ))
    assert_size_stride(arg819_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg820_1, (72, ), (1, ))
    assert_size_stride(arg821_1, (72, ), (1, ))
    assert_size_stride(arg822_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg823_1, (72, ), (1, ))
    assert_size_stride(arg824_1, (72, ), (1, ))
    assert_size_stride(arg825_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg826_1, (72, ), (1, ))
    assert_size_stride(arg827_1, (72, ), (1, ))
    assert_size_stride(arg828_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg829_1, (72, ), (1, ))
    assert_size_stride(arg830_1, (72, ), (1, ))
    assert_size_stride(arg831_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg832_1, (72, ), (1, ))
    assert_size_stride(arg833_1, (72, ), (1, ))
    assert_size_stride(arg834_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg835_1, (72, ), (1, ))
    assert_size_stride(arg836_1, (72, ), (1, ))
    assert_size_stride(arg837_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg838_1, (72, ), (1, ))
    assert_size_stride(arg839_1, (72, ), (1, ))
    assert_size_stride(arg840_1, (72, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg841_1, (72, ), (1, ))
    assert_size_stride(arg842_1, (72, ), (1, ))
    assert_size_stride(arg843_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg844_1, (144, ), (1, ))
    assert_size_stride(arg845_1, (144, ), (1, ))
    assert_size_stride(arg846_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg847_1, (144, ), (1, ))
    assert_size_stride(arg848_1, (144, ), (1, ))
    assert_size_stride(arg849_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg850_1, (144, ), (1, ))
    assert_size_stride(arg851_1, (144, ), (1, ))
    assert_size_stride(arg852_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg853_1, (144, ), (1, ))
    assert_size_stride(arg854_1, (144, ), (1, ))
    assert_size_stride(arg855_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg856_1, (144, ), (1, ))
    assert_size_stride(arg857_1, (144, ), (1, ))
    assert_size_stride(arg858_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg859_1, (144, ), (1, ))
    assert_size_stride(arg860_1, (144, ), (1, ))
    assert_size_stride(arg861_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg862_1, (144, ), (1, ))
    assert_size_stride(arg863_1, (144, ), (1, ))
    assert_size_stride(arg864_1, (144, 144, 3, 3), (1296, 9, 3, 1))
    assert_size_stride(arg865_1, (144, ), (1, ))
    assert_size_stride(arg866_1, (144, ), (1, ))
    assert_size_stride(arg867_1, (18, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg868_1, (18, ), (1, ))
    assert_size_stride(arg869_1, (18, ), (1, ))
    assert_size_stride(arg870_1, (18, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg871_1, (18, ), (1, ))
    assert_size_stride(arg872_1, (18, ), (1, ))
    assert_size_stride(arg873_1, (18, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg874_1, (18, ), (1, ))
    assert_size_stride(arg875_1, (18, ), (1, ))
    assert_size_stride(arg876_1, (36, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg877_1, (36, ), (1, ))
    assert_size_stride(arg878_1, (36, ), (1, ))
    assert_size_stride(arg879_1, (36, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg880_1, (36, ), (1, ))
    assert_size_stride(arg881_1, (36, ), (1, ))
    assert_size_stride(arg882_1, (36, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg883_1, (36, ), (1, ))
    assert_size_stride(arg884_1, (36, ), (1, ))
    assert_size_stride(arg885_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg886_1, (18, ), (1, ))
    assert_size_stride(arg887_1, (18, ), (1, ))
    assert_size_stride(arg888_1, (72, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg889_1, (72, ), (1, ))
    assert_size_stride(arg890_1, (72, ), (1, ))
    assert_size_stride(arg891_1, (72, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg892_1, (72, ), (1, ))
    assert_size_stride(arg893_1, (72, ), (1, ))
    assert_size_stride(arg894_1, (72, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg895_1, (72, ), (1, ))
    assert_size_stride(arg896_1, (72, ), (1, ))
    assert_size_stride(arg897_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg898_1, (18, ), (1, ))
    assert_size_stride(arg899_1, (18, ), (1, ))
    assert_size_stride(arg900_1, (18, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg901_1, (18, ), (1, ))
    assert_size_stride(arg902_1, (18, ), (1, ))
    assert_size_stride(arg903_1, (144, 18, 3, 3), (162, 9, 3, 1))
    assert_size_stride(arg904_1, (144, ), (1, ))
    assert_size_stride(arg905_1, (144, ), (1, ))
    assert_size_stride(arg906_1, (36, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg907_1, (36, ), (1, ))
    assert_size_stride(arg908_1, (36, ), (1, ))
    assert_size_stride(arg909_1, (144, 36, 3, 3), (324, 9, 3, 1))
    assert_size_stride(arg910_1, (144, ), (1, ))
    assert_size_stride(arg911_1, (144, ), (1, ))
    assert_size_stride(arg912_1, (144, 72, 3, 3), (648, 9, 3, 1))
    assert_size_stride(arg913_1, (144, ), (1, ))
    assert_size_stride(arg914_1, (144, ), (1, ))
    assert_size_stride(arg915_1, (32, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(arg916_1, (32, ), (1, ))
    assert_size_stride(arg917_1, (32, ), (1, ))
    assert_size_stride(arg918_1, (32, 32, 3, 3), (288, 9, 3, 1))
    assert_size_stride(arg919_1, (32, ), (1, ))
    assert_size_stride(arg920_1, (32, ), (1, ))
    assert_size_stride(arg921_1, (128, 32, 1, 1), (32, 1, 1, 1))
    assert_size_stride(arg922_1, (128, ), (1, ))
    assert_size_stride(arg923_1, (128, ), (1, ))
    assert_size_stride(arg924_1, (128, 18, 1, 1), (18, 1, 1, 1))
    assert_size_stride(arg925_1, (128, ), (1, ))
    assert_size_stride(arg926_1, (128, ), (1, ))
    assert_size_stride(arg927_1, (64, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg928_1, (64, ), (1, ))
    assert_size_stride(arg929_1, (64, ), (1, ))
    assert_size_stride(arg930_1, (64, 64, 3, 3), (576, 9, 3, 1))
    assert_size_stride(arg931_1, (64, ), (1, ))
    assert_size_stride(arg932_1, (64, ), (1, ))
    assert_size_stride(arg933_1, (256, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(arg934_1, (256, ), (1, ))
    assert_size_stride(arg935_1, (256, ), (1, ))
    assert_size_stride(arg936_1, (256, 36, 1, 1), (36, 1, 1, 1))
    assert_size_stride(arg937_1, (256, ), (1, ))
    assert_size_stride(arg938_1, (256, ), (1, ))
    assert_size_stride(arg939_1, (256, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(arg940_1, (256, ), (1, ))
    assert_size_stride(arg941_1, (256, ), (1, ))
    assert_size_stride(arg942_1, (256, ), (1, ))
    assert_size_stride(arg943_1, (128, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg944_1, (128, ), (1, ))
    assert_size_stride(arg945_1, (128, ), (1, ))
    assert_size_stride(arg946_1, (128, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(arg947_1, (128, ), (1, ))
    assert_size_stride(arg948_1, (128, ), (1, ))
    assert_size_stride(arg949_1, (512, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(arg950_1, (512, ), (1, ))
    assert_size_stride(arg951_1, (512, ), (1, ))
    assert_size_stride(arg952_1, (512, 72, 1, 1), (72, 1, 1, 1))
    assert_size_stride(arg953_1, (512, ), (1, ))
    assert_size_stride(arg954_1, (512, ), (1, ))
    assert_size_stride(arg955_1, (512, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(arg956_1, (512, ), (1, ))
    assert_size_stride(arg957_1, (512, ), (1, ))
    assert_size_stride(arg958_1, (512, ), (1, ))
    assert_size_stride(arg959_1, (256, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg960_1, (256, ), (1, ))
    assert_size_stride(arg961_1, (256, ), (1, ))
    assert_size_stride(arg962_1, (256, 256, 3, 3), (2304, 9, 3, 1))
    assert_size_stride(arg963_1, (256, ), (1, ))
    assert_size_stride(arg964_1, (256, ), (1, ))
    assert_size_stride(arg965_1, (1024, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(arg966_1, (1024, ), (1, ))
    assert_size_stride(arg967_1, (1024, ), (1, ))
    assert_size_stride(arg968_1, (1024, 144, 1, 1), (144, 1, 1, 1))
    assert_size_stride(arg969_1, (1024, ), (1, ))
    assert_size_stride(arg970_1, (1024, ), (1, ))
    assert_size_stride(arg971_1, (1024, 512, 3, 3), (4608, 9, 3, 1))
    assert_size_stride(arg972_1, (1024, ), (1, ))
    assert_size_stride(arg973_1, (1024, ), (1, ))
    assert_size_stride(arg974_1, (1024, ), (1, ))
    assert_size_stride(arg975_1, (2048, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(arg976_1, (2048, ), (1, ))
    assert_size_stride(arg977_1, (2048, ), (1, ))
    assert_size_stride(arg978_1, (2048, ), (1, ))
    assert_size_stride(arg979_1, (1000, 2048), (2048, 1))
    assert_size_stride(arg980_1, (1000, ), (1, ))
    assert_size_stride(arg981_1, (64, ), (1, ))
    assert_size_stride(arg982_1, (64, ), (1, ))
    assert_size_stride(arg983_1, (), ())
    assert_size_stride(arg984_1, (64, ), (1, ))
    assert_size_stride(arg985_1, (64, ), (1, ))
    assert_size_stride(arg986_1, (), ())
    assert_size_stride(arg987_1, (64, ), (1, ))
    assert_size_stride(arg988_1, (64, ), (1, ))
    assert_size_stride(arg989_1, (), ())
    assert_size_stride(arg990_1, (64, ), (1, ))
    assert_size_stride(arg991_1, (64, ), (1, ))
    assert_size_stride(arg992_1, (), ())
    assert_size_stride(arg993_1, (256, ), (1, ))
    assert_size_stride(arg994_1, (256, ), (1, ))
    assert_size_stride(arg995_1, (), ())
    assert_size_stride(arg996_1, (256, ), (1, ))
    assert_size_stride(arg997_1, (256, ), (1, ))
    assert_size_stride(arg998_1, (), ())
    assert_size_stride(arg999_1, (64, ), (1, ))
    assert_size_stride(arg1000_1, (64, ), (1, ))
    assert_size_stride(arg1001_1, (), ())
    assert_size_stride(arg1002_1, (64, ), (1, ))
    assert_size_stride(arg1003_1, (64, ), (1, ))
    assert_size_stride(arg1004_1, (), ())
    assert_size_stride(arg1005_1, (256, ), (1, ))
    assert_size_stride(arg1006_1, (256, ), (1, ))
    assert_size_stride(arg1007_1, (), ())
    assert_size_stride(arg1008_1, (64, ), (1, ))
    assert_size_stride(arg1009_1, (64, ), (1, ))
    assert_size_stride(arg1010_1, (), ())
    assert_size_stride(arg1011_1, (64, ), (1, ))
    assert_size_stride(arg1012_1, (64, ), (1, ))
    assert_size_stride(arg1013_1, (), ())
    assert_size_stride(arg1014_1, (256, ), (1, ))
    assert_size_stride(arg1015_1, (256, ), (1, ))
    assert_size_stride(arg1016_1, (), ())
    assert_size_stride(arg1017_1, (64, ), (1, ))
    assert_size_stride(arg1018_1, (64, ), (1, ))
    assert_size_stride(arg1019_1, (), ())
    assert_size_stride(arg1020_1, (64, ), (1, ))
    assert_size_stride(arg1021_1, (64, ), (1, ))
    assert_size_stride(arg1022_1, (), ())
    assert_size_stride(arg1023_1, (256, ), (1, ))
    assert_size_stride(arg1024_1, (256, ), (1, ))
    assert_size_stride(arg1025_1, (), ())
    assert_size_stride(arg1026_1, (18, ), (1, ))
    assert_size_stride(arg1027_1, (18, ), (1, ))
    assert_size_stride(arg1028_1, (), ())
    assert_size_stride(arg1029_1, (36, ), (1, ))
    assert_size_stride(arg1030_1, (36, ), (1, ))
    assert_size_stride(arg1031_1, (), ())
    assert_size_stride(arg1032_1, (18, ), (1, ))
    assert_size_stride(arg1033_1, (18, ), (1, ))
    assert_size_stride(arg1034_1, (), ())
    assert_size_stride(arg1035_1, (18, ), (1, ))
    assert_size_stride(arg1036_1, (18, ), (1, ))
    assert_size_stride(arg1037_1, (), ())
    assert_size_stride(arg1038_1, (18, ), (1, ))
    assert_size_stride(arg1039_1, (18, ), (1, ))
    assert_size_stride(arg1040_1, (), ())
    assert_size_stride(arg1041_1, (18, ), (1, ))
    assert_size_stride(arg1042_1, (18, ), (1, ))
    assert_size_stride(arg1043_1, (), ())
    assert_size_stride(arg1044_1, (18, ), (1, ))
    assert_size_stride(arg1045_1, (18, ), (1, ))
    assert_size_stride(arg1046_1, (), ())
    assert_size_stride(arg1047_1, (18, ), (1, ))
    assert_size_stride(arg1048_1, (18, ), (1, ))
    assert_size_stride(arg1049_1, (), ())
    assert_size_stride(arg1050_1, (18, ), (1, ))
    assert_size_stride(arg1051_1, (18, ), (1, ))
    assert_size_stride(arg1052_1, (), ())
    assert_size_stride(arg1053_1, (18, ), (1, ))
    assert_size_stride(arg1054_1, (18, ), (1, ))
    assert_size_stride(arg1055_1, (), ())
    assert_size_stride(arg1056_1, (36, ), (1, ))
    assert_size_stride(arg1057_1, (36, ), (1, ))
    assert_size_stride(arg1058_1, (), ())
    assert_size_stride(arg1059_1, (36, ), (1, ))
    assert_size_stride(arg1060_1, (36, ), (1, ))
    assert_size_stride(arg1061_1, (), ())
    assert_size_stride(arg1062_1, (36, ), (1, ))
    assert_size_stride(arg1063_1, (36, ), (1, ))
    assert_size_stride(arg1064_1, (), ())
    assert_size_stride(arg1065_1, (36, ), (1, ))
    assert_size_stride(arg1066_1, (36, ), (1, ))
    assert_size_stride(arg1067_1, (), ())
    assert_size_stride(arg1068_1, (36, ), (1, ))
    assert_size_stride(arg1069_1, (36, ), (1, ))
    assert_size_stride(arg1070_1, (), ())
    assert_size_stride(arg1071_1, (36, ), (1, ))
    assert_size_stride(arg1072_1, (36, ), (1, ))
    assert_size_stride(arg1073_1, (), ())
    assert_size_stride(arg1074_1, (36, ), (1, ))
    assert_size_stride(arg1075_1, (36, ), (1, ))
    assert_size_stride(arg1076_1, (), ())
    assert_size_stride(arg1077_1, (36, ), (1, ))
    assert_size_stride(arg1078_1, (36, ), (1, ))
    assert_size_stride(arg1079_1, (), ())
    assert_size_stride(arg1080_1, (18, ), (1, ))
    assert_size_stride(arg1081_1, (18, ), (1, ))
    assert_size_stride(arg1082_1, (), ())
    assert_size_stride(arg1083_1, (36, ), (1, ))
    assert_size_stride(arg1084_1, (36, ), (1, ))
    assert_size_stride(arg1085_1, (), ())
    assert_size_stride(arg1086_1, (72, ), (1, ))
    assert_size_stride(arg1087_1, (72, ), (1, ))
    assert_size_stride(arg1088_1, (), ())
    assert_size_stride(arg1089_1, (18, ), (1, ))
    assert_size_stride(arg1090_1, (18, ), (1, ))
    assert_size_stride(arg1091_1, (), ())
    assert_size_stride(arg1092_1, (18, ), (1, ))
    assert_size_stride(arg1093_1, (18, ), (1, ))
    assert_size_stride(arg1094_1, (), ())
    assert_size_stride(arg1095_1, (18, ), (1, ))
    assert_size_stride(arg1096_1, (18, ), (1, ))
    assert_size_stride(arg1097_1, (), ())
    assert_size_stride(arg1098_1, (18, ), (1, ))
    assert_size_stride(arg1099_1, (18, ), (1, ))
    assert_size_stride(arg1100_1, (), ())
    assert_size_stride(arg1101_1, (18, ), (1, ))
    assert_size_stride(arg1102_1, (18, ), (1, ))
    assert_size_stride(arg1103_1, (), ())
    assert_size_stride(arg1104_1, (18, ), (1, ))
    assert_size_stride(arg1105_1, (18, ), (1, ))
    assert_size_stride(arg1106_1, (), ())
    assert_size_stride(arg1107_1, (18, ), (1, ))
    assert_size_stride(arg1108_1, (18, ), (1, ))
    assert_size_stride(arg1109_1, (), ())
    assert_size_stride(arg1110_1, (18, ), (1, ))
    assert_size_stride(arg1111_1, (18, ), (1, ))
    assert_size_stride(arg1112_1, (), ())
    assert_size_stride(arg1113_1, (36, ), (1, ))
    assert_size_stride(arg1114_1, (36, ), (1, ))
    assert_size_stride(arg1115_1, (), ())
    assert_size_stride(arg1116_1, (36, ), (1, ))
    assert_size_stride(arg1117_1, (36, ), (1, ))
    assert_size_stride(arg1118_1, (), ())
    assert_size_stride(arg1119_1, (36, ), (1, ))
    assert_size_stride(arg1120_1, (36, ), (1, ))
    assert_size_stride(arg1121_1, (), ())
    assert_size_stride(arg1122_1, (36, ), (1, ))
    assert_size_stride(arg1123_1, (36, ), (1, ))
    assert_size_stride(arg1124_1, (), ())
    assert_size_stride(arg1125_1, (36, ), (1, ))
    assert_size_stride(arg1126_1, (36, ), (1, ))
    assert_size_stride(arg1127_1, (), ())
    assert_size_stride(arg1128_1, (36, ), (1, ))
    assert_size_stride(arg1129_1, (36, ), (1, ))
    assert_size_stride(arg1130_1, (), ())
    assert_size_stride(arg1131_1, (36, ), (1, ))
    assert_size_stride(arg1132_1, (36, ), (1, ))
    assert_size_stride(arg1133_1, (), ())
    assert_size_stride(arg1134_1, (36, ), (1, ))
    assert_size_stride(arg1135_1, (36, ), (1, ))
    assert_size_stride(arg1136_1, (), ())
    assert_size_stride(arg1137_1, (72, ), (1, ))
    assert_size_stride(arg1138_1, (72, ), (1, ))
    assert_size_stride(arg1139_1, (), ())
    assert_size_stride(arg1140_1, (72, ), (1, ))
    assert_size_stride(arg1141_1, (72, ), (1, ))
    assert_size_stride(arg1142_1, (), ())
    assert_size_stride(arg1143_1, (72, ), (1, ))
    assert_size_stride(arg1144_1, (72, ), (1, ))
    assert_size_stride(arg1145_1, (), ())
    assert_size_stride(arg1146_1, (72, ), (1, ))
    assert_size_stride(arg1147_1, (72, ), (1, ))
    assert_size_stride(arg1148_1, (), ())
    assert_size_stride(arg1149_1, (72, ), (1, ))
    assert_size_stride(arg1150_1, (72, ), (1, ))
    assert_size_stride(arg1151_1, (), ())
    assert_size_stride(arg1152_1, (72, ), (1, ))
    assert_size_stride(arg1153_1, (72, ), (1, ))
    assert_size_stride(arg1154_1, (), ())
    assert_size_stride(arg1155_1, (72, ), (1, ))
    assert_size_stride(arg1156_1, (72, ), (1, ))
    assert_size_stride(arg1157_1, (), ())
    assert_size_stride(arg1158_1, (72, ), (1, ))
    assert_size_stride(arg1159_1, (72, ), (1, ))
    assert_size_stride(arg1160_1, (), ())
    assert_size_stride(arg1161_1, (18, ), (1, ))
    assert_size_stride(arg1162_1, (18, ), (1, ))
    assert_size_stride(arg1163_1, (), ())
    assert_size_stride(arg1164_1, (18, ), (1, ))
    assert_size_stride(arg1165_1, (18, ), (1, ))
    assert_size_stride(arg1166_1, (), ())
    assert_size_stride(arg1167_1, (36, ), (1, ))
    assert_size_stride(arg1168_1, (36, ), (1, ))
    assert_size_stride(arg1169_1, (), ())
    assert_size_stride(arg1170_1, (36, ), (1, ))
    assert_size_stride(arg1171_1, (36, ), (1, ))
    assert_size_stride(arg1172_1, (), ())
    assert_size_stride(arg1173_1, (18, ), (1, ))
    assert_size_stride(arg1174_1, (18, ), (1, ))
    assert_size_stride(arg1175_1, (), ())
    assert_size_stride(arg1176_1, (72, ), (1, ))
    assert_size_stride(arg1177_1, (72, ), (1, ))
    assert_size_stride(arg1178_1, (), ())
    assert_size_stride(arg1179_1, (72, ), (1, ))
    assert_size_stride(arg1180_1, (72, ), (1, ))
    assert_size_stride(arg1181_1, (), ())
    assert_size_stride(arg1182_1, (18, ), (1, ))
    assert_size_stride(arg1183_1, (18, ), (1, ))
    assert_size_stride(arg1184_1, (), ())
    assert_size_stride(arg1185_1, (18, ), (1, ))
    assert_size_stride(arg1186_1, (18, ), (1, ))
    assert_size_stride(arg1187_1, (), ())
    assert_size_stride(arg1188_1, (18, ), (1, ))
    assert_size_stride(arg1189_1, (18, ), (1, ))
    assert_size_stride(arg1190_1, (), ())
    assert_size_stride(arg1191_1, (18, ), (1, ))
    assert_size_stride(arg1192_1, (18, ), (1, ))
    assert_size_stride(arg1193_1, (), ())
    assert_size_stride(arg1194_1, (18, ), (1, ))
    assert_size_stride(arg1195_1, (18, ), (1, ))
    assert_size_stride(arg1196_1, (), ())
    assert_size_stride(arg1197_1, (18, ), (1, ))
    assert_size_stride(arg1198_1, (18, ), (1, ))
    assert_size_stride(arg1199_1, (), ())
    assert_size_stride(arg1200_1, (18, ), (1, ))
    assert_size_stride(arg1201_1, (18, ), (1, ))
    assert_size_stride(arg1202_1, (), ())
    assert_size_stride(arg1203_1, (18, ), (1, ))
    assert_size_stride(arg1204_1, (18, ), (1, ))
    assert_size_stride(arg1205_1, (), ())
    assert_size_stride(arg1206_1, (36, ), (1, ))
    assert_size_stride(arg1207_1, (36, ), (1, ))
    assert_size_stride(arg1208_1, (), ())
    assert_size_stride(arg1209_1, (36, ), (1, ))
    assert_size_stride(arg1210_1, (36, ), (1, ))
    assert_size_stride(arg1211_1, (), ())
    assert_size_stride(arg1212_1, (36, ), (1, ))
    assert_size_stride(arg1213_1, (36, ), (1, ))
    assert_size_stride(arg1214_1, (), ())
    assert_size_stride(arg1215_1, (36, ), (1, ))
    assert_size_stride(arg1216_1, (36, ), (1, ))
    assert_size_stride(arg1217_1, (), ())
    assert_size_stride(arg1218_1, (36, ), (1, ))
    assert_size_stride(arg1219_1, (36, ), (1, ))
    assert_size_stride(arg1220_1, (), ())
    assert_size_stride(arg1221_1, (36, ), (1, ))
    assert_size_stride(arg1222_1, (36, ), (1, ))
    assert_size_stride(arg1223_1, (), ())
    assert_size_stride(arg1224_1, (36, ), (1, ))
    assert_size_stride(arg1225_1, (36, ), (1, ))
    assert_size_stride(arg1226_1, (), ())
    assert_size_stride(arg1227_1, (36, ), (1, ))
    assert_size_stride(arg1228_1, (36, ), (1, ))
    assert_size_stride(arg1229_1, (), ())
    assert_size_stride(arg1230_1, (72, ), (1, ))
    assert_size_stride(arg1231_1, (72, ), (1, ))
    assert_size_stride(arg1232_1, (), ())
    assert_size_stride(arg1233_1, (72, ), (1, ))
    assert_size_stride(arg1234_1, (72, ), (1, ))
    assert_size_stride(arg1235_1, (), ())
    assert_size_stride(arg1236_1, (72, ), (1, ))
    assert_size_stride(arg1237_1, (72, ), (1, ))
    assert_size_stride(arg1238_1, (), ())
    assert_size_stride(arg1239_1, (72, ), (1, ))
    assert_size_stride(arg1240_1, (72, ), (1, ))
    assert_size_stride(arg1241_1, (), ())
    assert_size_stride(arg1242_1, (72, ), (1, ))
    assert_size_stride(arg1243_1, (72, ), (1, ))
    assert_size_stride(arg1244_1, (), ())
    assert_size_stride(arg1245_1, (72, ), (1, ))
    assert_size_stride(arg1246_1, (72, ), (1, ))
    assert_size_stride(arg1247_1, (), ())
    assert_size_stride(arg1248_1, (72, ), (1, ))
    assert_size_stride(arg1249_1, (72, ), (1, ))
    assert_size_stride(arg1250_1, (), ())
    assert_size_stride(arg1251_1, (72, ), (1, ))
    assert_size_stride(arg1252_1, (72, ), (1, ))
    assert_size_stride(arg1253_1, (), ())
    assert_size_stride(arg1254_1, (18, ), (1, ))
    assert_size_stride(arg1255_1, (18, ), (1, ))
    assert_size_stride(arg1256_1, (), ())
    assert_size_stride(arg1257_1, (18, ), (1, ))
    assert_size_stride(arg1258_1, (18, ), (1, ))
    assert_size_stride(arg1259_1, (), ())
    assert_size_stride(arg1260_1, (36, ), (1, ))
    assert_size_stride(arg1261_1, (36, ), (1, ))
    assert_size_stride(arg1262_1, (), ())
    assert_size_stride(arg1263_1, (36, ), (1, ))
    assert_size_stride(arg1264_1, (36, ), (1, ))
    assert_size_stride(arg1265_1, (), ())
    assert_size_stride(arg1266_1, (18, ), (1, ))
    assert_size_stride(arg1267_1, (18, ), (1, ))
    assert_size_stride(arg1268_1, (), ())
    assert_size_stride(arg1269_1, (72, ), (1, ))
    assert_size_stride(arg1270_1, (72, ), (1, ))
    assert_size_stride(arg1271_1, (), ())
    assert_size_stride(arg1272_1, (72, ), (1, ))
    assert_size_stride(arg1273_1, (72, ), (1, ))
    assert_size_stride(arg1274_1, (), ())
    assert_size_stride(arg1275_1, (18, ), (1, ))
    assert_size_stride(arg1276_1, (18, ), (1, ))
    assert_size_stride(arg1277_1, (), ())
    assert_size_stride(arg1278_1, (18, ), (1, ))
    assert_size_stride(arg1279_1, (18, ), (1, ))
    assert_size_stride(arg1280_1, (), ())
    assert_size_stride(arg1281_1, (18, ), (1, ))
    assert_size_stride(arg1282_1, (18, ), (1, ))
    assert_size_stride(arg1283_1, (), ())
    assert_size_stride(arg1284_1, (18, ), (1, ))
    assert_size_stride(arg1285_1, (18, ), (1, ))
    assert_size_stride(arg1286_1, (), ())
    assert_size_stride(arg1287_1, (18, ), (1, ))
    assert_size_stride(arg1288_1, (18, ), (1, ))
    assert_size_stride(arg1289_1, (), ())
    assert_size_stride(arg1290_1, (18, ), (1, ))
    assert_size_stride(arg1291_1, (18, ), (1, ))
    assert_size_stride(arg1292_1, (), ())
    assert_size_stride(arg1293_1, (18, ), (1, ))
    assert_size_stride(arg1294_1, (18, ), (1, ))
    assert_size_stride(arg1295_1, (), ())
    assert_size_stride(arg1296_1, (18, ), (1, ))
    assert_size_stride(arg1297_1, (18, ), (1, ))
    assert_size_stride(arg1298_1, (), ())
    assert_size_stride(arg1299_1, (36, ), (1, ))
    assert_size_stride(arg1300_1, (36, ), (1, ))
    assert_size_stride(arg1301_1, (), ())
    assert_size_stride(arg1302_1, (36, ), (1, ))
    assert_size_stride(arg1303_1, (36, ), (1, ))
    assert_size_stride(arg1304_1, (), ())
    assert_size_stride(arg1305_1, (36, ), (1, ))
    assert_size_stride(arg1306_1, (36, ), (1, ))
    assert_size_stride(arg1307_1, (), ())
    assert_size_stride(arg1308_1, (36, ), (1, ))
    assert_size_stride(arg1309_1, (36, ), (1, ))
    assert_size_stride(arg1310_1, (), ())
    assert_size_stride(arg1311_1, (36, ), (1, ))
    assert_size_stride(arg1312_1, (36, ), (1, ))
    assert_size_stride(arg1313_1, (), ())
    assert_size_stride(arg1314_1, (36, ), (1, ))
    assert_size_stride(arg1315_1, (36, ), (1, ))
    assert_size_stride(arg1316_1, (), ())
    assert_size_stride(arg1317_1, (36, ), (1, ))
    assert_size_stride(arg1318_1, (36, ), (1, ))
    assert_size_stride(arg1319_1, (), ())
    assert_size_stride(arg1320_1, (36, ), (1, ))
    assert_size_stride(arg1321_1, (36, ), (1, ))
    assert_size_stride(arg1322_1, (), ())
    assert_size_stride(arg1323_1, (72, ), (1, ))
    assert_size_stride(arg1324_1, (72, ), (1, ))
    assert_size_stride(arg1325_1, (), ())
    assert_size_stride(arg1326_1, (72, ), (1, ))
    assert_size_stride(arg1327_1, (72, ), (1, ))
    assert_size_stride(arg1328_1, (), ())
    assert_size_stride(arg1329_1, (72, ), (1, ))
    assert_size_stride(arg1330_1, (72, ), (1, ))
    assert_size_stride(arg1331_1, (), ())
    assert_size_stride(arg1332_1, (72, ), (1, ))
    assert_size_stride(arg1333_1, (72, ), (1, ))
    assert_size_stride(arg1334_1, (), ())
    assert_size_stride(arg1335_1, (72, ), (1, ))
    assert_size_stride(arg1336_1, (72, ), (1, ))
    assert_size_stride(arg1337_1, (), ())
    assert_size_stride(arg1338_1, (72, ), (1, ))
    assert_size_stride(arg1339_1, (72, ), (1, ))
    assert_size_stride(arg1340_1, (), ())
    assert_size_stride(arg1341_1, (72, ), (1, ))
    assert_size_stride(arg1342_1, (72, ), (1, ))
    assert_size_stride(arg1343_1, (), ())
    assert_size_stride(arg1344_1, (72, ), (1, ))
    assert_size_stride(arg1345_1, (72, ), (1, ))
    assert_size_stride(arg1346_1, (), ())
    assert_size_stride(arg1347_1, (18, ), (1, ))
    assert_size_stride(arg1348_1, (18, ), (1, ))
    assert_size_stride(arg1349_1, (), ())
    assert_size_stride(arg1350_1, (18, ), (1, ))
    assert_size_stride(arg1351_1, (18, ), (1, ))
    assert_size_stride(arg1352_1, (), ())
    assert_size_stride(arg1353_1, (36, ), (1, ))
    assert_size_stride(arg1354_1, (36, ), (1, ))
    assert_size_stride(arg1355_1, (), ())
    assert_size_stride(arg1356_1, (36, ), (1, ))
    assert_size_stride(arg1357_1, (36, ), (1, ))
    assert_size_stride(arg1358_1, (), ())
    assert_size_stride(arg1359_1, (18, ), (1, ))
    assert_size_stride(arg1360_1, (18, ), (1, ))
    assert_size_stride(arg1361_1, (), ())
    assert_size_stride(arg1362_1, (72, ), (1, ))
    assert_size_stride(arg1363_1, (72, ), (1, ))
    assert_size_stride(arg1364_1, (), ())
    assert_size_stride(arg1365_1, (72, ), (1, ))
    assert_size_stride(arg1366_1, (72, ), (1, ))
    assert_size_stride(arg1367_1, (), ())
    assert_size_stride(arg1368_1, (18, ), (1, ))
    assert_size_stride(arg1369_1, (18, ), (1, ))
    assert_size_stride(arg1370_1, (), ())
    assert_size_stride(arg1371_1, (18, ), (1, ))
    assert_size_stride(arg1372_1, (18, ), (1, ))
    assert_size_stride(arg1373_1, (), ())
    assert_size_stride(arg1374_1, (18, ), (1, ))
    assert_size_stride(arg1375_1, (18, ), (1, ))
    assert_size_stride(arg1376_1, (), ())
    assert_size_stride(arg1377_1, (18, ), (1, ))
    assert_size_stride(arg1378_1, (18, ), (1, ))
    assert_size_stride(arg1379_1, (), ())
    assert_size_stride(arg1380_1, (18, ), (1, ))
    assert_size_stride(arg1381_1, (18, ), (1, ))
    assert_size_stride(arg1382_1, (), ())
    assert_size_stride(arg1383_1, (18, ), (1, ))
    assert_size_stride(arg1384_1, (18, ), (1, ))
    assert_size_stride(arg1385_1, (), ())
    assert_size_stride(arg1386_1, (18, ), (1, ))
    assert_size_stride(arg1387_1, (18, ), (1, ))
    assert_size_stride(arg1388_1, (), ())
    assert_size_stride(arg1389_1, (18, ), (1, ))
    assert_size_stride(arg1390_1, (18, ), (1, ))
    assert_size_stride(arg1391_1, (), ())
    assert_size_stride(arg1392_1, (36, ), (1, ))
    assert_size_stride(arg1393_1, (36, ), (1, ))
    assert_size_stride(arg1394_1, (), ())
    assert_size_stride(arg1395_1, (36, ), (1, ))
    assert_size_stride(arg1396_1, (36, ), (1, ))
    assert_size_stride(arg1397_1, (), ())
    assert_size_stride(arg1398_1, (36, ), (1, ))
    assert_size_stride(arg1399_1, (36, ), (1, ))
    assert_size_stride(arg1400_1, (), ())
    assert_size_stride(arg1401_1, (36, ), (1, ))
    assert_size_stride(arg1402_1, (36, ), (1, ))
    assert_size_stride(arg1403_1, (), ())
    assert_size_stride(arg1404_1, (36, ), (1, ))
    assert_size_stride(arg1405_1, (36, ), (1, ))
    assert_size_stride(arg1406_1, (), ())
    assert_size_stride(arg1407_1, (36, ), (1, ))
    assert_size_stride(arg1408_1, (36, ), (1, ))
    assert_size_stride(arg1409_1, (), ())
    assert_size_stride(arg1410_1, (36, ), (1, ))
    assert_size_stride(arg1411_1, (36, ), (1, ))
    assert_size_stride(arg1412_1, (), ())
    assert_size_stride(arg1413_1, (36, ), (1, ))
    assert_size_stride(arg1414_1, (36, ), (1, ))
    assert_size_stride(arg1415_1, (), ())
    assert_size_stride(arg1416_1, (72, ), (1, ))
    assert_size_stride(arg1417_1, (72, ), (1, ))
    assert_size_stride(arg1418_1, (), ())
    assert_size_stride(arg1419_1, (72, ), (1, ))
    assert_size_stride(arg1420_1, (72, ), (1, ))
    assert_size_stride(arg1421_1, (), ())
    assert_size_stride(arg1422_1, (72, ), (1, ))
    assert_size_stride(arg1423_1, (72, ), (1, ))
    assert_size_stride(arg1424_1, (), ())
    assert_size_stride(arg1425_1, (72, ), (1, ))
    assert_size_stride(arg1426_1, (72, ), (1, ))
    assert_size_stride(arg1427_1, (), ())
    assert_size_stride(arg1428_1, (72, ), (1, ))
    assert_size_stride(arg1429_1, (72, ), (1, ))
    assert_size_stride(arg1430_1, (), ())
    assert_size_stride(arg1431_1, (72, ), (1, ))
    assert_size_stride(arg1432_1, (72, ), (1, ))
    assert_size_stride(arg1433_1, (), ())
    assert_size_stride(arg1434_1, (72, ), (1, ))
    assert_size_stride(arg1435_1, (72, ), (1, ))
    assert_size_stride(arg1436_1, (), ())
    assert_size_stride(arg1437_1, (72, ), (1, ))
    assert_size_stride(arg1438_1, (72, ), (1, ))
    assert_size_stride(arg1439_1, (), ())
    assert_size_stride(arg1440_1, (18, ), (1, ))
    assert_size_stride(arg1441_1, (18, ), (1, ))
    assert_size_stride(arg1442_1, (), ())
    assert_size_stride(arg1443_1, (18, ), (1, ))
    assert_size_stride(arg1444_1, (18, ), (1, ))
    assert_size_stride(arg1445_1, (), ())
    assert_size_stride(arg1446_1, (36, ), (1, ))
    assert_size_stride(arg1447_1, (36, ), (1, ))
    assert_size_stride(arg1448_1, (), ())
    assert_size_stride(arg1449_1, (36, ), (1, ))
    assert_size_stride(arg1450_1, (36, ), (1, ))
    assert_size_stride(arg1451_1, (), ())
    assert_size_stride(arg1452_1, (18, ), (1, ))
    assert_size_stride(arg1453_1, (18, ), (1, ))
    assert_size_stride(arg1454_1, (), ())
    assert_size_stride(arg1455_1, (72, ), (1, ))
    assert_size_stride(arg1456_1, (72, ), (1, ))
    assert_size_stride(arg1457_1, (), ())
    assert_size_stride(arg1458_1, (72, ), (1, ))
    assert_size_stride(arg1459_1, (72, ), (1, ))
    assert_size_stride(arg1460_1, (), ())
    assert_size_stride(arg1461_1, (144, ), (1, ))
    assert_size_stride(arg1462_1, (144, ), (1, ))
    assert_size_stride(arg1463_1, (), ())
    assert_size_stride(arg1464_1, (18, ), (1, ))
    assert_size_stride(arg1465_1, (18, ), (1, ))
    assert_size_stride(arg1466_1, (), ())
    assert_size_stride(arg1467_1, (18, ), (1, ))
    assert_size_stride(arg1468_1, (18, ), (1, ))
    assert_size_stride(arg1469_1, (), ())
    assert_size_stride(arg1470_1, (18, ), (1, ))
    assert_size_stride(arg1471_1, (18, ), (1, ))
    assert_size_stride(arg1472_1, (), ())
    assert_size_stride(arg1473_1, (18, ), (1, ))
    assert_size_stride(arg1474_1, (18, ), (1, ))
    assert_size_stride(arg1475_1, (), ())
    assert_size_stride(arg1476_1, (18, ), (1, ))
    assert_size_stride(arg1477_1, (18, ), (1, ))
    assert_size_stride(arg1478_1, (), ())
    assert_size_stride(arg1479_1, (18, ), (1, ))
    assert_size_stride(arg1480_1, (18, ), (1, ))
    assert_size_stride(arg1481_1, (), ())
    assert_size_stride(arg1482_1, (18, ), (1, ))
    assert_size_stride(arg1483_1, (18, ), (1, ))
    assert_size_stride(arg1484_1, (), ())
    assert_size_stride(arg1485_1, (18, ), (1, ))
    assert_size_stride(arg1486_1, (18, ), (1, ))
    assert_size_stride(arg1487_1, (), ())
    assert_size_stride(arg1488_1, (36, ), (1, ))
    assert_size_stride(arg1489_1, (36, ), (1, ))
    assert_size_stride(arg1490_1, (), ())
    assert_size_stride(arg1491_1, (36, ), (1, ))
    assert_size_stride(arg1492_1, (36, ), (1, ))
    assert_size_stride(arg1493_1, (), ())
    assert_size_stride(arg1494_1, (36, ), (1, ))
    assert_size_stride(arg1495_1, (36, ), (1, ))
    assert_size_stride(arg1496_1, (), ())
    assert_size_stride(arg1497_1, (36, ), (1, ))
    assert_size_stride(arg1498_1, (36, ), (1, ))
    assert_size_stride(arg1499_1, (), ())
    assert_size_stride(arg1500_1, (36, ), (1, ))
    assert_size_stride(arg1501_1, (36, ), (1, ))
    assert_size_stride(arg1502_1, (), ())
    assert_size_stride(arg1503_1, (36, ), (1, ))
    assert_size_stride(arg1504_1, (36, ), (1, ))
    assert_size_stride(arg1505_1, (), ())
    assert_size_stride(arg1506_1, (36, ), (1, ))
    assert_size_stride(arg1507_1, (36, ), (1, ))
    assert_size_stride(arg1508_1, (), ())
    assert_size_stride(arg1509_1, (36, ), (1, ))
    assert_size_stride(arg1510_1, (36, ), (1, ))
    assert_size_stride(arg1511_1, (), ())
    assert_size_stride(arg1512_1, (72, ), (1, ))
    assert_size_stride(arg1513_1, (72, ), (1, ))
    assert_size_stride(arg1514_1, (), ())
    assert_size_stride(arg1515_1, (72, ), (1, ))
    assert_size_stride(arg1516_1, (72, ), (1, ))
    assert_size_stride(arg1517_1, (), ())
    assert_size_stride(arg1518_1, (72, ), (1, ))
    assert_size_stride(arg1519_1, (72, ), (1, ))
    assert_size_stride(arg1520_1, (), ())
    assert_size_stride(arg1521_1, (72, ), (1, ))
    assert_size_stride(arg1522_1, (72, ), (1, ))
    assert_size_stride(arg1523_1, (), ())
    assert_size_stride(arg1524_1, (72, ), (1, ))
    assert_size_stride(arg1525_1, (72, ), (1, ))
    assert_size_stride(arg1526_1, (), ())
    assert_size_stride(arg1527_1, (72, ), (1, ))
    assert_size_stride(arg1528_1, (72, ), (1, ))
    assert_size_stride(arg1529_1, (), ())
    assert_size_stride(arg1530_1, (72, ), (1, ))
    assert_size_stride(arg1531_1, (72, ), (1, ))
    assert_size_stride(arg1532_1, (), ())
    assert_size_stride(arg1533_1, (72, ), (1, ))
    assert_size_stride(arg1534_1, (72, ), (1, ))
    assert_size_stride(arg1535_1, (), ())
    assert_size_stride(arg1536_1, (144, ), (1, ))
    assert_size_stride(arg1537_1, (144, ), (1, ))
    assert_size_stride(arg1538_1, (), ())
    assert_size_stride(arg1539_1, (144, ), (1, ))
    assert_size_stride(arg1540_1, (144, ), (1, ))
    assert_size_stride(arg1541_1, (), ())
    assert_size_stride(arg1542_1, (144, ), (1, ))
    assert_size_stride(arg1543_1, (144, ), (1, ))
    assert_size_stride(arg1544_1, (), ())
    assert_size_stride(arg1545_1, (144, ), (1, ))
    assert_size_stride(arg1546_1, (144, ), (1, ))
    assert_size_stride(arg1547_1, (), ())
    assert_size_stride(arg1548_1, (144, ), (1, ))
    assert_size_stride(arg1549_1, (144, ), (1, ))
    assert_size_stride(arg1550_1, (), ())
    assert_size_stride(arg1551_1, (144, ), (1, ))
    assert_size_stride(arg1552_1, (144, ), (1, ))
    assert_size_stride(arg1553_1, (), ())
    assert_size_stride(arg1554_1, (144, ), (1, ))
    assert_size_stride(arg1555_1, (144, ), (1, ))
    assert_size_stride(arg1556_1, (), ())
    assert_size_stride(arg1557_1, (144, ), (1, ))
    assert_size_stride(arg1558_1, (144, ), (1, ))
    assert_size_stride(arg1559_1, (), ())
    assert_size_stride(arg1560_1, (18, ), (1, ))
    assert_size_stride(arg1561_1, (18, ), (1, ))
    assert_size_stride(arg1562_1, (), ())
    assert_size_stride(arg1563_1, (18, ), (1, ))
    assert_size_stride(arg1564_1, (18, ), (1, ))
    assert_size_stride(arg1565_1, (), ())
    assert_size_stride(arg1566_1, (18, ), (1, ))
    assert_size_stride(arg1567_1, (18, ), (1, ))
    assert_size_stride(arg1568_1, (), ())
    assert_size_stride(arg1569_1, (36, ), (1, ))
    assert_size_stride(arg1570_1, (36, ), (1, ))
    assert_size_stride(arg1571_1, (), ())
    assert_size_stride(arg1572_1, (36, ), (1, ))
    assert_size_stride(arg1573_1, (36, ), (1, ))
    assert_size_stride(arg1574_1, (), ())
    assert_size_stride(arg1575_1, (36, ), (1, ))
    assert_size_stride(arg1576_1, (36, ), (1, ))
    assert_size_stride(arg1577_1, (), ())
    assert_size_stride(arg1578_1, (18, ), (1, ))
    assert_size_stride(arg1579_1, (18, ), (1, ))
    assert_size_stride(arg1580_1, (), ())
    assert_size_stride(arg1581_1, (72, ), (1, ))
    assert_size_stride(arg1582_1, (72, ), (1, ))
    assert_size_stride(arg1583_1, (), ())
    assert_size_stride(arg1584_1, (72, ), (1, ))
    assert_size_stride(arg1585_1, (72, ), (1, ))
    assert_size_stride(arg1586_1, (), ())
    assert_size_stride(arg1587_1, (72, ), (1, ))
    assert_size_stride(arg1588_1, (72, ), (1, ))
    assert_size_stride(arg1589_1, (), ())
    assert_size_stride(arg1590_1, (18, ), (1, ))
    assert_size_stride(arg1591_1, (18, ), (1, ))
    assert_size_stride(arg1592_1, (), ())
    assert_size_stride(arg1593_1, (18, ), (1, ))
    assert_size_stride(arg1594_1, (18, ), (1, ))
    assert_size_stride(arg1595_1, (), ())
    assert_size_stride(arg1596_1, (144, ), (1, ))
    assert_size_stride(arg1597_1, (144, ), (1, ))
    assert_size_stride(arg1598_1, (), ())
    assert_size_stride(arg1599_1, (36, ), (1, ))
    assert_size_stride(arg1600_1, (36, ), (1, ))
    assert_size_stride(arg1601_1, (), ())
    assert_size_stride(arg1602_1, (144, ), (1, ))
    assert_size_stride(arg1603_1, (144, ), (1, ))
    assert_size_stride(arg1604_1, (), ())
    assert_size_stride(arg1605_1, (144, ), (1, ))
    assert_size_stride(arg1606_1, (144, ), (1, ))
    assert_size_stride(arg1607_1, (), ())
    assert_size_stride(arg1608_1, (18, ), (1, ))
    assert_size_stride(arg1609_1, (18, ), (1, ))
    assert_size_stride(arg1610_1, (), ())
    assert_size_stride(arg1611_1, (18, ), (1, ))
    assert_size_stride(arg1612_1, (18, ), (1, ))
    assert_size_stride(arg1613_1, (), ())
    assert_size_stride(arg1614_1, (18, ), (1, ))
    assert_size_stride(arg1615_1, (18, ), (1, ))
    assert_size_stride(arg1616_1, (), ())
    assert_size_stride(arg1617_1, (18, ), (1, ))
    assert_size_stride(arg1618_1, (18, ), (1, ))
    assert_size_stride(arg1619_1, (), ())
    assert_size_stride(arg1620_1, (18, ), (1, ))
    assert_size_stride(arg1621_1, (18, ), (1, ))
    assert_size_stride(arg1622_1, (), ())
    assert_size_stride(arg1623_1, (18, ), (1, ))
    assert_size_stride(arg1624_1, (18, ), (1, ))
    assert_size_stride(arg1625_1, (), ())
    assert_size_stride(arg1626_1, (18, ), (1, ))
    assert_size_stride(arg1627_1, (18, ), (1, ))
    assert_size_stride(arg1628_1, (), ())
    assert_size_stride(arg1629_1, (18, ), (1, ))
    assert_size_stride(arg1630_1, (18, ), (1, ))
    assert_size_stride(arg1631_1, (), ())
    assert_size_stride(arg1632_1, (36, ), (1, ))
    assert_size_stride(arg1633_1, (36, ), (1, ))
    assert_size_stride(arg1634_1, (), ())
    assert_size_stride(arg1635_1, (36, ), (1, ))
    assert_size_stride(arg1636_1, (36, ), (1, ))
    assert_size_stride(arg1637_1, (), ())
    assert_size_stride(arg1638_1, (36, ), (1, ))
    assert_size_stride(arg1639_1, (36, ), (1, ))
    assert_size_stride(arg1640_1, (), ())
    assert_size_stride(arg1641_1, (36, ), (1, ))
    assert_size_stride(arg1642_1, (36, ), (1, ))
    assert_size_stride(arg1643_1, (), ())
    assert_size_stride(arg1644_1, (36, ), (1, ))
    assert_size_stride(arg1645_1, (36, ), (1, ))
    assert_size_stride(arg1646_1, (), ())
    assert_size_stride(arg1647_1, (36, ), (1, ))
    assert_size_stride(arg1648_1, (36, ), (1, ))
    assert_size_stride(arg1649_1, (), ())
    assert_size_stride(arg1650_1, (36, ), (1, ))
    assert_size_stride(arg1651_1, (36, ), (1, ))
    assert_size_stride(arg1652_1, (), ())
    assert_size_stride(arg1653_1, (36, ), (1, ))
    assert_size_stride(arg1654_1, (36, ), (1, ))
    assert_size_stride(arg1655_1, (), ())
    assert_size_stride(arg1656_1, (72, ), (1, ))
    assert_size_stride(arg1657_1, (72, ), (1, ))
    assert_size_stride(arg1658_1, (), ())
    assert_size_stride(arg1659_1, (72, ), (1, ))
    assert_size_stride(arg1660_1, (72, ), (1, ))
    assert_size_stride(arg1661_1, (), ())
    assert_size_stride(arg1662_1, (72, ), (1, ))
    assert_size_stride(arg1663_1, (72, ), (1, ))
    assert_size_stride(arg1664_1, (), ())
    assert_size_stride(arg1665_1, (72, ), (1, ))
    assert_size_stride(arg1666_1, (72, ), (1, ))
    assert_size_stride(arg1667_1, (), ())
    assert_size_stride(arg1668_1, (72, ), (1, ))
    assert_size_stride(arg1669_1, (72, ), (1, ))
    assert_size_stride(arg1670_1, (), ())
    assert_size_stride(arg1671_1, (72, ), (1, ))
    assert_size_stride(arg1672_1, (72, ), (1, ))
    assert_size_stride(arg1673_1, (), ())
    assert_size_stride(arg1674_1, (72, ), (1, ))
    assert_size_stride(arg1675_1, (72, ), (1, ))
    assert_size_stride(arg1676_1, (), ())
    assert_size_stride(arg1677_1, (72, ), (1, ))
    assert_size_stride(arg1678_1, (72, ), (1, ))
    assert_size_stride(arg1679_1, (), ())
    assert_size_stride(arg1680_1, (144, ), (1, ))
    assert_size_stride(arg1681_1, (144, ), (1, ))
    assert_size_stride(arg1682_1, (), ())
    assert_size_stride(arg1683_1, (144, ), (1, ))
    assert_size_stride(arg1684_1, (144, ), (1, ))
    assert_size_stride(arg1685_1, (), ())
    assert_size_stride(arg1686_1, (144, ), (1, ))
    assert_size_stride(arg1687_1, (144, ), (1, ))
    assert_size_stride(arg1688_1, (), ())
    assert_size_stride(arg1689_1, (144, ), (1, ))
    assert_size_stride(arg1690_1, (144, ), (1, ))
    assert_size_stride(arg1691_1, (), ())
    assert_size_stride(arg1692_1, (144, ), (1, ))
    assert_size_stride(arg1693_1, (144, ), (1, ))
    assert_size_stride(arg1694_1, (), ())
    assert_size_stride(arg1695_1, (144, ), (1, ))
    assert_size_stride(arg1696_1, (144, ), (1, ))
    assert_size_stride(arg1697_1, (), ())
    assert_size_stride(arg1698_1, (144, ), (1, ))
    assert_size_stride(arg1699_1, (144, ), (1, ))
    assert_size_stride(arg1700_1, (), ())
    assert_size_stride(arg1701_1, (144, ), (1, ))
    assert_size_stride(arg1702_1, (144, ), (1, ))
    assert_size_stride(arg1703_1, (), ())
    assert_size_stride(arg1704_1, (18, ), (1, ))
    assert_size_stride(arg1705_1, (18, ), (1, ))
    assert_size_stride(arg1706_1, (), ())
    assert_size_stride(arg1707_1, (18, ), (1, ))
    assert_size_stride(arg1708_1, (18, ), (1, ))
    assert_size_stride(arg1709_1, (), ())
    assert_size_stride(arg1710_1, (18, ), (1, ))
    assert_size_stride(arg1711_1, (18, ), (1, ))
    assert_size_stride(arg1712_1, (), ())
    assert_size_stride(arg1713_1, (36, ), (1, ))
    assert_size_stride(arg1714_1, (36, ), (1, ))
    assert_size_stride(arg1715_1, (), ())
    assert_size_stride(arg1716_1, (36, ), (1, ))
    assert_size_stride(arg1717_1, (36, ), (1, ))
    assert_size_stride(arg1718_1, (), ())
    assert_size_stride(arg1719_1, (36, ), (1, ))
    assert_size_stride(arg1720_1, (36, ), (1, ))
    assert_size_stride(arg1721_1, (), ())
    assert_size_stride(arg1722_1, (18, ), (1, ))
    assert_size_stride(arg1723_1, (18, ), (1, ))
    assert_size_stride(arg1724_1, (), ())
    assert_size_stride(arg1725_1, (72, ), (1, ))
    assert_size_stride(arg1726_1, (72, ), (1, ))
    assert_size_stride(arg1727_1, (), ())
    assert_size_stride(arg1728_1, (72, ), (1, ))
    assert_size_stride(arg1729_1, (72, ), (1, ))
    assert_size_stride(arg1730_1, (), ())
    assert_size_stride(arg1731_1, (72, ), (1, ))
    assert_size_stride(arg1732_1, (72, ), (1, ))
    assert_size_stride(arg1733_1, (), ())
    assert_size_stride(arg1734_1, (18, ), (1, ))
    assert_size_stride(arg1735_1, (18, ), (1, ))
    assert_size_stride(arg1736_1, (), ())
    assert_size_stride(arg1737_1, (18, ), (1, ))
    assert_size_stride(arg1738_1, (18, ), (1, ))
    assert_size_stride(arg1739_1, (), ())
    assert_size_stride(arg1740_1, (144, ), (1, ))
    assert_size_stride(arg1741_1, (144, ), (1, ))
    assert_size_stride(arg1742_1, (), ())
    assert_size_stride(arg1743_1, (36, ), (1, ))
    assert_size_stride(arg1744_1, (36, ), (1, ))
    assert_size_stride(arg1745_1, (), ())
    assert_size_stride(arg1746_1, (144, ), (1, ))
    assert_size_stride(arg1747_1, (144, ), (1, ))
    assert_size_stride(arg1748_1, (), ())
    assert_size_stride(arg1749_1, (144, ), (1, ))
    assert_size_stride(arg1750_1, (144, ), (1, ))
    assert_size_stride(arg1751_1, (), ())
    assert_size_stride(arg1752_1, (18, ), (1, ))
    assert_size_stride(arg1753_1, (18, ), (1, ))
    assert_size_stride(arg1754_1, (), ())
    assert_size_stride(arg1755_1, (18, ), (1, ))
    assert_size_stride(arg1756_1, (18, ), (1, ))
    assert_size_stride(arg1757_1, (), ())
    assert_size_stride(arg1758_1, (18, ), (1, ))
    assert_size_stride(arg1759_1, (18, ), (1, ))
    assert_size_stride(arg1760_1, (), ())
    assert_size_stride(arg1761_1, (18, ), (1, ))
    assert_size_stride(arg1762_1, (18, ), (1, ))
    assert_size_stride(arg1763_1, (), ())
    assert_size_stride(arg1764_1, (18, ), (1, ))
    assert_size_stride(arg1765_1, (18, ), (1, ))
    assert_size_stride(arg1766_1, (), ())
    assert_size_stride(arg1767_1, (18, ), (1, ))
    assert_size_stride(arg1768_1, (18, ), (1, ))
    assert_size_stride(arg1769_1, (), ())
    assert_size_stride(arg1770_1, (18, ), (1, ))
    assert_size_stride(arg1771_1, (18, ), (1, ))
    assert_size_stride(arg1772_1, (), ())
    assert_size_stride(arg1773_1, (18, ), (1, ))
    assert_size_stride(arg1774_1, (18, ), (1, ))
    assert_size_stride(arg1775_1, (), ())
    assert_size_stride(arg1776_1, (36, ), (1, ))
    assert_size_stride(arg1777_1, (36, ), (1, ))
    assert_size_stride(arg1778_1, (), ())
    assert_size_stride(arg1779_1, (36, ), (1, ))
    assert_size_stride(arg1780_1, (36, ), (1, ))
    assert_size_stride(arg1781_1, (), ())
    assert_size_stride(arg1782_1, (36, ), (1, ))
    assert_size_stride(arg1783_1, (36, ), (1, ))
    assert_size_stride(arg1784_1, (), ())
    assert_size_stride(arg1785_1, (36, ), (1, ))
    assert_size_stride(arg1786_1, (36, ), (1, ))
    assert_size_stride(arg1787_1, (), ())
    assert_size_stride(arg1788_1, (36, ), (1, ))
    assert_size_stride(arg1789_1, (36, ), (1, ))
    assert_size_stride(arg1790_1, (), ())
    assert_size_stride(arg1791_1, (36, ), (1, ))
    assert_size_stride(arg1792_1, (36, ), (1, ))
    assert_size_stride(arg1793_1, (), ())
    assert_size_stride(arg1794_1, (36, ), (1, ))
    assert_size_stride(arg1795_1, (36, ), (1, ))
    assert_size_stride(arg1796_1, (), ())
    assert_size_stride(arg1797_1, (36, ), (1, ))
    assert_size_stride(arg1798_1, (36, ), (1, ))
    assert_size_stride(arg1799_1, (), ())
    assert_size_stride(arg1800_1, (72, ), (1, ))
    assert_size_stride(arg1801_1, (72, ), (1, ))
    assert_size_stride(arg1802_1, (), ())
    assert_size_stride(arg1803_1, (72, ), (1, ))
    assert_size_stride(arg1804_1, (72, ), (1, ))
    assert_size_stride(arg1805_1, (), ())
    assert_size_stride(arg1806_1, (72, ), (1, ))
    assert_size_stride(arg1807_1, (72, ), (1, ))
    assert_size_stride(arg1808_1, (), ())
    assert_size_stride(arg1809_1, (72, ), (1, ))
    assert_size_stride(arg1810_1, (72, ), (1, ))
    assert_size_stride(arg1811_1, (), ())
    assert_size_stride(arg1812_1, (72, ), (1, ))
    assert_size_stride(arg1813_1, (72, ), (1, ))
    assert_size_stride(arg1814_1, (), ())
    assert_size_stride(arg1815_1, (72, ), (1, ))
    assert_size_stride(arg1816_1, (72, ), (1, ))
    assert_size_stride(arg1817_1, (), ())
    assert_size_stride(arg1818_1, (72, ), (1, ))
    assert_size_stride(arg1819_1, (72, ), (1, ))
    assert_size_stride(arg1820_1, (), ())
    assert_size_stride(arg1821_1, (72, ), (1, ))
    assert_size_stride(arg1822_1, (72, ), (1, ))
    assert_size_stride(arg1823_1, (), ())
    assert_size_stride(arg1824_1, (144, ), (1, ))
    assert_size_stride(arg1825_1, (144, ), (1, ))
    assert_size_stride(arg1826_1, (), ())
    assert_size_stride(arg1827_1, (144, ), (1, ))
    assert_size_stride(arg1828_1, (144, ), (1, ))
    assert_size_stride(arg1829_1, (), ())
    assert_size_stride(arg1830_1, (144, ), (1, ))
    assert_size_stride(arg1831_1, (144, ), (1, ))
    assert_size_stride(arg1832_1, (), ())
    assert_size_stride(arg1833_1, (144, ), (1, ))
    assert_size_stride(arg1834_1, (144, ), (1, ))
    assert_size_stride(arg1835_1, (), ())
    assert_size_stride(arg1836_1, (144, ), (1, ))
    assert_size_stride(arg1837_1, (144, ), (1, ))
    assert_size_stride(arg1838_1, (), ())
    assert_size_stride(arg1839_1, (144, ), (1, ))
    assert_size_stride(arg1840_1, (144, ), (1, ))
    assert_size_stride(arg1841_1, (), ())
    assert_size_stride(arg1842_1, (144, ), (1, ))
    assert_size_stride(arg1843_1, (144, ), (1, ))
    assert_size_stride(arg1844_1, (), ())
    assert_size_stride(arg1845_1, (144, ), (1, ))
    assert_size_stride(arg1846_1, (144, ), (1, ))
    assert_size_stride(arg1847_1, (), ())
    assert_size_stride(arg1848_1, (18, ), (1, ))
    assert_size_stride(arg1849_1, (18, ), (1, ))
    assert_size_stride(arg1850_1, (), ())
    assert_size_stride(arg1851_1, (18, ), (1, ))
    assert_size_stride(arg1852_1, (18, ), (1, ))
    assert_size_stride(arg1853_1, (), ())
    assert_size_stride(arg1854_1, (18, ), (1, ))
    assert_size_stride(arg1855_1, (18, ), (1, ))
    assert_size_stride(arg1856_1, (), ())
    assert_size_stride(arg1857_1, (36, ), (1, ))
    assert_size_stride(arg1858_1, (36, ), (1, ))
    assert_size_stride(arg1859_1, (), ())
    assert_size_stride(arg1860_1, (36, ), (1, ))
    assert_size_stride(arg1861_1, (36, ), (1, ))
    assert_size_stride(arg1862_1, (), ())
    assert_size_stride(arg1863_1, (36, ), (1, ))
    assert_size_stride(arg1864_1, (36, ), (1, ))
    assert_size_stride(arg1865_1, (), ())
    assert_size_stride(arg1866_1, (18, ), (1, ))
    assert_size_stride(arg1867_1, (18, ), (1, ))
    assert_size_stride(arg1868_1, (), ())
    assert_size_stride(arg1869_1, (72, ), (1, ))
    assert_size_stride(arg1870_1, (72, ), (1, ))
    assert_size_stride(arg1871_1, (), ())
    assert_size_stride(arg1872_1, (72, ), (1, ))
    assert_size_stride(arg1873_1, (72, ), (1, ))
    assert_size_stride(arg1874_1, (), ())
    assert_size_stride(arg1875_1, (72, ), (1, ))
    assert_size_stride(arg1876_1, (72, ), (1, ))
    assert_size_stride(arg1877_1, (), ())
    assert_size_stride(arg1878_1, (18, ), (1, ))
    assert_size_stride(arg1879_1, (18, ), (1, ))
    assert_size_stride(arg1880_1, (), ())
    assert_size_stride(arg1881_1, (18, ), (1, ))
    assert_size_stride(arg1882_1, (18, ), (1, ))
    assert_size_stride(arg1883_1, (), ())
    assert_size_stride(arg1884_1, (144, ), (1, ))
    assert_size_stride(arg1885_1, (144, ), (1, ))
    assert_size_stride(arg1886_1, (), ())
    assert_size_stride(arg1887_1, (36, ), (1, ))
    assert_size_stride(arg1888_1, (36, ), (1, ))
    assert_size_stride(arg1889_1, (), ())
    assert_size_stride(arg1890_1, (144, ), (1, ))
    assert_size_stride(arg1891_1, (144, ), (1, ))
    assert_size_stride(arg1892_1, (), ())
    assert_size_stride(arg1893_1, (144, ), (1, ))
    assert_size_stride(arg1894_1, (144, ), (1, ))
    assert_size_stride(arg1895_1, (), ())
    assert_size_stride(arg1896_1, (32, ), (1, ))
    assert_size_stride(arg1897_1, (32, ), (1, ))
    assert_size_stride(arg1898_1, (), ())
    assert_size_stride(arg1899_1, (32, ), (1, ))
    assert_size_stride(arg1900_1, (32, ), (1, ))
    assert_size_stride(arg1901_1, (), ())
    assert_size_stride(arg1902_1, (128, ), (1, ))
    assert_size_stride(arg1903_1, (128, ), (1, ))
    assert_size_stride(arg1904_1, (), ())
    assert_size_stride(arg1905_1, (128, ), (1, ))
    assert_size_stride(arg1906_1, (128, ), (1, ))
    assert_size_stride(arg1907_1, (), ())
    assert_size_stride(arg1908_1, (64, ), (1, ))
    assert_size_stride(arg1909_1, (64, ), (1, ))
    assert_size_stride(arg1910_1, (), ())
    assert_size_stride(arg1911_1, (64, ), (1, ))
    assert_size_stride(arg1912_1, (64, ), (1, ))
    assert_size_stride(arg1913_1, (), ())
    assert_size_stride(arg1914_1, (256, ), (1, ))
    assert_size_stride(arg1915_1, (256, ), (1, ))
    assert_size_stride(arg1916_1, (), ())
    assert_size_stride(arg1917_1, (256, ), (1, ))
    assert_size_stride(arg1918_1, (256, ), (1, ))
    assert_size_stride(arg1919_1, (), ())
    assert_size_stride(arg1920_1, (256, ), (1, ))
    assert_size_stride(arg1921_1, (256, ), (1, ))
    assert_size_stride(arg1922_1, (), ())
    assert_size_stride(arg1923_1, (128, ), (1, ))
    assert_size_stride(arg1924_1, (128, ), (1, ))
    assert_size_stride(arg1925_1, (), ())
    assert_size_stride(arg1926_1, (128, ), (1, ))
    assert_size_stride(arg1927_1, (128, ), (1, ))
    assert_size_stride(arg1928_1, (), ())
    assert_size_stride(arg1929_1, (512, ), (1, ))
    assert_size_stride(arg1930_1, (512, ), (1, ))
    assert_size_stride(arg1931_1, (), ())
    assert_size_stride(arg1932_1, (512, ), (1, ))
    assert_size_stride(arg1933_1, (512, ), (1, ))
    assert_size_stride(arg1934_1, (), ())
    assert_size_stride(arg1935_1, (512, ), (1, ))
    assert_size_stride(arg1936_1, (512, ), (1, ))
    assert_size_stride(arg1937_1, (), ())
    assert_size_stride(arg1938_1, (256, ), (1, ))
    assert_size_stride(arg1939_1, (256, ), (1, ))
    assert_size_stride(arg1940_1, (), ())
    assert_size_stride(arg1941_1, (256, ), (1, ))
    assert_size_stride(arg1942_1, (256, ), (1, ))
    assert_size_stride(arg1943_1, (), ())
    assert_size_stride(arg1944_1, (1024, ), (1, ))
    assert_size_stride(arg1945_1, (1024, ), (1, ))
    assert_size_stride(arg1946_1, (), ())
    assert_size_stride(arg1947_1, (1024, ), (1, ))
    assert_size_stride(arg1948_1, (1024, ), (1, ))
    assert_size_stride(arg1949_1, (), ())
    assert_size_stride(arg1950_1, (1024, ), (1, ))
    assert_size_stride(arg1951_1, (1024, ), (1, ))
    assert_size_stride(arg1952_1, (), ())
    assert_size_stride(arg1953_1, (2048, ), (1, ))
    assert_size_stride(arg1954_1, (2048, ), (1, ))
    assert_size_stride(arg1955_1, (), ())
    assert_size_stride(arg1956_1, (8, 3, 224, 224), (150528, 50176, 224, 1))
    buf0 = empty_strided((8, 3, 224, 224), (150528, 1, 672, 3), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((64, 3, 3, 3), (27, 1, 9, 3), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_0(c_void_p(arg1956_1.data_ptr()), c_void_p(arg0_1.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    del arg0_1
    del arg1956_1
    # Source Nodes: [x], Original ATen: [aten.convolution]
    buf2 = extern_kernels.convolution(buf0, buf1, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf2, (8, 64, 112, 112), (802816, 1, 7168, 64))
    del buf0
    del buf1
    buf3 = buf2; del buf2  # reuse
    buf4 = empty_strided((64, 64, 3, 3), (576, 1, 192, 64), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_1(c_void_p(buf3.data_ptr()), c_void_p(arg981_1.data_ptr()), c_void_p(arg982_1.data_ptr()), c_void_p(arg1_1.data_ptr()), c_void_p(arg2_1.data_ptr()), c_void_p(arg3_1.data_ptr()), c_void_p(buf4.data_ptr()))
    del arg1_1
    del arg2_1
    del arg3_1
    del arg981_1
    del arg982_1
    # Source Nodes: [x_1, x_2, x_3], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf5 = extern_kernels.convolution(buf3, buf4, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf5, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del buf3
    buf6 = buf5; del buf5  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_2(c_void_p(buf6.data_ptr()), c_void_p(arg984_1.data_ptr()), c_void_p(arg985_1.data_ptr()), c_void_p(arg4_1.data_ptr()), c_void_p(arg5_1.data_ptr()))
    del arg4_1
    del arg5_1
    del arg984_1
    del arg985_1
    # Source Nodes: [x_6], Original ATen: [aten.convolution]
    buf7 = extern_kernels.convolution(buf6, arg6_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf7, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del arg6_1
    buf8 = buf7; del buf7  # reuse
    buf9 = buf4; del buf4  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_3(c_void_p(buf8.data_ptr()), c_void_p(arg987_1.data_ptr()), c_void_p(arg988_1.data_ptr()), c_void_p(arg7_1.data_ptr()), c_void_p(arg8_1.data_ptr()), c_void_p(arg9_1.data_ptr()), c_void_p(buf9.data_ptr()))
    del arg7_1
    del arg8_1
    del arg987_1
    del arg988_1
    del arg9_1
    # Source Nodes: [x_7, x_8, x_9], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf10 = extern_kernels.convolution(buf8, buf9, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf10, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del buf8
    buf11 = buf10; del buf10  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_4(c_void_p(buf11.data_ptr()), c_void_p(arg990_1.data_ptr()), c_void_p(arg991_1.data_ptr()), c_void_p(arg10_1.data_ptr()), c_void_p(arg11_1.data_ptr()))
    del arg10_1
    del arg11_1
    del arg990_1
    del arg991_1
    # Source Nodes: [x_10, x_12, x_14], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf12 = extern_kernels.convolution(buf11, arg12_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf12, (8, 256, 56, 56), (802816, 1, 14336, 256))
    del arg12_1
    del buf11
    # Source Nodes: [getattr_l__mod___layer1___0___downsample_0], Original ATen: [aten.convolution]
    buf13 = extern_kernels.convolution(buf6, arg15_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf13, (8, 256, 56, 56), (802816, 1, 14336, 256))
    del arg15_1
    del buf6
    buf14 = buf12; del buf12  # reuse
    buf15 = buf14; del buf14  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_5(c_void_p(buf15.data_ptr()), c_void_p(arg993_1.data_ptr()), c_void_p(arg994_1.data_ptr()), c_void_p(arg13_1.data_ptr()), c_void_p(arg14_1.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(arg996_1.data_ptr()), c_void_p(arg997_1.data_ptr()), c_void_p(arg16_1.data_ptr()), c_void_p(arg17_1.data_ptr()))
    del arg13_1
    del arg14_1
    del arg16_1
    del arg17_1
    del arg993_1
    del arg994_1
    del arg996_1
    del arg997_1
    del buf13
    # Source Nodes: [shortcut_2, x_18], Original ATen: [aten.convolution, aten.relu]
    buf16 = extern_kernels.convolution(buf15, arg18_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf16, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del arg18_1
    buf17 = buf16; del buf16  # reuse
    buf18 = buf9; del buf9  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_6(c_void_p(buf17.data_ptr()), c_void_p(arg999_1.data_ptr()), c_void_p(arg1000_1.data_ptr()), c_void_p(arg19_1.data_ptr()), c_void_p(arg20_1.data_ptr()), c_void_p(arg21_1.data_ptr()), c_void_p(buf18.data_ptr()))
    del arg1000_1
    del arg19_1
    del arg20_1
    del arg21_1
    del arg999_1
    # Source Nodes: [x_19, x_20, x_21], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf19 = extern_kernels.convolution(buf17, buf18, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf19, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del buf17
    buf20 = buf19; del buf19  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_7(c_void_p(buf20.data_ptr()), c_void_p(arg1002_1.data_ptr()), c_void_p(arg1003_1.data_ptr()), c_void_p(arg22_1.data_ptr()), c_void_p(arg23_1.data_ptr()))
    del arg1002_1
    del arg1003_1
    del arg22_1
    del arg23_1
    # Source Nodes: [x_22, x_24, x_26], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf21 = extern_kernels.convolution(buf20, arg24_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf21, (8, 256, 56, 56), (802816, 1, 14336, 256))
    del arg24_1
    del buf20
    buf22 = buf15; del buf15  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_8(c_void_p(buf22.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(arg1005_1.data_ptr()), c_void_p(arg1006_1.data_ptr()), c_void_p(arg25_1.data_ptr()), c_void_p(arg26_1.data_ptr()))
    del arg1005_1
    del arg1006_1
    del arg25_1
    del arg26_1
    del buf21
    # Source Nodes: [x_30], Original ATen: [aten.convolution]
    buf23 = extern_kernels.convolution(buf22, arg27_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf23, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del arg27_1
    buf24 = buf23; del buf23  # reuse
    buf25 = buf18; del buf18  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_9(c_void_p(buf24.data_ptr()), c_void_p(arg1008_1.data_ptr()), c_void_p(arg1009_1.data_ptr()), c_void_p(arg28_1.data_ptr()), c_void_p(arg29_1.data_ptr()), c_void_p(arg30_1.data_ptr()), c_void_p(buf25.data_ptr()))
    del arg1008_1
    del arg1009_1
    del arg28_1
    del arg29_1
    del arg30_1
    # Source Nodes: [x_31, x_32, x_33], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf26 = extern_kernels.convolution(buf24, buf25, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf26, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del buf24
    buf27 = buf26; del buf26  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_10(c_void_p(buf27.data_ptr()), c_void_p(arg1011_1.data_ptr()), c_void_p(arg1012_1.data_ptr()), c_void_p(arg31_1.data_ptr()), c_void_p(arg32_1.data_ptr()))
    del arg1011_1
    del arg1012_1
    del arg31_1
    del arg32_1
    # Source Nodes: [x_34, x_36, x_38], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf28 = extern_kernels.convolution(buf27, arg33_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf28, (8, 256, 56, 56), (802816, 1, 14336, 256))
    del arg33_1
    del buf27
    buf29 = buf22; del buf22  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_11(c_void_p(buf29.data_ptr()), c_void_p(buf28.data_ptr()), c_void_p(arg1014_1.data_ptr()), c_void_p(arg1015_1.data_ptr()), c_void_p(arg34_1.data_ptr()), c_void_p(arg35_1.data_ptr()))
    del arg1014_1
    del arg1015_1
    del arg34_1
    del arg35_1
    del buf28
    # Source Nodes: [x_42], Original ATen: [aten.convolution]
    buf30 = extern_kernels.convolution(buf29, arg36_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf30, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del arg36_1
    buf31 = buf30; del buf30  # reuse
    buf32 = buf25; del buf25  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_12(c_void_p(buf31.data_ptr()), c_void_p(arg1017_1.data_ptr()), c_void_p(arg1018_1.data_ptr()), c_void_p(arg37_1.data_ptr()), c_void_p(arg38_1.data_ptr()), c_void_p(arg39_1.data_ptr()), c_void_p(buf32.data_ptr()))
    del arg1017_1
    del arg1018_1
    del arg37_1
    del arg38_1
    del arg39_1
    # Source Nodes: [x_43, x_44, x_45], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf33 = extern_kernels.convolution(buf31, buf32, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf33, (8, 64, 56, 56), (200704, 1, 3584, 64))
    del buf31
    buf34 = buf33; del buf33  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_13(c_void_p(buf34.data_ptr()), c_void_p(arg1020_1.data_ptr()), c_void_p(arg1021_1.data_ptr()), c_void_p(arg40_1.data_ptr()), c_void_p(arg41_1.data_ptr()))
    del arg1020_1
    del arg1021_1
    del arg40_1
    del arg41_1
    # Source Nodes: [x_46, x_48, x_50], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf35 = extern_kernels.convolution(buf34, arg42_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf35, (8, 256, 56, 56), (802816, 1, 14336, 256))
    del arg42_1
    del buf34
    buf36 = buf29; del buf29  # reuse
    buf37 = empty_strided((18, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_14(c_void_p(buf36.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(arg1023_1.data_ptr()), c_void_p(arg1024_1.data_ptr()), c_void_p(arg43_1.data_ptr()), c_void_p(arg44_1.data_ptr()), c_void_p(arg45_1.data_ptr()), c_void_p(buf37.data_ptr()))
    del arg1023_1
    del arg1024_1
    del arg43_1
    del arg44_1
    del arg45_1
    del buf35
    # Source Nodes: [l__mod___transition1_0_0], Original ATen: [aten.convolution]
    buf38 = extern_kernels.convolution(buf36, buf37, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf38, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf37
    buf39 = buf38; del buf38  # reuse
    buf40 = empty_strided((18, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_15(c_void_p(buf39.data_ptr()), c_void_p(arg1026_1.data_ptr()), c_void_p(arg1027_1.data_ptr()), c_void_p(arg46_1.data_ptr()), c_void_p(arg47_1.data_ptr()), c_void_p(arg51_1.data_ptr()), c_void_p(buf40.data_ptr()))
    del arg1026_1
    del arg1027_1
    del arg46_1
    del arg47_1
    del arg51_1
    # Source Nodes: [x_54], Original ATen: [aten.convolution]
    buf41 = extern_kernels.convolution(buf39, buf40, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf41, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf42 = buf41; del buf41  # reuse
    buf43 = buf40; del buf40  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_16(c_void_p(buf42.data_ptr()), c_void_p(arg1032_1.data_ptr()), c_void_p(arg1033_1.data_ptr()), c_void_p(arg52_1.data_ptr()), c_void_p(arg53_1.data_ptr()), c_void_p(arg54_1.data_ptr()), c_void_p(buf43.data_ptr()))
    del arg1032_1
    del arg1033_1
    del arg52_1
    del arg53_1
    del arg54_1
    # Source Nodes: [x_55, x_57, x_59], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf44 = extern_kernels.convolution(buf42, buf43, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf44, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf42
    buf45 = buf39; del buf39  # reuse
    buf46 = buf43; del buf43  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_17(c_void_p(buf45.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(arg1035_1.data_ptr()), c_void_p(arg1036_1.data_ptr()), c_void_p(arg55_1.data_ptr()), c_void_p(arg56_1.data_ptr()), c_void_p(arg57_1.data_ptr()), c_void_p(buf46.data_ptr()))
    del arg1035_1
    del arg1036_1
    del arg55_1
    del arg56_1
    del arg57_1
    del buf44
    # Source Nodes: [x_63], Original ATen: [aten.convolution]
    buf47 = extern_kernels.convolution(buf45, buf46, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf47, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf48 = buf47; del buf47  # reuse
    buf49 = buf46; del buf46  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_18(c_void_p(buf48.data_ptr()), c_void_p(arg1038_1.data_ptr()), c_void_p(arg1039_1.data_ptr()), c_void_p(arg58_1.data_ptr()), c_void_p(arg59_1.data_ptr()), c_void_p(arg60_1.data_ptr()), c_void_p(buf49.data_ptr()))
    del arg1038_1
    del arg1039_1
    del arg58_1
    del arg59_1
    del arg60_1
    # Source Nodes: [x_64, x_66, x_68], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf50 = extern_kernels.convolution(buf48, buf49, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf50, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf48
    buf51 = buf45; del buf45  # reuse
    buf52 = buf49; del buf49  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_19(c_void_p(buf51.data_ptr()), c_void_p(buf50.data_ptr()), c_void_p(arg1041_1.data_ptr()), c_void_p(arg1042_1.data_ptr()), c_void_p(arg61_1.data_ptr()), c_void_p(arg62_1.data_ptr()), c_void_p(arg63_1.data_ptr()), c_void_p(buf52.data_ptr()))
    del arg1041_1
    del arg1042_1
    del arg61_1
    del arg62_1
    del arg63_1
    del buf50
    # Source Nodes: [x_72], Original ATen: [aten.convolution]
    buf53 = extern_kernels.convolution(buf51, buf52, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf53, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf54 = buf53; del buf53  # reuse
    buf55 = buf52; del buf52  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_20(c_void_p(buf54.data_ptr()), c_void_p(arg1044_1.data_ptr()), c_void_p(arg1045_1.data_ptr()), c_void_p(arg64_1.data_ptr()), c_void_p(arg65_1.data_ptr()), c_void_p(arg66_1.data_ptr()), c_void_p(buf55.data_ptr()))
    del arg1044_1
    del arg1045_1
    del arg64_1
    del arg65_1
    del arg66_1
    # Source Nodes: [x_73, x_75, x_77], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf56 = extern_kernels.convolution(buf54, buf55, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf56, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf54
    buf57 = buf51; del buf51  # reuse
    buf58 = buf55; del buf55  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_21(c_void_p(buf57.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(arg1047_1.data_ptr()), c_void_p(arg1048_1.data_ptr()), c_void_p(arg67_1.data_ptr()), c_void_p(arg68_1.data_ptr()), c_void_p(arg69_1.data_ptr()), c_void_p(buf58.data_ptr()))
    del arg1047_1
    del arg1048_1
    del arg67_1
    del arg68_1
    del arg69_1
    del buf56
    # Source Nodes: [x_81], Original ATen: [aten.convolution]
    buf59 = extern_kernels.convolution(buf57, buf58, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf59, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf60 = buf59; del buf59  # reuse
    buf61 = buf58; del buf58  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_22(c_void_p(buf60.data_ptr()), c_void_p(arg1050_1.data_ptr()), c_void_p(arg1051_1.data_ptr()), c_void_p(arg70_1.data_ptr()), c_void_p(arg71_1.data_ptr()), c_void_p(arg72_1.data_ptr()), c_void_p(buf61.data_ptr()))
    del arg1050_1
    del arg1051_1
    del arg70_1
    del arg71_1
    del arg72_1
    # Source Nodes: [x_82, x_84, x_86], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf62 = extern_kernels.convolution(buf60, buf61, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf62, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf60
    buf63 = buf57; del buf57  # reuse
    buf64 = empty_strided((36, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_23(c_void_p(buf63.data_ptr()), c_void_p(buf62.data_ptr()), c_void_p(arg1053_1.data_ptr()), c_void_p(arg1054_1.data_ptr()), c_void_p(arg73_1.data_ptr()), c_void_p(arg74_1.data_ptr()), c_void_p(arg48_1.data_ptr()), c_void_p(buf64.data_ptr()))
    del arg1053_1
    del arg1054_1
    del arg48_1
    del arg73_1
    del arg74_1
    del buf62
    # Source Nodes: [l__mod___transition1_1_0_0], Original ATen: [aten.convolution]
    buf65 = extern_kernels.convolution(buf36, buf64, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf65, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf36
    del buf64
    buf66 = buf65; del buf65  # reuse
    buf67 = empty_strided((36, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_24(c_void_p(buf66.data_ptr()), c_void_p(arg1029_1.data_ptr()), c_void_p(arg1030_1.data_ptr()), c_void_p(arg49_1.data_ptr()), c_void_p(arg50_1.data_ptr()), c_void_p(arg75_1.data_ptr()), c_void_p(buf67.data_ptr()))
    del arg1029_1
    del arg1030_1
    del arg49_1
    del arg50_1
    del arg75_1
    # Source Nodes: [x_90], Original ATen: [aten.convolution]
    buf68 = extern_kernels.convolution(buf66, buf67, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf68, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf69 = buf68; del buf68  # reuse
    buf70 = buf67; del buf67  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_25(c_void_p(buf69.data_ptr()), c_void_p(arg1056_1.data_ptr()), c_void_p(arg1057_1.data_ptr()), c_void_p(arg76_1.data_ptr()), c_void_p(arg77_1.data_ptr()), c_void_p(arg78_1.data_ptr()), c_void_p(buf70.data_ptr()))
    del arg1056_1
    del arg1057_1
    del arg76_1
    del arg77_1
    del arg78_1
    # Source Nodes: [x_91, x_93, x_95], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf71 = extern_kernels.convolution(buf69, buf70, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf71, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf69
    buf72 = buf66; del buf66  # reuse
    buf73 = buf70; del buf70  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_26(c_void_p(buf72.data_ptr()), c_void_p(buf71.data_ptr()), c_void_p(arg1059_1.data_ptr()), c_void_p(arg1060_1.data_ptr()), c_void_p(arg79_1.data_ptr()), c_void_p(arg80_1.data_ptr()), c_void_p(arg81_1.data_ptr()), c_void_p(buf73.data_ptr()))
    del arg1059_1
    del arg1060_1
    del arg79_1
    del arg80_1
    del arg81_1
    del buf71
    # Source Nodes: [x_99], Original ATen: [aten.convolution]
    buf74 = extern_kernels.convolution(buf72, buf73, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf74, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf75 = buf74; del buf74  # reuse
    buf76 = buf73; del buf73  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_27(c_void_p(buf75.data_ptr()), c_void_p(arg1062_1.data_ptr()), c_void_p(arg1063_1.data_ptr()), c_void_p(arg82_1.data_ptr()), c_void_p(arg83_1.data_ptr()), c_void_p(arg84_1.data_ptr()), c_void_p(buf76.data_ptr()))
    del arg1062_1
    del arg1063_1
    del arg82_1
    del arg83_1
    del arg84_1
    # Source Nodes: [x_100, x_102, x_104], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf77 = extern_kernels.convolution(buf75, buf76, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf77, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf75
    buf78 = buf72; del buf72  # reuse
    buf79 = buf76; del buf76  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_28(c_void_p(buf78.data_ptr()), c_void_p(buf77.data_ptr()), c_void_p(arg1065_1.data_ptr()), c_void_p(arg1066_1.data_ptr()), c_void_p(arg85_1.data_ptr()), c_void_p(arg86_1.data_ptr()), c_void_p(arg87_1.data_ptr()), c_void_p(buf79.data_ptr()))
    del arg1065_1
    del arg1066_1
    del arg85_1
    del arg86_1
    del arg87_1
    del buf77
    # Source Nodes: [x_108], Original ATen: [aten.convolution]
    buf80 = extern_kernels.convolution(buf78, buf79, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf80, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf81 = buf80; del buf80  # reuse
    buf82 = buf79; del buf79  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_29(c_void_p(buf81.data_ptr()), c_void_p(arg1068_1.data_ptr()), c_void_p(arg1069_1.data_ptr()), c_void_p(arg88_1.data_ptr()), c_void_p(arg89_1.data_ptr()), c_void_p(arg90_1.data_ptr()), c_void_p(buf82.data_ptr()))
    del arg1068_1
    del arg1069_1
    del arg88_1
    del arg89_1
    del arg90_1
    # Source Nodes: [x_109, x_111, x_113], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf83 = extern_kernels.convolution(buf81, buf82, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf83, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf81
    buf84 = buf78; del buf78  # reuse
    buf85 = buf82; del buf82  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_30(c_void_p(buf84.data_ptr()), c_void_p(buf83.data_ptr()), c_void_p(arg1071_1.data_ptr()), c_void_p(arg1072_1.data_ptr()), c_void_p(arg91_1.data_ptr()), c_void_p(arg92_1.data_ptr()), c_void_p(arg93_1.data_ptr()), c_void_p(buf85.data_ptr()))
    del arg1071_1
    del arg1072_1
    del arg91_1
    del arg92_1
    del arg93_1
    del buf83
    # Source Nodes: [x_117], Original ATen: [aten.convolution]
    buf86 = extern_kernels.convolution(buf84, buf85, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf86, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf87 = buf86; del buf86  # reuse
    buf88 = buf85; del buf85  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_31(c_void_p(buf87.data_ptr()), c_void_p(arg1074_1.data_ptr()), c_void_p(arg1075_1.data_ptr()), c_void_p(arg94_1.data_ptr()), c_void_p(arg95_1.data_ptr()), c_void_p(arg96_1.data_ptr()), c_void_p(buf88.data_ptr()))
    del arg1074_1
    del arg1075_1
    del arg94_1
    del arg95_1
    del arg96_1
    # Source Nodes: [x_118, x_120, x_122], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf89 = extern_kernels.convolution(buf87, buf88, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf89, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf87
    buf117 = empty_strided((36, 18, 3, 3), (162, 1, 54, 18), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_32(c_void_p(arg102_1.data_ptr()), c_void_p(buf117.data_ptr()))
    del arg102_1
    # Source Nodes: [l__mod___stage2_0_fuse_layers_1_0_0_0], Original ATen: [aten.convolution]
    buf118 = extern_kernels.convolution(buf63, buf117, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf118, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf90 = buf84; del buf84  # reuse
    buf119 = buf118; del buf118  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_33(c_void_p(buf90.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(buf89.data_ptr()), c_void_p(arg1077_1.data_ptr()), c_void_p(arg1078_1.data_ptr()), c_void_p(arg97_1.data_ptr()), c_void_p(arg98_1.data_ptr()), c_void_p(arg1083_1.data_ptr()), c_void_p(arg1084_1.data_ptr()), c_void_p(arg103_1.data_ptr()), c_void_p(arg104_1.data_ptr()))
    del arg103_1
    del arg104_1
    del arg1077_1
    del arg1078_1
    del arg1083_1
    del arg1084_1
    del arg97_1
    del arg98_1
    del buf89
    # Source Nodes: [l__mod___stage2_0_fuse_layers_0_1_0], Original ATen: [aten.convolution]
    buf91 = extern_kernels.convolution(buf90, arg99_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf91, (8, 18, 28, 28), (14112, 1, 504, 18))
    del arg99_1
    del buf90
    buf92 = buf63; del buf63  # reuse
    buf93 = buf61; del buf61  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_34(c_void_p(buf92.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(arg1080_1.data_ptr()), c_void_p(arg1081_1.data_ptr()), c_void_p(arg100_1.data_ptr()), c_void_p(arg101_1.data_ptr()), c_void_p(arg108_1.data_ptr()), c_void_p(buf93.data_ptr()))
    del arg100_1
    del arg101_1
    del arg1080_1
    del arg1081_1
    del arg108_1
    del buf91
    # Source Nodes: [x_126], Original ATen: [aten.convolution]
    buf94 = extern_kernels.convolution(buf92, buf93, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf94, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf95 = buf94; del buf94  # reuse
    buf96 = buf93; del buf93  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_35(c_void_p(buf95.data_ptr()), c_void_p(arg1089_1.data_ptr()), c_void_p(arg1090_1.data_ptr()), c_void_p(arg109_1.data_ptr()), c_void_p(arg110_1.data_ptr()), c_void_p(arg111_1.data_ptr()), c_void_p(buf96.data_ptr()))
    del arg1089_1
    del arg1090_1
    del arg109_1
    del arg110_1
    del arg111_1
    # Source Nodes: [x_127, x_129, x_131], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf97 = extern_kernels.convolution(buf95, buf96, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf97, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf95
    buf98 = buf92; del buf92  # reuse
    buf99 = buf96; del buf96  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_36(c_void_p(buf98.data_ptr()), c_void_p(buf97.data_ptr()), c_void_p(arg1092_1.data_ptr()), c_void_p(arg1093_1.data_ptr()), c_void_p(arg112_1.data_ptr()), c_void_p(arg113_1.data_ptr()), c_void_p(arg114_1.data_ptr()), c_void_p(buf99.data_ptr()))
    del arg1092_1
    del arg1093_1
    del arg112_1
    del arg113_1
    del arg114_1
    del buf97
    # Source Nodes: [x_135], Original ATen: [aten.convolution]
    buf100 = extern_kernels.convolution(buf98, buf99, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf100, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf101 = buf100; del buf100  # reuse
    buf102 = buf99; del buf99  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_37(c_void_p(buf101.data_ptr()), c_void_p(arg1095_1.data_ptr()), c_void_p(arg1096_1.data_ptr()), c_void_p(arg115_1.data_ptr()), c_void_p(arg116_1.data_ptr()), c_void_p(arg117_1.data_ptr()), c_void_p(buf102.data_ptr()))
    del arg1095_1
    del arg1096_1
    del arg115_1
    del arg116_1
    del arg117_1
    # Source Nodes: [x_136, x_138, x_140], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf103 = extern_kernels.convolution(buf101, buf102, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf103, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf101
    buf104 = buf103; del buf103  # reuse
    buf105 = buf102; del buf102  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_38(c_void_p(buf104.data_ptr()), c_void_p(arg1098_1.data_ptr()), c_void_p(arg1099_1.data_ptr()), c_void_p(arg118_1.data_ptr()), c_void_p(arg119_1.data_ptr()), c_void_p(buf98.data_ptr()), c_void_p(arg120_1.data_ptr()), c_void_p(buf105.data_ptr()))
    del arg1098_1
    del arg1099_1
    del arg118_1
    del arg119_1
    del arg120_1
    del buf98
    # Source Nodes: [x_144], Original ATen: [aten.convolution]
    buf106 = extern_kernels.convolution(buf104, buf105, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf106, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf107 = buf106; del buf106  # reuse
    buf108 = buf105; del buf105  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_39(c_void_p(buf107.data_ptr()), c_void_p(arg1101_1.data_ptr()), c_void_p(arg1102_1.data_ptr()), c_void_p(arg121_1.data_ptr()), c_void_p(arg122_1.data_ptr()), c_void_p(arg123_1.data_ptr()), c_void_p(buf108.data_ptr()))
    del arg1101_1
    del arg1102_1
    del arg121_1
    del arg122_1
    del arg123_1
    # Source Nodes: [x_145, x_147, x_149], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf109 = extern_kernels.convolution(buf107, buf108, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf109, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf107
    buf110 = buf104; del buf104  # reuse
    buf111 = buf108; del buf108  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_40(c_void_p(buf110.data_ptr()), c_void_p(buf109.data_ptr()), c_void_p(arg1104_1.data_ptr()), c_void_p(arg1105_1.data_ptr()), c_void_p(arg124_1.data_ptr()), c_void_p(arg125_1.data_ptr()), c_void_p(arg126_1.data_ptr()), c_void_p(buf111.data_ptr()))
    del arg1104_1
    del arg1105_1
    del arg124_1
    del arg125_1
    del arg126_1
    del buf109
    # Source Nodes: [x_153], Original ATen: [aten.convolution]
    buf112 = extern_kernels.convolution(buf110, buf111, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf112, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf113 = buf112; del buf112  # reuse
    buf114 = buf111; del buf111  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_41(c_void_p(buf113.data_ptr()), c_void_p(arg1107_1.data_ptr()), c_void_p(arg1108_1.data_ptr()), c_void_p(arg127_1.data_ptr()), c_void_p(arg128_1.data_ptr()), c_void_p(arg129_1.data_ptr()), c_void_p(buf114.data_ptr()))
    del arg1107_1
    del arg1108_1
    del arg127_1
    del arg128_1
    del arg129_1
    # Source Nodes: [x_154, x_156, x_158], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf115 = extern_kernels.convolution(buf113, buf114, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf115, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf113
    buf116 = buf110; del buf110  # reuse
    buf120 = buf88; del buf88  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_42(c_void_p(buf116.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(arg1110_1.data_ptr()), c_void_p(arg1111_1.data_ptr()), c_void_p(arg130_1.data_ptr()), c_void_p(arg131_1.data_ptr()), c_void_p(arg132_1.data_ptr()), c_void_p(buf120.data_ptr()))
    del arg1110_1
    del arg1111_1
    del arg130_1
    del arg131_1
    del arg132_1
    # Source Nodes: [x_162], Original ATen: [aten.convolution]
    buf121 = extern_kernels.convolution(buf119, buf120, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf121, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf122 = buf121; del buf121  # reuse
    buf123 = buf120; del buf120  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_43(c_void_p(buf122.data_ptr()), c_void_p(arg1113_1.data_ptr()), c_void_p(arg1114_1.data_ptr()), c_void_p(arg133_1.data_ptr()), c_void_p(arg134_1.data_ptr()), c_void_p(arg135_1.data_ptr()), c_void_p(buf123.data_ptr()))
    del arg1113_1
    del arg1114_1
    del arg133_1
    del arg134_1
    del arg135_1
    # Source Nodes: [x_163, x_165, x_167], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf124 = extern_kernels.convolution(buf122, buf123, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf124, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf122
    buf125 = buf124; del buf124  # reuse
    buf126 = buf123; del buf123  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_44(c_void_p(buf125.data_ptr()), c_void_p(arg1116_1.data_ptr()), c_void_p(arg1117_1.data_ptr()), c_void_p(arg136_1.data_ptr()), c_void_p(arg137_1.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(arg138_1.data_ptr()), c_void_p(buf126.data_ptr()))
    del arg1116_1
    del arg1117_1
    del arg136_1
    del arg137_1
    del arg138_1
    # Source Nodes: [x_171], Original ATen: [aten.convolution]
    buf127 = extern_kernels.convolution(buf125, buf126, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf127, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf128 = buf127; del buf127  # reuse
    buf129 = buf126; del buf126  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_45(c_void_p(buf128.data_ptr()), c_void_p(arg1119_1.data_ptr()), c_void_p(arg1120_1.data_ptr()), c_void_p(arg139_1.data_ptr()), c_void_p(arg140_1.data_ptr()), c_void_p(arg141_1.data_ptr()), c_void_p(buf129.data_ptr()))
    del arg1119_1
    del arg1120_1
    del arg139_1
    del arg140_1
    del arg141_1
    # Source Nodes: [x_172, x_174, x_176], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf130 = extern_kernels.convolution(buf128, buf129, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf130, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf128
    buf131 = buf125; del buf125  # reuse
    buf132 = buf129; del buf129  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_46(c_void_p(buf131.data_ptr()), c_void_p(buf130.data_ptr()), c_void_p(arg1122_1.data_ptr()), c_void_p(arg1123_1.data_ptr()), c_void_p(arg142_1.data_ptr()), c_void_p(arg143_1.data_ptr()), c_void_p(arg144_1.data_ptr()), c_void_p(buf132.data_ptr()))
    del arg1122_1
    del arg1123_1
    del arg142_1
    del arg143_1
    del arg144_1
    del buf130
    # Source Nodes: [x_180], Original ATen: [aten.convolution]
    buf133 = extern_kernels.convolution(buf131, buf132, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf133, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf134 = buf133; del buf133  # reuse
    buf135 = buf132; del buf132  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_47(c_void_p(buf134.data_ptr()), c_void_p(arg1125_1.data_ptr()), c_void_p(arg1126_1.data_ptr()), c_void_p(arg145_1.data_ptr()), c_void_p(arg146_1.data_ptr()), c_void_p(arg147_1.data_ptr()), c_void_p(buf135.data_ptr()))
    del arg1125_1
    del arg1126_1
    del arg145_1
    del arg146_1
    del arg147_1
    # Source Nodes: [x_181, x_183, x_185], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf136 = extern_kernels.convolution(buf134, buf135, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf136, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf134
    buf137 = buf131; del buf131  # reuse
    buf138 = buf135; del buf135  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_48(c_void_p(buf137.data_ptr()), c_void_p(buf136.data_ptr()), c_void_p(arg1128_1.data_ptr()), c_void_p(arg1129_1.data_ptr()), c_void_p(arg148_1.data_ptr()), c_void_p(arg149_1.data_ptr()), c_void_p(arg150_1.data_ptr()), c_void_p(buf138.data_ptr()))
    del arg1128_1
    del arg1129_1
    del arg148_1
    del arg149_1
    del arg150_1
    del buf136
    # Source Nodes: [x_189], Original ATen: [aten.convolution]
    buf139 = extern_kernels.convolution(buf137, buf138, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf139, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf140 = buf139; del buf139  # reuse
    buf141 = buf138; del buf138  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_49(c_void_p(buf140.data_ptr()), c_void_p(arg1131_1.data_ptr()), c_void_p(arg1132_1.data_ptr()), c_void_p(arg151_1.data_ptr()), c_void_p(arg152_1.data_ptr()), c_void_p(arg153_1.data_ptr()), c_void_p(buf141.data_ptr()))
    del arg1131_1
    del arg1132_1
    del arg151_1
    del arg152_1
    del arg153_1
    # Source Nodes: [x_190, x_192, x_194], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf142 = extern_kernels.convolution(buf140, buf141, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf142, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf140
    buf143 = buf137; del buf137  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_50(c_void_p(buf143.data_ptr()), c_void_p(buf142.data_ptr()), c_void_p(arg1134_1.data_ptr()), c_void_p(arg1135_1.data_ptr()), c_void_p(arg154_1.data_ptr()), c_void_p(arg155_1.data_ptr()))
    del arg1134_1
    del arg1135_1
    del arg154_1
    del arg155_1
    del buf142
    # Source Nodes: [l__mod___stage3_0_fuse_layers_0_1_0], Original ATen: [aten.convolution]
    buf144 = extern_kernels.convolution(buf143, arg180_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf144, (8, 18, 28, 28), (14112, 1, 504, 18))
    del arg180_1
    buf145 = empty_strided((72, 36, 3, 3), (324, 1, 108, 36), device='cpu', dtype=torch.float32)
    cpp_fused_convolution_51(c_void_p(arg105_1.data_ptr()), c_void_p(buf145.data_ptr()))
    del arg105_1
    # Source Nodes: [l__mod___transition2_2_0_0], Original ATen: [aten.convolution]
    buf146 = extern_kernels.convolution(buf119, buf145, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf146, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf119
    buf147 = buf146; del buf146  # reuse
    buf148 = empty_strided((72, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_52(c_void_p(buf147.data_ptr()), c_void_p(arg1086_1.data_ptr()), c_void_p(arg1087_1.data_ptr()), c_void_p(arg106_1.data_ptr()), c_void_p(arg107_1.data_ptr()), c_void_p(arg156_1.data_ptr()), c_void_p(buf148.data_ptr()))
    del arg106_1
    del arg107_1
    del arg1086_1
    del arg1087_1
    del arg156_1
    # Source Nodes: [x_198], Original ATen: [aten.convolution]
    buf149 = extern_kernels.convolution(buf147, buf148, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf149, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf150 = buf149; del buf149  # reuse
    buf151 = buf148; del buf148  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_53(c_void_p(buf150.data_ptr()), c_void_p(arg1137_1.data_ptr()), c_void_p(arg1138_1.data_ptr()), c_void_p(arg157_1.data_ptr()), c_void_p(arg158_1.data_ptr()), c_void_p(arg159_1.data_ptr()), c_void_p(buf151.data_ptr()))
    del arg1137_1
    del arg1138_1
    del arg157_1
    del arg158_1
    del arg159_1
    # Source Nodes: [x_199, x_201, x_203], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf152 = extern_kernels.convolution(buf150, buf151, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf152, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf150
    buf153 = buf147; del buf147  # reuse
    buf154 = buf151; del buf151  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_54(c_void_p(buf153.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(arg1140_1.data_ptr()), c_void_p(arg1141_1.data_ptr()), c_void_p(arg160_1.data_ptr()), c_void_p(arg161_1.data_ptr()), c_void_p(arg162_1.data_ptr()), c_void_p(buf154.data_ptr()))
    del arg1140_1
    del arg1141_1
    del arg160_1
    del arg161_1
    del arg162_1
    del buf152
    # Source Nodes: [x_207], Original ATen: [aten.convolution]
    buf155 = extern_kernels.convolution(buf153, buf154, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf155, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf156 = buf155; del buf155  # reuse
    buf157 = buf154; del buf154  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_55(c_void_p(buf156.data_ptr()), c_void_p(arg1143_1.data_ptr()), c_void_p(arg1144_1.data_ptr()), c_void_p(arg163_1.data_ptr()), c_void_p(arg164_1.data_ptr()), c_void_p(arg165_1.data_ptr()), c_void_p(buf157.data_ptr()))
    del arg1143_1
    del arg1144_1
    del arg163_1
    del arg164_1
    del arg165_1
    # Source Nodes: [x_208, x_210, x_212], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf158 = extern_kernels.convolution(buf156, buf157, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf158, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf156
    buf159 = buf153; del buf153  # reuse
    buf160 = buf157; del buf157  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_56(c_void_p(buf159.data_ptr()), c_void_p(buf158.data_ptr()), c_void_p(arg1146_1.data_ptr()), c_void_p(arg1147_1.data_ptr()), c_void_p(arg166_1.data_ptr()), c_void_p(arg167_1.data_ptr()), c_void_p(arg168_1.data_ptr()), c_void_p(buf160.data_ptr()))
    del arg1146_1
    del arg1147_1
    del arg166_1
    del arg167_1
    del arg168_1
    del buf158
    # Source Nodes: [x_216], Original ATen: [aten.convolution]
    buf161 = extern_kernels.convolution(buf159, buf160, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf161, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf162 = buf161; del buf161  # reuse
    buf163 = buf160; del buf160  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_57(c_void_p(buf162.data_ptr()), c_void_p(arg1149_1.data_ptr()), c_void_p(arg1150_1.data_ptr()), c_void_p(arg169_1.data_ptr()), c_void_p(arg170_1.data_ptr()), c_void_p(arg171_1.data_ptr()), c_void_p(buf163.data_ptr()))
    del arg1149_1
    del arg1150_1
    del arg169_1
    del arg170_1
    del arg171_1
    # Source Nodes: [x_217, x_219, x_221], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf164 = extern_kernels.convolution(buf162, buf163, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf164, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf162
    buf165 = buf159; del buf159  # reuse
    buf166 = buf163; del buf163  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_58(c_void_p(buf165.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(arg1152_1.data_ptr()), c_void_p(arg1153_1.data_ptr()), c_void_p(arg172_1.data_ptr()), c_void_p(arg173_1.data_ptr()), c_void_p(arg174_1.data_ptr()), c_void_p(buf166.data_ptr()))
    del arg1152_1
    del arg1153_1
    del arg172_1
    del arg173_1
    del arg174_1
    del buf164
    # Source Nodes: [x_225], Original ATen: [aten.convolution]
    buf167 = extern_kernels.convolution(buf165, buf166, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf167, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf168 = buf167; del buf167  # reuse
    buf169 = buf166; del buf166  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_59(c_void_p(buf168.data_ptr()), c_void_p(arg1155_1.data_ptr()), c_void_p(arg1156_1.data_ptr()), c_void_p(arg175_1.data_ptr()), c_void_p(arg176_1.data_ptr()), c_void_p(arg177_1.data_ptr()), c_void_p(buf169.data_ptr()))
    del arg1155_1
    del arg1156_1
    del arg175_1
    del arg176_1
    del arg177_1
    # Source Nodes: [x_226, x_228, x_230], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf170 = extern_kernels.convolution(buf168, buf169, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf170, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf168
    buf171 = buf165; del buf165  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_60(c_void_p(buf171.data_ptr()), c_void_p(buf170.data_ptr()), c_void_p(arg1158_1.data_ptr()), c_void_p(arg1159_1.data_ptr()), c_void_p(arg178_1.data_ptr()), c_void_p(arg179_1.data_ptr()))
    del arg1158_1
    del arg1159_1
    del arg178_1
    del arg179_1
    del buf170
    # Source Nodes: [l__mod___stage3_0_fuse_layers_0_2_0], Original ATen: [aten.convolution]
    buf172 = extern_kernels.convolution(buf171, arg183_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf172, (8, 18, 14, 14), (3528, 1, 252, 18))
    del arg183_1
    buf173 = buf115; del buf115  # reuse
    buf174 = buf173; del buf173  # reuse
    buf175 = buf114; del buf114  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_61(c_void_p(buf174.data_ptr()), c_void_p(buf116.data_ptr()), c_void_p(buf144.data_ptr()), c_void_p(arg1161_1.data_ptr()), c_void_p(arg1162_1.data_ptr()), c_void_p(arg181_1.data_ptr()), c_void_p(arg182_1.data_ptr()), c_void_p(buf172.data_ptr()), c_void_p(arg1164_1.data_ptr()), c_void_p(arg1165_1.data_ptr()), c_void_p(arg184_1.data_ptr()), c_void_p(arg185_1.data_ptr()), c_void_p(arg201_1.data_ptr()), c_void_p(buf175.data_ptr()))
    del arg1161_1
    del arg1162_1
    del arg1164_1
    del arg1165_1
    del arg181_1
    del arg182_1
    del arg184_1
    del arg185_1
    del arg201_1
    del buf144
    del buf172
    # Source Nodes: [shortcut_25, x_234], Original ATen: [aten.convolution, aten.relu]
    buf176 = extern_kernels.convolution(buf174, buf175, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf176, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf177 = buf176; del buf176  # reuse
    buf178 = buf175; del buf175  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_62(c_void_p(buf177.data_ptr()), c_void_p(arg1182_1.data_ptr()), c_void_p(arg1183_1.data_ptr()), c_void_p(arg202_1.data_ptr()), c_void_p(arg203_1.data_ptr()), c_void_p(arg204_1.data_ptr()), c_void_p(buf178.data_ptr()))
    del arg1182_1
    del arg1183_1
    del arg202_1
    del arg203_1
    del arg204_1
    # Source Nodes: [x_235, x_237, x_239], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf179 = extern_kernels.convolution(buf177, buf178, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf179, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf177
    buf180 = buf174; del buf174  # reuse
    buf181 = buf178; del buf178  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_63(c_void_p(buf180.data_ptr()), c_void_p(buf179.data_ptr()), c_void_p(arg1185_1.data_ptr()), c_void_p(arg1186_1.data_ptr()), c_void_p(arg205_1.data_ptr()), c_void_p(arg206_1.data_ptr()), c_void_p(arg207_1.data_ptr()), c_void_p(buf181.data_ptr()))
    del arg1185_1
    del arg1186_1
    del arg205_1
    del arg206_1
    del arg207_1
    del buf179
    # Source Nodes: [x_243], Original ATen: [aten.convolution]
    buf182 = extern_kernels.convolution(buf180, buf181, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf182, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf183 = buf182; del buf182  # reuse
    buf184 = buf181; del buf181  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_64(c_void_p(buf183.data_ptr()), c_void_p(arg1188_1.data_ptr()), c_void_p(arg1189_1.data_ptr()), c_void_p(arg208_1.data_ptr()), c_void_p(arg209_1.data_ptr()), c_void_p(arg210_1.data_ptr()), c_void_p(buf184.data_ptr()))
    del arg1188_1
    del arg1189_1
    del arg208_1
    del arg209_1
    del arg210_1
    # Source Nodes: [x_244, x_246, x_248], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf185 = extern_kernels.convolution(buf183, buf184, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf185, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf183
    buf186 = buf180; del buf180  # reuse
    buf187 = buf184; del buf184  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_65(c_void_p(buf186.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(arg1191_1.data_ptr()), c_void_p(arg1192_1.data_ptr()), c_void_p(arg211_1.data_ptr()), c_void_p(arg212_1.data_ptr()), c_void_p(arg213_1.data_ptr()), c_void_p(buf187.data_ptr()))
    del arg1191_1
    del arg1192_1
    del arg211_1
    del arg212_1
    del arg213_1
    del buf185
    # Source Nodes: [x_252], Original ATen: [aten.convolution]
    buf188 = extern_kernels.convolution(buf186, buf187, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf188, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf189 = buf188; del buf188  # reuse
    buf190 = buf187; del buf187  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_66(c_void_p(buf189.data_ptr()), c_void_p(arg1194_1.data_ptr()), c_void_p(arg1195_1.data_ptr()), c_void_p(arg214_1.data_ptr()), c_void_p(arg215_1.data_ptr()), c_void_p(arg216_1.data_ptr()), c_void_p(buf190.data_ptr()))
    del arg1194_1
    del arg1195_1
    del arg214_1
    del arg215_1
    del arg216_1
    # Source Nodes: [x_253, x_255, x_257], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf191 = extern_kernels.convolution(buf189, buf190, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf191, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf189
    buf192 = buf186; del buf186  # reuse
    buf193 = buf190; del buf190  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_67(c_void_p(buf192.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(arg1197_1.data_ptr()), c_void_p(arg1198_1.data_ptr()), c_void_p(arg217_1.data_ptr()), c_void_p(arg218_1.data_ptr()), c_void_p(arg219_1.data_ptr()), c_void_p(buf193.data_ptr()))
    del arg1197_1
    del arg1198_1
    del arg217_1
    del arg218_1
    del arg219_1
    del buf191
    # Source Nodes: [x_261], Original ATen: [aten.convolution]
    buf194 = extern_kernels.convolution(buf192, buf193, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf194, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf195 = buf194; del buf194  # reuse
    buf196 = buf193; del buf193  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_68(c_void_p(buf195.data_ptr()), c_void_p(arg1200_1.data_ptr()), c_void_p(arg1201_1.data_ptr()), c_void_p(arg220_1.data_ptr()), c_void_p(arg221_1.data_ptr()), c_void_p(arg222_1.data_ptr()), c_void_p(buf196.data_ptr()))
    del arg1200_1
    del arg1201_1
    del arg220_1
    del arg221_1
    del arg222_1
    # Source Nodes: [x_262, x_264, x_266], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf197 = extern_kernels.convolution(buf195, buf196, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf197, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf195
    buf198 = buf192; del buf192  # reuse
    buf199 = buf117; del buf117  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_69(c_void_p(buf198.data_ptr()), c_void_p(buf197.data_ptr()), c_void_p(arg1203_1.data_ptr()), c_void_p(arg1204_1.data_ptr()), c_void_p(arg223_1.data_ptr()), c_void_p(arg224_1.data_ptr()), c_void_p(arg186_1.data_ptr()), c_void_p(buf199.data_ptr()))
    del arg1203_1
    del arg1204_1
    del arg186_1
    del arg223_1
    del arg224_1
    del buf197
    # Source Nodes: [l__mod___stage3_0_fuse_layers_1_0_0_0], Original ATen: [aten.convolution]
    buf200 = extern_kernels.convolution(buf116, buf199, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf200, (8, 36, 28, 28), (28224, 1, 1008, 36))
    # Source Nodes: [l__mod___stage3_0_fuse_layers_1_2_0], Original ATen: [aten.convolution]
    buf201 = extern_kernels.convolution(buf171, arg189_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf201, (8, 36, 14, 14), (7056, 1, 504, 36))
    del arg189_1
    buf202 = buf200; del buf200  # reuse
    buf203 = buf202; del buf202  # reuse
    buf204 = buf141; del buf141  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_70(c_void_p(buf203.data_ptr()), c_void_p(arg1167_1.data_ptr()), c_void_p(arg1168_1.data_ptr()), c_void_p(arg187_1.data_ptr()), c_void_p(arg188_1.data_ptr()), c_void_p(buf143.data_ptr()), c_void_p(buf201.data_ptr()), c_void_p(arg1170_1.data_ptr()), c_void_p(arg1171_1.data_ptr()), c_void_p(arg190_1.data_ptr()), c_void_p(arg191_1.data_ptr()), c_void_p(arg225_1.data_ptr()), c_void_p(buf204.data_ptr()))
    del arg1167_1
    del arg1168_1
    del arg1170_1
    del arg1171_1
    del arg187_1
    del arg188_1
    del arg190_1
    del arg191_1
    del arg225_1
    del buf201
    # Source Nodes: [shortcut_29, x_270], Original ATen: [aten.convolution, aten.relu]
    buf205 = extern_kernels.convolution(buf203, buf204, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf205, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf206 = buf205; del buf205  # reuse
    buf207 = buf204; del buf204  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_71(c_void_p(buf206.data_ptr()), c_void_p(arg1206_1.data_ptr()), c_void_p(arg1207_1.data_ptr()), c_void_p(arg226_1.data_ptr()), c_void_p(arg227_1.data_ptr()), c_void_p(arg228_1.data_ptr()), c_void_p(buf207.data_ptr()))
    del arg1206_1
    del arg1207_1
    del arg226_1
    del arg227_1
    del arg228_1
    # Source Nodes: [x_271, x_273, x_275], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf208 = extern_kernels.convolution(buf206, buf207, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf208, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf206
    buf209 = buf203; del buf203  # reuse
    buf210 = buf207; del buf207  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_72(c_void_p(buf209.data_ptr()), c_void_p(buf208.data_ptr()), c_void_p(arg1209_1.data_ptr()), c_void_p(arg1210_1.data_ptr()), c_void_p(arg229_1.data_ptr()), c_void_p(arg230_1.data_ptr()), c_void_p(arg231_1.data_ptr()), c_void_p(buf210.data_ptr()))
    del arg1209_1
    del arg1210_1
    del arg229_1
    del arg230_1
    del arg231_1
    del buf208
    # Source Nodes: [x_279], Original ATen: [aten.convolution]
    buf211 = extern_kernels.convolution(buf209, buf210, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf211, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf212 = buf211; del buf211  # reuse
    buf213 = buf210; del buf210  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_73(c_void_p(buf212.data_ptr()), c_void_p(arg1212_1.data_ptr()), c_void_p(arg1213_1.data_ptr()), c_void_p(arg232_1.data_ptr()), c_void_p(arg233_1.data_ptr()), c_void_p(arg234_1.data_ptr()), c_void_p(buf213.data_ptr()))
    del arg1212_1
    del arg1213_1
    del arg232_1
    del arg233_1
    del arg234_1
    # Source Nodes: [x_280, x_282, x_284], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf214 = extern_kernels.convolution(buf212, buf213, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf214, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf212
    buf215 = buf209; del buf209  # reuse
    buf216 = buf213; del buf213  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_74(c_void_p(buf215.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(arg1215_1.data_ptr()), c_void_p(arg1216_1.data_ptr()), c_void_p(arg235_1.data_ptr()), c_void_p(arg236_1.data_ptr()), c_void_p(arg237_1.data_ptr()), c_void_p(buf216.data_ptr()))
    del arg1215_1
    del arg1216_1
    del arg235_1
    del arg236_1
    del arg237_1
    del buf214
    # Source Nodes: [x_288], Original ATen: [aten.convolution]
    buf217 = extern_kernels.convolution(buf215, buf216, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf217, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf218 = buf217; del buf217  # reuse
    buf219 = buf216; del buf216  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_75(c_void_p(buf218.data_ptr()), c_void_p(arg1218_1.data_ptr()), c_void_p(arg1219_1.data_ptr()), c_void_p(arg238_1.data_ptr()), c_void_p(arg239_1.data_ptr()), c_void_p(arg240_1.data_ptr()), c_void_p(buf219.data_ptr()))
    del arg1218_1
    del arg1219_1
    del arg238_1
    del arg239_1
    del arg240_1
    # Source Nodes: [x_289, x_291, x_293], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf220 = extern_kernels.convolution(buf218, buf219, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf220, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf218
    buf221 = buf215; del buf215  # reuse
    buf222 = buf219; del buf219  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_76(c_void_p(buf221.data_ptr()), c_void_p(buf220.data_ptr()), c_void_p(arg1221_1.data_ptr()), c_void_p(arg1222_1.data_ptr()), c_void_p(arg241_1.data_ptr()), c_void_p(arg242_1.data_ptr()), c_void_p(arg243_1.data_ptr()), c_void_p(buf222.data_ptr()))
    del arg1221_1
    del arg1222_1
    del arg241_1
    del arg242_1
    del arg243_1
    del buf220
    # Source Nodes: [x_297], Original ATen: [aten.convolution]
    buf223 = extern_kernels.convolution(buf221, buf222, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf223, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf224 = buf223; del buf223  # reuse
    buf225 = buf222; del buf222  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_77(c_void_p(buf224.data_ptr()), c_void_p(arg1224_1.data_ptr()), c_void_p(arg1225_1.data_ptr()), c_void_p(arg244_1.data_ptr()), c_void_p(arg245_1.data_ptr()), c_void_p(arg246_1.data_ptr()), c_void_p(buf225.data_ptr()))
    del arg1224_1
    del arg1225_1
    del arg244_1
    del arg245_1
    del arg246_1
    # Source Nodes: [x_298, x_300, x_302], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf226 = extern_kernels.convolution(buf224, buf225, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf226, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf224
    buf227 = buf221; del buf221  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_78(c_void_p(buf227.data_ptr()), c_void_p(buf226.data_ptr()), c_void_p(arg1227_1.data_ptr()), c_void_p(arg1228_1.data_ptr()), c_void_p(arg247_1.data_ptr()), c_void_p(arg248_1.data_ptr()))
    del arg1227_1
    del arg1228_1
    del arg247_1
    del arg248_1
    del buf226
    # Source Nodes: [l__mod___stage3_1_fuse_layers_0_1_0], Original ATen: [aten.convolution]
    buf228 = extern_kernels.convolution(buf227, arg273_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf228, (8, 18, 28, 28), (14112, 1, 504, 18))
    del arg273_1
    buf229 = buf196; del buf196  # reuse
    cpp_fused_convolution_79(c_void_p(arg192_1.data_ptr()), c_void_p(buf229.data_ptr()))
    del arg192_1
    # Source Nodes: [l__mod___stage3_0_fuse_layers_2_0_0_0], Original ATen: [aten.convolution]
    buf230 = extern_kernels.convolution(buf116, buf229, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf230, (8, 18, 28, 28), (14112, 1, 504, 18))
    buf231 = buf230; del buf230  # reuse
    buf232 = reinterpret_tensor(buf225, (72, 18, 3, 3), (162, 1, 54, 18), 0); del buf225  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_80(c_void_p(buf231.data_ptr()), c_void_p(arg1173_1.data_ptr()), c_void_p(arg1174_1.data_ptr()), c_void_p(arg193_1.data_ptr()), c_void_p(arg194_1.data_ptr()), c_void_p(arg195_1.data_ptr()), c_void_p(buf232.data_ptr()))
    del arg1173_1
    del arg1174_1
    del arg193_1
    del arg194_1
    del arg195_1
    # Source Nodes: [l__mod___stage3_0_fuse_layers_2_0_0_1, l__mod___stage3_0_fuse_layers_2_0_0_2, l__mod___stage3_0_fuse_layers_2_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf233 = extern_kernels.convolution(buf231, buf232, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf233, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf231
    buf234 = buf145; del buf145  # reuse
    cpp_fused_convolution_81(c_void_p(arg198_1.data_ptr()), c_void_p(buf234.data_ptr()))
    del arg198_1
    # Source Nodes: [l__mod___stage3_0_fuse_layers_2_1_0_0], Original ATen: [aten.convolution]
    buf235 = extern_kernels.convolution(buf143, buf234, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf235, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf143
    buf236 = buf233; del buf233  # reuse
    buf237 = buf171; del buf171  # reuse
    buf238 = buf169; del buf169  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_82(c_void_p(buf236.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(arg1176_1.data_ptr()), c_void_p(arg1177_1.data_ptr()), c_void_p(arg196_1.data_ptr()), c_void_p(arg197_1.data_ptr()), c_void_p(buf235.data_ptr()), c_void_p(arg1179_1.data_ptr()), c_void_p(arg1180_1.data_ptr()), c_void_p(arg199_1.data_ptr()), c_void_p(arg200_1.data_ptr()), c_void_p(arg249_1.data_ptr()), c_void_p(buf238.data_ptr()))
    del arg1176_1
    del arg1177_1
    del arg1179_1
    del arg1180_1
    del arg196_1
    del arg197_1
    del arg199_1
    del arg200_1
    del arg249_1
    del buf235
    del buf236
    # Source Nodes: [x_306], Original ATen: [aten.convolution]
    buf239 = extern_kernels.convolution(buf237, buf238, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf239, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf240 = buf239; del buf239  # reuse
    buf241 = buf238; del buf238  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_83(c_void_p(buf240.data_ptr()), c_void_p(arg1230_1.data_ptr()), c_void_p(arg1231_1.data_ptr()), c_void_p(arg250_1.data_ptr()), c_void_p(arg251_1.data_ptr()), c_void_p(arg252_1.data_ptr()), c_void_p(buf241.data_ptr()))
    del arg1230_1
    del arg1231_1
    del arg250_1
    del arg251_1
    del arg252_1
    # Source Nodes: [x_307, x_309, x_311], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf242 = extern_kernels.convolution(buf240, buf241, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf242, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf240
    buf243 = buf237; del buf237  # reuse
    buf244 = buf241; del buf241  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_84(c_void_p(buf243.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(arg1233_1.data_ptr()), c_void_p(arg1234_1.data_ptr()), c_void_p(arg253_1.data_ptr()), c_void_p(arg254_1.data_ptr()), c_void_p(arg255_1.data_ptr()), c_void_p(buf244.data_ptr()))
    del arg1233_1
    del arg1234_1
    del arg253_1
    del arg254_1
    del arg255_1
    del buf242
    # Source Nodes: [x_315], Original ATen: [aten.convolution]
    buf245 = extern_kernels.convolution(buf243, buf244, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf245, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf246 = buf245; del buf245  # reuse
    buf247 = buf244; del buf244  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_85(c_void_p(buf246.data_ptr()), c_void_p(arg1236_1.data_ptr()), c_void_p(arg1237_1.data_ptr()), c_void_p(arg256_1.data_ptr()), c_void_p(arg257_1.data_ptr()), c_void_p(arg258_1.data_ptr()), c_void_p(buf247.data_ptr()))
    del arg1236_1
    del arg1237_1
    del arg256_1
    del arg257_1
    del arg258_1
    # Source Nodes: [x_316, x_318, x_320], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf248 = extern_kernels.convolution(buf246, buf247, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf248, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf246
    buf249 = buf243; del buf243  # reuse
    buf250 = buf247; del buf247  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_86(c_void_p(buf249.data_ptr()), c_void_p(buf248.data_ptr()), c_void_p(arg1239_1.data_ptr()), c_void_p(arg1240_1.data_ptr()), c_void_p(arg259_1.data_ptr()), c_void_p(arg260_1.data_ptr()), c_void_p(arg261_1.data_ptr()), c_void_p(buf250.data_ptr()))
    del arg1239_1
    del arg1240_1
    del arg259_1
    del arg260_1
    del arg261_1
    del buf248
    # Source Nodes: [x_324], Original ATen: [aten.convolution]
    buf251 = extern_kernels.convolution(buf249, buf250, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf251, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf252 = buf251; del buf251  # reuse
    buf253 = buf250; del buf250  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_87(c_void_p(buf252.data_ptr()), c_void_p(arg1242_1.data_ptr()), c_void_p(arg1243_1.data_ptr()), c_void_p(arg262_1.data_ptr()), c_void_p(arg263_1.data_ptr()), c_void_p(arg264_1.data_ptr()), c_void_p(buf253.data_ptr()))
    del arg1242_1
    del arg1243_1
    del arg262_1
    del arg263_1
    del arg264_1
    # Source Nodes: [x_325, x_327, x_329], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf254 = extern_kernels.convolution(buf252, buf253, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf254, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf252
    buf255 = buf249; del buf249  # reuse
    buf256 = buf253; del buf253  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_88(c_void_p(buf255.data_ptr()), c_void_p(buf254.data_ptr()), c_void_p(arg1245_1.data_ptr()), c_void_p(arg1246_1.data_ptr()), c_void_p(arg265_1.data_ptr()), c_void_p(arg266_1.data_ptr()), c_void_p(arg267_1.data_ptr()), c_void_p(buf256.data_ptr()))
    del arg1245_1
    del arg1246_1
    del arg265_1
    del arg266_1
    del arg267_1
    del buf254
    # Source Nodes: [x_333], Original ATen: [aten.convolution]
    buf257 = extern_kernels.convolution(buf255, buf256, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf257, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf258 = buf257; del buf257  # reuse
    buf259 = buf256; del buf256  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_89(c_void_p(buf258.data_ptr()), c_void_p(arg1248_1.data_ptr()), c_void_p(arg1249_1.data_ptr()), c_void_p(arg268_1.data_ptr()), c_void_p(arg269_1.data_ptr()), c_void_p(arg270_1.data_ptr()), c_void_p(buf259.data_ptr()))
    del arg1248_1
    del arg1249_1
    del arg268_1
    del arg269_1
    del arg270_1
    # Source Nodes: [x_334, x_336, x_338], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf260 = extern_kernels.convolution(buf258, buf259, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf260, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf258
    buf261 = buf255; del buf255  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_90(c_void_p(buf261.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(arg1251_1.data_ptr()), c_void_p(arg1252_1.data_ptr()), c_void_p(arg271_1.data_ptr()), c_void_p(arg272_1.data_ptr()))
    del arg1251_1
    del arg1252_1
    del arg271_1
    del arg272_1
    del buf260
    # Source Nodes: [l__mod___stage3_1_fuse_layers_0_2_0], Original ATen: [aten.convolution]
    buf262 = extern_kernels.convolution(buf261, arg276_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf262, (8, 18, 14, 14), (3528, 1, 252, 18))
    del arg276_1
    buf263 = buf116; del buf116  # reuse
    buf264 = buf263; del buf263  # reuse
    buf265 = buf229; del buf229  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_91(c_void_p(buf264.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf228.data_ptr()), c_void_p(arg1254_1.data_ptr()), c_void_p(arg1255_1.data_ptr()), c_void_p(arg274_1.data_ptr()), c_void_p(arg275_1.data_ptr()), c_void_p(buf262.data_ptr()), c_void_p(arg1257_1.data_ptr()), c_void_p(arg1258_1.data_ptr()), c_void_p(arg277_1.data_ptr()), c_void_p(arg278_1.data_ptr()), c_void_p(arg294_1.data_ptr()), c_void_p(buf265.data_ptr()))
    del arg1254_1
    del arg1255_1
    del arg1257_1
    del arg1258_1
    del arg274_1
    del arg275_1
    del arg277_1
    del arg278_1
    del arg294_1
    del buf228
    del buf262
    # Source Nodes: [shortcut_37, x_342], Original ATen: [aten.convolution, aten.relu]
    buf266 = extern_kernels.convolution(buf264, buf265, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf266, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf267 = buf266; del buf266  # reuse
    buf268 = buf265; del buf265  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_92(c_void_p(buf267.data_ptr()), c_void_p(arg1275_1.data_ptr()), c_void_p(arg1276_1.data_ptr()), c_void_p(arg295_1.data_ptr()), c_void_p(arg296_1.data_ptr()), c_void_p(arg297_1.data_ptr()), c_void_p(buf268.data_ptr()))
    del arg1275_1
    del arg1276_1
    del arg295_1
    del arg296_1
    del arg297_1
    # Source Nodes: [x_343, x_345, x_347], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf269 = extern_kernels.convolution(buf267, buf268, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf269, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf267
    buf270 = buf264; del buf264  # reuse
    buf271 = buf268; del buf268  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_93(c_void_p(buf270.data_ptr()), c_void_p(buf269.data_ptr()), c_void_p(arg1278_1.data_ptr()), c_void_p(arg1279_1.data_ptr()), c_void_p(arg298_1.data_ptr()), c_void_p(arg299_1.data_ptr()), c_void_p(arg300_1.data_ptr()), c_void_p(buf271.data_ptr()))
    del arg1278_1
    del arg1279_1
    del arg298_1
    del arg299_1
    del arg300_1
    del buf269
    # Source Nodes: [x_351], Original ATen: [aten.convolution]
    buf272 = extern_kernels.convolution(buf270, buf271, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf272, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf273 = buf272; del buf272  # reuse
    buf274 = buf271; del buf271  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_94(c_void_p(buf273.data_ptr()), c_void_p(arg1281_1.data_ptr()), c_void_p(arg1282_1.data_ptr()), c_void_p(arg301_1.data_ptr()), c_void_p(arg302_1.data_ptr()), c_void_p(arg303_1.data_ptr()), c_void_p(buf274.data_ptr()))
    del arg1281_1
    del arg1282_1
    del arg301_1
    del arg302_1
    del arg303_1
    # Source Nodes: [x_352, x_354, x_356], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf275 = extern_kernels.convolution(buf273, buf274, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf275, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf273
    buf276 = buf270; del buf270  # reuse
    buf277 = buf274; del buf274  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_95(c_void_p(buf276.data_ptr()), c_void_p(buf275.data_ptr()), c_void_p(arg1284_1.data_ptr()), c_void_p(arg1285_1.data_ptr()), c_void_p(arg304_1.data_ptr()), c_void_p(arg305_1.data_ptr()), c_void_p(arg306_1.data_ptr()), c_void_p(buf277.data_ptr()))
    del arg1284_1
    del arg1285_1
    del arg304_1
    del arg305_1
    del arg306_1
    del buf275
    # Source Nodes: [x_360], Original ATen: [aten.convolution]
    buf278 = extern_kernels.convolution(buf276, buf277, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf278, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf279 = buf278; del buf278  # reuse
    buf280 = buf277; del buf277  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_96(c_void_p(buf279.data_ptr()), c_void_p(arg1287_1.data_ptr()), c_void_p(arg1288_1.data_ptr()), c_void_p(arg307_1.data_ptr()), c_void_p(arg308_1.data_ptr()), c_void_p(arg309_1.data_ptr()), c_void_p(buf280.data_ptr()))
    del arg1287_1
    del arg1288_1
    del arg307_1
    del arg308_1
    del arg309_1
    # Source Nodes: [x_361, x_363, x_365], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf281 = extern_kernels.convolution(buf279, buf280, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf281, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf279
    buf282 = buf276; del buf276  # reuse
    buf283 = buf280; del buf280  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_97(c_void_p(buf282.data_ptr()), c_void_p(buf281.data_ptr()), c_void_p(arg1290_1.data_ptr()), c_void_p(arg1291_1.data_ptr()), c_void_p(arg310_1.data_ptr()), c_void_p(arg311_1.data_ptr()), c_void_p(arg312_1.data_ptr()), c_void_p(buf283.data_ptr()))
    del arg1290_1
    del arg1291_1
    del arg310_1
    del arg311_1
    del arg312_1
    del buf281
    # Source Nodes: [x_369], Original ATen: [aten.convolution]
    buf284 = extern_kernels.convolution(buf282, buf283, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf284, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf285 = buf284; del buf284  # reuse
    buf286 = buf283; del buf283  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_98(c_void_p(buf285.data_ptr()), c_void_p(arg1293_1.data_ptr()), c_void_p(arg1294_1.data_ptr()), c_void_p(arg313_1.data_ptr()), c_void_p(arg314_1.data_ptr()), c_void_p(arg315_1.data_ptr()), c_void_p(buf286.data_ptr()))
    del arg1293_1
    del arg1294_1
    del arg313_1
    del arg314_1
    del arg315_1
    # Source Nodes: [x_370, x_372, x_374], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf287 = extern_kernels.convolution(buf285, buf286, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf287, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf285
    buf288 = buf282; del buf282  # reuse
    buf289 = buf199; del buf199  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_99(c_void_p(buf288.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(arg1296_1.data_ptr()), c_void_p(arg1297_1.data_ptr()), c_void_p(arg316_1.data_ptr()), c_void_p(arg317_1.data_ptr()), c_void_p(arg279_1.data_ptr()), c_void_p(buf289.data_ptr()))
    del arg1296_1
    del arg1297_1
    del arg279_1
    del arg316_1
    del arg317_1
    del buf287
    # Source Nodes: [l__mod___stage3_1_fuse_layers_1_0_0_0], Original ATen: [aten.convolution]
    buf290 = extern_kernels.convolution(buf198, buf289, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf290, (8, 36, 28, 28), (28224, 1, 1008, 36))
    # Source Nodes: [l__mod___stage3_1_fuse_layers_1_2_0], Original ATen: [aten.convolution]
    buf291 = extern_kernels.convolution(buf261, arg282_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf291, (8, 36, 14, 14), (7056, 1, 504, 36))
    del arg282_1
    buf292 = buf290; del buf290  # reuse
    buf293 = buf292; del buf292  # reuse
    buf294 = reinterpret_tensor(buf232, (36, 36, 3, 3), (324, 1, 108, 36), 0); del buf232  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_100(c_void_p(buf293.data_ptr()), c_void_p(arg1260_1.data_ptr()), c_void_p(arg1261_1.data_ptr()), c_void_p(arg280_1.data_ptr()), c_void_p(arg281_1.data_ptr()), c_void_p(buf227.data_ptr()), c_void_p(buf291.data_ptr()), c_void_p(arg1263_1.data_ptr()), c_void_p(arg1264_1.data_ptr()), c_void_p(arg283_1.data_ptr()), c_void_p(arg284_1.data_ptr()), c_void_p(arg318_1.data_ptr()), c_void_p(buf294.data_ptr()))
    del arg1260_1
    del arg1261_1
    del arg1263_1
    del arg1264_1
    del arg280_1
    del arg281_1
    del arg283_1
    del arg284_1
    del arg318_1
    del buf291
    # Source Nodes: [shortcut_41, x_378], Original ATen: [aten.convolution, aten.relu]
    buf295 = extern_kernels.convolution(buf293, buf294, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf295, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf296 = buf295; del buf295  # reuse
    buf297 = buf294; del buf294  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_101(c_void_p(buf296.data_ptr()), c_void_p(arg1299_1.data_ptr()), c_void_p(arg1300_1.data_ptr()), c_void_p(arg319_1.data_ptr()), c_void_p(arg320_1.data_ptr()), c_void_p(arg321_1.data_ptr()), c_void_p(buf297.data_ptr()))
    del arg1299_1
    del arg1300_1
    del arg319_1
    del arg320_1
    del arg321_1
    # Source Nodes: [x_379, x_381, x_383], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf298 = extern_kernels.convolution(buf296, buf297, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf298, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf296
    buf299 = buf293; del buf293  # reuse
    buf300 = buf297; del buf297  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_102(c_void_p(buf299.data_ptr()), c_void_p(buf298.data_ptr()), c_void_p(arg1302_1.data_ptr()), c_void_p(arg1303_1.data_ptr()), c_void_p(arg322_1.data_ptr()), c_void_p(arg323_1.data_ptr()), c_void_p(arg324_1.data_ptr()), c_void_p(buf300.data_ptr()))
    del arg1302_1
    del arg1303_1
    del arg322_1
    del arg323_1
    del arg324_1
    del buf298
    # Source Nodes: [x_387], Original ATen: [aten.convolution]
    buf301 = extern_kernels.convolution(buf299, buf300, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf301, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf302 = buf301; del buf301  # reuse
    buf303 = buf300; del buf300  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_103(c_void_p(buf302.data_ptr()), c_void_p(arg1305_1.data_ptr()), c_void_p(arg1306_1.data_ptr()), c_void_p(arg325_1.data_ptr()), c_void_p(arg326_1.data_ptr()), c_void_p(arg327_1.data_ptr()), c_void_p(buf303.data_ptr()))
    del arg1305_1
    del arg1306_1
    del arg325_1
    del arg326_1
    del arg327_1
    # Source Nodes: [x_388, x_390, x_392], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf304 = extern_kernels.convolution(buf302, buf303, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf304, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf302
    buf305 = buf299; del buf299  # reuse
    buf306 = buf303; del buf303  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_104(c_void_p(buf305.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(arg1308_1.data_ptr()), c_void_p(arg1309_1.data_ptr()), c_void_p(arg328_1.data_ptr()), c_void_p(arg329_1.data_ptr()), c_void_p(arg330_1.data_ptr()), c_void_p(buf306.data_ptr()))
    del arg1308_1
    del arg1309_1
    del arg328_1
    del arg329_1
    del arg330_1
    del buf304
    # Source Nodes: [x_396], Original ATen: [aten.convolution]
    buf307 = extern_kernels.convolution(buf305, buf306, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf307, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf308 = buf307; del buf307  # reuse
    buf309 = buf306; del buf306  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_105(c_void_p(buf308.data_ptr()), c_void_p(arg1311_1.data_ptr()), c_void_p(arg1312_1.data_ptr()), c_void_p(arg331_1.data_ptr()), c_void_p(arg332_1.data_ptr()), c_void_p(arg333_1.data_ptr()), c_void_p(buf309.data_ptr()))
    del arg1311_1
    del arg1312_1
    del arg331_1
    del arg332_1
    del arg333_1
    # Source Nodes: [x_397, x_399, x_401], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf310 = extern_kernels.convolution(buf308, buf309, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf310, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf308
    buf311 = buf305; del buf305  # reuse
    buf312 = buf309; del buf309  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_106(c_void_p(buf311.data_ptr()), c_void_p(buf310.data_ptr()), c_void_p(arg1314_1.data_ptr()), c_void_p(arg1315_1.data_ptr()), c_void_p(arg334_1.data_ptr()), c_void_p(arg335_1.data_ptr()), c_void_p(arg336_1.data_ptr()), c_void_p(buf312.data_ptr()))
    del arg1314_1
    del arg1315_1
    del arg334_1
    del arg335_1
    del arg336_1
    del buf310
    # Source Nodes: [x_405], Original ATen: [aten.convolution]
    buf313 = extern_kernels.convolution(buf311, buf312, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf313, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf314 = buf313; del buf313  # reuse
    buf315 = buf312; del buf312  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_107(c_void_p(buf314.data_ptr()), c_void_p(arg1317_1.data_ptr()), c_void_p(arg1318_1.data_ptr()), c_void_p(arg337_1.data_ptr()), c_void_p(arg338_1.data_ptr()), c_void_p(arg339_1.data_ptr()), c_void_p(buf315.data_ptr()))
    del arg1317_1
    del arg1318_1
    del arg337_1
    del arg338_1
    del arg339_1
    # Source Nodes: [x_406, x_408, x_410], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf316 = extern_kernels.convolution(buf314, buf315, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf316, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf314
    buf317 = buf311; del buf311  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_108(c_void_p(buf317.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(arg1320_1.data_ptr()), c_void_p(arg1321_1.data_ptr()), c_void_p(arg340_1.data_ptr()), c_void_p(arg341_1.data_ptr()))
    del arg1320_1
    del arg1321_1
    del arg340_1
    del arg341_1
    del buf316
    # Source Nodes: [l__mod___stage3_2_fuse_layers_0_1_0], Original ATen: [aten.convolution]
    buf318 = extern_kernels.convolution(buf317, arg366_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf318, (8, 18, 28, 28), (14112, 1, 504, 18))
    del arg366_1
    buf319 = buf286; del buf286  # reuse
    cpp_fused_convolution_109(c_void_p(arg285_1.data_ptr()), c_void_p(buf319.data_ptr()))
    del arg285_1
    # Source Nodes: [l__mod___stage3_1_fuse_layers_2_0_0_0], Original ATen: [aten.convolution]
    buf320 = extern_kernels.convolution(buf198, buf319, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf320, (8, 18, 28, 28), (14112, 1, 504, 18))
    buf321 = buf320; del buf320  # reuse
    buf322 = reinterpret_tensor(buf315, (72, 18, 3, 3), (162, 1, 54, 18), 0); del buf315  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_110(c_void_p(buf321.data_ptr()), c_void_p(arg1266_1.data_ptr()), c_void_p(arg1267_1.data_ptr()), c_void_p(arg286_1.data_ptr()), c_void_p(arg287_1.data_ptr()), c_void_p(arg288_1.data_ptr()), c_void_p(buf322.data_ptr()))
    del arg1266_1
    del arg1267_1
    del arg286_1
    del arg287_1
    del arg288_1
    # Source Nodes: [l__mod___stage3_1_fuse_layers_2_0_0_1, l__mod___stage3_1_fuse_layers_2_0_0_2, l__mod___stage3_1_fuse_layers_2_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf323 = extern_kernels.convolution(buf321, buf322, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf323, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf321
    buf324 = buf234; del buf234  # reuse
    cpp_fused_convolution_111(c_void_p(arg291_1.data_ptr()), c_void_p(buf324.data_ptr()))
    del arg291_1
    # Source Nodes: [l__mod___stage3_1_fuse_layers_2_1_0_0], Original ATen: [aten.convolution]
    buf325 = extern_kernels.convolution(buf227, buf324, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf325, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf227
    buf326 = buf323; del buf323  # reuse
    buf327 = buf261; del buf261  # reuse
    buf328 = buf259; del buf259  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_112(c_void_p(buf326.data_ptr()), c_void_p(buf327.data_ptr()), c_void_p(arg1269_1.data_ptr()), c_void_p(arg1270_1.data_ptr()), c_void_p(arg289_1.data_ptr()), c_void_p(arg290_1.data_ptr()), c_void_p(buf325.data_ptr()), c_void_p(arg1272_1.data_ptr()), c_void_p(arg1273_1.data_ptr()), c_void_p(arg292_1.data_ptr()), c_void_p(arg293_1.data_ptr()), c_void_p(arg342_1.data_ptr()), c_void_p(buf328.data_ptr()))
    del arg1269_1
    del arg1270_1
    del arg1272_1
    del arg1273_1
    del arg289_1
    del arg290_1
    del arg292_1
    del arg293_1
    del arg342_1
    del buf325
    del buf326
    # Source Nodes: [x_414], Original ATen: [aten.convolution]
    buf329 = extern_kernels.convolution(buf327, buf328, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf329, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf330 = buf329; del buf329  # reuse
    buf331 = buf328; del buf328  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_113(c_void_p(buf330.data_ptr()), c_void_p(arg1323_1.data_ptr()), c_void_p(arg1324_1.data_ptr()), c_void_p(arg343_1.data_ptr()), c_void_p(arg344_1.data_ptr()), c_void_p(arg345_1.data_ptr()), c_void_p(buf331.data_ptr()))
    del arg1323_1
    del arg1324_1
    del arg343_1
    del arg344_1
    del arg345_1
    # Source Nodes: [x_415, x_417, x_419], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf332 = extern_kernels.convolution(buf330, buf331, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf332, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf330
    buf333 = buf327; del buf327  # reuse
    buf334 = buf331; del buf331  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_114(c_void_p(buf333.data_ptr()), c_void_p(buf332.data_ptr()), c_void_p(arg1326_1.data_ptr()), c_void_p(arg1327_1.data_ptr()), c_void_p(arg346_1.data_ptr()), c_void_p(arg347_1.data_ptr()), c_void_p(arg348_1.data_ptr()), c_void_p(buf334.data_ptr()))
    del arg1326_1
    del arg1327_1
    del arg346_1
    del arg347_1
    del arg348_1
    del buf332
    # Source Nodes: [x_423], Original ATen: [aten.convolution]
    buf335 = extern_kernels.convolution(buf333, buf334, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf335, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf336 = buf335; del buf335  # reuse
    buf337 = buf334; del buf334  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_115(c_void_p(buf336.data_ptr()), c_void_p(arg1329_1.data_ptr()), c_void_p(arg1330_1.data_ptr()), c_void_p(arg349_1.data_ptr()), c_void_p(arg350_1.data_ptr()), c_void_p(arg351_1.data_ptr()), c_void_p(buf337.data_ptr()))
    del arg1329_1
    del arg1330_1
    del arg349_1
    del arg350_1
    del arg351_1
    # Source Nodes: [x_424, x_426, x_428], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf338 = extern_kernels.convolution(buf336, buf337, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf338, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf336
    buf339 = buf333; del buf333  # reuse
    buf340 = buf337; del buf337  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_116(c_void_p(buf339.data_ptr()), c_void_p(buf338.data_ptr()), c_void_p(arg1332_1.data_ptr()), c_void_p(arg1333_1.data_ptr()), c_void_p(arg352_1.data_ptr()), c_void_p(arg353_1.data_ptr()), c_void_p(arg354_1.data_ptr()), c_void_p(buf340.data_ptr()))
    del arg1332_1
    del arg1333_1
    del arg352_1
    del arg353_1
    del arg354_1
    del buf338
    # Source Nodes: [x_432], Original ATen: [aten.convolution]
    buf341 = extern_kernels.convolution(buf339, buf340, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf341, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf342 = buf341; del buf341  # reuse
    buf343 = buf340; del buf340  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_117(c_void_p(buf342.data_ptr()), c_void_p(arg1335_1.data_ptr()), c_void_p(arg1336_1.data_ptr()), c_void_p(arg355_1.data_ptr()), c_void_p(arg356_1.data_ptr()), c_void_p(arg357_1.data_ptr()), c_void_p(buf343.data_ptr()))
    del arg1335_1
    del arg1336_1
    del arg355_1
    del arg356_1
    del arg357_1
    # Source Nodes: [x_433, x_435, x_437], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf344 = extern_kernels.convolution(buf342, buf343, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf344, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf342
    buf345 = buf339; del buf339  # reuse
    buf346 = buf343; del buf343  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_118(c_void_p(buf345.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(arg1338_1.data_ptr()), c_void_p(arg1339_1.data_ptr()), c_void_p(arg358_1.data_ptr()), c_void_p(arg359_1.data_ptr()), c_void_p(arg360_1.data_ptr()), c_void_p(buf346.data_ptr()))
    del arg1338_1
    del arg1339_1
    del arg358_1
    del arg359_1
    del arg360_1
    del buf344
    # Source Nodes: [x_441], Original ATen: [aten.convolution]
    buf347 = extern_kernels.convolution(buf345, buf346, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf347, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf348 = buf347; del buf347  # reuse
    buf349 = buf346; del buf346  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_119(c_void_p(buf348.data_ptr()), c_void_p(arg1341_1.data_ptr()), c_void_p(arg1342_1.data_ptr()), c_void_p(arg361_1.data_ptr()), c_void_p(arg362_1.data_ptr()), c_void_p(arg363_1.data_ptr()), c_void_p(buf349.data_ptr()))
    del arg1341_1
    del arg1342_1
    del arg361_1
    del arg362_1
    del arg363_1
    # Source Nodes: [x_442, x_444, x_446], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf350 = extern_kernels.convolution(buf348, buf349, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf350, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf348
    buf351 = buf345; del buf345  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_120(c_void_p(buf351.data_ptr()), c_void_p(buf350.data_ptr()), c_void_p(arg1344_1.data_ptr()), c_void_p(arg1345_1.data_ptr()), c_void_p(arg364_1.data_ptr()), c_void_p(arg365_1.data_ptr()))
    del arg1344_1
    del arg1345_1
    del arg364_1
    del arg365_1
    del buf350
    # Source Nodes: [l__mod___stage3_2_fuse_layers_0_2_0], Original ATen: [aten.convolution]
    buf352 = extern_kernels.convolution(buf351, arg369_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf352, (8, 18, 14, 14), (3528, 1, 252, 18))
    del arg369_1
    buf353 = buf198; del buf198  # reuse
    buf354 = buf353; del buf353  # reuse
    buf355 = buf319; del buf319  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_121(c_void_p(buf354.data_ptr()), c_void_p(buf288.data_ptr()), c_void_p(buf318.data_ptr()), c_void_p(arg1347_1.data_ptr()), c_void_p(arg1348_1.data_ptr()), c_void_p(arg367_1.data_ptr()), c_void_p(arg368_1.data_ptr()), c_void_p(buf352.data_ptr()), c_void_p(arg1350_1.data_ptr()), c_void_p(arg1351_1.data_ptr()), c_void_p(arg370_1.data_ptr()), c_void_p(arg371_1.data_ptr()), c_void_p(arg387_1.data_ptr()), c_void_p(buf355.data_ptr()))
    del arg1347_1
    del arg1348_1
    del arg1350_1
    del arg1351_1
    del arg367_1
    del arg368_1
    del arg370_1
    del arg371_1
    del arg387_1
    del buf318
    del buf352
    # Source Nodes: [shortcut_49, x_450], Original ATen: [aten.convolution, aten.relu]
    buf356 = extern_kernels.convolution(buf354, buf355, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf356, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf357 = buf356; del buf356  # reuse
    buf358 = buf355; del buf355  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_122(c_void_p(buf357.data_ptr()), c_void_p(arg1368_1.data_ptr()), c_void_p(arg1369_1.data_ptr()), c_void_p(arg388_1.data_ptr()), c_void_p(arg389_1.data_ptr()), c_void_p(arg390_1.data_ptr()), c_void_p(buf358.data_ptr()))
    del arg1368_1
    del arg1369_1
    del arg388_1
    del arg389_1
    del arg390_1
    # Source Nodes: [x_451, x_453, x_455], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf359 = extern_kernels.convolution(buf357, buf358, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf359, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf357
    buf360 = buf354; del buf354  # reuse
    buf361 = buf358; del buf358  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_123(c_void_p(buf360.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(arg1371_1.data_ptr()), c_void_p(arg1372_1.data_ptr()), c_void_p(arg391_1.data_ptr()), c_void_p(arg392_1.data_ptr()), c_void_p(arg393_1.data_ptr()), c_void_p(buf361.data_ptr()))
    del arg1371_1
    del arg1372_1
    del arg391_1
    del arg392_1
    del arg393_1
    del buf359
    # Source Nodes: [x_459], Original ATen: [aten.convolution]
    buf362 = extern_kernels.convolution(buf360, buf361, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf362, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf363 = buf362; del buf362  # reuse
    buf364 = buf361; del buf361  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_124(c_void_p(buf363.data_ptr()), c_void_p(arg1374_1.data_ptr()), c_void_p(arg1375_1.data_ptr()), c_void_p(arg394_1.data_ptr()), c_void_p(arg395_1.data_ptr()), c_void_p(arg396_1.data_ptr()), c_void_p(buf364.data_ptr()))
    del arg1374_1
    del arg1375_1
    del arg394_1
    del arg395_1
    del arg396_1
    # Source Nodes: [x_460, x_462, x_464], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf365 = extern_kernels.convolution(buf363, buf364, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf365, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf363
    buf366 = buf360; del buf360  # reuse
    buf367 = buf364; del buf364  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_125(c_void_p(buf366.data_ptr()), c_void_p(buf365.data_ptr()), c_void_p(arg1377_1.data_ptr()), c_void_p(arg1378_1.data_ptr()), c_void_p(arg397_1.data_ptr()), c_void_p(arg398_1.data_ptr()), c_void_p(arg399_1.data_ptr()), c_void_p(buf367.data_ptr()))
    del arg1377_1
    del arg1378_1
    del arg397_1
    del arg398_1
    del arg399_1
    del buf365
    # Source Nodes: [x_468], Original ATen: [aten.convolution]
    buf368 = extern_kernels.convolution(buf366, buf367, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf368, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf369 = buf368; del buf368  # reuse
    buf370 = buf367; del buf367  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_126(c_void_p(buf369.data_ptr()), c_void_p(arg1380_1.data_ptr()), c_void_p(arg1381_1.data_ptr()), c_void_p(arg400_1.data_ptr()), c_void_p(arg401_1.data_ptr()), c_void_p(arg402_1.data_ptr()), c_void_p(buf370.data_ptr()))
    del arg1380_1
    del arg1381_1
    del arg400_1
    del arg401_1
    del arg402_1
    # Source Nodes: [x_469, x_471, x_473], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf371 = extern_kernels.convolution(buf369, buf370, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf371, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf369
    buf372 = buf366; del buf366  # reuse
    buf373 = buf370; del buf370  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_127(c_void_p(buf372.data_ptr()), c_void_p(buf371.data_ptr()), c_void_p(arg1383_1.data_ptr()), c_void_p(arg1384_1.data_ptr()), c_void_p(arg403_1.data_ptr()), c_void_p(arg404_1.data_ptr()), c_void_p(arg405_1.data_ptr()), c_void_p(buf373.data_ptr()))
    del arg1383_1
    del arg1384_1
    del arg403_1
    del arg404_1
    del arg405_1
    del buf371
    # Source Nodes: [x_477], Original ATen: [aten.convolution]
    buf374 = extern_kernels.convolution(buf372, buf373, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf374, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf375 = buf374; del buf374  # reuse
    buf376 = buf373; del buf373  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_128(c_void_p(buf375.data_ptr()), c_void_p(arg1386_1.data_ptr()), c_void_p(arg1387_1.data_ptr()), c_void_p(arg406_1.data_ptr()), c_void_p(arg407_1.data_ptr()), c_void_p(arg408_1.data_ptr()), c_void_p(buf376.data_ptr()))
    del arg1386_1
    del arg1387_1
    del arg406_1
    del arg407_1
    del arg408_1
    # Source Nodes: [x_478, x_480, x_482], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf377 = extern_kernels.convolution(buf375, buf376, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf377, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf375
    buf378 = buf372; del buf372  # reuse
    buf379 = buf289; del buf289  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_129(c_void_p(buf378.data_ptr()), c_void_p(buf377.data_ptr()), c_void_p(arg1389_1.data_ptr()), c_void_p(arg1390_1.data_ptr()), c_void_p(arg409_1.data_ptr()), c_void_p(arg410_1.data_ptr()), c_void_p(arg372_1.data_ptr()), c_void_p(buf379.data_ptr()))
    del arg1389_1
    del arg1390_1
    del arg372_1
    del arg409_1
    del arg410_1
    del buf377
    # Source Nodes: [l__mod___stage3_2_fuse_layers_1_0_0_0], Original ATen: [aten.convolution]
    buf380 = extern_kernels.convolution(buf288, buf379, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf380, (8, 36, 28, 28), (28224, 1, 1008, 36))
    # Source Nodes: [l__mod___stage3_2_fuse_layers_1_2_0], Original ATen: [aten.convolution]
    buf381 = extern_kernels.convolution(buf351, arg375_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf381, (8, 36, 14, 14), (7056, 1, 504, 36))
    del arg375_1
    buf382 = buf380; del buf380  # reuse
    buf383 = buf382; del buf382  # reuse
    buf384 = reinterpret_tensor(buf322, (36, 36, 3, 3), (324, 1, 108, 36), 0); del buf322  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_130(c_void_p(buf383.data_ptr()), c_void_p(arg1353_1.data_ptr()), c_void_p(arg1354_1.data_ptr()), c_void_p(arg373_1.data_ptr()), c_void_p(arg374_1.data_ptr()), c_void_p(buf317.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(arg1356_1.data_ptr()), c_void_p(arg1357_1.data_ptr()), c_void_p(arg376_1.data_ptr()), c_void_p(arg377_1.data_ptr()), c_void_p(arg411_1.data_ptr()), c_void_p(buf384.data_ptr()))
    del arg1353_1
    del arg1354_1
    del arg1356_1
    del arg1357_1
    del arg373_1
    del arg374_1
    del arg376_1
    del arg377_1
    del arg411_1
    del buf381
    # Source Nodes: [shortcut_53, x_486], Original ATen: [aten.convolution, aten.relu]
    buf385 = extern_kernels.convolution(buf383, buf384, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf385, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf386 = buf385; del buf385  # reuse
    buf387 = buf384; del buf384  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_131(c_void_p(buf386.data_ptr()), c_void_p(arg1392_1.data_ptr()), c_void_p(arg1393_1.data_ptr()), c_void_p(arg412_1.data_ptr()), c_void_p(arg413_1.data_ptr()), c_void_p(arg414_1.data_ptr()), c_void_p(buf387.data_ptr()))
    del arg1392_1
    del arg1393_1
    del arg412_1
    del arg413_1
    del arg414_1
    # Source Nodes: [x_487, x_489, x_491], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf388 = extern_kernels.convolution(buf386, buf387, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf388, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf386
    buf389 = buf383; del buf383  # reuse
    buf390 = buf387; del buf387  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_132(c_void_p(buf389.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(arg1395_1.data_ptr()), c_void_p(arg1396_1.data_ptr()), c_void_p(arg415_1.data_ptr()), c_void_p(arg416_1.data_ptr()), c_void_p(arg417_1.data_ptr()), c_void_p(buf390.data_ptr()))
    del arg1395_1
    del arg1396_1
    del arg415_1
    del arg416_1
    del arg417_1
    del buf388
    # Source Nodes: [x_495], Original ATen: [aten.convolution]
    buf391 = extern_kernels.convolution(buf389, buf390, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf391, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf392 = buf391; del buf391  # reuse
    buf393 = buf390; del buf390  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_133(c_void_p(buf392.data_ptr()), c_void_p(arg1398_1.data_ptr()), c_void_p(arg1399_1.data_ptr()), c_void_p(arg418_1.data_ptr()), c_void_p(arg419_1.data_ptr()), c_void_p(arg420_1.data_ptr()), c_void_p(buf393.data_ptr()))
    del arg1398_1
    del arg1399_1
    del arg418_1
    del arg419_1
    del arg420_1
    # Source Nodes: [x_496, x_498, x_500], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf394 = extern_kernels.convolution(buf392, buf393, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf394, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf392
    buf395 = buf389; del buf389  # reuse
    buf396 = buf393; del buf393  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_134(c_void_p(buf395.data_ptr()), c_void_p(buf394.data_ptr()), c_void_p(arg1401_1.data_ptr()), c_void_p(arg1402_1.data_ptr()), c_void_p(arg421_1.data_ptr()), c_void_p(arg422_1.data_ptr()), c_void_p(arg423_1.data_ptr()), c_void_p(buf396.data_ptr()))
    del arg1401_1
    del arg1402_1
    del arg421_1
    del arg422_1
    del arg423_1
    del buf394
    # Source Nodes: [x_504], Original ATen: [aten.convolution]
    buf397 = extern_kernels.convolution(buf395, buf396, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf397, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf398 = buf397; del buf397  # reuse
    buf399 = buf396; del buf396  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_135(c_void_p(buf398.data_ptr()), c_void_p(arg1404_1.data_ptr()), c_void_p(arg1405_1.data_ptr()), c_void_p(arg424_1.data_ptr()), c_void_p(arg425_1.data_ptr()), c_void_p(arg426_1.data_ptr()), c_void_p(buf399.data_ptr()))
    del arg1404_1
    del arg1405_1
    del arg424_1
    del arg425_1
    del arg426_1
    # Source Nodes: [x_505, x_507, x_509], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf400 = extern_kernels.convolution(buf398, buf399, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf400, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf398
    buf401 = buf395; del buf395  # reuse
    buf402 = buf399; del buf399  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_136(c_void_p(buf401.data_ptr()), c_void_p(buf400.data_ptr()), c_void_p(arg1407_1.data_ptr()), c_void_p(arg1408_1.data_ptr()), c_void_p(arg427_1.data_ptr()), c_void_p(arg428_1.data_ptr()), c_void_p(arg429_1.data_ptr()), c_void_p(buf402.data_ptr()))
    del arg1407_1
    del arg1408_1
    del arg427_1
    del arg428_1
    del arg429_1
    del buf400
    # Source Nodes: [x_513], Original ATen: [aten.convolution]
    buf403 = extern_kernels.convolution(buf401, buf402, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf403, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf404 = buf403; del buf403  # reuse
    buf405 = buf402; del buf402  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_137(c_void_p(buf404.data_ptr()), c_void_p(arg1410_1.data_ptr()), c_void_p(arg1411_1.data_ptr()), c_void_p(arg430_1.data_ptr()), c_void_p(arg431_1.data_ptr()), c_void_p(arg432_1.data_ptr()), c_void_p(buf405.data_ptr()))
    del arg1410_1
    del arg1411_1
    del arg430_1
    del arg431_1
    del arg432_1
    # Source Nodes: [x_514, x_516, x_518], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf406 = extern_kernels.convolution(buf404, buf405, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf406, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf404
    buf407 = buf401; del buf401  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_138(c_void_p(buf407.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(arg1413_1.data_ptr()), c_void_p(arg1414_1.data_ptr()), c_void_p(arg433_1.data_ptr()), c_void_p(arg434_1.data_ptr()))
    del arg1413_1
    del arg1414_1
    del arg433_1
    del arg434_1
    del buf406
    # Source Nodes: [l__mod___stage3_3_fuse_layers_0_1_0], Original ATen: [aten.convolution]
    buf408 = extern_kernels.convolution(buf407, arg459_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf408, (8, 18, 28, 28), (14112, 1, 504, 18))
    del arg459_1
    buf409 = buf376; del buf376  # reuse
    cpp_fused_convolution_139(c_void_p(arg378_1.data_ptr()), c_void_p(buf409.data_ptr()))
    del arg378_1
    # Source Nodes: [l__mod___stage3_2_fuse_layers_2_0_0_0], Original ATen: [aten.convolution]
    buf410 = extern_kernels.convolution(buf288, buf409, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf410, (8, 18, 28, 28), (14112, 1, 504, 18))
    buf411 = buf410; del buf410  # reuse
    buf412 = reinterpret_tensor(buf405, (72, 18, 3, 3), (162, 1, 54, 18), 0); del buf405  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_140(c_void_p(buf411.data_ptr()), c_void_p(arg1359_1.data_ptr()), c_void_p(arg1360_1.data_ptr()), c_void_p(arg379_1.data_ptr()), c_void_p(arg380_1.data_ptr()), c_void_p(arg381_1.data_ptr()), c_void_p(buf412.data_ptr()))
    del arg1359_1
    del arg1360_1
    del arg379_1
    del arg380_1
    del arg381_1
    # Source Nodes: [l__mod___stage3_2_fuse_layers_2_0_0_1, l__mod___stage3_2_fuse_layers_2_0_0_2, l__mod___stage3_2_fuse_layers_2_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf413 = extern_kernels.convolution(buf411, buf412, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf413, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf411
    buf414 = buf324; del buf324  # reuse
    cpp_fused_convolution_141(c_void_p(arg384_1.data_ptr()), c_void_p(buf414.data_ptr()))
    del arg384_1
    # Source Nodes: [l__mod___stage3_2_fuse_layers_2_1_0_0], Original ATen: [aten.convolution]
    buf415 = extern_kernels.convolution(buf317, buf414, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf415, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf317
    buf416 = buf413; del buf413  # reuse
    buf417 = buf351; del buf351  # reuse
    buf418 = buf349; del buf349  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_142(c_void_p(buf416.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(arg1362_1.data_ptr()), c_void_p(arg1363_1.data_ptr()), c_void_p(arg382_1.data_ptr()), c_void_p(arg383_1.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(arg1365_1.data_ptr()), c_void_p(arg1366_1.data_ptr()), c_void_p(arg385_1.data_ptr()), c_void_p(arg386_1.data_ptr()), c_void_p(arg435_1.data_ptr()), c_void_p(buf418.data_ptr()))
    del arg1362_1
    del arg1363_1
    del arg1365_1
    del arg1366_1
    del arg382_1
    del arg383_1
    del arg385_1
    del arg386_1
    del arg435_1
    del buf415
    del buf416
    # Source Nodes: [x_522], Original ATen: [aten.convolution]
    buf419 = extern_kernels.convolution(buf417, buf418, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf419, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf420 = buf419; del buf419  # reuse
    buf421 = buf418; del buf418  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_143(c_void_p(buf420.data_ptr()), c_void_p(arg1416_1.data_ptr()), c_void_p(arg1417_1.data_ptr()), c_void_p(arg436_1.data_ptr()), c_void_p(arg437_1.data_ptr()), c_void_p(arg438_1.data_ptr()), c_void_p(buf421.data_ptr()))
    del arg1416_1
    del arg1417_1
    del arg436_1
    del arg437_1
    del arg438_1
    # Source Nodes: [x_523, x_525, x_527], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf422 = extern_kernels.convolution(buf420, buf421, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf422, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf420
    buf423 = buf417; del buf417  # reuse
    buf424 = buf421; del buf421  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_144(c_void_p(buf423.data_ptr()), c_void_p(buf422.data_ptr()), c_void_p(arg1419_1.data_ptr()), c_void_p(arg1420_1.data_ptr()), c_void_p(arg439_1.data_ptr()), c_void_p(arg440_1.data_ptr()), c_void_p(arg441_1.data_ptr()), c_void_p(buf424.data_ptr()))
    del arg1419_1
    del arg1420_1
    del arg439_1
    del arg440_1
    del arg441_1
    del buf422
    # Source Nodes: [x_531], Original ATen: [aten.convolution]
    buf425 = extern_kernels.convolution(buf423, buf424, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf425, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf426 = buf425; del buf425  # reuse
    buf427 = buf424; del buf424  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_145(c_void_p(buf426.data_ptr()), c_void_p(arg1422_1.data_ptr()), c_void_p(arg1423_1.data_ptr()), c_void_p(arg442_1.data_ptr()), c_void_p(arg443_1.data_ptr()), c_void_p(arg444_1.data_ptr()), c_void_p(buf427.data_ptr()))
    del arg1422_1
    del arg1423_1
    del arg442_1
    del arg443_1
    del arg444_1
    # Source Nodes: [x_532, x_534, x_536], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf428 = extern_kernels.convolution(buf426, buf427, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf428, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf426
    buf429 = buf423; del buf423  # reuse
    buf430 = buf427; del buf427  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_146(c_void_p(buf429.data_ptr()), c_void_p(buf428.data_ptr()), c_void_p(arg1425_1.data_ptr()), c_void_p(arg1426_1.data_ptr()), c_void_p(arg445_1.data_ptr()), c_void_p(arg446_1.data_ptr()), c_void_p(arg447_1.data_ptr()), c_void_p(buf430.data_ptr()))
    del arg1425_1
    del arg1426_1
    del arg445_1
    del arg446_1
    del arg447_1
    del buf428
    # Source Nodes: [x_540], Original ATen: [aten.convolution]
    buf431 = extern_kernels.convolution(buf429, buf430, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf431, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf432 = buf431; del buf431  # reuse
    buf433 = buf430; del buf430  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_147(c_void_p(buf432.data_ptr()), c_void_p(arg1428_1.data_ptr()), c_void_p(arg1429_1.data_ptr()), c_void_p(arg448_1.data_ptr()), c_void_p(arg449_1.data_ptr()), c_void_p(arg450_1.data_ptr()), c_void_p(buf433.data_ptr()))
    del arg1428_1
    del arg1429_1
    del arg448_1
    del arg449_1
    del arg450_1
    # Source Nodes: [x_541, x_543, x_545], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf434 = extern_kernels.convolution(buf432, buf433, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf434, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf432
    buf435 = buf429; del buf429  # reuse
    buf436 = buf433; del buf433  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_148(c_void_p(buf435.data_ptr()), c_void_p(buf434.data_ptr()), c_void_p(arg1431_1.data_ptr()), c_void_p(arg1432_1.data_ptr()), c_void_p(arg451_1.data_ptr()), c_void_p(arg452_1.data_ptr()), c_void_p(arg453_1.data_ptr()), c_void_p(buf436.data_ptr()))
    del arg1431_1
    del arg1432_1
    del arg451_1
    del arg452_1
    del arg453_1
    del buf434
    # Source Nodes: [x_549], Original ATen: [aten.convolution]
    buf437 = extern_kernels.convolution(buf435, buf436, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf437, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf438 = buf437; del buf437  # reuse
    buf439 = buf436; del buf436  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_149(c_void_p(buf438.data_ptr()), c_void_p(arg1434_1.data_ptr()), c_void_p(arg1435_1.data_ptr()), c_void_p(arg454_1.data_ptr()), c_void_p(arg455_1.data_ptr()), c_void_p(arg456_1.data_ptr()), c_void_p(buf439.data_ptr()))
    del arg1434_1
    del arg1435_1
    del arg454_1
    del arg455_1
    del arg456_1
    # Source Nodes: [x_550, x_552, x_554], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf440 = extern_kernels.convolution(buf438, buf439, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf440, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf438
    buf441 = buf435; del buf435  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_150(c_void_p(buf441.data_ptr()), c_void_p(buf440.data_ptr()), c_void_p(arg1437_1.data_ptr()), c_void_p(arg1438_1.data_ptr()), c_void_p(arg457_1.data_ptr()), c_void_p(arg458_1.data_ptr()))
    del arg1437_1
    del arg1438_1
    del arg457_1
    del arg458_1
    del buf440
    # Source Nodes: [l__mod___stage3_3_fuse_layers_0_2_0], Original ATen: [aten.convolution]
    buf442 = extern_kernels.convolution(buf441, arg462_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf442, (8, 18, 14, 14), (3528, 1, 252, 18))
    del arg462_1
    buf443 = buf288; del buf288  # reuse
    buf444 = buf443; del buf443  # reuse
    buf445 = buf409; del buf409  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_151(c_void_p(buf444.data_ptr()), c_void_p(buf378.data_ptr()), c_void_p(buf408.data_ptr()), c_void_p(arg1440_1.data_ptr()), c_void_p(arg1441_1.data_ptr()), c_void_p(arg460_1.data_ptr()), c_void_p(arg461_1.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(arg1443_1.data_ptr()), c_void_p(arg1444_1.data_ptr()), c_void_p(arg463_1.data_ptr()), c_void_p(arg464_1.data_ptr()), c_void_p(arg483_1.data_ptr()), c_void_p(buf445.data_ptr()))
    del arg1440_1
    del arg1441_1
    del arg1443_1
    del arg1444_1
    del arg460_1
    del arg461_1
    del arg463_1
    del arg464_1
    del arg483_1
    del buf408
    del buf442
    # Source Nodes: [shortcut_61, x_558], Original ATen: [aten.convolution, aten.relu]
    buf446 = extern_kernels.convolution(buf444, buf445, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf446, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf447 = buf446; del buf446  # reuse
    buf448 = buf445; del buf445  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_152(c_void_p(buf447.data_ptr()), c_void_p(arg1464_1.data_ptr()), c_void_p(arg1465_1.data_ptr()), c_void_p(arg484_1.data_ptr()), c_void_p(arg485_1.data_ptr()), c_void_p(arg486_1.data_ptr()), c_void_p(buf448.data_ptr()))
    del arg1464_1
    del arg1465_1
    del arg484_1
    del arg485_1
    del arg486_1
    # Source Nodes: [x_559, x_561, x_563], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf449 = extern_kernels.convolution(buf447, buf448, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf449, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf447
    buf450 = buf444; del buf444  # reuse
    buf451 = buf448; del buf448  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_153(c_void_p(buf450.data_ptr()), c_void_p(buf449.data_ptr()), c_void_p(arg1467_1.data_ptr()), c_void_p(arg1468_1.data_ptr()), c_void_p(arg487_1.data_ptr()), c_void_p(arg488_1.data_ptr()), c_void_p(arg489_1.data_ptr()), c_void_p(buf451.data_ptr()))
    del arg1467_1
    del arg1468_1
    del arg487_1
    del arg488_1
    del arg489_1
    del buf449
    # Source Nodes: [x_567], Original ATen: [aten.convolution]
    buf452 = extern_kernels.convolution(buf450, buf451, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf452, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf453 = buf452; del buf452  # reuse
    buf454 = buf451; del buf451  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_154(c_void_p(buf453.data_ptr()), c_void_p(arg1470_1.data_ptr()), c_void_p(arg1471_1.data_ptr()), c_void_p(arg490_1.data_ptr()), c_void_p(arg491_1.data_ptr()), c_void_p(arg492_1.data_ptr()), c_void_p(buf454.data_ptr()))
    del arg1470_1
    del arg1471_1
    del arg490_1
    del arg491_1
    del arg492_1
    # Source Nodes: [x_568, x_570, x_572], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf455 = extern_kernels.convolution(buf453, buf454, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf455, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf453
    buf456 = buf450; del buf450  # reuse
    buf457 = buf454; del buf454  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_155(c_void_p(buf456.data_ptr()), c_void_p(buf455.data_ptr()), c_void_p(arg1473_1.data_ptr()), c_void_p(arg1474_1.data_ptr()), c_void_p(arg493_1.data_ptr()), c_void_p(arg494_1.data_ptr()), c_void_p(arg495_1.data_ptr()), c_void_p(buf457.data_ptr()))
    del arg1473_1
    del arg1474_1
    del arg493_1
    del arg494_1
    del arg495_1
    del buf455
    # Source Nodes: [x_576], Original ATen: [aten.convolution]
    buf458 = extern_kernels.convolution(buf456, buf457, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf458, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf459 = buf458; del buf458  # reuse
    buf460 = buf457; del buf457  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_156(c_void_p(buf459.data_ptr()), c_void_p(arg1476_1.data_ptr()), c_void_p(arg1477_1.data_ptr()), c_void_p(arg496_1.data_ptr()), c_void_p(arg497_1.data_ptr()), c_void_p(arg498_1.data_ptr()), c_void_p(buf460.data_ptr()))
    del arg1476_1
    del arg1477_1
    del arg496_1
    del arg497_1
    del arg498_1
    # Source Nodes: [x_577, x_579, x_581], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf461 = extern_kernels.convolution(buf459, buf460, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf461, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf459
    buf462 = buf456; del buf456  # reuse
    buf463 = buf460; del buf460  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_157(c_void_p(buf462.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(arg1479_1.data_ptr()), c_void_p(arg1480_1.data_ptr()), c_void_p(arg499_1.data_ptr()), c_void_p(arg500_1.data_ptr()), c_void_p(arg501_1.data_ptr()), c_void_p(buf463.data_ptr()))
    del arg1479_1
    del arg1480_1
    del arg499_1
    del arg500_1
    del arg501_1
    del buf461
    # Source Nodes: [x_585], Original ATen: [aten.convolution]
    buf464 = extern_kernels.convolution(buf462, buf463, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf464, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf465 = buf464; del buf464  # reuse
    buf466 = buf463; del buf463  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_158(c_void_p(buf465.data_ptr()), c_void_p(arg1482_1.data_ptr()), c_void_p(arg1483_1.data_ptr()), c_void_p(arg502_1.data_ptr()), c_void_p(arg503_1.data_ptr()), c_void_p(arg504_1.data_ptr()), c_void_p(buf466.data_ptr()))
    del arg1482_1
    del arg1483_1
    del arg502_1
    del arg503_1
    del arg504_1
    # Source Nodes: [x_586, x_588, x_590], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf467 = extern_kernels.convolution(buf465, buf466, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf467, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf465
    buf468 = buf462; del buf462  # reuse
    buf469 = buf379; del buf379  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_159(c_void_p(buf468.data_ptr()), c_void_p(buf467.data_ptr()), c_void_p(arg1485_1.data_ptr()), c_void_p(arg1486_1.data_ptr()), c_void_p(arg505_1.data_ptr()), c_void_p(arg506_1.data_ptr()), c_void_p(arg465_1.data_ptr()), c_void_p(buf469.data_ptr()))
    del arg1485_1
    del arg1486_1
    del arg465_1
    del arg505_1
    del arg506_1
    del buf467
    # Source Nodes: [l__mod___stage3_3_fuse_layers_1_0_0_0], Original ATen: [aten.convolution]
    buf470 = extern_kernels.convolution(buf378, buf469, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf470, (8, 36, 28, 28), (28224, 1, 1008, 36))
    # Source Nodes: [l__mod___stage3_3_fuse_layers_1_2_0], Original ATen: [aten.convolution]
    buf471 = extern_kernels.convolution(buf441, arg468_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf471, (8, 36, 14, 14), (7056, 1, 504, 36))
    del arg468_1
    buf472 = buf470; del buf470  # reuse
    buf473 = buf472; del buf472  # reuse
    buf474 = reinterpret_tensor(buf412, (36, 36, 3, 3), (324, 1, 108, 36), 0); del buf412  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_160(c_void_p(buf473.data_ptr()), c_void_p(arg1446_1.data_ptr()), c_void_p(arg1447_1.data_ptr()), c_void_p(arg466_1.data_ptr()), c_void_p(arg467_1.data_ptr()), c_void_p(buf407.data_ptr()), c_void_p(buf471.data_ptr()), c_void_p(arg1449_1.data_ptr()), c_void_p(arg1450_1.data_ptr()), c_void_p(arg469_1.data_ptr()), c_void_p(arg470_1.data_ptr()), c_void_p(arg507_1.data_ptr()), c_void_p(buf474.data_ptr()))
    del arg1446_1
    del arg1447_1
    del arg1449_1
    del arg1450_1
    del arg466_1
    del arg467_1
    del arg469_1
    del arg470_1
    del arg507_1
    del buf471
    # Source Nodes: [shortcut_65, x_594], Original ATen: [aten.convolution, aten.relu]
    buf475 = extern_kernels.convolution(buf473, buf474, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf475, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf476 = buf475; del buf475  # reuse
    buf477 = buf474; del buf474  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_161(c_void_p(buf476.data_ptr()), c_void_p(arg1488_1.data_ptr()), c_void_p(arg1489_1.data_ptr()), c_void_p(arg508_1.data_ptr()), c_void_p(arg509_1.data_ptr()), c_void_p(arg510_1.data_ptr()), c_void_p(buf477.data_ptr()))
    del arg1488_1
    del arg1489_1
    del arg508_1
    del arg509_1
    del arg510_1
    # Source Nodes: [x_595, x_597, x_599], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf478 = extern_kernels.convolution(buf476, buf477, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf478, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf476
    buf479 = buf473; del buf473  # reuse
    buf480 = buf477; del buf477  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_162(c_void_p(buf479.data_ptr()), c_void_p(buf478.data_ptr()), c_void_p(arg1491_1.data_ptr()), c_void_p(arg1492_1.data_ptr()), c_void_p(arg511_1.data_ptr()), c_void_p(arg512_1.data_ptr()), c_void_p(arg513_1.data_ptr()), c_void_p(buf480.data_ptr()))
    del arg1491_1
    del arg1492_1
    del arg511_1
    del arg512_1
    del arg513_1
    del buf478
    # Source Nodes: [x_603], Original ATen: [aten.convolution]
    buf481 = extern_kernels.convolution(buf479, buf480, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf481, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf482 = buf481; del buf481  # reuse
    buf483 = buf480; del buf480  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_163(c_void_p(buf482.data_ptr()), c_void_p(arg1494_1.data_ptr()), c_void_p(arg1495_1.data_ptr()), c_void_p(arg514_1.data_ptr()), c_void_p(arg515_1.data_ptr()), c_void_p(arg516_1.data_ptr()), c_void_p(buf483.data_ptr()))
    del arg1494_1
    del arg1495_1
    del arg514_1
    del arg515_1
    del arg516_1
    # Source Nodes: [x_604, x_606, x_608], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf484 = extern_kernels.convolution(buf482, buf483, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf484, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf482
    buf485 = buf479; del buf479  # reuse
    buf486 = buf483; del buf483  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_164(c_void_p(buf485.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(arg1497_1.data_ptr()), c_void_p(arg1498_1.data_ptr()), c_void_p(arg517_1.data_ptr()), c_void_p(arg518_1.data_ptr()), c_void_p(arg519_1.data_ptr()), c_void_p(buf486.data_ptr()))
    del arg1497_1
    del arg1498_1
    del arg517_1
    del arg518_1
    del arg519_1
    del buf484
    # Source Nodes: [x_612], Original ATen: [aten.convolution]
    buf487 = extern_kernels.convolution(buf485, buf486, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf487, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf488 = buf487; del buf487  # reuse
    buf489 = buf486; del buf486  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_165(c_void_p(buf488.data_ptr()), c_void_p(arg1500_1.data_ptr()), c_void_p(arg1501_1.data_ptr()), c_void_p(arg520_1.data_ptr()), c_void_p(arg521_1.data_ptr()), c_void_p(arg522_1.data_ptr()), c_void_p(buf489.data_ptr()))
    del arg1500_1
    del arg1501_1
    del arg520_1
    del arg521_1
    del arg522_1
    # Source Nodes: [x_613, x_615, x_617], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf490 = extern_kernels.convolution(buf488, buf489, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf490, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf488
    buf491 = buf485; del buf485  # reuse
    buf492 = buf489; del buf489  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_166(c_void_p(buf491.data_ptr()), c_void_p(buf490.data_ptr()), c_void_p(arg1503_1.data_ptr()), c_void_p(arg1504_1.data_ptr()), c_void_p(arg523_1.data_ptr()), c_void_p(arg524_1.data_ptr()), c_void_p(arg525_1.data_ptr()), c_void_p(buf492.data_ptr()))
    del arg1503_1
    del arg1504_1
    del arg523_1
    del arg524_1
    del arg525_1
    del buf490
    # Source Nodes: [x_621], Original ATen: [aten.convolution]
    buf493 = extern_kernels.convolution(buf491, buf492, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf493, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf494 = buf493; del buf493  # reuse
    buf495 = buf492; del buf492  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_167(c_void_p(buf494.data_ptr()), c_void_p(arg1506_1.data_ptr()), c_void_p(arg1507_1.data_ptr()), c_void_p(arg526_1.data_ptr()), c_void_p(arg527_1.data_ptr()), c_void_p(arg528_1.data_ptr()), c_void_p(buf495.data_ptr()))
    del arg1506_1
    del arg1507_1
    del arg526_1
    del arg527_1
    del arg528_1
    # Source Nodes: [x_622, x_624, x_626], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf496 = extern_kernels.convolution(buf494, buf495, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf496, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf494
    buf497 = buf491; del buf491  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_168(c_void_p(buf497.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(arg1509_1.data_ptr()), c_void_p(arg1510_1.data_ptr()), c_void_p(arg529_1.data_ptr()), c_void_p(arg530_1.data_ptr()))
    del arg1509_1
    del arg1510_1
    del arg529_1
    del arg530_1
    del buf496
    # Source Nodes: [l__mod___stage4_0_fuse_layers_0_1_0], Original ATen: [aten.convolution]
    buf498 = extern_kernels.convolution(buf497, arg579_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf498, (8, 18, 28, 28), (14112, 1, 504, 18))
    del arg579_1
    buf499 = buf466; del buf466  # reuse
    cpp_fused_convolution_169(c_void_p(arg471_1.data_ptr()), c_void_p(buf499.data_ptr()))
    del arg471_1
    # Source Nodes: [l__mod___stage3_3_fuse_layers_2_0_0_0], Original ATen: [aten.convolution]
    buf500 = extern_kernels.convolution(buf378, buf499, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf500, (8, 18, 28, 28), (14112, 1, 504, 18))
    buf501 = buf500; del buf500  # reuse
    buf502 = reinterpret_tensor(buf495, (72, 18, 3, 3), (162, 1, 54, 18), 0); del buf495  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_170(c_void_p(buf501.data_ptr()), c_void_p(arg1452_1.data_ptr()), c_void_p(arg1453_1.data_ptr()), c_void_p(arg472_1.data_ptr()), c_void_p(arg473_1.data_ptr()), c_void_p(arg474_1.data_ptr()), c_void_p(buf502.data_ptr()))
    del arg1452_1
    del arg1453_1
    del arg472_1
    del arg473_1
    del arg474_1
    # Source Nodes: [l__mod___stage3_3_fuse_layers_2_0_0_1, l__mod___stage3_3_fuse_layers_2_0_0_2, l__mod___stage3_3_fuse_layers_2_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf503 = extern_kernels.convolution(buf501, buf502, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf503, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf501
    buf504 = buf414; del buf414  # reuse
    cpp_fused_convolution_171(c_void_p(arg477_1.data_ptr()), c_void_p(buf504.data_ptr()))
    del arg477_1
    # Source Nodes: [l__mod___stage3_3_fuse_layers_2_1_0_0], Original ATen: [aten.convolution]
    buf505 = extern_kernels.convolution(buf407, buf504, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf505, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf407
    buf506 = buf503; del buf503  # reuse
    buf507 = buf441; del buf441  # reuse
    buf508 = buf439; del buf439  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_172(c_void_p(buf506.data_ptr()), c_void_p(buf507.data_ptr()), c_void_p(arg1455_1.data_ptr()), c_void_p(arg1456_1.data_ptr()), c_void_p(arg475_1.data_ptr()), c_void_p(arg476_1.data_ptr()), c_void_p(buf505.data_ptr()), c_void_p(arg1458_1.data_ptr()), c_void_p(arg1459_1.data_ptr()), c_void_p(arg478_1.data_ptr()), c_void_p(arg479_1.data_ptr()), c_void_p(arg531_1.data_ptr()), c_void_p(buf508.data_ptr()))
    del arg1455_1
    del arg1456_1
    del arg1458_1
    del arg1459_1
    del arg475_1
    del arg476_1
    del arg478_1
    del arg479_1
    del arg531_1
    del buf505
    del buf506
    # Source Nodes: [x_630], Original ATen: [aten.convolution]
    buf509 = extern_kernels.convolution(buf507, buf508, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf509, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf510 = buf509; del buf509  # reuse
    buf511 = buf508; del buf508  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_173(c_void_p(buf510.data_ptr()), c_void_p(arg1512_1.data_ptr()), c_void_p(arg1513_1.data_ptr()), c_void_p(arg532_1.data_ptr()), c_void_p(arg533_1.data_ptr()), c_void_p(arg534_1.data_ptr()), c_void_p(buf511.data_ptr()))
    del arg1512_1
    del arg1513_1
    del arg532_1
    del arg533_1
    del arg534_1
    # Source Nodes: [x_631, x_633, x_635], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf512 = extern_kernels.convolution(buf510, buf511, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf512, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf510
    buf513 = buf512; del buf512  # reuse
    buf514 = buf511; del buf511  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_174(c_void_p(buf513.data_ptr()), c_void_p(arg1515_1.data_ptr()), c_void_p(arg1516_1.data_ptr()), c_void_p(arg535_1.data_ptr()), c_void_p(arg536_1.data_ptr()), c_void_p(buf507.data_ptr()), c_void_p(arg537_1.data_ptr()), c_void_p(buf514.data_ptr()))
    del arg1515_1
    del arg1516_1
    del arg535_1
    del arg536_1
    del arg537_1
    # Source Nodes: [x_639], Original ATen: [aten.convolution]
    buf515 = extern_kernels.convolution(buf513, buf514, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf515, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf516 = buf515; del buf515  # reuse
    buf517 = buf514; del buf514  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_175(c_void_p(buf516.data_ptr()), c_void_p(arg1518_1.data_ptr()), c_void_p(arg1519_1.data_ptr()), c_void_p(arg538_1.data_ptr()), c_void_p(arg539_1.data_ptr()), c_void_p(arg540_1.data_ptr()), c_void_p(buf517.data_ptr()))
    del arg1518_1
    del arg1519_1
    del arg538_1
    del arg539_1
    del arg540_1
    # Source Nodes: [x_640, x_642, x_644], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf518 = extern_kernels.convolution(buf516, buf517, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf518, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf516
    buf519 = buf513; del buf513  # reuse
    buf520 = buf517; del buf517  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_176(c_void_p(buf519.data_ptr()), c_void_p(buf518.data_ptr()), c_void_p(arg1521_1.data_ptr()), c_void_p(arg1522_1.data_ptr()), c_void_p(arg541_1.data_ptr()), c_void_p(arg542_1.data_ptr()), c_void_p(arg543_1.data_ptr()), c_void_p(buf520.data_ptr()))
    del arg1521_1
    del arg1522_1
    del arg541_1
    del arg542_1
    del arg543_1
    del buf518
    # Source Nodes: [x_648], Original ATen: [aten.convolution]
    buf521 = extern_kernels.convolution(buf519, buf520, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf521, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf522 = buf521; del buf521  # reuse
    buf523 = buf520; del buf520  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_177(c_void_p(buf522.data_ptr()), c_void_p(arg1524_1.data_ptr()), c_void_p(arg1525_1.data_ptr()), c_void_p(arg544_1.data_ptr()), c_void_p(arg545_1.data_ptr()), c_void_p(arg546_1.data_ptr()), c_void_p(buf523.data_ptr()))
    del arg1524_1
    del arg1525_1
    del arg544_1
    del arg545_1
    del arg546_1
    # Source Nodes: [x_649, x_651, x_653], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf524 = extern_kernels.convolution(buf522, buf523, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf524, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf522
    buf525 = buf519; del buf519  # reuse
    buf526 = buf523; del buf523  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_178(c_void_p(buf525.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(arg1527_1.data_ptr()), c_void_p(arg1528_1.data_ptr()), c_void_p(arg547_1.data_ptr()), c_void_p(arg548_1.data_ptr()), c_void_p(arg549_1.data_ptr()), c_void_p(buf526.data_ptr()))
    del arg1527_1
    del arg1528_1
    del arg547_1
    del arg548_1
    del arg549_1
    del buf524
    # Source Nodes: [x_657], Original ATen: [aten.convolution]
    buf527 = extern_kernels.convolution(buf525, buf526, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf527, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf528 = buf527; del buf527  # reuse
    buf529 = buf526; del buf526  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_179(c_void_p(buf528.data_ptr()), c_void_p(arg1530_1.data_ptr()), c_void_p(arg1531_1.data_ptr()), c_void_p(arg550_1.data_ptr()), c_void_p(arg551_1.data_ptr()), c_void_p(arg552_1.data_ptr()), c_void_p(buf529.data_ptr()))
    del arg1530_1
    del arg1531_1
    del arg550_1
    del arg551_1
    del arg552_1
    # Source Nodes: [x_658, x_660, x_662], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf530 = extern_kernels.convolution(buf528, buf529, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf530, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf528
    buf531 = buf525; del buf525  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_180(c_void_p(buf531.data_ptr()), c_void_p(buf530.data_ptr()), c_void_p(arg1533_1.data_ptr()), c_void_p(arg1534_1.data_ptr()), c_void_p(arg553_1.data_ptr()), c_void_p(arg554_1.data_ptr()))
    del arg1533_1
    del arg1534_1
    del arg553_1
    del arg554_1
    del buf530
    # Source Nodes: [l__mod___stage4_0_fuse_layers_0_2_0], Original ATen: [aten.convolution]
    buf532 = extern_kernels.convolution(buf531, arg582_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf532, (8, 18, 14, 14), (3528, 1, 252, 18))
    del arg582_1
    buf533 = buf378; del buf378  # reuse
    buf534 = empty_strided((144, 72, 3, 3), (648, 1, 216, 72), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_181(c_void_p(buf468.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(arg1560_1.data_ptr()), c_void_p(arg1561_1.data_ptr()), c_void_p(arg580_1.data_ptr()), c_void_p(arg581_1.data_ptr()), c_void_p(buf532.data_ptr()), c_void_p(arg1563_1.data_ptr()), c_void_p(arg1564_1.data_ptr()), c_void_p(arg583_1.data_ptr()), c_void_p(arg584_1.data_ptr()), c_void_p(arg480_1.data_ptr()), c_void_p(buf533.data_ptr()), c_void_p(buf534.data_ptr()))
    del arg1560_1
    del arg1561_1
    del arg1563_1
    del arg1564_1
    del arg480_1
    del arg580_1
    del arg581_1
    del arg583_1
    del arg584_1
    del buf498
    del buf532
    # Source Nodes: [l__mod___transition3_3_0_0], Original ATen: [aten.convolution]
    buf535 = extern_kernels.convolution(buf507, buf534, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf535, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf507
    buf536 = buf535; del buf535  # reuse
    buf537 = empty_strided((144, 144, 3, 3), (1296, 1, 432, 144), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_182(c_void_p(buf536.data_ptr()), c_void_p(arg1461_1.data_ptr()), c_void_p(arg1462_1.data_ptr()), c_void_p(arg481_1.data_ptr()), c_void_p(arg482_1.data_ptr()), c_void_p(arg555_1.data_ptr()), c_void_p(buf537.data_ptr()))
    del arg1461_1
    del arg1462_1
    del arg481_1
    del arg482_1
    del arg555_1
    # Source Nodes: [x_666], Original ATen: [aten.convolution]
    buf538 = extern_kernels.convolution(buf536, buf537, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf538, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf539 = buf538; del buf538  # reuse
    buf540 = buf537; del buf537  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_183(c_void_p(buf539.data_ptr()), c_void_p(arg1536_1.data_ptr()), c_void_p(arg1537_1.data_ptr()), c_void_p(arg556_1.data_ptr()), c_void_p(arg557_1.data_ptr()), c_void_p(arg558_1.data_ptr()), c_void_p(buf540.data_ptr()))
    del arg1536_1
    del arg1537_1
    del arg556_1
    del arg557_1
    del arg558_1
    # Source Nodes: [x_667, x_669, x_671], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf541 = extern_kernels.convolution(buf539, buf540, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf541, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf539
    buf542 = buf536; del buf536  # reuse
    buf543 = buf540; del buf540  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_184(c_void_p(buf542.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(arg1539_1.data_ptr()), c_void_p(arg1540_1.data_ptr()), c_void_p(arg559_1.data_ptr()), c_void_p(arg560_1.data_ptr()), c_void_p(arg561_1.data_ptr()), c_void_p(buf543.data_ptr()))
    del arg1539_1
    del arg1540_1
    del arg559_1
    del arg560_1
    del arg561_1
    del buf541
    # Source Nodes: [x_675], Original ATen: [aten.convolution]
    buf544 = extern_kernels.convolution(buf542, buf543, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf544, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf545 = buf544; del buf544  # reuse
    buf546 = buf543; del buf543  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_185(c_void_p(buf545.data_ptr()), c_void_p(arg1542_1.data_ptr()), c_void_p(arg1543_1.data_ptr()), c_void_p(arg562_1.data_ptr()), c_void_p(arg563_1.data_ptr()), c_void_p(arg564_1.data_ptr()), c_void_p(buf546.data_ptr()))
    del arg1542_1
    del arg1543_1
    del arg562_1
    del arg563_1
    del arg564_1
    # Source Nodes: [x_676, x_678, x_680], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf547 = extern_kernels.convolution(buf545, buf546, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf547, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf545
    buf548 = buf542; del buf542  # reuse
    buf549 = buf546; del buf546  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_186(c_void_p(buf548.data_ptr()), c_void_p(buf547.data_ptr()), c_void_p(arg1545_1.data_ptr()), c_void_p(arg1546_1.data_ptr()), c_void_p(arg565_1.data_ptr()), c_void_p(arg566_1.data_ptr()), c_void_p(arg567_1.data_ptr()), c_void_p(buf549.data_ptr()))
    del arg1545_1
    del arg1546_1
    del arg565_1
    del arg566_1
    del arg567_1
    del buf547
    # Source Nodes: [x_684], Original ATen: [aten.convolution]
    buf550 = extern_kernels.convolution(buf548, buf549, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf550, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf551 = buf550; del buf550  # reuse
    buf552 = buf549; del buf549  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_187(c_void_p(buf551.data_ptr()), c_void_p(arg1548_1.data_ptr()), c_void_p(arg1549_1.data_ptr()), c_void_p(arg568_1.data_ptr()), c_void_p(arg569_1.data_ptr()), c_void_p(arg570_1.data_ptr()), c_void_p(buf552.data_ptr()))
    del arg1548_1
    del arg1549_1
    del arg568_1
    del arg569_1
    del arg570_1
    # Source Nodes: [x_685, x_687, x_689], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf553 = extern_kernels.convolution(buf551, buf552, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf553, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf551
    buf554 = buf548; del buf548  # reuse
    buf555 = buf552; del buf552  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_188(c_void_p(buf554.data_ptr()), c_void_p(buf553.data_ptr()), c_void_p(arg1551_1.data_ptr()), c_void_p(arg1552_1.data_ptr()), c_void_p(arg571_1.data_ptr()), c_void_p(arg572_1.data_ptr()), c_void_p(arg573_1.data_ptr()), c_void_p(buf555.data_ptr()))
    del arg1551_1
    del arg1552_1
    del arg571_1
    del arg572_1
    del arg573_1
    del buf553
    # Source Nodes: [x_693], Original ATen: [aten.convolution]
    buf556 = extern_kernels.convolution(buf554, buf555, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf556, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf557 = buf556; del buf556  # reuse
    buf558 = buf555; del buf555  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_189(c_void_p(buf557.data_ptr()), c_void_p(arg1554_1.data_ptr()), c_void_p(arg1555_1.data_ptr()), c_void_p(arg574_1.data_ptr()), c_void_p(arg575_1.data_ptr()), c_void_p(arg576_1.data_ptr()), c_void_p(buf558.data_ptr()))
    del arg1554_1
    del arg1555_1
    del arg574_1
    del arg575_1
    del arg576_1
    # Source Nodes: [x_694, x_696, x_698], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf559 = extern_kernels.convolution(buf557, buf558, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf559, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf557
    buf654 = buf499; del buf499  # reuse
    cpp_fused_convolution_190(c_void_p(arg609_1.data_ptr()), c_void_p(buf654.data_ptr()))
    del arg609_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_3_0_0_0], Original ATen: [aten.convolution]
    buf655 = extern_kernels.convolution(buf468, buf654, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf655, (8, 18, 28, 28), (14112, 1, 504, 18))
    buf656 = buf655; del buf655  # reuse
    buf657 = buf654; del buf654  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_191(c_void_p(buf656.data_ptr()), c_void_p(arg1590_1.data_ptr()), c_void_p(arg1591_1.data_ptr()), c_void_p(arg610_1.data_ptr()), c_void_p(arg611_1.data_ptr()), c_void_p(arg612_1.data_ptr()), c_void_p(buf657.data_ptr()))
    del arg1590_1
    del arg1591_1
    del arg610_1
    del arg611_1
    del arg612_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_3_0_0_1, l__mod___stage4_0_fuse_layers_3_0_0_2, l__mod___stage4_0_fuse_layers_3_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf658 = extern_kernels.convolution(buf656, buf657, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf658, (8, 18, 14, 14), (3528, 1, 252, 18))
    del buf656
    buf659 = buf658; del buf658  # reuse
    buf660 = reinterpret_tensor(buf504, (144, 18, 3, 3), (162, 1, 54, 18), 0); del buf504  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_192(c_void_p(buf659.data_ptr()), c_void_p(arg1593_1.data_ptr()), c_void_p(arg1594_1.data_ptr()), c_void_p(arg613_1.data_ptr()), c_void_p(arg614_1.data_ptr()), c_void_p(arg615_1.data_ptr()), c_void_p(buf660.data_ptr()))
    del arg1593_1
    del arg1594_1
    del arg613_1
    del arg614_1
    del arg615_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_3_0_1_1, l__mod___stage4_0_fuse_layers_3_0_1_2, l__mod___stage4_0_fuse_layers_3_0_2_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf661 = extern_kernels.convolution(buf659, buf660, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf661, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf659
    buf662 = reinterpret_tensor(buf502, (36, 36, 3, 3), (324, 1, 108, 36), 0); del buf502  # reuse
    cpp_fused_convolution_193(c_void_p(arg618_1.data_ptr()), c_void_p(buf662.data_ptr()))
    del arg618_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_3_1_0_0], Original ATen: [aten.convolution]
    buf663 = extern_kernels.convolution(buf497, buf662, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf663, (8, 36, 14, 14), (7056, 1, 504, 36))
    buf664 = buf663; del buf663  # reuse
    buf665 = reinterpret_tensor(buf529, (144, 36, 3, 3), (324, 1, 108, 36), 0); del buf529  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_194(c_void_p(buf664.data_ptr()), c_void_p(arg1599_1.data_ptr()), c_void_p(arg1600_1.data_ptr()), c_void_p(arg619_1.data_ptr()), c_void_p(arg620_1.data_ptr()), c_void_p(arg621_1.data_ptr()), c_void_p(buf665.data_ptr()))
    del arg1599_1
    del arg1600_1
    del arg619_1
    del arg620_1
    del arg621_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_3_1_0_1, l__mod___stage4_0_fuse_layers_3_1_0_2, l__mod___stage4_0_fuse_layers_3_1_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf666 = extern_kernels.convolution(buf664, buf665, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf666, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf664
    buf668 = buf534; del buf534  # reuse
    cpp_fused_convolution_195(c_void_p(arg624_1.data_ptr()), c_void_p(buf668.data_ptr()))
    del arg624_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_3_2_0_0], Original ATen: [aten.convolution]
    buf669 = extern_kernels.convolution(buf531, buf668, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf669, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf560 = buf554; del buf554  # reuse
    buf667 = buf661; del buf661  # reuse
    buf670 = buf667; del buf667  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_196(c_void_p(buf560.data_ptr()), c_void_p(buf670.data_ptr()), c_void_p(buf559.data_ptr()), c_void_p(arg1557_1.data_ptr()), c_void_p(arg1558_1.data_ptr()), c_void_p(arg577_1.data_ptr()), c_void_p(arg578_1.data_ptr()), c_void_p(arg1596_1.data_ptr()), c_void_p(arg1597_1.data_ptr()), c_void_p(arg616_1.data_ptr()), c_void_p(arg617_1.data_ptr()), c_void_p(buf666.data_ptr()), c_void_p(arg1602_1.data_ptr()), c_void_p(arg1603_1.data_ptr()), c_void_p(arg622_1.data_ptr()), c_void_p(arg623_1.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(arg1605_1.data_ptr()), c_void_p(arg1606_1.data_ptr()), c_void_p(arg625_1.data_ptr()), c_void_p(arg626_1.data_ptr()))
    del arg1557_1
    del arg1558_1
    del arg1596_1
    del arg1597_1
    del arg1602_1
    del arg1603_1
    del arg1605_1
    del arg1606_1
    del arg577_1
    del arg578_1
    del arg616_1
    del arg617_1
    del arg622_1
    del arg623_1
    del arg625_1
    del arg626_1
    del buf559
    del buf666
    del buf669
    # Source Nodes: [l__mod___stage4_0_fuse_layers_0_3_0], Original ATen: [aten.convolution]
    buf561 = extern_kernels.convolution(buf560, arg585_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf561, (8, 18, 7, 7), (882, 1, 126, 18))
    del arg585_1
    buf562 = buf533; del buf533  # reuse
    buf563 = buf657; del buf657  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_197(c_void_p(buf562.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(arg1566_1.data_ptr()), c_void_p(arg1567_1.data_ptr()), c_void_p(arg586_1.data_ptr()), c_void_p(arg587_1.data_ptr()), c_void_p(arg627_1.data_ptr()), c_void_p(buf563.data_ptr()))
    del arg1566_1
    del arg1567_1
    del arg586_1
    del arg587_1
    del arg627_1
    del buf561
    # Source Nodes: [x_702], Original ATen: [aten.convolution]
    buf564 = extern_kernels.convolution(buf562, buf563, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf564, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf565 = buf564; del buf564  # reuse
    buf566 = buf563; del buf563  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_198(c_void_p(buf565.data_ptr()), c_void_p(arg1608_1.data_ptr()), c_void_p(arg1609_1.data_ptr()), c_void_p(arg628_1.data_ptr()), c_void_p(arg629_1.data_ptr()), c_void_p(arg630_1.data_ptr()), c_void_p(buf566.data_ptr()))
    del arg1608_1
    del arg1609_1
    del arg628_1
    del arg629_1
    del arg630_1
    # Source Nodes: [x_703, x_705, x_707], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf567 = extern_kernels.convolution(buf565, buf566, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf567, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf565
    buf568 = buf562; del buf562  # reuse
    buf569 = buf566; del buf566  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_199(c_void_p(buf568.data_ptr()), c_void_p(buf567.data_ptr()), c_void_p(arg1611_1.data_ptr()), c_void_p(arg1612_1.data_ptr()), c_void_p(arg631_1.data_ptr()), c_void_p(arg632_1.data_ptr()), c_void_p(arg633_1.data_ptr()), c_void_p(buf569.data_ptr()))
    del arg1611_1
    del arg1612_1
    del arg631_1
    del arg632_1
    del arg633_1
    del buf567
    # Source Nodes: [x_711], Original ATen: [aten.convolution]
    buf570 = extern_kernels.convolution(buf568, buf569, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf570, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf571 = buf570; del buf570  # reuse
    buf572 = buf569; del buf569  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_200(c_void_p(buf571.data_ptr()), c_void_p(arg1614_1.data_ptr()), c_void_p(arg1615_1.data_ptr()), c_void_p(arg634_1.data_ptr()), c_void_p(arg635_1.data_ptr()), c_void_p(arg636_1.data_ptr()), c_void_p(buf572.data_ptr()))
    del arg1614_1
    del arg1615_1
    del arg634_1
    del arg635_1
    del arg636_1
    # Source Nodes: [x_712, x_714, x_716], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf573 = extern_kernels.convolution(buf571, buf572, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf573, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf571
    buf574 = buf568; del buf568  # reuse
    buf575 = buf572; del buf572  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_201(c_void_p(buf574.data_ptr()), c_void_p(buf573.data_ptr()), c_void_p(arg1617_1.data_ptr()), c_void_p(arg1618_1.data_ptr()), c_void_p(arg637_1.data_ptr()), c_void_p(arg638_1.data_ptr()), c_void_p(arg639_1.data_ptr()), c_void_p(buf575.data_ptr()))
    del arg1617_1
    del arg1618_1
    del arg637_1
    del arg638_1
    del arg639_1
    del buf573
    # Source Nodes: [x_720], Original ATen: [aten.convolution]
    buf576 = extern_kernels.convolution(buf574, buf575, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf576, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf577 = buf576; del buf576  # reuse
    buf578 = buf575; del buf575  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_202(c_void_p(buf577.data_ptr()), c_void_p(arg1620_1.data_ptr()), c_void_p(arg1621_1.data_ptr()), c_void_p(arg640_1.data_ptr()), c_void_p(arg641_1.data_ptr()), c_void_p(arg642_1.data_ptr()), c_void_p(buf578.data_ptr()))
    del arg1620_1
    del arg1621_1
    del arg640_1
    del arg641_1
    del arg642_1
    # Source Nodes: [x_721, x_723, x_725], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf579 = extern_kernels.convolution(buf577, buf578, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf579, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf577
    buf580 = buf574; del buf574  # reuse
    buf581 = buf578; del buf578  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_203(c_void_p(buf580.data_ptr()), c_void_p(buf579.data_ptr()), c_void_p(arg1623_1.data_ptr()), c_void_p(arg1624_1.data_ptr()), c_void_p(arg643_1.data_ptr()), c_void_p(arg644_1.data_ptr()), c_void_p(arg645_1.data_ptr()), c_void_p(buf581.data_ptr()))
    del arg1623_1
    del arg1624_1
    del arg643_1
    del arg644_1
    del arg645_1
    del buf579
    # Source Nodes: [x_729], Original ATen: [aten.convolution]
    buf582 = extern_kernels.convolution(buf580, buf581, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf582, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf583 = buf582; del buf582  # reuse
    buf584 = buf581; del buf581  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_204(c_void_p(buf583.data_ptr()), c_void_p(arg1626_1.data_ptr()), c_void_p(arg1627_1.data_ptr()), c_void_p(arg646_1.data_ptr()), c_void_p(arg647_1.data_ptr()), c_void_p(arg648_1.data_ptr()), c_void_p(buf584.data_ptr()))
    del arg1626_1
    del arg1627_1
    del arg646_1
    del arg647_1
    del arg648_1
    # Source Nodes: [x_730, x_732, x_734], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf585 = extern_kernels.convolution(buf583, buf584, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf585, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf583
    buf586 = buf580; del buf580  # reuse
    buf587 = buf469; del buf469  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_205(c_void_p(buf586.data_ptr()), c_void_p(buf585.data_ptr()), c_void_p(arg1629_1.data_ptr()), c_void_p(arg1630_1.data_ptr()), c_void_p(arg649_1.data_ptr()), c_void_p(arg650_1.data_ptr()), c_void_p(arg588_1.data_ptr()), c_void_p(buf587.data_ptr()))
    del arg1629_1
    del arg1630_1
    del arg588_1
    del arg649_1
    del arg650_1
    del buf585
    # Source Nodes: [l__mod___stage4_0_fuse_layers_1_0_0_0], Original ATen: [aten.convolution]
    buf588 = extern_kernels.convolution(buf468, buf587, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf588, (8, 36, 28, 28), (28224, 1, 1008, 36))
    # Source Nodes: [l__mod___stage4_0_fuse_layers_1_2_0], Original ATen: [aten.convolution]
    buf589 = extern_kernels.convolution(buf531, arg591_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf589, (8, 36, 14, 14), (7056, 1, 504, 36))
    del arg591_1
    buf590 = buf588; del buf588  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_206(c_void_p(buf590.data_ptr()), c_void_p(arg1569_1.data_ptr()), c_void_p(arg1570_1.data_ptr()), c_void_p(arg589_1.data_ptr()), c_void_p(arg590_1.data_ptr()), c_void_p(buf497.data_ptr()), c_void_p(buf589.data_ptr()), c_void_p(arg1572_1.data_ptr()), c_void_p(arg1573_1.data_ptr()), c_void_p(arg592_1.data_ptr()), c_void_p(arg593_1.data_ptr()))
    del arg1569_1
    del arg1570_1
    del arg1572_1
    del arg1573_1
    del arg589_1
    del arg590_1
    del arg592_1
    del arg593_1
    del buf589
    # Source Nodes: [l__mod___stage4_0_fuse_layers_1_3_0], Original ATen: [aten.convolution]
    buf591 = extern_kernels.convolution(buf560, arg594_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf591, (8, 36, 7, 7), (1764, 1, 252, 36))
    del arg594_1
    buf592 = buf590; del buf590  # reuse
    buf593 = buf662; del buf662  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_207(c_void_p(buf592.data_ptr()), c_void_p(buf591.data_ptr()), c_void_p(arg1575_1.data_ptr()), c_void_p(arg1576_1.data_ptr()), c_void_p(arg595_1.data_ptr()), c_void_p(arg596_1.data_ptr()), c_void_p(arg651_1.data_ptr()), c_void_p(buf593.data_ptr()))
    del arg1575_1
    del arg1576_1
    del arg595_1
    del arg596_1
    del arg651_1
    del buf591
    # Source Nodes: [x_738], Original ATen: [aten.convolution]
    buf594 = extern_kernels.convolution(buf592, buf593, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf594, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf595 = buf594; del buf594  # reuse
    buf596 = buf593; del buf593  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_208(c_void_p(buf595.data_ptr()), c_void_p(arg1632_1.data_ptr()), c_void_p(arg1633_1.data_ptr()), c_void_p(arg652_1.data_ptr()), c_void_p(arg653_1.data_ptr()), c_void_p(arg654_1.data_ptr()), c_void_p(buf596.data_ptr()))
    del arg1632_1
    del arg1633_1
    del arg652_1
    del arg653_1
    del arg654_1
    # Source Nodes: [x_739, x_741, x_743], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf597 = extern_kernels.convolution(buf595, buf596, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf597, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf595
    buf598 = buf592; del buf592  # reuse
    buf599 = buf596; del buf596  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_209(c_void_p(buf598.data_ptr()), c_void_p(buf597.data_ptr()), c_void_p(arg1635_1.data_ptr()), c_void_p(arg1636_1.data_ptr()), c_void_p(arg655_1.data_ptr()), c_void_p(arg656_1.data_ptr()), c_void_p(arg657_1.data_ptr()), c_void_p(buf599.data_ptr()))
    del arg1635_1
    del arg1636_1
    del arg655_1
    del arg656_1
    del arg657_1
    del buf597
    # Source Nodes: [x_747], Original ATen: [aten.convolution]
    buf600 = extern_kernels.convolution(buf598, buf599, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf600, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf601 = buf600; del buf600  # reuse
    buf602 = buf599; del buf599  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_210(c_void_p(buf601.data_ptr()), c_void_p(arg1638_1.data_ptr()), c_void_p(arg1639_1.data_ptr()), c_void_p(arg658_1.data_ptr()), c_void_p(arg659_1.data_ptr()), c_void_p(arg660_1.data_ptr()), c_void_p(buf602.data_ptr()))
    del arg1638_1
    del arg1639_1
    del arg658_1
    del arg659_1
    del arg660_1
    # Source Nodes: [x_748, x_750, x_752], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf603 = extern_kernels.convolution(buf601, buf602, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf603, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf601
    buf604 = buf598; del buf598  # reuse
    buf605 = buf602; del buf602  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_211(c_void_p(buf604.data_ptr()), c_void_p(buf603.data_ptr()), c_void_p(arg1641_1.data_ptr()), c_void_p(arg1642_1.data_ptr()), c_void_p(arg661_1.data_ptr()), c_void_p(arg662_1.data_ptr()), c_void_p(arg663_1.data_ptr()), c_void_p(buf605.data_ptr()))
    del arg1641_1
    del arg1642_1
    del arg661_1
    del arg662_1
    del arg663_1
    del buf603
    # Source Nodes: [x_756], Original ATen: [aten.convolution]
    buf606 = extern_kernels.convolution(buf604, buf605, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf606, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf607 = buf606; del buf606  # reuse
    buf608 = buf605; del buf605  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_212(c_void_p(buf607.data_ptr()), c_void_p(arg1644_1.data_ptr()), c_void_p(arg1645_1.data_ptr()), c_void_p(arg664_1.data_ptr()), c_void_p(arg665_1.data_ptr()), c_void_p(arg666_1.data_ptr()), c_void_p(buf608.data_ptr()))
    del arg1644_1
    del arg1645_1
    del arg664_1
    del arg665_1
    del arg666_1
    # Source Nodes: [x_757, x_759, x_761], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf609 = extern_kernels.convolution(buf607, buf608, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf609, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf607
    buf610 = buf604; del buf604  # reuse
    buf611 = buf608; del buf608  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_213(c_void_p(buf610.data_ptr()), c_void_p(buf609.data_ptr()), c_void_p(arg1647_1.data_ptr()), c_void_p(arg1648_1.data_ptr()), c_void_p(arg667_1.data_ptr()), c_void_p(arg668_1.data_ptr()), c_void_p(arg669_1.data_ptr()), c_void_p(buf611.data_ptr()))
    del arg1647_1
    del arg1648_1
    del arg667_1
    del arg668_1
    del arg669_1
    del buf609
    # Source Nodes: [x_765], Original ATen: [aten.convolution]
    buf612 = extern_kernels.convolution(buf610, buf611, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf612, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf613 = buf612; del buf612  # reuse
    buf614 = buf611; del buf611  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_214(c_void_p(buf613.data_ptr()), c_void_p(arg1650_1.data_ptr()), c_void_p(arg1651_1.data_ptr()), c_void_p(arg670_1.data_ptr()), c_void_p(arg671_1.data_ptr()), c_void_p(arg672_1.data_ptr()), c_void_p(buf614.data_ptr()))
    del arg1650_1
    del arg1651_1
    del arg670_1
    del arg671_1
    del arg672_1
    # Source Nodes: [x_766, x_768, x_770], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf615 = extern_kernels.convolution(buf613, buf614, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf615, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf613
    buf616 = buf610; del buf610  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_215(c_void_p(buf616.data_ptr()), c_void_p(buf615.data_ptr()), c_void_p(arg1653_1.data_ptr()), c_void_p(arg1654_1.data_ptr()), c_void_p(arg673_1.data_ptr()), c_void_p(arg674_1.data_ptr()))
    del arg1653_1
    del arg1654_1
    del arg673_1
    del arg674_1
    del buf615
    # Source Nodes: [l__mod___stage4_1_fuse_layers_0_1_0], Original ATen: [aten.convolution]
    buf617 = extern_kernels.convolution(buf616, arg723_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf617, (8, 18, 28, 28), (14112, 1, 504, 18))
    del arg723_1
    buf618 = buf584; del buf584  # reuse
    cpp_fused_convolution_216(c_void_p(arg597_1.data_ptr()), c_void_p(buf618.data_ptr()))
    del arg597_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_2_0_0_0], Original ATen: [aten.convolution]
    buf619 = extern_kernels.convolution(buf468, buf618, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf619, (8, 18, 28, 28), (14112, 1, 504, 18))
    buf620 = buf619; del buf619  # reuse
    buf621 = reinterpret_tensor(buf614, (72, 18, 3, 3), (162, 1, 54, 18), 0); del buf614  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_217(c_void_p(buf620.data_ptr()), c_void_p(arg1578_1.data_ptr()), c_void_p(arg1579_1.data_ptr()), c_void_p(arg598_1.data_ptr()), c_void_p(arg599_1.data_ptr()), c_void_p(arg600_1.data_ptr()), c_void_p(buf621.data_ptr()))
    del arg1578_1
    del arg1579_1
    del arg598_1
    del arg599_1
    del arg600_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_2_0_0_1, l__mod___stage4_0_fuse_layers_2_0_0_2, l__mod___stage4_0_fuse_layers_2_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf622 = extern_kernels.convolution(buf620, buf621, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf622, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf620
    buf623 = reinterpret_tensor(buf660, (72, 36, 3, 3), (324, 1, 108, 36), 0); del buf660  # reuse
    cpp_fused_convolution_218(c_void_p(arg603_1.data_ptr()), c_void_p(buf623.data_ptr()))
    del arg603_1
    # Source Nodes: [l__mod___stage4_0_fuse_layers_2_1_0_0], Original ATen: [aten.convolution]
    buf624 = extern_kernels.convolution(buf497, buf623, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf624, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf497
    buf625 = buf622; del buf622  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_219(c_void_p(buf625.data_ptr()), c_void_p(arg1581_1.data_ptr()), c_void_p(arg1582_1.data_ptr()), c_void_p(arg601_1.data_ptr()), c_void_p(arg602_1.data_ptr()), c_void_p(buf624.data_ptr()), c_void_p(arg1584_1.data_ptr()), c_void_p(arg1585_1.data_ptr()), c_void_p(arg604_1.data_ptr()), c_void_p(arg605_1.data_ptr()))
    del arg1581_1
    del arg1582_1
    del arg1584_1
    del arg1585_1
    del arg601_1
    del arg602_1
    del arg604_1
    del arg605_1
    del buf624
    # Source Nodes: [l__mod___stage4_0_fuse_layers_2_3_0], Original ATen: [aten.convolution]
    buf626 = extern_kernels.convolution(buf560, arg606_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf626, (8, 72, 7, 7), (3528, 1, 504, 72))
    del arg606_1
    del buf560
    buf627 = buf531; del buf531  # reuse
    buf628 = reinterpret_tensor(buf665, (72, 72, 3, 3), (648, 1, 216, 72), 0); del buf665  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_220(c_void_p(buf627.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(buf626.data_ptr()), c_void_p(arg1587_1.data_ptr()), c_void_p(arg1588_1.data_ptr()), c_void_p(arg607_1.data_ptr()), c_void_p(arg608_1.data_ptr()), c_void_p(arg675_1.data_ptr()), c_void_p(buf628.data_ptr()))
    del arg1587_1
    del arg1588_1
    del arg607_1
    del arg608_1
    del arg675_1
    del buf625
    del buf626
    # Source Nodes: [x_774], Original ATen: [aten.convolution]
    buf629 = extern_kernels.convolution(buf627, buf628, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf629, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf630 = buf629; del buf629  # reuse
    buf631 = buf628; del buf628  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_221(c_void_p(buf630.data_ptr()), c_void_p(arg1656_1.data_ptr()), c_void_p(arg1657_1.data_ptr()), c_void_p(arg676_1.data_ptr()), c_void_p(arg677_1.data_ptr()), c_void_p(arg678_1.data_ptr()), c_void_p(buf631.data_ptr()))
    del arg1656_1
    del arg1657_1
    del arg676_1
    del arg677_1
    del arg678_1
    # Source Nodes: [x_775, x_777, x_779], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf632 = extern_kernels.convolution(buf630, buf631, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf632, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf630
    buf633 = buf627; del buf627  # reuse
    buf634 = buf631; del buf631  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_222(c_void_p(buf633.data_ptr()), c_void_p(buf632.data_ptr()), c_void_p(arg1659_1.data_ptr()), c_void_p(arg1660_1.data_ptr()), c_void_p(arg679_1.data_ptr()), c_void_p(arg680_1.data_ptr()), c_void_p(arg681_1.data_ptr()), c_void_p(buf634.data_ptr()))
    del arg1659_1
    del arg1660_1
    del arg679_1
    del arg680_1
    del arg681_1
    del buf632
    # Source Nodes: [x_783], Original ATen: [aten.convolution]
    buf635 = extern_kernels.convolution(buf633, buf634, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf635, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf636 = buf635; del buf635  # reuse
    buf637 = buf634; del buf634  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_223(c_void_p(buf636.data_ptr()), c_void_p(arg1662_1.data_ptr()), c_void_p(arg1663_1.data_ptr()), c_void_p(arg682_1.data_ptr()), c_void_p(arg683_1.data_ptr()), c_void_p(arg684_1.data_ptr()), c_void_p(buf637.data_ptr()))
    del arg1662_1
    del arg1663_1
    del arg682_1
    del arg683_1
    del arg684_1
    # Source Nodes: [x_784, x_786, x_788], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf638 = extern_kernels.convolution(buf636, buf637, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf638, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf636
    buf639 = buf633; del buf633  # reuse
    buf640 = buf637; del buf637  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_224(c_void_p(buf639.data_ptr()), c_void_p(buf638.data_ptr()), c_void_p(arg1665_1.data_ptr()), c_void_p(arg1666_1.data_ptr()), c_void_p(arg685_1.data_ptr()), c_void_p(arg686_1.data_ptr()), c_void_p(arg687_1.data_ptr()), c_void_p(buf640.data_ptr()))
    del arg1665_1
    del arg1666_1
    del arg685_1
    del arg686_1
    del arg687_1
    del buf638
    # Source Nodes: [x_792], Original ATen: [aten.convolution]
    buf641 = extern_kernels.convolution(buf639, buf640, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf641, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf642 = buf641; del buf641  # reuse
    buf643 = buf640; del buf640  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_225(c_void_p(buf642.data_ptr()), c_void_p(arg1668_1.data_ptr()), c_void_p(arg1669_1.data_ptr()), c_void_p(arg688_1.data_ptr()), c_void_p(arg689_1.data_ptr()), c_void_p(arg690_1.data_ptr()), c_void_p(buf643.data_ptr()))
    del arg1668_1
    del arg1669_1
    del arg688_1
    del arg689_1
    del arg690_1
    # Source Nodes: [x_793, x_795, x_797], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf644 = extern_kernels.convolution(buf642, buf643, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf644, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf642
    buf645 = buf639; del buf639  # reuse
    buf646 = buf643; del buf643  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_226(c_void_p(buf645.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(arg1671_1.data_ptr()), c_void_p(arg1672_1.data_ptr()), c_void_p(arg691_1.data_ptr()), c_void_p(arg692_1.data_ptr()), c_void_p(arg693_1.data_ptr()), c_void_p(buf646.data_ptr()))
    del arg1671_1
    del arg1672_1
    del arg691_1
    del arg692_1
    del arg693_1
    del buf644
    # Source Nodes: [x_801], Original ATen: [aten.convolution]
    buf647 = extern_kernels.convolution(buf645, buf646, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf647, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf648 = buf647; del buf647  # reuse
    buf649 = buf646; del buf646  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_227(c_void_p(buf648.data_ptr()), c_void_p(arg1674_1.data_ptr()), c_void_p(arg1675_1.data_ptr()), c_void_p(arg694_1.data_ptr()), c_void_p(arg695_1.data_ptr()), c_void_p(arg696_1.data_ptr()), c_void_p(buf649.data_ptr()))
    del arg1674_1
    del arg1675_1
    del arg694_1
    del arg695_1
    del arg696_1
    # Source Nodes: [x_802, x_804, x_806], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf650 = extern_kernels.convolution(buf648, buf649, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf650, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf648
    buf651 = buf645; del buf645  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_228(c_void_p(buf651.data_ptr()), c_void_p(buf650.data_ptr()), c_void_p(arg1677_1.data_ptr()), c_void_p(arg1678_1.data_ptr()), c_void_p(arg697_1.data_ptr()), c_void_p(arg698_1.data_ptr()))
    del arg1677_1
    del arg1678_1
    del arg697_1
    del arg698_1
    del buf650
    # Source Nodes: [l__mod___stage4_1_fuse_layers_0_2_0], Original ATen: [aten.convolution]
    buf652 = extern_kernels.convolution(buf651, arg726_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf652, (8, 18, 14, 14), (3528, 1, 252, 18))
    del arg726_1
    buf653 = buf468; del buf468  # reuse
    buf671 = buf558; del buf558  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_229(c_void_p(buf586.data_ptr()), c_void_p(buf617.data_ptr()), c_void_p(arg1704_1.data_ptr()), c_void_p(arg1705_1.data_ptr()), c_void_p(arg724_1.data_ptr()), c_void_p(arg725_1.data_ptr()), c_void_p(buf652.data_ptr()), c_void_p(arg1707_1.data_ptr()), c_void_p(arg1708_1.data_ptr()), c_void_p(arg727_1.data_ptr()), c_void_p(arg728_1.data_ptr()), c_void_p(arg699_1.data_ptr()), c_void_p(buf653.data_ptr()), c_void_p(buf671.data_ptr()))
    del arg1704_1
    del arg1705_1
    del arg1707_1
    del arg1708_1
    del arg699_1
    del arg724_1
    del arg725_1
    del arg727_1
    del arg728_1
    del buf617
    del buf652
    # Source Nodes: [x_810], Original ATen: [aten.convolution]
    buf672 = extern_kernels.convolution(buf670, buf671, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf672, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf673 = buf672; del buf672  # reuse
    buf674 = buf671; del buf671  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_230(c_void_p(buf673.data_ptr()), c_void_p(arg1680_1.data_ptr()), c_void_p(arg1681_1.data_ptr()), c_void_p(arg700_1.data_ptr()), c_void_p(arg701_1.data_ptr()), c_void_p(arg702_1.data_ptr()), c_void_p(buf674.data_ptr()))
    del arg1680_1
    del arg1681_1
    del arg700_1
    del arg701_1
    del arg702_1
    # Source Nodes: [x_811, x_813, x_815], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf675 = extern_kernels.convolution(buf673, buf674, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf675, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf673
    buf676 = buf670; del buf670  # reuse
    buf677 = buf674; del buf674  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_231(c_void_p(buf676.data_ptr()), c_void_p(buf675.data_ptr()), c_void_p(arg1683_1.data_ptr()), c_void_p(arg1684_1.data_ptr()), c_void_p(arg703_1.data_ptr()), c_void_p(arg704_1.data_ptr()), c_void_p(arg705_1.data_ptr()), c_void_p(buf677.data_ptr()))
    del arg1683_1
    del arg1684_1
    del arg703_1
    del arg704_1
    del arg705_1
    del buf675
    # Source Nodes: [x_819], Original ATen: [aten.convolution]
    buf678 = extern_kernels.convolution(buf676, buf677, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf678, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf679 = buf678; del buf678  # reuse
    buf680 = buf677; del buf677  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_232(c_void_p(buf679.data_ptr()), c_void_p(arg1686_1.data_ptr()), c_void_p(arg1687_1.data_ptr()), c_void_p(arg706_1.data_ptr()), c_void_p(arg707_1.data_ptr()), c_void_p(arg708_1.data_ptr()), c_void_p(buf680.data_ptr()))
    del arg1686_1
    del arg1687_1
    del arg706_1
    del arg707_1
    del arg708_1
    # Source Nodes: [x_820, x_822, x_824], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf681 = extern_kernels.convolution(buf679, buf680, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf681, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf679
    buf682 = buf676; del buf676  # reuse
    buf683 = buf680; del buf680  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_233(c_void_p(buf682.data_ptr()), c_void_p(buf681.data_ptr()), c_void_p(arg1689_1.data_ptr()), c_void_p(arg1690_1.data_ptr()), c_void_p(arg709_1.data_ptr()), c_void_p(arg710_1.data_ptr()), c_void_p(arg711_1.data_ptr()), c_void_p(buf683.data_ptr()))
    del arg1689_1
    del arg1690_1
    del arg709_1
    del arg710_1
    del arg711_1
    del buf681
    # Source Nodes: [x_828], Original ATen: [aten.convolution]
    buf684 = extern_kernels.convolution(buf682, buf683, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf684, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf685 = buf684; del buf684  # reuse
    buf686 = buf683; del buf683  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_234(c_void_p(buf685.data_ptr()), c_void_p(arg1692_1.data_ptr()), c_void_p(arg1693_1.data_ptr()), c_void_p(arg712_1.data_ptr()), c_void_p(arg713_1.data_ptr()), c_void_p(arg714_1.data_ptr()), c_void_p(buf686.data_ptr()))
    del arg1692_1
    del arg1693_1
    del arg712_1
    del arg713_1
    del arg714_1
    # Source Nodes: [x_829, x_831, x_833], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf687 = extern_kernels.convolution(buf685, buf686, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf687, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf685
    buf688 = buf682; del buf682  # reuse
    buf689 = buf686; del buf686  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_235(c_void_p(buf688.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(arg1695_1.data_ptr()), c_void_p(arg1696_1.data_ptr()), c_void_p(arg715_1.data_ptr()), c_void_p(arg716_1.data_ptr()), c_void_p(arg717_1.data_ptr()), c_void_p(buf689.data_ptr()))
    del arg1695_1
    del arg1696_1
    del arg715_1
    del arg716_1
    del arg717_1
    del buf687
    # Source Nodes: [x_837], Original ATen: [aten.convolution]
    buf690 = extern_kernels.convolution(buf688, buf689, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf690, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf691 = buf690; del buf690  # reuse
    buf692 = buf689; del buf689  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_236(c_void_p(buf691.data_ptr()), c_void_p(arg1698_1.data_ptr()), c_void_p(arg1699_1.data_ptr()), c_void_p(arg718_1.data_ptr()), c_void_p(arg719_1.data_ptr()), c_void_p(arg720_1.data_ptr()), c_void_p(buf692.data_ptr()))
    del arg1698_1
    del arg1699_1
    del arg718_1
    del arg719_1
    del arg720_1
    # Source Nodes: [x_838, x_840, x_842], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf693 = extern_kernels.convolution(buf691, buf692, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf693, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf691
    buf801 = buf618; del buf618  # reuse
    cpp_fused_convolution_237(c_void_p(arg753_1.data_ptr()), c_void_p(buf801.data_ptr()))
    del arg753_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_3_0_0_0], Original ATen: [aten.convolution]
    buf802 = extern_kernels.convolution(buf586, buf801, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf802, (8, 18, 28, 28), (14112, 1, 504, 18))
    buf803 = buf802; del buf802  # reuse
    buf804 = buf801; del buf801  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_238(c_void_p(buf803.data_ptr()), c_void_p(arg1734_1.data_ptr()), c_void_p(arg1735_1.data_ptr()), c_void_p(arg754_1.data_ptr()), c_void_p(arg755_1.data_ptr()), c_void_p(arg756_1.data_ptr()), c_void_p(buf804.data_ptr()))
    del arg1734_1
    del arg1735_1
    del arg754_1
    del arg755_1
    del arg756_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_3_0_0_1, l__mod___stage4_1_fuse_layers_3_0_0_2, l__mod___stage4_1_fuse_layers_3_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf805 = extern_kernels.convolution(buf803, buf804, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf805, (8, 18, 14, 14), (3528, 1, 252, 18))
    del buf803
    buf806 = buf805; del buf805  # reuse
    buf807 = reinterpret_tensor(buf623, (144, 18, 3, 3), (162, 1, 54, 18), 0); del buf623  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_239(c_void_p(buf806.data_ptr()), c_void_p(arg1737_1.data_ptr()), c_void_p(arg1738_1.data_ptr()), c_void_p(arg757_1.data_ptr()), c_void_p(arg758_1.data_ptr()), c_void_p(arg759_1.data_ptr()), c_void_p(buf807.data_ptr()))
    del arg1737_1
    del arg1738_1
    del arg757_1
    del arg758_1
    del arg759_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_3_0_1_1, l__mod___stage4_1_fuse_layers_3_0_1_2, l__mod___stage4_1_fuse_layers_3_0_2_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf808 = extern_kernels.convolution(buf806, buf807, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf808, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf806
    buf809 = reinterpret_tensor(buf621, (36, 36, 3, 3), (324, 1, 108, 36), 0); del buf621  # reuse
    cpp_fused_convolution_240(c_void_p(arg762_1.data_ptr()), c_void_p(buf809.data_ptr()))
    del arg762_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_3_1_0_0], Original ATen: [aten.convolution]
    buf810 = extern_kernels.convolution(buf616, buf809, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf810, (8, 36, 14, 14), (7056, 1, 504, 36))
    buf811 = buf810; del buf810  # reuse
    buf812 = reinterpret_tensor(buf649, (144, 36, 3, 3), (324, 1, 108, 36), 0); del buf649  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_241(c_void_p(buf811.data_ptr()), c_void_p(arg1743_1.data_ptr()), c_void_p(arg1744_1.data_ptr()), c_void_p(arg763_1.data_ptr()), c_void_p(arg764_1.data_ptr()), c_void_p(arg765_1.data_ptr()), c_void_p(buf812.data_ptr()))
    del arg1743_1
    del arg1744_1
    del arg763_1
    del arg764_1
    del arg765_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_3_1_0_1, l__mod___stage4_1_fuse_layers_3_1_0_2, l__mod___stage4_1_fuse_layers_3_1_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf813 = extern_kernels.convolution(buf811, buf812, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf813, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf811
    buf815 = buf668; del buf668  # reuse
    cpp_fused_convolution_242(c_void_p(arg768_1.data_ptr()), c_void_p(buf815.data_ptr()))
    del arg768_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_3_2_0_0], Original ATen: [aten.convolution]
    buf816 = extern_kernels.convolution(buf651, buf815, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf816, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf694 = buf688; del buf688  # reuse
    buf814 = buf808; del buf808  # reuse
    buf817 = buf814; del buf814  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_243(c_void_p(buf694.data_ptr()), c_void_p(buf817.data_ptr()), c_void_p(buf693.data_ptr()), c_void_p(arg1701_1.data_ptr()), c_void_p(arg1702_1.data_ptr()), c_void_p(arg721_1.data_ptr()), c_void_p(arg722_1.data_ptr()), c_void_p(arg1740_1.data_ptr()), c_void_p(arg1741_1.data_ptr()), c_void_p(arg760_1.data_ptr()), c_void_p(arg761_1.data_ptr()), c_void_p(buf813.data_ptr()), c_void_p(arg1746_1.data_ptr()), c_void_p(arg1747_1.data_ptr()), c_void_p(arg766_1.data_ptr()), c_void_p(arg767_1.data_ptr()), c_void_p(buf816.data_ptr()), c_void_p(arg1749_1.data_ptr()), c_void_p(arg1750_1.data_ptr()), c_void_p(arg769_1.data_ptr()), c_void_p(arg770_1.data_ptr()))
    del arg1701_1
    del arg1702_1
    del arg1740_1
    del arg1741_1
    del arg1746_1
    del arg1747_1
    del arg1749_1
    del arg1750_1
    del arg721_1
    del arg722_1
    del arg760_1
    del arg761_1
    del arg766_1
    del arg767_1
    del arg769_1
    del arg770_1
    del buf693
    del buf813
    del buf816
    # Source Nodes: [l__mod___stage4_1_fuse_layers_0_3_0], Original ATen: [aten.convolution]
    buf695 = extern_kernels.convolution(buf694, arg729_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf695, (8, 18, 7, 7), (882, 1, 126, 18))
    del arg729_1
    buf696 = buf653; del buf653  # reuse
    buf697 = buf804; del buf804  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_244(c_void_p(buf696.data_ptr()), c_void_p(buf695.data_ptr()), c_void_p(arg1710_1.data_ptr()), c_void_p(arg1711_1.data_ptr()), c_void_p(arg730_1.data_ptr()), c_void_p(arg731_1.data_ptr()), c_void_p(arg771_1.data_ptr()), c_void_p(buf697.data_ptr()))
    del arg1710_1
    del arg1711_1
    del arg730_1
    del arg731_1
    del arg771_1
    del buf695
    # Source Nodes: [x_846], Original ATen: [aten.convolution]
    buf698 = extern_kernels.convolution(buf696, buf697, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf698, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf699 = buf698; del buf698  # reuse
    buf700 = buf697; del buf697  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_245(c_void_p(buf699.data_ptr()), c_void_p(arg1752_1.data_ptr()), c_void_p(arg1753_1.data_ptr()), c_void_p(arg772_1.data_ptr()), c_void_p(arg773_1.data_ptr()), c_void_p(arg774_1.data_ptr()), c_void_p(buf700.data_ptr()))
    del arg1752_1
    del arg1753_1
    del arg772_1
    del arg773_1
    del arg774_1
    # Source Nodes: [x_847, x_849, x_851], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf701 = extern_kernels.convolution(buf699, buf700, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf701, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf699
    buf702 = buf696; del buf696  # reuse
    buf703 = buf700; del buf700  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_246(c_void_p(buf702.data_ptr()), c_void_p(buf701.data_ptr()), c_void_p(arg1755_1.data_ptr()), c_void_p(arg1756_1.data_ptr()), c_void_p(arg775_1.data_ptr()), c_void_p(arg776_1.data_ptr()), c_void_p(arg777_1.data_ptr()), c_void_p(buf703.data_ptr()))
    del arg1755_1
    del arg1756_1
    del arg775_1
    del arg776_1
    del arg777_1
    del buf701
    # Source Nodes: [x_855], Original ATen: [aten.convolution]
    buf704 = extern_kernels.convolution(buf702, buf703, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf704, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf705 = buf704; del buf704  # reuse
    buf706 = buf703; del buf703  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_247(c_void_p(buf705.data_ptr()), c_void_p(arg1758_1.data_ptr()), c_void_p(arg1759_1.data_ptr()), c_void_p(arg778_1.data_ptr()), c_void_p(arg779_1.data_ptr()), c_void_p(arg780_1.data_ptr()), c_void_p(buf706.data_ptr()))
    del arg1758_1
    del arg1759_1
    del arg778_1
    del arg779_1
    del arg780_1
    # Source Nodes: [x_856, x_858, x_860], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf707 = extern_kernels.convolution(buf705, buf706, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf707, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf705
    buf708 = buf702; del buf702  # reuse
    buf709 = buf706; del buf706  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_248(c_void_p(buf708.data_ptr()), c_void_p(buf707.data_ptr()), c_void_p(arg1761_1.data_ptr()), c_void_p(arg1762_1.data_ptr()), c_void_p(arg781_1.data_ptr()), c_void_p(arg782_1.data_ptr()), c_void_p(arg783_1.data_ptr()), c_void_p(buf709.data_ptr()))
    del arg1761_1
    del arg1762_1
    del arg781_1
    del arg782_1
    del arg783_1
    del buf707
    # Source Nodes: [x_864], Original ATen: [aten.convolution]
    buf710 = extern_kernels.convolution(buf708, buf709, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf710, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf711 = buf710; del buf710  # reuse
    buf712 = buf709; del buf709  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_249(c_void_p(buf711.data_ptr()), c_void_p(arg1764_1.data_ptr()), c_void_p(arg1765_1.data_ptr()), c_void_p(arg784_1.data_ptr()), c_void_p(arg785_1.data_ptr()), c_void_p(arg786_1.data_ptr()), c_void_p(buf712.data_ptr()))
    del arg1764_1
    del arg1765_1
    del arg784_1
    del arg785_1
    del arg786_1
    # Source Nodes: [x_865, x_867, x_869], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf713 = extern_kernels.convolution(buf711, buf712, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf713, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf711
    buf714 = buf708; del buf708  # reuse
    buf715 = buf712; del buf712  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_250(c_void_p(buf714.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(arg1767_1.data_ptr()), c_void_p(arg1768_1.data_ptr()), c_void_p(arg787_1.data_ptr()), c_void_p(arg788_1.data_ptr()), c_void_p(arg789_1.data_ptr()), c_void_p(buf715.data_ptr()))
    del arg1767_1
    del arg1768_1
    del arg787_1
    del arg788_1
    del arg789_1
    del buf713
    # Source Nodes: [x_873], Original ATen: [aten.convolution]
    buf716 = extern_kernels.convolution(buf714, buf715, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf716, (8, 18, 56, 56), (56448, 1, 1008, 18))
    buf717 = buf716; del buf716  # reuse
    buf718 = buf715; del buf715  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_251(c_void_p(buf717.data_ptr()), c_void_p(arg1770_1.data_ptr()), c_void_p(arg1771_1.data_ptr()), c_void_p(arg790_1.data_ptr()), c_void_p(arg791_1.data_ptr()), c_void_p(arg792_1.data_ptr()), c_void_p(buf718.data_ptr()))
    del arg1770_1
    del arg1771_1
    del arg790_1
    del arg791_1
    del arg792_1
    # Source Nodes: [x_874, x_876, x_878], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf719 = extern_kernels.convolution(buf717, buf718, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf719, (8, 18, 56, 56), (56448, 1, 1008, 18))
    del buf717
    buf720 = buf714; del buf714  # reuse
    buf721 = buf718; del buf718  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_252(c_void_p(buf720.data_ptr()), c_void_p(buf719.data_ptr()), c_void_p(arg1773_1.data_ptr()), c_void_p(arg1774_1.data_ptr()), c_void_p(arg793_1.data_ptr()), c_void_p(arg794_1.data_ptr()), c_void_p(arg897_1.data_ptr()), c_void_p(buf721.data_ptr()))
    del arg1773_1
    del arg1774_1
    del arg793_1
    del arg794_1
    del arg897_1
    del buf719
    # Source Nodes: [l__mod___stage4_2_fuse_layers_3_0_0_0], Original ATen: [aten.convolution]
    buf722 = extern_kernels.convolution(buf720, buf721, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf722, (8, 18, 28, 28), (14112, 1, 504, 18))
    buf723 = buf722; del buf722  # reuse
    buf724 = buf721; del buf721  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_253(c_void_p(buf723.data_ptr()), c_void_p(arg1878_1.data_ptr()), c_void_p(arg1879_1.data_ptr()), c_void_p(arg898_1.data_ptr()), c_void_p(arg899_1.data_ptr()), c_void_p(arg900_1.data_ptr()), c_void_p(buf724.data_ptr()))
    del arg1878_1
    del arg1879_1
    del arg898_1
    del arg899_1
    del arg900_1
    # Source Nodes: [l__mod___stage4_2_fuse_layers_3_0_0_1, l__mod___stage4_2_fuse_layers_3_0_0_2, l__mod___stage4_2_fuse_layers_3_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf725 = extern_kernels.convolution(buf723, buf724, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf725, (8, 18, 14, 14), (3528, 1, 252, 18))
    del buf723
    buf726 = buf725; del buf725  # reuse
    buf727 = buf807; del buf807  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_254(c_void_p(buf726.data_ptr()), c_void_p(arg1881_1.data_ptr()), c_void_p(arg1882_1.data_ptr()), c_void_p(arg901_1.data_ptr()), c_void_p(arg902_1.data_ptr()), c_void_p(arg903_1.data_ptr()), c_void_p(buf727.data_ptr()))
    del arg1881_1
    del arg1882_1
    del arg901_1
    del arg902_1
    del arg903_1
    # Source Nodes: [l__mod___stage4_2_fuse_layers_3_0_1_1, l__mod___stage4_2_fuse_layers_3_0_1_2, l__mod___stage4_2_fuse_layers_3_0_2_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf728 = extern_kernels.convolution(buf726, buf727, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf728, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf726
    buf729 = buf587; del buf587  # reuse
    cpp_fused_convolution_255(c_void_p(arg732_1.data_ptr()), c_void_p(buf729.data_ptr()))
    del arg732_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_1_0_0_0], Original ATen: [aten.convolution]
    buf730 = extern_kernels.convolution(buf586, buf729, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf730, (8, 36, 28, 28), (28224, 1, 1008, 36))
    # Source Nodes: [l__mod___stage4_1_fuse_layers_1_2_0], Original ATen: [aten.convolution]
    buf731 = extern_kernels.convolution(buf651, arg735_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf731, (8, 36, 14, 14), (7056, 1, 504, 36))
    del arg735_1
    buf732 = buf730; del buf730  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_256(c_void_p(buf732.data_ptr()), c_void_p(arg1713_1.data_ptr()), c_void_p(arg1714_1.data_ptr()), c_void_p(arg733_1.data_ptr()), c_void_p(arg734_1.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(buf731.data_ptr()), c_void_p(arg1716_1.data_ptr()), c_void_p(arg1717_1.data_ptr()), c_void_p(arg736_1.data_ptr()), c_void_p(arg737_1.data_ptr()))
    del arg1713_1
    del arg1714_1
    del arg1716_1
    del arg1717_1
    del arg733_1
    del arg734_1
    del arg736_1
    del arg737_1
    del buf731
    # Source Nodes: [l__mod___stage4_1_fuse_layers_1_3_0], Original ATen: [aten.convolution]
    buf733 = extern_kernels.convolution(buf694, arg738_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf733, (8, 36, 7, 7), (1764, 1, 252, 36))
    del arg738_1
    buf734 = buf732; del buf732  # reuse
    buf735 = buf809; del buf809  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_257(c_void_p(buf734.data_ptr()), c_void_p(buf733.data_ptr()), c_void_p(arg1719_1.data_ptr()), c_void_p(arg1720_1.data_ptr()), c_void_p(arg739_1.data_ptr()), c_void_p(arg740_1.data_ptr()), c_void_p(arg795_1.data_ptr()), c_void_p(buf735.data_ptr()))
    del arg1719_1
    del arg1720_1
    del arg739_1
    del arg740_1
    del arg795_1
    del buf733
    # Source Nodes: [x_882], Original ATen: [aten.convolution]
    buf736 = extern_kernels.convolution(buf734, buf735, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf736, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf737 = buf736; del buf736  # reuse
    buf738 = buf735; del buf735  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_258(c_void_p(buf737.data_ptr()), c_void_p(arg1776_1.data_ptr()), c_void_p(arg1777_1.data_ptr()), c_void_p(arg796_1.data_ptr()), c_void_p(arg797_1.data_ptr()), c_void_p(arg798_1.data_ptr()), c_void_p(buf738.data_ptr()))
    del arg1776_1
    del arg1777_1
    del arg796_1
    del arg797_1
    del arg798_1
    # Source Nodes: [x_883, x_885, x_887], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf739 = extern_kernels.convolution(buf737, buf738, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf739, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf737
    buf740 = buf734; del buf734  # reuse
    buf741 = buf738; del buf738  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_259(c_void_p(buf740.data_ptr()), c_void_p(buf739.data_ptr()), c_void_p(arg1779_1.data_ptr()), c_void_p(arg1780_1.data_ptr()), c_void_p(arg799_1.data_ptr()), c_void_p(arg800_1.data_ptr()), c_void_p(arg801_1.data_ptr()), c_void_p(buf741.data_ptr()))
    del arg1779_1
    del arg1780_1
    del arg799_1
    del arg800_1
    del arg801_1
    del buf739
    # Source Nodes: [x_891], Original ATen: [aten.convolution]
    buf742 = extern_kernels.convolution(buf740, buf741, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf742, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf743 = buf742; del buf742  # reuse
    buf744 = buf741; del buf741  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_260(c_void_p(buf743.data_ptr()), c_void_p(arg1782_1.data_ptr()), c_void_p(arg1783_1.data_ptr()), c_void_p(arg802_1.data_ptr()), c_void_p(arg803_1.data_ptr()), c_void_p(arg804_1.data_ptr()), c_void_p(buf744.data_ptr()))
    del arg1782_1
    del arg1783_1
    del arg802_1
    del arg803_1
    del arg804_1
    # Source Nodes: [x_892, x_894, x_896], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf745 = extern_kernels.convolution(buf743, buf744, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf745, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf743
    buf746 = buf740; del buf740  # reuse
    buf747 = buf744; del buf744  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_261(c_void_p(buf746.data_ptr()), c_void_p(buf745.data_ptr()), c_void_p(arg1785_1.data_ptr()), c_void_p(arg1786_1.data_ptr()), c_void_p(arg805_1.data_ptr()), c_void_p(arg806_1.data_ptr()), c_void_p(arg807_1.data_ptr()), c_void_p(buf747.data_ptr()))
    del arg1785_1
    del arg1786_1
    del arg805_1
    del arg806_1
    del arg807_1
    del buf745
    # Source Nodes: [x_900], Original ATen: [aten.convolution]
    buf748 = extern_kernels.convolution(buf746, buf747, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf748, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf749 = buf748; del buf748  # reuse
    buf750 = buf747; del buf747  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_262(c_void_p(buf749.data_ptr()), c_void_p(arg1788_1.data_ptr()), c_void_p(arg1789_1.data_ptr()), c_void_p(arg808_1.data_ptr()), c_void_p(arg809_1.data_ptr()), c_void_p(arg810_1.data_ptr()), c_void_p(buf750.data_ptr()))
    del arg1788_1
    del arg1789_1
    del arg808_1
    del arg809_1
    del arg810_1
    # Source Nodes: [x_901, x_903, x_905], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf751 = extern_kernels.convolution(buf749, buf750, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf751, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf749
    buf752 = buf746; del buf746  # reuse
    buf753 = buf750; del buf750  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_263(c_void_p(buf752.data_ptr()), c_void_p(buf751.data_ptr()), c_void_p(arg1791_1.data_ptr()), c_void_p(arg1792_1.data_ptr()), c_void_p(arg811_1.data_ptr()), c_void_p(arg812_1.data_ptr()), c_void_p(arg813_1.data_ptr()), c_void_p(buf753.data_ptr()))
    del arg1791_1
    del arg1792_1
    del arg811_1
    del arg812_1
    del arg813_1
    del buf751
    # Source Nodes: [x_909], Original ATen: [aten.convolution]
    buf754 = extern_kernels.convolution(buf752, buf753, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf754, (8, 36, 28, 28), (28224, 1, 1008, 36))
    buf755 = buf754; del buf754  # reuse
    buf756 = buf753; del buf753  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_264(c_void_p(buf755.data_ptr()), c_void_p(arg1794_1.data_ptr()), c_void_p(arg1795_1.data_ptr()), c_void_p(arg814_1.data_ptr()), c_void_p(arg815_1.data_ptr()), c_void_p(arg816_1.data_ptr()), c_void_p(buf756.data_ptr()))
    del arg1794_1
    del arg1795_1
    del arg814_1
    del arg815_1
    del arg816_1
    # Source Nodes: [x_910, x_912, x_914], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf757 = extern_kernels.convolution(buf755, buf756, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf757, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf755
    buf758 = buf752; del buf752  # reuse
    buf759 = buf756; del buf756  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_265(c_void_p(buf758.data_ptr()), c_void_p(buf757.data_ptr()), c_void_p(arg1797_1.data_ptr()), c_void_p(arg1798_1.data_ptr()), c_void_p(arg817_1.data_ptr()), c_void_p(arg818_1.data_ptr()), c_void_p(arg906_1.data_ptr()), c_void_p(buf759.data_ptr()))
    del arg1797_1
    del arg1798_1
    del arg817_1
    del arg818_1
    del arg906_1
    del buf757
    # Source Nodes: [l__mod___stage4_2_fuse_layers_3_1_0_0], Original ATen: [aten.convolution]
    buf760 = extern_kernels.convolution(buf758, buf759, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf760, (8, 36, 14, 14), (7056, 1, 504, 36))
    buf761 = buf760; del buf760  # reuse
    buf762 = buf812; del buf812  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_266(c_void_p(buf761.data_ptr()), c_void_p(arg1887_1.data_ptr()), c_void_p(arg1888_1.data_ptr()), c_void_p(arg907_1.data_ptr()), c_void_p(arg908_1.data_ptr()), c_void_p(arg909_1.data_ptr()), c_void_p(buf762.data_ptr()))
    del arg1887_1
    del arg1888_1
    del arg907_1
    del arg908_1
    del arg909_1
    # Source Nodes: [l__mod___stage4_2_fuse_layers_3_1_0_1, l__mod___stage4_2_fuse_layers_3_1_0_2, l__mod___stage4_2_fuse_layers_3_1_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf763 = extern_kernels.convolution(buf761, buf762, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf763, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf761
    buf765 = buf724; del buf724  # reuse
    cpp_fused_convolution_267(c_void_p(arg741_1.data_ptr()), c_void_p(buf765.data_ptr()))
    del arg741_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_2_0_0_0], Original ATen: [aten.convolution]
    buf766 = extern_kernels.convolution(buf586, buf765, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf766, (8, 18, 28, 28), (14112, 1, 504, 18))
    del buf586
    buf767 = buf766; del buf766  # reuse
    buf768 = reinterpret_tensor(buf759, (72, 18, 3, 3), (162, 1, 54, 18), 0); del buf759  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_268(c_void_p(buf767.data_ptr()), c_void_p(arg1722_1.data_ptr()), c_void_p(arg1723_1.data_ptr()), c_void_p(arg742_1.data_ptr()), c_void_p(arg743_1.data_ptr()), c_void_p(arg744_1.data_ptr()), c_void_p(buf768.data_ptr()))
    del arg1722_1
    del arg1723_1
    del arg742_1
    del arg743_1
    del arg744_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_2_0_0_1, l__mod___stage4_1_fuse_layers_2_0_0_2, l__mod___stage4_1_fuse_layers_2_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf769 = extern_kernels.convolution(buf767, buf768, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf769, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf767
    buf770 = reinterpret_tensor(buf727, (72, 36, 3, 3), (324, 1, 108, 36), 0); del buf727  # reuse
    cpp_fused_convolution_269(c_void_p(arg747_1.data_ptr()), c_void_p(buf770.data_ptr()))
    del arg747_1
    # Source Nodes: [l__mod___stage4_1_fuse_layers_2_1_0_0], Original ATen: [aten.convolution]
    buf771 = extern_kernels.convolution(buf616, buf770, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf771, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf616
    buf772 = buf769; del buf769  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_270(c_void_p(buf772.data_ptr()), c_void_p(arg1725_1.data_ptr()), c_void_p(arg1726_1.data_ptr()), c_void_p(arg745_1.data_ptr()), c_void_p(arg746_1.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(arg1728_1.data_ptr()), c_void_p(arg1729_1.data_ptr()), c_void_p(arg748_1.data_ptr()), c_void_p(arg749_1.data_ptr()))
    del arg1725_1
    del arg1726_1
    del arg1728_1
    del arg1729_1
    del arg745_1
    del arg746_1
    del arg748_1
    del arg749_1
    del buf771
    # Source Nodes: [l__mod___stage4_1_fuse_layers_2_3_0], Original ATen: [aten.convolution]
    buf773 = extern_kernels.convolution(buf694, arg750_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf773, (8, 72, 7, 7), (3528, 1, 504, 72))
    del arg750_1
    del buf694
    buf774 = buf651; del buf651  # reuse
    buf775 = reinterpret_tensor(buf762, (72, 72, 3, 3), (648, 1, 216, 72), 0); del buf762  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_271(c_void_p(buf774.data_ptr()), c_void_p(buf772.data_ptr()), c_void_p(buf773.data_ptr()), c_void_p(arg1731_1.data_ptr()), c_void_p(arg1732_1.data_ptr()), c_void_p(arg751_1.data_ptr()), c_void_p(arg752_1.data_ptr()), c_void_p(arg819_1.data_ptr()), c_void_p(buf775.data_ptr()))
    del arg1731_1
    del arg1732_1
    del arg751_1
    del arg752_1
    del arg819_1
    del buf772
    del buf773
    # Source Nodes: [x_918], Original ATen: [aten.convolution]
    buf776 = extern_kernels.convolution(buf774, buf775, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf776, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf777 = buf776; del buf776  # reuse
    buf778 = buf775; del buf775  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_272(c_void_p(buf777.data_ptr()), c_void_p(arg1800_1.data_ptr()), c_void_p(arg1801_1.data_ptr()), c_void_p(arg820_1.data_ptr()), c_void_p(arg821_1.data_ptr()), c_void_p(arg822_1.data_ptr()), c_void_p(buf778.data_ptr()))
    del arg1800_1
    del arg1801_1
    del arg820_1
    del arg821_1
    del arg822_1
    # Source Nodes: [x_919, x_921, x_923], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf779 = extern_kernels.convolution(buf777, buf778, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf779, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf777
    buf780 = buf774; del buf774  # reuse
    buf781 = buf778; del buf778  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_273(c_void_p(buf780.data_ptr()), c_void_p(buf779.data_ptr()), c_void_p(arg1803_1.data_ptr()), c_void_p(arg1804_1.data_ptr()), c_void_p(arg823_1.data_ptr()), c_void_p(arg824_1.data_ptr()), c_void_p(arg825_1.data_ptr()), c_void_p(buf781.data_ptr()))
    del arg1803_1
    del arg1804_1
    del arg823_1
    del arg824_1
    del arg825_1
    del buf779
    # Source Nodes: [x_927], Original ATen: [aten.convolution]
    buf782 = extern_kernels.convolution(buf780, buf781, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf782, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf783 = buf782; del buf782  # reuse
    buf784 = buf781; del buf781  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_274(c_void_p(buf783.data_ptr()), c_void_p(arg1806_1.data_ptr()), c_void_p(arg1807_1.data_ptr()), c_void_p(arg826_1.data_ptr()), c_void_p(arg827_1.data_ptr()), c_void_p(arg828_1.data_ptr()), c_void_p(buf784.data_ptr()))
    del arg1806_1
    del arg1807_1
    del arg826_1
    del arg827_1
    del arg828_1
    # Source Nodes: [x_928, x_930, x_932], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf785 = extern_kernels.convolution(buf783, buf784, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf785, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf783
    buf786 = buf780; del buf780  # reuse
    buf787 = buf784; del buf784  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_275(c_void_p(buf786.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(arg1809_1.data_ptr()), c_void_p(arg1810_1.data_ptr()), c_void_p(arg829_1.data_ptr()), c_void_p(arg830_1.data_ptr()), c_void_p(arg831_1.data_ptr()), c_void_p(buf787.data_ptr()))
    del arg1809_1
    del arg1810_1
    del arg829_1
    del arg830_1
    del arg831_1
    del buf785
    # Source Nodes: [x_936], Original ATen: [aten.convolution]
    buf788 = extern_kernels.convolution(buf786, buf787, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf788, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf789 = buf788; del buf788  # reuse
    buf790 = buf787; del buf787  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_276(c_void_p(buf789.data_ptr()), c_void_p(arg1812_1.data_ptr()), c_void_p(arg1813_1.data_ptr()), c_void_p(arg832_1.data_ptr()), c_void_p(arg833_1.data_ptr()), c_void_p(arg834_1.data_ptr()), c_void_p(buf790.data_ptr()))
    del arg1812_1
    del arg1813_1
    del arg832_1
    del arg833_1
    del arg834_1
    # Source Nodes: [x_937, x_939, x_941], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf791 = extern_kernels.convolution(buf789, buf790, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf791, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf789
    buf792 = buf786; del buf786  # reuse
    buf793 = buf790; del buf790  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_277(c_void_p(buf792.data_ptr()), c_void_p(buf791.data_ptr()), c_void_p(arg1815_1.data_ptr()), c_void_p(arg1816_1.data_ptr()), c_void_p(arg835_1.data_ptr()), c_void_p(arg836_1.data_ptr()), c_void_p(arg837_1.data_ptr()), c_void_p(buf793.data_ptr()))
    del arg1815_1
    del arg1816_1
    del arg835_1
    del arg836_1
    del arg837_1
    del buf791
    # Source Nodes: [x_945], Original ATen: [aten.convolution]
    buf794 = extern_kernels.convolution(buf792, buf793, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf794, (8, 72, 14, 14), (14112, 1, 1008, 72))
    buf795 = buf794; del buf794  # reuse
    buf796 = buf793; del buf793  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_278(c_void_p(buf795.data_ptr()), c_void_p(arg1818_1.data_ptr()), c_void_p(arg1819_1.data_ptr()), c_void_p(arg838_1.data_ptr()), c_void_p(arg839_1.data_ptr()), c_void_p(arg840_1.data_ptr()), c_void_p(buf796.data_ptr()))
    del arg1818_1
    del arg1819_1
    del arg838_1
    del arg839_1
    del arg840_1
    # Source Nodes: [x_946, x_948, x_950], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf797 = extern_kernels.convolution(buf795, buf796, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf797, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf795
    del buf796
    buf798 = buf792; del buf792  # reuse
    buf799 = buf815; del buf815  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_279(c_void_p(buf798.data_ptr()), c_void_p(buf797.data_ptr()), c_void_p(arg1821_1.data_ptr()), c_void_p(arg1822_1.data_ptr()), c_void_p(arg841_1.data_ptr()), c_void_p(arg842_1.data_ptr()), c_void_p(arg912_1.data_ptr()), c_void_p(buf799.data_ptr()))
    del arg1821_1
    del arg1822_1
    del arg841_1
    del arg842_1
    del arg912_1
    del buf797
    # Source Nodes: [l__mod___stage4_2_fuse_layers_3_2_0_0], Original ATen: [aten.convolution]
    buf800 = extern_kernels.convolution(buf798, buf799, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf800, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf799
    buf818 = buf692; del buf692  # reuse
    cpp_fused_convolution_280(c_void_p(arg843_1.data_ptr()), c_void_p(buf818.data_ptr()))
    del arg843_1
    # Source Nodes: [x_954], Original ATen: [aten.convolution]
    buf819 = extern_kernels.convolution(buf817, buf818, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf819, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf820 = buf819; del buf819  # reuse
    buf821 = buf818; del buf818  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_281(c_void_p(buf820.data_ptr()), c_void_p(arg1824_1.data_ptr()), c_void_p(arg1825_1.data_ptr()), c_void_p(arg844_1.data_ptr()), c_void_p(arg845_1.data_ptr()), c_void_p(arg846_1.data_ptr()), c_void_p(buf821.data_ptr()))
    del arg1824_1
    del arg1825_1
    del arg844_1
    del arg845_1
    del arg846_1
    # Source Nodes: [x_955, x_957, x_959], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf822 = extern_kernels.convolution(buf820, buf821, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf822, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf820
    buf823 = buf817; del buf817  # reuse
    buf824 = buf821; del buf821  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_282(c_void_p(buf823.data_ptr()), c_void_p(buf822.data_ptr()), c_void_p(arg1827_1.data_ptr()), c_void_p(arg1828_1.data_ptr()), c_void_p(arg847_1.data_ptr()), c_void_p(arg848_1.data_ptr()), c_void_p(arg849_1.data_ptr()), c_void_p(buf824.data_ptr()))
    del arg1827_1
    del arg1828_1
    del arg847_1
    del arg848_1
    del arg849_1
    del buf822
    # Source Nodes: [x_963], Original ATen: [aten.convolution]
    buf825 = extern_kernels.convolution(buf823, buf824, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf825, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf826 = buf825; del buf825  # reuse
    buf827 = buf824; del buf824  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_283(c_void_p(buf826.data_ptr()), c_void_p(arg1830_1.data_ptr()), c_void_p(arg1831_1.data_ptr()), c_void_p(arg850_1.data_ptr()), c_void_p(arg851_1.data_ptr()), c_void_p(arg852_1.data_ptr()), c_void_p(buf827.data_ptr()))
    del arg1830_1
    del arg1831_1
    del arg850_1
    del arg851_1
    del arg852_1
    # Source Nodes: [x_964, x_966, x_968], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf828 = extern_kernels.convolution(buf826, buf827, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf828, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf826
    buf829 = buf823; del buf823  # reuse
    buf830 = buf827; del buf827  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_284(c_void_p(buf829.data_ptr()), c_void_p(buf828.data_ptr()), c_void_p(arg1833_1.data_ptr()), c_void_p(arg1834_1.data_ptr()), c_void_p(arg853_1.data_ptr()), c_void_p(arg854_1.data_ptr()), c_void_p(arg855_1.data_ptr()), c_void_p(buf830.data_ptr()))
    del arg1833_1
    del arg1834_1
    del arg853_1
    del arg854_1
    del arg855_1
    del buf828
    # Source Nodes: [x_972], Original ATen: [aten.convolution]
    buf831 = extern_kernels.convolution(buf829, buf830, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf831, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf832 = buf831; del buf831  # reuse
    buf833 = buf830; del buf830  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_285(c_void_p(buf832.data_ptr()), c_void_p(arg1836_1.data_ptr()), c_void_p(arg1837_1.data_ptr()), c_void_p(arg856_1.data_ptr()), c_void_p(arg857_1.data_ptr()), c_void_p(arg858_1.data_ptr()), c_void_p(buf833.data_ptr()))
    del arg1836_1
    del arg1837_1
    del arg856_1
    del arg857_1
    del arg858_1
    # Source Nodes: [x_973, x_975, x_977], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf834 = extern_kernels.convolution(buf832, buf833, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf834, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf832
    buf835 = buf829; del buf829  # reuse
    buf836 = buf833; del buf833  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_286(c_void_p(buf835.data_ptr()), c_void_p(buf834.data_ptr()), c_void_p(arg1839_1.data_ptr()), c_void_p(arg1840_1.data_ptr()), c_void_p(arg859_1.data_ptr()), c_void_p(arg860_1.data_ptr()), c_void_p(arg861_1.data_ptr()), c_void_p(buf836.data_ptr()))
    del arg1839_1
    del arg1840_1
    del arg859_1
    del arg860_1
    del arg861_1
    del buf834
    # Source Nodes: [x_981], Original ATen: [aten.convolution]
    buf837 = extern_kernels.convolution(buf835, buf836, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf837, (8, 144, 7, 7), (7056, 1, 1008, 144))
    buf838 = buf837; del buf837  # reuse
    buf839 = buf836; del buf836  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_287(c_void_p(buf838.data_ptr()), c_void_p(arg1842_1.data_ptr()), c_void_p(arg1843_1.data_ptr()), c_void_p(arg862_1.data_ptr()), c_void_p(arg863_1.data_ptr()), c_void_p(arg864_1.data_ptr()), c_void_p(buf839.data_ptr()))
    del arg1842_1
    del arg1843_1
    del arg862_1
    del arg863_1
    del arg864_1
    # Source Nodes: [x_982, x_984, x_986], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf840 = extern_kernels.convolution(buf838, buf839, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf840, (8, 144, 7, 7), (7056, 1, 1008, 144))
    del buf838
    del buf839
    buf764 = buf728; del buf728  # reuse
    buf841 = buf835; del buf835  # reuse
    buf842 = buf764; del buf764  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_288(c_void_p(buf842.data_ptr()), c_void_p(buf841.data_ptr()), c_void_p(arg1884_1.data_ptr()), c_void_p(arg1885_1.data_ptr()), c_void_p(arg904_1.data_ptr()), c_void_p(arg905_1.data_ptr()), c_void_p(buf763.data_ptr()), c_void_p(arg1890_1.data_ptr()), c_void_p(arg1891_1.data_ptr()), c_void_p(arg910_1.data_ptr()), c_void_p(arg911_1.data_ptr()), c_void_p(buf840.data_ptr()), c_void_p(arg1845_1.data_ptr()), c_void_p(arg1846_1.data_ptr()), c_void_p(arg865_1.data_ptr()), c_void_p(arg866_1.data_ptr()), c_void_p(buf800.data_ptr()), c_void_p(arg1893_1.data_ptr()), c_void_p(arg1894_1.data_ptr()), c_void_p(arg913_1.data_ptr()), c_void_p(arg914_1.data_ptr()))
    del arg1845_1
    del arg1846_1
    del arg1884_1
    del arg1885_1
    del arg1890_1
    del arg1891_1
    del arg1893_1
    del arg1894_1
    del arg865_1
    del arg866_1
    del arg904_1
    del arg905_1
    del arg910_1
    del arg911_1
    del arg913_1
    del arg914_1
    del buf763
    del buf800
    del buf840
    # Source Nodes: [x_1026], Original ATen: [aten.convolution]
    buf843 = extern_kernels.convolution(buf842, arg959_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf843, (8, 256, 7, 7), (12544, 1, 1792, 256))
    del arg959_1
    buf844 = buf843; del buf843  # reuse
    buf845 = empty_strided((256, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_289(c_void_p(buf844.data_ptr()), c_void_p(arg1938_1.data_ptr()), c_void_p(arg1939_1.data_ptr()), c_void_p(arg960_1.data_ptr()), c_void_p(arg961_1.data_ptr()), c_void_p(arg962_1.data_ptr()), c_void_p(buf845.data_ptr()))
    del arg1938_1
    del arg1939_1
    del arg960_1
    del arg961_1
    del arg962_1
    # Source Nodes: [x_1027, x_1028, x_1029], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf846 = extern_kernels.convolution(buf844, buf845, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf846, (8, 256, 7, 7), (12544, 1, 1792, 256))
    del buf844
    del buf845
    buf847 = buf846; del buf846  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_290(c_void_p(buf847.data_ptr()), c_void_p(arg1941_1.data_ptr()), c_void_p(arg1942_1.data_ptr()), c_void_p(arg963_1.data_ptr()), c_void_p(arg964_1.data_ptr()))
    del arg1941_1
    del arg1942_1
    del arg963_1
    del arg964_1
    # Source Nodes: [x_1030, x_1032, x_1034], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf848 = extern_kernels.convolution(buf847, arg965_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf848, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    del arg965_1
    del buf847
    # Source Nodes: [getattr_l__mod___incre_modules_3___0___downsample_0], Original ATen: [aten.convolution]
    buf849 = extern_kernels.convolution(buf842, arg968_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf849, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    del arg968_1
    del buf842
    buf851 = buf765; del buf765  # reuse
    cpp_fused_convolution_291(c_void_p(arg885_1.data_ptr()), c_void_p(buf851.data_ptr()))
    del arg885_1
    # Source Nodes: [l__mod___stage4_2_fuse_layers_2_0_0_0], Original ATen: [aten.convolution]
    buf852 = extern_kernels.convolution(buf720, buf851, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf852, (8, 18, 28, 28), (14112, 1, 504, 18))
    del buf851
    buf853 = buf852; del buf852  # reuse
    buf854 = buf768; del buf768  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_292(c_void_p(buf853.data_ptr()), c_void_p(arg1866_1.data_ptr()), c_void_p(arg1867_1.data_ptr()), c_void_p(arg886_1.data_ptr()), c_void_p(arg887_1.data_ptr()), c_void_p(arg888_1.data_ptr()), c_void_p(buf854.data_ptr()))
    del arg1866_1
    del arg1867_1
    del arg886_1
    del arg887_1
    del arg888_1
    # Source Nodes: [l__mod___stage4_2_fuse_layers_2_0_0_1, l__mod___stage4_2_fuse_layers_2_0_0_2, l__mod___stage4_2_fuse_layers_2_0_1_0], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf855 = extern_kernels.convolution(buf853, buf854, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf855, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf853
    del buf854
    buf856 = buf770; del buf770  # reuse
    cpp_fused_convolution_293(c_void_p(arg891_1.data_ptr()), c_void_p(buf856.data_ptr()))
    del arg891_1
    # Source Nodes: [l__mod___stage4_2_fuse_layers_2_1_0_0], Original ATen: [aten.convolution]
    buf857 = extern_kernels.convolution(buf758, buf856, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf857, (8, 72, 14, 14), (14112, 1, 1008, 72))
    del buf856
    buf858 = buf855; del buf855  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_294(c_void_p(buf858.data_ptr()), c_void_p(arg1869_1.data_ptr()), c_void_p(arg1870_1.data_ptr()), c_void_p(arg889_1.data_ptr()), c_void_p(arg890_1.data_ptr()), c_void_p(buf857.data_ptr()), c_void_p(arg1872_1.data_ptr()), c_void_p(arg1873_1.data_ptr()), c_void_p(arg892_1.data_ptr()), c_void_p(arg893_1.data_ptr()))
    del arg1869_1
    del arg1870_1
    del arg1872_1
    del arg1873_1
    del arg889_1
    del arg890_1
    del arg892_1
    del arg893_1
    del buf857
    # Source Nodes: [l__mod___stage4_2_fuse_layers_2_3_0], Original ATen: [aten.convolution]
    buf859 = extern_kernels.convolution(buf841, arg894_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf859, (8, 72, 7, 7), (3528, 1, 504, 72))
    del arg894_1
    buf860 = buf858; del buf858  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_295(c_void_p(buf860.data_ptr()), c_void_p(buf798.data_ptr()), c_void_p(buf859.data_ptr()), c_void_p(arg1875_1.data_ptr()), c_void_p(arg1876_1.data_ptr()), c_void_p(arg895_1.data_ptr()), c_void_p(arg896_1.data_ptr()))
    del arg1875_1
    del arg1876_1
    del arg895_1
    del arg896_1
    del buf859
    # Source Nodes: [x_1014], Original ATen: [aten.convolution]
    buf861 = extern_kernels.convolution(buf860, arg943_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf861, (8, 128, 14, 14), (25088, 1, 1792, 128))
    del arg943_1
    buf862 = buf861; del buf861  # reuse
    buf863 = empty_strided((128, 128, 3, 3), (1152, 1, 384, 128), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_296(c_void_p(buf862.data_ptr()), c_void_p(arg1923_1.data_ptr()), c_void_p(arg1924_1.data_ptr()), c_void_p(arg944_1.data_ptr()), c_void_p(arg945_1.data_ptr()), c_void_p(arg946_1.data_ptr()), c_void_p(buf863.data_ptr()))
    del arg1923_1
    del arg1924_1
    del arg944_1
    del arg945_1
    del arg946_1
    # Source Nodes: [x_1015, x_1016, x_1017], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf864 = extern_kernels.convolution(buf862, buf863, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf864, (8, 128, 14, 14), (25088, 1, 1792, 128))
    del buf862
    del buf863
    buf865 = buf864; del buf864  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_297(c_void_p(buf865.data_ptr()), c_void_p(arg1926_1.data_ptr()), c_void_p(arg1927_1.data_ptr()), c_void_p(arg947_1.data_ptr()), c_void_p(arg948_1.data_ptr()))
    del arg1926_1
    del arg1927_1
    del arg947_1
    del arg948_1
    # Source Nodes: [x_1018, x_1020, x_1022], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf866 = extern_kernels.convolution(buf865, arg949_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf866, (8, 512, 14, 14), (100352, 1, 7168, 512))
    del arg949_1
    del buf865
    # Source Nodes: [getattr_l__mod___incre_modules_2___0___downsample_0], Original ATen: [aten.convolution]
    buf867 = extern_kernels.convolution(buf860, arg952_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf867, (8, 512, 14, 14), (100352, 1, 7168, 512))
    del arg952_1
    del buf860
    buf869 = buf729; del buf729  # reuse
    cpp_fused_convolution_298(c_void_p(arg876_1.data_ptr()), c_void_p(buf869.data_ptr()))
    del arg876_1
    # Source Nodes: [l__mod___stage4_2_fuse_layers_1_0_0_0], Original ATen: [aten.convolution]
    buf870 = extern_kernels.convolution(buf720, buf869, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf870, (8, 36, 28, 28), (28224, 1, 1008, 36))
    del buf869
    # Source Nodes: [l__mod___stage4_2_fuse_layers_1_2_0], Original ATen: [aten.convolution]
    buf871 = extern_kernels.convolution(buf798, arg879_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf871, (8, 36, 14, 14), (7056, 1, 504, 36))
    del arg879_1
    buf872 = buf870; del buf870  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_299(c_void_p(buf872.data_ptr()), c_void_p(arg1857_1.data_ptr()), c_void_p(arg1858_1.data_ptr()), c_void_p(arg877_1.data_ptr()), c_void_p(arg878_1.data_ptr()), c_void_p(buf758.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(arg1860_1.data_ptr()), c_void_p(arg1861_1.data_ptr()), c_void_p(arg880_1.data_ptr()), c_void_p(arg881_1.data_ptr()))
    del arg1857_1
    del arg1858_1
    del arg1860_1
    del arg1861_1
    del arg877_1
    del arg878_1
    del arg880_1
    del arg881_1
    del buf871
    # Source Nodes: [l__mod___stage4_2_fuse_layers_1_3_0], Original ATen: [aten.convolution]
    buf873 = extern_kernels.convolution(buf841, arg882_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf873, (8, 36, 7, 7), (1764, 1, 252, 36))
    del arg882_1
    buf874 = buf872; del buf872  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_300(c_void_p(buf874.data_ptr()), c_void_p(buf873.data_ptr()), c_void_p(arg1863_1.data_ptr()), c_void_p(arg1864_1.data_ptr()), c_void_p(arg883_1.data_ptr()), c_void_p(arg884_1.data_ptr()))
    del arg1863_1
    del arg1864_1
    del arg883_1
    del arg884_1
    del buf873
    # Source Nodes: [x_1002], Original ATen: [aten.convolution]
    buf875 = extern_kernels.convolution(buf874, arg927_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf875, (8, 64, 28, 28), (50176, 1, 1792, 64))
    del arg927_1
    buf876 = buf875; del buf875  # reuse
    buf877 = buf32; del buf32  # reuse
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_301(c_void_p(buf876.data_ptr()), c_void_p(arg1908_1.data_ptr()), c_void_p(arg1909_1.data_ptr()), c_void_p(arg928_1.data_ptr()), c_void_p(arg929_1.data_ptr()), c_void_p(arg930_1.data_ptr()), c_void_p(buf877.data_ptr()))
    del arg1908_1
    del arg1909_1
    del arg928_1
    del arg929_1
    del arg930_1
    # Source Nodes: [x_1003, x_1004, x_1005], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf878 = extern_kernels.convolution(buf876, buf877, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf878, (8, 64, 28, 28), (50176, 1, 1792, 64))
    del buf876
    del buf877
    buf879 = buf878; del buf878  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_302(c_void_p(buf879.data_ptr()), c_void_p(arg1911_1.data_ptr()), c_void_p(arg1912_1.data_ptr()), c_void_p(arg931_1.data_ptr()), c_void_p(arg932_1.data_ptr()))
    del arg1911_1
    del arg1912_1
    del arg931_1
    del arg932_1
    # Source Nodes: [x_1006, x_1008, x_1010], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf880 = extern_kernels.convolution(buf879, arg933_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf880, (8, 256, 28, 28), (200704, 1, 7168, 256))
    del arg933_1
    del buf879
    # Source Nodes: [getattr_l__mod___incre_modules_1___0___downsample_0], Original ATen: [aten.convolution]
    buf881 = extern_kernels.convolution(buf874, arg936_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf881, (8, 256, 28, 28), (200704, 1, 7168, 256))
    del arg936_1
    del buf874
    # Source Nodes: [l__mod___stage4_2_fuse_layers_0_1_0], Original ATen: [aten.convolution]
    buf883 = extern_kernels.convolution(buf758, arg867_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf883, (8, 18, 28, 28), (14112, 1, 504, 18))
    del arg867_1
    del buf758
    # Source Nodes: [l__mod___stage4_2_fuse_layers_0_2_0], Original ATen: [aten.convolution]
    buf884 = extern_kernels.convolution(buf798, arg870_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf884, (8, 18, 14, 14), (3528, 1, 252, 18))
    del arg870_1
    del buf798
    buf885 = buf720; del buf720  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_303(c_void_p(buf885.data_ptr()), c_void_p(buf883.data_ptr()), c_void_p(arg1848_1.data_ptr()), c_void_p(arg1849_1.data_ptr()), c_void_p(arg868_1.data_ptr()), c_void_p(arg869_1.data_ptr()), c_void_p(buf884.data_ptr()), c_void_p(arg1851_1.data_ptr()), c_void_p(arg1852_1.data_ptr()), c_void_p(arg871_1.data_ptr()), c_void_p(arg872_1.data_ptr()))
    del arg1848_1
    del arg1849_1
    del arg1851_1
    del arg1852_1
    del arg868_1
    del arg869_1
    del arg871_1
    del arg872_1
    del buf883
    del buf884
    # Source Nodes: [l__mod___stage4_2_fuse_layers_0_3_0], Original ATen: [aten.convolution]
    buf886 = extern_kernels.convolution(buf841, arg873_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf886, (8, 18, 7, 7), (882, 1, 126, 18))
    del arg873_1
    del buf841
    buf887 = buf885; del buf885  # reuse
    cpp_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_304(c_void_p(buf887.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(arg1854_1.data_ptr()), c_void_p(arg1855_1.data_ptr()), c_void_p(arg874_1.data_ptr()), c_void_p(arg875_1.data_ptr()))
    del arg1854_1
    del arg1855_1
    del arg874_1
    del arg875_1
    del buf886
    # Source Nodes: [x_990], Original ATen: [aten.convolution]
    buf888 = extern_kernels.convolution(buf887, arg915_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf888, (8, 32, 56, 56), (100352, 1, 1792, 32))
    del arg915_1
    buf889 = buf888; del buf888  # reuse
    buf890 = empty_strided((32, 32, 3, 3), (288, 1, 96, 32), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_convolution_relu_305(c_void_p(buf889.data_ptr()), c_void_p(arg1896_1.data_ptr()), c_void_p(arg1897_1.data_ptr()), c_void_p(arg916_1.data_ptr()), c_void_p(arg917_1.data_ptr()), c_void_p(arg918_1.data_ptr()), c_void_p(buf890.data_ptr()))
    del arg1896_1
    del arg1897_1
    del arg916_1
    del arg917_1
    del arg918_1
    # Source Nodes: [x_991, x_992, x_993], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf891 = extern_kernels.convolution(buf889, buf890, stride=(1, 1), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf891, (8, 32, 56, 56), (100352, 1, 1792, 32))
    del buf889
    del buf890
    buf892 = buf891; del buf891  # reuse
    cpp_fused__native_batch_norm_legit_no_training_relu_306(c_void_p(buf892.data_ptr()), c_void_p(arg1899_1.data_ptr()), c_void_p(arg1900_1.data_ptr()), c_void_p(arg919_1.data_ptr()), c_void_p(arg920_1.data_ptr()))
    del arg1899_1
    del arg1900_1
    del arg919_1
    del arg920_1
    # Source Nodes: [x_994, x_996, x_998], Original ATen: [aten._native_batch_norm_legit_no_training, aten.convolution, aten.relu]
    buf893 = extern_kernels.convolution(buf892, arg921_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf893, (8, 128, 56, 56), (401408, 1, 7168, 128))
    del arg921_1
    del buf892
    # Source Nodes: [getattr_l__mod___incre_modules_0___0___downsample_0], Original ATen: [aten.convolution]
    buf894 = extern_kernels.convolution(buf887, arg924_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1, bias=None)
    assert_size_stride(buf894, (8, 128, 56, 56), (401408, 1, 7168, 128))
    del arg924_1
    del buf887
    buf895 = buf893; del buf893  # reuse
    buf896 = buf895; del buf895  # reuse
    buf897 = empty_strided((256, 128, 3, 3), (1152, 1, 384, 128), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_307(c_void_p(buf896.data_ptr()), c_void_p(arg1902_1.data_ptr()), c_void_p(arg1903_1.data_ptr()), c_void_p(arg922_1.data_ptr()), c_void_p(arg923_1.data_ptr()), c_void_p(buf894.data_ptr()), c_void_p(arg1905_1.data_ptr()), c_void_p(arg1906_1.data_ptr()), c_void_p(arg925_1.data_ptr()), c_void_p(arg926_1.data_ptr()), c_void_p(arg939_1.data_ptr()), c_void_p(buf897.data_ptr()))
    del arg1902_1
    del arg1903_1
    del arg1905_1
    del arg1906_1
    del arg922_1
    del arg923_1
    del arg925_1
    del arg926_1
    del arg939_1
    del buf894
    # Source Nodes: [forward, y_88], Original ATen: [aten.convolution, aten.relu]
    buf898 = extern_kernels.convolution(buf896, buf897, arg940_1, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1)
    assert_size_stride(buf898, (8, 256, 28, 28), (200704, 1, 7168, 256))
    del arg940_1
    del buf896
    del buf897
    buf882 = buf880; del buf880  # reuse
    buf899 = buf882; del buf882  # reuse
    buf900 = empty_strided((512, 256, 3, 3), (2304, 1, 768, 256), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_308(c_void_p(buf899.data_ptr()), c_void_p(arg1914_1.data_ptr()), c_void_p(arg1915_1.data_ptr()), c_void_p(arg934_1.data_ptr()), c_void_p(arg935_1.data_ptr()), c_void_p(buf881.data_ptr()), c_void_p(arg1917_1.data_ptr()), c_void_p(arg1918_1.data_ptr()), c_void_p(arg937_1.data_ptr()), c_void_p(arg938_1.data_ptr()), c_void_p(buf898.data_ptr()), c_void_p(arg1920_1.data_ptr()), c_void_p(arg1921_1.data_ptr()), c_void_p(arg941_1.data_ptr()), c_void_p(arg942_1.data_ptr()), c_void_p(arg955_1.data_ptr()), c_void_p(buf900.data_ptr()))
    del arg1914_1
    del arg1915_1
    del arg1917_1
    del arg1918_1
    del arg1920_1
    del arg1921_1
    del arg934_1
    del arg935_1
    del arg937_1
    del arg938_1
    del arg941_1
    del arg942_1
    del arg955_1
    del buf881
    del buf898
    # Source Nodes: [forward, forward_1, x_1013, y_89], Original ATen: [aten._native_batch_norm_legit_no_training, aten.add, aten.convolution, aten.relu]
    buf901 = extern_kernels.convolution(buf899, buf900, arg956_1, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1)
    assert_size_stride(buf901, (8, 512, 14, 14), (100352, 1, 7168, 512))
    del arg956_1
    del buf899
    del buf900
    buf868 = buf866; del buf866  # reuse
    buf902 = buf868; del buf868  # reuse
    buf903 = empty_strided((1024, 512, 3, 3), (4608, 1, 1536, 512), device='cpu', dtype=torch.float32)
    cpp_fused__native_batch_norm_legit_no_training_add_convolution_relu_309(c_void_p(buf902.data_ptr()), c_void_p(arg1929_1.data_ptr()), c_void_p(arg1930_1.data_ptr()), c_void_p(arg950_1.data_ptr()), c_void_p(arg951_1.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(arg1932_1.data_ptr()), c_void_p(arg1933_1.data_ptr()), c_void_p(arg953_1.data_ptr()), c_void_p(arg954_1.data_ptr()), c_void_p(buf901.data_ptr()), c_void_p(arg1935_1.data_ptr()), c_void_p(arg1936_1.data_ptr()), c_void_p(arg957_1.data_ptr()), c_void_p(arg958_1.data_ptr()), c_void_p(arg971_1.data_ptr()), c_void_p(buf903.data_ptr()))
    del arg1929_1
    del arg1930_1
    del arg1932_1
    del arg1933_1
    del arg1935_1
    del arg1936_1
    del arg950_1
    del arg951_1
    del arg953_1
    del arg954_1
    del arg957_1
    del arg958_1
    del arg971_1
    del buf867
    del buf901
    # Source Nodes: [forward_1, forward_2, x_1025, y_90], Original ATen: [aten._native_batch_norm_legit_no_training, aten.add, aten.convolution, aten.relu]
    buf904 = extern_kernels.convolution(buf902, buf903, arg972_1, stride=(2, 2), padding=(1, 1), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1)
    assert_size_stride(buf904, (8, 1024, 7, 7), (50176, 1, 7168, 1024))
    del arg972_1
    del buf902
    del buf903
    buf850 = buf848; del buf848  # reuse
    buf905 = buf850; del buf850  # reuse
    cpp_fused__native_batch_norm_legit_no_training_add_relu_310(c_void_p(buf905.data_ptr()), c_void_p(arg1944_1.data_ptr()), c_void_p(arg1945_1.data_ptr()), c_void_p(arg966_1.data_ptr()), c_void_p(arg967_1.data_ptr()), c_void_p(buf849.data_ptr()), c_void_p(arg1947_1.data_ptr()), c_void_p(arg1948_1.data_ptr()), c_void_p(arg969_1.data_ptr()), c_void_p(arg970_1.data_ptr()), c_void_p(buf904.data_ptr()), c_void_p(arg1950_1.data_ptr()), c_void_p(arg1951_1.data_ptr()), c_void_p(arg973_1.data_ptr()), c_void_p(arg974_1.data_ptr()))
    del arg1944_1
    del arg1945_1
    del arg1947_1
    del arg1948_1
    del arg1950_1
    del arg1951_1
    del arg966_1
    del arg967_1
    del arg969_1
    del arg970_1
    del arg973_1
    del arg974_1
    del buf849
    del buf904
    # Source Nodes: [forward_2, l__mod___final_layer_0, x_1037, y_91], Original ATen: [aten._native_batch_norm_legit_no_training, aten.add, aten.convolution, aten.relu]
    buf906 = extern_kernels.convolution(buf905, arg975_1, arg976_1, stride=(1, 1), padding=(0, 0), dilation=(1, 1), transposed=False, output_padding=(0, 0), groups=1)
    assert_size_stride(buf906, (8, 2048, 7, 7), (100352, 1, 14336, 2048))
    del arg975_1
    del arg976_1
    del buf905
    buf907 = empty_strided((8, 2048, 1, 1), (2048, 1, 16384, 16384), device='cpu', dtype=torch.float32)
    buf908 = reinterpret_tensor(buf907, (8, 2048, 1, 1), (2048, 1, 1, 1), 0); del buf907  # reuse
    cpp_fused__native_batch_norm_legit_no_training_mean_relu_311(c_void_p(buf908.data_ptr()), c_void_p(buf906.data_ptr()), c_void_p(arg1953_1.data_ptr()), c_void_p(arg1954_1.data_ptr()), c_void_p(arg977_1.data_ptr()), c_void_p(arg978_1.data_ptr()))
    del arg1953_1
    del arg1954_1
    del arg977_1
    del arg978_1
    del buf906
    buf909 = empty((8, 1000), device='cpu', dtype=torch.float32)
    # Source Nodes: [x_1042], Original ATen: [aten.addmm]
    extern_kernels.addmm(arg980_1, reinterpret_tensor(buf908, (8, 2048), (2048, 1), 0), reinterpret_tensor(arg979_1, (2048, 1000), (1, 2048), 0), alpha=1, beta=1, out=buf909)
    del arg979_1
    del arg980_1
    return (buf909, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    arg0_1 = rand_strided((64, 3, 3, 3), (27, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg1_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg2_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg3_1 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg4_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg5_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg6_1 = rand_strided((64, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg7_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg8_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg9_1 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg10_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg11_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg12_1 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg13_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg14_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg15_1 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg16_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg17_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg18_1 = rand_strided((64, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg19_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg20_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg21_1 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg22_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg23_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg24_1 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg25_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg26_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg27_1 = rand_strided((64, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg28_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg29_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg30_1 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg31_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg32_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg33_1 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg34_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg35_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg36_1 = rand_strided((64, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg37_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg38_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg39_1 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg40_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg41_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg42_1 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg43_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg44_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg45_1 = rand_strided((18, 256, 3, 3), (2304, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg46_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg47_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg48_1 = rand_strided((36, 256, 3, 3), (2304, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg49_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg50_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg51_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg52_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg53_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg54_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg55_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg56_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg57_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg58_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg59_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg60_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg61_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg62_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg63_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg64_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg65_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg66_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg67_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg68_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg69_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg70_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg71_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg72_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg73_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg74_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg75_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg76_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg77_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg78_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg79_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg80_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg81_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg82_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg83_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg84_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg85_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg86_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg87_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg88_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg89_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg90_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg91_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg92_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg93_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg94_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg95_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg96_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg97_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg98_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg99_1 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg100_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg101_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg102_1 = rand_strided((36, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg103_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg104_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg105_1 = rand_strided((72, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg106_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg107_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg108_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg109_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg110_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg111_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg112_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg113_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg114_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg115_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg116_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg117_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg118_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg119_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg120_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg121_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg122_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg123_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg124_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg125_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg126_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg127_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg128_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg129_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg130_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg131_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg132_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg133_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg134_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg135_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg136_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg137_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg138_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg139_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg140_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg141_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg142_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg143_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg144_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg145_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg146_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg147_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg148_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg149_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg150_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg151_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg152_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg153_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg154_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg155_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg156_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg157_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg158_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg159_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg160_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg161_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg162_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg163_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg164_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg165_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg166_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg167_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg168_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg169_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg170_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg171_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg172_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg173_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg174_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg175_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg176_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg177_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg178_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg179_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg180_1 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg181_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg182_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg183_1 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg184_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg185_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg186_1 = rand_strided((36, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg187_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg188_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg189_1 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg190_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg191_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg192_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg193_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg194_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg195_1 = rand_strided((72, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg196_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg197_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg198_1 = rand_strided((72, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg199_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg200_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg201_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg202_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg203_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg204_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg205_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg206_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg207_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg208_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg209_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg210_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg211_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg212_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg213_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg214_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg215_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg216_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg217_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg218_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg219_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg220_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg221_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg222_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg223_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg224_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg225_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg226_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg227_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg228_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg229_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg230_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg231_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg232_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg233_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg234_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg235_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg236_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg237_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg238_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg239_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg240_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg241_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg242_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg243_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg244_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg245_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg246_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg247_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg248_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg249_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg250_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg251_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg252_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg253_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg254_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg255_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg256_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg257_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg258_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg259_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg260_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg261_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg262_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg263_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg264_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg265_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg266_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg267_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg268_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg269_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg270_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg271_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg272_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg273_1 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg274_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg275_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg276_1 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg277_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg278_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg279_1 = rand_strided((36, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg280_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg281_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg282_1 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg283_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg284_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg285_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg286_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg287_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg288_1 = rand_strided((72, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg289_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg290_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg291_1 = rand_strided((72, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg292_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg293_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg294_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg295_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg296_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg297_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg298_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg299_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg300_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg301_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg302_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg303_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg304_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg305_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg306_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg307_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg308_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg309_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg310_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg311_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg312_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg313_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg314_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg315_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg316_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg317_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg318_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg319_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg320_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg321_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg322_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg323_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg324_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg325_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg326_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg327_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg328_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg329_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg330_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg331_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg332_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg333_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg334_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg335_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg336_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg337_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg338_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg339_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg340_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg341_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg342_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg343_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg344_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg345_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg346_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg347_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg348_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg349_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg350_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg351_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg352_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg353_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg354_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg355_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg356_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg357_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg358_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg359_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg360_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg361_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg362_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg363_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg364_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg365_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg366_1 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg367_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg368_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg369_1 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg370_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg371_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg372_1 = rand_strided((36, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg373_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg374_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg375_1 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg376_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg377_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg378_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg379_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg380_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg381_1 = rand_strided((72, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg382_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg383_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg384_1 = rand_strided((72, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg385_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg386_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg387_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg388_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg389_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg390_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg391_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg392_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg393_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg394_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg395_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg396_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg397_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg398_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg399_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg400_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg401_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg402_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg403_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg404_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg405_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg406_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg407_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg408_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg409_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg410_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg411_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg412_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg413_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg414_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg415_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg416_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg417_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg418_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg419_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg420_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg421_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg422_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg423_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg424_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg425_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg426_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg427_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg428_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg429_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg430_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg431_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg432_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg433_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg434_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg435_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg436_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg437_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg438_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg439_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg440_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg441_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg442_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg443_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg444_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg445_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg446_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg447_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg448_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg449_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg450_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg451_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg452_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg453_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg454_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg455_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg456_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg457_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg458_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg459_1 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg460_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg461_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg462_1 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg463_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg464_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg465_1 = rand_strided((36, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg466_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg467_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg468_1 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg469_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg470_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg471_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg472_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg473_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg474_1 = rand_strided((72, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg475_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg476_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg477_1 = rand_strided((72, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg478_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg479_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg480_1 = rand_strided((144, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg481_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg482_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg483_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg484_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg485_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg486_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg487_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg488_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg489_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg490_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg491_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg492_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg493_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg494_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg495_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg496_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg497_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg498_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg499_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg500_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg501_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg502_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg503_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg504_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg505_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg506_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg507_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg508_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg509_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg510_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg511_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg512_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg513_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg514_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg515_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg516_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg517_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg518_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg519_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg520_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg521_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg522_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg523_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg524_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg525_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg526_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg527_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg528_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg529_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg530_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg531_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg532_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg533_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg534_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg535_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg536_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg537_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg538_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg539_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg540_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg541_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg542_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg543_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg544_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg545_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg546_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg547_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg548_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg549_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg550_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg551_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg552_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg553_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg554_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg555_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg556_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg557_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg558_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg559_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg560_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg561_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg562_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg563_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg564_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg565_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg566_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg567_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg568_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg569_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg570_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg571_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg572_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg573_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg574_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg575_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg576_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg577_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg578_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg579_1 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg580_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg581_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg582_1 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg583_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg584_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg585_1 = rand_strided((18, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg586_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg587_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg588_1 = rand_strided((36, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg589_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg590_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg591_1 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg592_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg593_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg594_1 = rand_strided((36, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg595_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg596_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg597_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg598_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg599_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg600_1 = rand_strided((72, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg601_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg602_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg603_1 = rand_strided((72, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg604_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg605_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg606_1 = rand_strided((72, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg607_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg608_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg609_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg610_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg611_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg612_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg613_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg614_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg615_1 = rand_strided((144, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg616_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg617_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg618_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg619_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg620_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg621_1 = rand_strided((144, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg622_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg623_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg624_1 = rand_strided((144, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg625_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg626_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg627_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg628_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg629_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg630_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg631_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg632_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg633_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg634_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg635_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg636_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg637_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg638_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg639_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg640_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg641_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg642_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg643_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg644_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg645_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg646_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg647_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg648_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg649_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg650_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg651_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg652_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg653_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg654_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg655_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg656_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg657_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg658_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg659_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg660_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg661_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg662_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg663_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg664_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg665_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg666_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg667_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg668_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg669_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg670_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg671_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg672_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg673_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg674_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg675_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg676_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg677_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg678_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg679_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg680_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg681_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg682_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg683_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg684_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg685_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg686_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg687_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg688_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg689_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg690_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg691_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg692_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg693_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg694_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg695_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg696_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg697_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg698_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg699_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg700_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg701_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg702_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg703_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg704_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg705_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg706_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg707_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg708_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg709_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg710_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg711_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg712_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg713_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg714_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg715_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg716_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg717_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg718_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg719_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg720_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg721_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg722_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg723_1 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg724_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg725_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg726_1 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg727_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg728_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg729_1 = rand_strided((18, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg730_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg731_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg732_1 = rand_strided((36, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg733_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg734_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg735_1 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg736_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg737_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg738_1 = rand_strided((36, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg739_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg740_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg741_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg742_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg743_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg744_1 = rand_strided((72, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg745_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg746_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg747_1 = rand_strided((72, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg748_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg749_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg750_1 = rand_strided((72, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg751_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg752_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg753_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg754_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg755_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg756_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg757_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg758_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg759_1 = rand_strided((144, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg760_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg761_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg762_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg763_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg764_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg765_1 = rand_strided((144, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg766_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg767_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg768_1 = rand_strided((144, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg769_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg770_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg771_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg772_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg773_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg774_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg775_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg776_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg777_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg778_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg779_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg780_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg781_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg782_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg783_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg784_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg785_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg786_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg787_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg788_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg789_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg790_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg791_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg792_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg793_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg794_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg795_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg796_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg797_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg798_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg799_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg800_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg801_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg802_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg803_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg804_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg805_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg806_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg807_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg808_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg809_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg810_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg811_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg812_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg813_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg814_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg815_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg816_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg817_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg818_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg819_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg820_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg821_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg822_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg823_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg824_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg825_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg826_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg827_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg828_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg829_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg830_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg831_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg832_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg833_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg834_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg835_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg836_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg837_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg838_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg839_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg840_1 = rand_strided((72, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg841_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg842_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg843_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg844_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg845_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg846_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg847_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg848_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg849_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg850_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg851_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg852_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg853_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg854_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg855_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg856_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg857_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg858_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg859_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg860_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg861_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg862_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg863_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg864_1 = rand_strided((144, 144, 3, 3), (1296, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg865_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg866_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg867_1 = rand_strided((18, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg868_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg869_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg870_1 = rand_strided((18, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg871_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg872_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg873_1 = rand_strided((18, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg874_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg875_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg876_1 = rand_strided((36, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg877_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg878_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg879_1 = rand_strided((36, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg880_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg881_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg882_1 = rand_strided((36, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg883_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg884_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg885_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg886_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg887_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg888_1 = rand_strided((72, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg889_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg890_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg891_1 = rand_strided((72, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg892_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg893_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg894_1 = rand_strided((72, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg895_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg896_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg897_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg898_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg899_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg900_1 = rand_strided((18, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg901_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg902_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg903_1 = rand_strided((144, 18, 3, 3), (162, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg904_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg905_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg906_1 = rand_strided((36, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg907_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg908_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg909_1 = rand_strided((144, 36, 3, 3), (324, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg910_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg911_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg912_1 = rand_strided((144, 72, 3, 3), (648, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg913_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg914_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg915_1 = rand_strided((32, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg916_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    arg917_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    arg918_1 = rand_strided((32, 32, 3, 3), (288, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg919_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    arg920_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    arg921_1 = rand_strided((128, 32, 1, 1), (32, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg922_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg923_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg924_1 = rand_strided((128, 18, 1, 1), (18, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg925_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg926_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg927_1 = rand_strided((64, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg928_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg929_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg930_1 = rand_strided((64, 64, 3, 3), (576, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg931_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg932_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg933_1 = rand_strided((256, 64, 1, 1), (64, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg934_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg935_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg936_1 = rand_strided((256, 36, 1, 1), (36, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg937_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg938_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg939_1 = rand_strided((256, 128, 3, 3), (1152, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg940_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg941_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg942_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg943_1 = rand_strided((128, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg944_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg945_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg946_1 = rand_strided((128, 128, 3, 3), (1152, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg947_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg948_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg949_1 = rand_strided((512, 128, 1, 1), (128, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg950_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg951_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg952_1 = rand_strided((512, 72, 1, 1), (72, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg953_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg954_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg955_1 = rand_strided((512, 256, 3, 3), (2304, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg956_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg957_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg958_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg959_1 = rand_strided((256, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg960_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg961_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg962_1 = rand_strided((256, 256, 3, 3), (2304, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg963_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg964_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg965_1 = rand_strided((1024, 256, 1, 1), (256, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg966_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg967_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg968_1 = rand_strided((1024, 144, 1, 1), (144, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg969_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg970_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg971_1 = rand_strided((1024, 512, 3, 3), (4608, 9, 3, 1), device='cpu', dtype=torch.float32)
    arg972_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg973_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg974_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg975_1 = rand_strided((2048, 1024, 1, 1), (1024, 1, 1, 1), device='cpu', dtype=torch.float32)
    arg976_1 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    arg977_1 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    arg978_1 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    arg979_1 = rand_strided((1000, 2048), (2048, 1), device='cpu', dtype=torch.float32)
    arg980_1 = rand_strided((1000, ), (1, ), device='cpu', dtype=torch.float32)
    arg981_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg982_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg983_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg984_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg985_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg986_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg987_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg988_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg989_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg990_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg991_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg992_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg993_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg994_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg995_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg996_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg997_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg998_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg999_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1000_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1001_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1002_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1003_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1004_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1005_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1006_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1007_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1008_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1009_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1010_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1011_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1012_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1013_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1014_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1015_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1016_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1017_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1018_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1019_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1020_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1021_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1022_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1023_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1024_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1025_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1026_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1027_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1028_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1029_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1030_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1031_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1032_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1033_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1034_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1035_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1036_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1037_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1038_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1039_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1040_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1041_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1042_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1043_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1044_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1045_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1046_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1047_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1048_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1049_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1050_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1051_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1052_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1053_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1054_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1055_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1056_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1057_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1058_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1059_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1060_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1061_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1062_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1063_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1064_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1065_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1066_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1067_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1068_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1069_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1070_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1071_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1072_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1073_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1074_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1075_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1076_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1077_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1078_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1079_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1080_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1081_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1082_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1083_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1084_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1085_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1086_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1087_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1088_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1089_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1090_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1091_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1092_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1093_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1094_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1095_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1096_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1097_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1098_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1099_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1100_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1101_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1102_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1103_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1104_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1105_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1106_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1107_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1108_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1109_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1110_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1111_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1112_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1113_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1114_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1115_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1116_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1117_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1118_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1119_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1120_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1121_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1122_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1123_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1124_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1125_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1126_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1127_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1128_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1129_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1130_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1131_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1132_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1133_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1134_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1135_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1136_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1137_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1138_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1139_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1140_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1141_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1142_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1143_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1144_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1145_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1146_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1147_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1148_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1149_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1150_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1151_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1152_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1153_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1154_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1155_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1156_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1157_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1158_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1159_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1160_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1161_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1162_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1163_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1164_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1165_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1166_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1167_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1168_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1169_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1170_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1171_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1172_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1173_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1174_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1175_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1176_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1177_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1178_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1179_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1180_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1181_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1182_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1183_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1184_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1185_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1186_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1187_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1188_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1189_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1190_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1191_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1192_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1193_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1194_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1195_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1196_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1197_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1198_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1199_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1200_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1201_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1202_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1203_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1204_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1205_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1206_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1207_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1208_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1209_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1210_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1211_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1212_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1213_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1214_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1215_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1216_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1217_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1218_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1219_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1220_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1221_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1222_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1223_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1224_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1225_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1226_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1227_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1228_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1229_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1230_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1231_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1232_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1233_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1234_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1235_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1236_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1237_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1238_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1239_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1240_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1241_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1242_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1243_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1244_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1245_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1246_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1247_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1248_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1249_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1250_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1251_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1252_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1253_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1254_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1255_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1256_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1257_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1258_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1259_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1260_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1261_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1262_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1263_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1264_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1265_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1266_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1267_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1268_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1269_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1270_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1271_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1272_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1273_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1274_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1275_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1276_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1277_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1278_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1279_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1280_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1281_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1282_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1283_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1284_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1285_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1286_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1287_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1288_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1289_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1290_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1291_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1292_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1293_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1294_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1295_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1296_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1297_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1298_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1299_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1300_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1301_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1302_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1303_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1304_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1305_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1306_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1307_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1308_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1309_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1310_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1311_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1312_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1313_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1314_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1315_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1316_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1317_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1318_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1319_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1320_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1321_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1322_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1323_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1324_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1325_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1326_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1327_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1328_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1329_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1330_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1331_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1332_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1333_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1334_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1335_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1336_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1337_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1338_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1339_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1340_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1341_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1342_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1343_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1344_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1345_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1346_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1347_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1348_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1349_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1350_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1351_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1352_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1353_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1354_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1355_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1356_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1357_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1358_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1359_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1360_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1361_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1362_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1363_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1364_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1365_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1366_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1367_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1368_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1369_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1370_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1371_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1372_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1373_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1374_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1375_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1376_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1377_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1378_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1379_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1380_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1381_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1382_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1383_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1384_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1385_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1386_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1387_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1388_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1389_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1390_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1391_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1392_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1393_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1394_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1395_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1396_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1397_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1398_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1399_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1400_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1401_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1402_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1403_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1404_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1405_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1406_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1407_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1408_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1409_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1410_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1411_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1412_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1413_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1414_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1415_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1416_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1417_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1418_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1419_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1420_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1421_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1422_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1423_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1424_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1425_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1426_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1427_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1428_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1429_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1430_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1431_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1432_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1433_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1434_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1435_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1436_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1437_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1438_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1439_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1440_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1441_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1442_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1443_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1444_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1445_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1446_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1447_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1448_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1449_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1450_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1451_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1452_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1453_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1454_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1455_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1456_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1457_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1458_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1459_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1460_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1461_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1462_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1463_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1464_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1465_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1466_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1467_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1468_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1469_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1470_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1471_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1472_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1473_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1474_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1475_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1476_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1477_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1478_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1479_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1480_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1481_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1482_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1483_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1484_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1485_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1486_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1487_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1488_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1489_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1490_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1491_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1492_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1493_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1494_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1495_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1496_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1497_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1498_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1499_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1500_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1501_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1502_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1503_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1504_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1505_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1506_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1507_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1508_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1509_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1510_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1511_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1512_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1513_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1514_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1515_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1516_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1517_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1518_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1519_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1520_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1521_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1522_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1523_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1524_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1525_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1526_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1527_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1528_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1529_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1530_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1531_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1532_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1533_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1534_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1535_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1536_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1537_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1538_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1539_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1540_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1541_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1542_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1543_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1544_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1545_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1546_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1547_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1548_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1549_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1550_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1551_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1552_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1553_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1554_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1555_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1556_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1557_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1558_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1559_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1560_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1561_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1562_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1563_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1564_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1565_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1566_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1567_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1568_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1569_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1570_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1571_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1572_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1573_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1574_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1575_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1576_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1577_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1578_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1579_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1580_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1581_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1582_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1583_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1584_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1585_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1586_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1587_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1588_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1589_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1590_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1591_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1592_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1593_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1594_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1595_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1596_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1597_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1598_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1599_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1600_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1601_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1602_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1603_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1604_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1605_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1606_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1607_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1608_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1609_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1610_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1611_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1612_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1613_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1614_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1615_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1616_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1617_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1618_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1619_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1620_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1621_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1622_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1623_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1624_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1625_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1626_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1627_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1628_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1629_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1630_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1631_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1632_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1633_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1634_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1635_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1636_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1637_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1638_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1639_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1640_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1641_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1642_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1643_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1644_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1645_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1646_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1647_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1648_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1649_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1650_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1651_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1652_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1653_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1654_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1655_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1656_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1657_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1658_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1659_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1660_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1661_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1662_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1663_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1664_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1665_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1666_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1667_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1668_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1669_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1670_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1671_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1672_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1673_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1674_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1675_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1676_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1677_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1678_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1679_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1680_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1681_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1682_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1683_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1684_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1685_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1686_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1687_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1688_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1689_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1690_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1691_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1692_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1693_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1694_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1695_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1696_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1697_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1698_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1699_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1700_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1701_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1702_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1703_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1704_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1705_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1706_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1707_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1708_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1709_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1710_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1711_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1712_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1713_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1714_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1715_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1716_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1717_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1718_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1719_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1720_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1721_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1722_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1723_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1724_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1725_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1726_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1727_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1728_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1729_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1730_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1731_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1732_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1733_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1734_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1735_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1736_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1737_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1738_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1739_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1740_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1741_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1742_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1743_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1744_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1745_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1746_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1747_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1748_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1749_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1750_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1751_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1752_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1753_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1754_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1755_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1756_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1757_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1758_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1759_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1760_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1761_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1762_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1763_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1764_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1765_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1766_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1767_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1768_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1769_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1770_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1771_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1772_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1773_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1774_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1775_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1776_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1777_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1778_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1779_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1780_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1781_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1782_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1783_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1784_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1785_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1786_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1787_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1788_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1789_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1790_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1791_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1792_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1793_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1794_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1795_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1796_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1797_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1798_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1799_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1800_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1801_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1802_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1803_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1804_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1805_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1806_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1807_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1808_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1809_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1810_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1811_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1812_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1813_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1814_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1815_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1816_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1817_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1818_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1819_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1820_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1821_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1822_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1823_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1824_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1825_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1826_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1827_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1828_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1829_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1830_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1831_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1832_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1833_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1834_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1835_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1836_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1837_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1838_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1839_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1840_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1841_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1842_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1843_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1844_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1845_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1846_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1847_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1848_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1849_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1850_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1851_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1852_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1853_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1854_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1855_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1856_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1857_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1858_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1859_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1860_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1861_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1862_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1863_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1864_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1865_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1866_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1867_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1868_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1869_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1870_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1871_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1872_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1873_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1874_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1875_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1876_1 = rand_strided((72, ), (1, ), device='cpu', dtype=torch.float32)
    arg1877_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1878_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1879_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1880_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1881_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1882_1 = rand_strided((18, ), (1, ), device='cpu', dtype=torch.float32)
    arg1883_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1884_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1885_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1886_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1887_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1888_1 = rand_strided((36, ), (1, ), device='cpu', dtype=torch.float32)
    arg1889_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1890_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1891_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1892_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1893_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1894_1 = rand_strided((144, ), (1, ), device='cpu', dtype=torch.float32)
    arg1895_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1896_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    arg1897_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    arg1898_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1899_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    arg1900_1 = rand_strided((32, ), (1, ), device='cpu', dtype=torch.float32)
    arg1901_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1902_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg1903_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg1904_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1905_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg1906_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg1907_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1908_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1909_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1910_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1911_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1912_1 = rand_strided((64, ), (1, ), device='cpu', dtype=torch.float32)
    arg1913_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1914_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1915_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1916_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1917_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1918_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1919_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1920_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1921_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1922_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1923_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg1924_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg1925_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1926_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg1927_1 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    arg1928_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1929_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg1930_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg1931_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1932_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg1933_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg1934_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1935_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg1936_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    arg1937_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1938_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1939_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1940_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1941_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1942_1 = rand_strided((256, ), (1, ), device='cpu', dtype=torch.float32)
    arg1943_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1944_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg1945_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg1946_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1947_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg1948_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg1949_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1950_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg1951_1 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    arg1952_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1953_1 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    arg1954_1 = rand_strided((2048, ), (1, ), device='cpu', dtype=torch.float32)
    arg1955_1 = rand_strided((), (), device='cpu', dtype=torch.int64)
    arg1956_1 = rand_strided((8, 3, 224, 224), (150528, 50176, 224, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([arg0_1, arg1_1, arg2_1, arg3_1, arg4_1, arg5_1, arg6_1, arg7_1, arg8_1, arg9_1, arg10_1, arg11_1, arg12_1, arg13_1, arg14_1, arg15_1, arg16_1, arg17_1, arg18_1, arg19_1, arg20_1, arg21_1, arg22_1, arg23_1, arg24_1, arg25_1, arg26_1, arg27_1, arg28_1, arg29_1, arg30_1, arg31_1, arg32_1, arg33_1, arg34_1, arg35_1, arg36_1, arg37_1, arg38_1, arg39_1, arg40_1, arg41_1, arg42_1, arg43_1, arg44_1, arg45_1, arg46_1, arg47_1, arg48_1, arg49_1, arg50_1, arg51_1, arg52_1, arg53_1, arg54_1, arg55_1, arg56_1, arg57_1, arg58_1, arg59_1, arg60_1, arg61_1, arg62_1, arg63_1, arg64_1, arg65_1, arg66_1, arg67_1, arg68_1, arg69_1, arg70_1, arg71_1, arg72_1, arg73_1, arg74_1, arg75_1, arg76_1, arg77_1, arg78_1, arg79_1, arg80_1, arg81_1, arg82_1, arg83_1, arg84_1, arg85_1, arg86_1, arg87_1, arg88_1, arg89_1, arg90_1, arg91_1, arg92_1, arg93_1, arg94_1, arg95_1, arg96_1, arg97_1, arg98_1, arg99_1, arg100_1, arg101_1, arg102_1, arg103_1, arg104_1, arg105_1, arg106_1, arg107_1, arg108_1, arg109_1, arg110_1, arg111_1, arg112_1, arg113_1, arg114_1, arg115_1, arg116_1, arg117_1, arg118_1, arg119_1, arg120_1, arg121_1, arg122_1, arg123_1, arg124_1, arg125_1, arg126_1, arg127_1, arg128_1, arg129_1, arg130_1, arg131_1, arg132_1, arg133_1, arg134_1, arg135_1, arg136_1, arg137_1, arg138_1, arg139_1, arg140_1, arg141_1, arg142_1, arg143_1, arg144_1, arg145_1, arg146_1, arg147_1, arg148_1, arg149_1, arg150_1, arg151_1, arg152_1, arg153_1, arg154_1, arg155_1, arg156_1, arg157_1, arg158_1, arg159_1, arg160_1, arg161_1, arg162_1, arg163_1, arg164_1, arg165_1, arg166_1, arg167_1, arg168_1, arg169_1, arg170_1, arg171_1, arg172_1, arg173_1, arg174_1, arg175_1, arg176_1, arg177_1, arg178_1, arg179_1, arg180_1, arg181_1, arg182_1, arg183_1, arg184_1, arg185_1, arg186_1, arg187_1, arg188_1, arg189_1, arg190_1, arg191_1, arg192_1, arg193_1, arg194_1, arg195_1, arg196_1, arg197_1, arg198_1, arg199_1, arg200_1, arg201_1, arg202_1, arg203_1, arg204_1, arg205_1, arg206_1, arg207_1, arg208_1, arg209_1, arg210_1, arg211_1, arg212_1, arg213_1, arg214_1, arg215_1, arg216_1, arg217_1, arg218_1, arg219_1, arg220_1, arg221_1, arg222_1, arg223_1, arg224_1, arg225_1, arg226_1, arg227_1, arg228_1, arg229_1, arg230_1, arg231_1, arg232_1, arg233_1, arg234_1, arg235_1, arg236_1, arg237_1, arg238_1, arg239_1, arg240_1, arg241_1, arg242_1, arg243_1, arg244_1, arg245_1, arg246_1, arg247_1, arg248_1, arg249_1, arg250_1, arg251_1, arg252_1, arg253_1, arg254_1, arg255_1, arg256_1, arg257_1, arg258_1, arg259_1, arg260_1, arg261_1, arg262_1, arg263_1, arg264_1, arg265_1, arg266_1, arg267_1, arg268_1, arg269_1, arg270_1, arg271_1, arg272_1, arg273_1, arg274_1, arg275_1, arg276_1, arg277_1, arg278_1, arg279_1, arg280_1, arg281_1, arg282_1, arg283_1, arg284_1, arg285_1, arg286_1, arg287_1, arg288_1, arg289_1, arg290_1, arg291_1, arg292_1, arg293_1, arg294_1, arg295_1, arg296_1, arg297_1, arg298_1, arg299_1, arg300_1, arg301_1, arg302_1, arg303_1, arg304_1, arg305_1, arg306_1, arg307_1, arg308_1, arg309_1, arg310_1, arg311_1, arg312_1, arg313_1, arg314_1, arg315_1, arg316_1, arg317_1, arg318_1, arg319_1, arg320_1, arg321_1, arg322_1, arg323_1, arg324_1, arg325_1, arg326_1, arg327_1, arg328_1, arg329_1, arg330_1, arg331_1, arg332_1, arg333_1, arg334_1, arg335_1, arg336_1, arg337_1, arg338_1, arg339_1, arg340_1, arg341_1, arg342_1, arg343_1, arg344_1, arg345_1, arg346_1, arg347_1, arg348_1, arg349_1, arg350_1, arg351_1, arg352_1, arg353_1, arg354_1, arg355_1, arg356_1, arg357_1, arg358_1, arg359_1, arg360_1, arg361_1, arg362_1, arg363_1, arg364_1, arg365_1, arg366_1, arg367_1, arg368_1, arg369_1, arg370_1, arg371_1, arg372_1, arg373_1, arg374_1, arg375_1, arg376_1, arg377_1, arg378_1, arg379_1, arg380_1, arg381_1, arg382_1, arg383_1, arg384_1, arg385_1, arg386_1, arg387_1, arg388_1, arg389_1, arg390_1, arg391_1, arg392_1, arg393_1, arg394_1, arg395_1, arg396_1, arg397_1, arg398_1, arg399_1, arg400_1, arg401_1, arg402_1, arg403_1, arg404_1, arg405_1, arg406_1, arg407_1, arg408_1, arg409_1, arg410_1, arg411_1, arg412_1, arg413_1, arg414_1, arg415_1, arg416_1, arg417_1, arg418_1, arg419_1, arg420_1, arg421_1, arg422_1, arg423_1, arg424_1, arg425_1, arg426_1, arg427_1, arg428_1, arg429_1, arg430_1, arg431_1, arg432_1, arg433_1, arg434_1, arg435_1, arg436_1, arg437_1, arg438_1, arg439_1, arg440_1, arg441_1, arg442_1, arg443_1, arg444_1, arg445_1, arg446_1, arg447_1, arg448_1, arg449_1, arg450_1, arg451_1, arg452_1, arg453_1, arg454_1, arg455_1, arg456_1, arg457_1, arg458_1, arg459_1, arg460_1, arg461_1, arg462_1, arg463_1, arg464_1, arg465_1, arg466_1, arg467_1, arg468_1, arg469_1, arg470_1, arg471_1, arg472_1, arg473_1, arg474_1, arg475_1, arg476_1, arg477_1, arg478_1, arg479_1, arg480_1, arg481_1, arg482_1, arg483_1, arg484_1, arg485_1, arg486_1, arg487_1, arg488_1, arg489_1, arg490_1, arg491_1, arg492_1, arg493_1, arg494_1, arg495_1, arg496_1, arg497_1, arg498_1, arg499_1, arg500_1, arg501_1, arg502_1, arg503_1, arg504_1, arg505_1, arg506_1, arg507_1, arg508_1, arg509_1, arg510_1, arg511_1, arg512_1, arg513_1, arg514_1, arg515_1, arg516_1, arg517_1, arg518_1, arg519_1, arg520_1, arg521_1, arg522_1, arg523_1, arg524_1, arg525_1, arg526_1, arg527_1, arg528_1, arg529_1, arg530_1, arg531_1, arg532_1, arg533_1, arg534_1, arg535_1, arg536_1, arg537_1, arg538_1, arg539_1, arg540_1, arg541_1, arg542_1, arg543_1, arg544_1, arg545_1, arg546_1, arg547_1, arg548_1, arg549_1, arg550_1, arg551_1, arg552_1, arg553_1, arg554_1, arg555_1, arg556_1, arg557_1, arg558_1, arg559_1, arg560_1, arg561_1, arg562_1, arg563_1, arg564_1, arg565_1, arg566_1, arg567_1, arg568_1, arg569_1, arg570_1, arg571_1, arg572_1, arg573_1, arg574_1, arg575_1, arg576_1, arg577_1, arg578_1, arg579_1, arg580_1, arg581_1, arg582_1, arg583_1, arg584_1, arg585_1, arg586_1, arg587_1, arg588_1, arg589_1, arg590_1, arg591_1, arg592_1, arg593_1, arg594_1, arg595_1, arg596_1, arg597_1, arg598_1, arg599_1, arg600_1, arg601_1, arg602_1, arg603_1, arg604_1, arg605_1, arg606_1, arg607_1, arg608_1, arg609_1, arg610_1, arg611_1, arg612_1, arg613_1, arg614_1, arg615_1, arg616_1, arg617_1, arg618_1, arg619_1, arg620_1, arg621_1, arg622_1, arg623_1, arg624_1, arg625_1, arg626_1, arg627_1, arg628_1, arg629_1, arg630_1, arg631_1, arg632_1, arg633_1, arg634_1, arg635_1, arg636_1, arg637_1, arg638_1, arg639_1, arg640_1, arg641_1, arg642_1, arg643_1, arg644_1, arg645_1, arg646_1, arg647_1, arg648_1, arg649_1, arg650_1, arg651_1, arg652_1, arg653_1, arg654_1, arg655_1, arg656_1, arg657_1, arg658_1, arg659_1, arg660_1, arg661_1, arg662_1, arg663_1, arg664_1, arg665_1, arg666_1, arg667_1, arg668_1, arg669_1, arg670_1, arg671_1, arg672_1, arg673_1, arg674_1, arg675_1, arg676_1, arg677_1, arg678_1, arg679_1, arg680_1, arg681_1, arg682_1, arg683_1, arg684_1, arg685_1, arg686_1, arg687_1, arg688_1, arg689_1, arg690_1, arg691_1, arg692_1, arg693_1, arg694_1, arg695_1, arg696_1, arg697_1, arg698_1, arg699_1, arg700_1, arg701_1, arg702_1, arg703_1, arg704_1, arg705_1, arg706_1, arg707_1, arg708_1, arg709_1, arg710_1, arg711_1, arg712_1, arg713_1, arg714_1, arg715_1, arg716_1, arg717_1, arg718_1, arg719_1, arg720_1, arg721_1, arg722_1, arg723_1, arg724_1, arg725_1, arg726_1, arg727_1, arg728_1, arg729_1, arg730_1, arg731_1, arg732_1, arg733_1, arg734_1, arg735_1, arg736_1, arg737_1, arg738_1, arg739_1, arg740_1, arg741_1, arg742_1, arg743_1, arg744_1, arg745_1, arg746_1, arg747_1, arg748_1, arg749_1, arg750_1, arg751_1, arg752_1, arg753_1, arg754_1, arg755_1, arg756_1, arg757_1, arg758_1, arg759_1, arg760_1, arg761_1, arg762_1, arg763_1, arg764_1, arg765_1, arg766_1, arg767_1, arg768_1, arg769_1, arg770_1, arg771_1, arg772_1, arg773_1, arg774_1, arg775_1, arg776_1, arg777_1, arg778_1, arg779_1, arg780_1, arg781_1, arg782_1, arg783_1, arg784_1, arg785_1, arg786_1, arg787_1, arg788_1, arg789_1, arg790_1, arg791_1, arg792_1, arg793_1, arg794_1, arg795_1, arg796_1, arg797_1, arg798_1, arg799_1, arg800_1, arg801_1, arg802_1, arg803_1, arg804_1, arg805_1, arg806_1, arg807_1, arg808_1, arg809_1, arg810_1, arg811_1, arg812_1, arg813_1, arg814_1, arg815_1, arg816_1, arg817_1, arg818_1, arg819_1, arg820_1, arg821_1, arg822_1, arg823_1, arg824_1, arg825_1, arg826_1, arg827_1, arg828_1, arg829_1, arg830_1, arg831_1, arg832_1, arg833_1, arg834_1, arg835_1, arg836_1, arg837_1, arg838_1, arg839_1, arg840_1, arg841_1, arg842_1, arg843_1, arg844_1, arg845_1, arg846_1, arg847_1, arg848_1, arg849_1, arg850_1, arg851_1, arg852_1, arg853_1, arg854_1, arg855_1, arg856_1, arg857_1, arg858_1, arg859_1, arg860_1, arg861_1, arg862_1, arg863_1, arg864_1, arg865_1, arg866_1, arg867_1, arg868_1, arg869_1, arg870_1, arg871_1, arg872_1, arg873_1, arg874_1, arg875_1, arg876_1, arg877_1, arg878_1, arg879_1, arg880_1, arg881_1, arg882_1, arg883_1, arg884_1, arg885_1, arg886_1, arg887_1, arg888_1, arg889_1, arg890_1, arg891_1, arg892_1, arg893_1, arg894_1, arg895_1, arg896_1, arg897_1, arg898_1, arg899_1, arg900_1, arg901_1, arg902_1, arg903_1, arg904_1, arg905_1, arg906_1, arg907_1, arg908_1, arg909_1, arg910_1, arg911_1, arg912_1, arg913_1, arg914_1, arg915_1, arg916_1, arg917_1, arg918_1, arg919_1, arg920_1, arg921_1, arg922_1, arg923_1, arg924_1, arg925_1, arg926_1, arg927_1, arg928_1, arg929_1, arg930_1, arg931_1, arg932_1, arg933_1, arg934_1, arg935_1, arg936_1, arg937_1, arg938_1, arg939_1, arg940_1, arg941_1, arg942_1, arg943_1, arg944_1, arg945_1, arg946_1, arg947_1, arg948_1, arg949_1, arg950_1, arg951_1, arg952_1, arg953_1, arg954_1, arg955_1, arg956_1, arg957_1, arg958_1, arg959_1, arg960_1, arg961_1, arg962_1, arg963_1, arg964_1, arg965_1, arg966_1, arg967_1, arg968_1, arg969_1, arg970_1, arg971_1, arg972_1, arg973_1, arg974_1, arg975_1, arg976_1, arg977_1, arg978_1, arg979_1, arg980_1, arg981_1, arg982_1, arg983_1, arg984_1, arg985_1, arg986_1, arg987_1, arg988_1, arg989_1, arg990_1, arg991_1, arg992_1, arg993_1, arg994_1, arg995_1, arg996_1, arg997_1, arg998_1, arg999_1, arg1000_1, arg1001_1, arg1002_1, arg1003_1, arg1004_1, arg1005_1, arg1006_1, arg1007_1, arg1008_1, arg1009_1, arg1010_1, arg1011_1, arg1012_1, arg1013_1, arg1014_1, arg1015_1, arg1016_1, arg1017_1, arg1018_1, arg1019_1, arg1020_1, arg1021_1, arg1022_1, arg1023_1, arg1024_1, arg1025_1, arg1026_1, arg1027_1, arg1028_1, arg1029_1, arg1030_1, arg1031_1, arg1032_1, arg1033_1, arg1034_1, arg1035_1, arg1036_1, arg1037_1, arg1038_1, arg1039_1, arg1040_1, arg1041_1, arg1042_1, arg1043_1, arg1044_1, arg1045_1, arg1046_1, arg1047_1, arg1048_1, arg1049_1, arg1050_1, arg1051_1, arg1052_1, arg1053_1, arg1054_1, arg1055_1, arg1056_1, arg1057_1, arg1058_1, arg1059_1, arg1060_1, arg1061_1, arg1062_1, arg1063_1, arg1064_1, arg1065_1, arg1066_1, arg1067_1, arg1068_1, arg1069_1, arg1070_1, arg1071_1, arg1072_1, arg1073_1, arg1074_1, arg1075_1, arg1076_1, arg1077_1, arg1078_1, arg1079_1, arg1080_1, arg1081_1, arg1082_1, arg1083_1, arg1084_1, arg1085_1, arg1086_1, arg1087_1, arg1088_1, arg1089_1, arg1090_1, arg1091_1, arg1092_1, arg1093_1, arg1094_1, arg1095_1, arg1096_1, arg1097_1, arg1098_1, arg1099_1, arg1100_1, arg1101_1, arg1102_1, arg1103_1, arg1104_1, arg1105_1, arg1106_1, arg1107_1, arg1108_1, arg1109_1, arg1110_1, arg1111_1, arg1112_1, arg1113_1, arg1114_1, arg1115_1, arg1116_1, arg1117_1, arg1118_1, arg1119_1, arg1120_1, arg1121_1, arg1122_1, arg1123_1, arg1124_1, arg1125_1, arg1126_1, arg1127_1, arg1128_1, arg1129_1, arg1130_1, arg1131_1, arg1132_1, arg1133_1, arg1134_1, arg1135_1, arg1136_1, arg1137_1, arg1138_1, arg1139_1, arg1140_1, arg1141_1, arg1142_1, arg1143_1, arg1144_1, arg1145_1, arg1146_1, arg1147_1, arg1148_1, arg1149_1, arg1150_1, arg1151_1, arg1152_1, arg1153_1, arg1154_1, arg1155_1, arg1156_1, arg1157_1, arg1158_1, arg1159_1, arg1160_1, arg1161_1, arg1162_1, arg1163_1, arg1164_1, arg1165_1, arg1166_1, arg1167_1, arg1168_1, arg1169_1, arg1170_1, arg1171_1, arg1172_1, arg1173_1, arg1174_1, arg1175_1, arg1176_1, arg1177_1, arg1178_1, arg1179_1, arg1180_1, arg1181_1, arg1182_1, arg1183_1, arg1184_1, arg1185_1, arg1186_1, arg1187_1, arg1188_1, arg1189_1, arg1190_1, arg1191_1, arg1192_1, arg1193_1, arg1194_1, arg1195_1, arg1196_1, arg1197_1, arg1198_1, arg1199_1, arg1200_1, arg1201_1, arg1202_1, arg1203_1, arg1204_1, arg1205_1, arg1206_1, arg1207_1, arg1208_1, arg1209_1, arg1210_1, arg1211_1, arg1212_1, arg1213_1, arg1214_1, arg1215_1, arg1216_1, arg1217_1, arg1218_1, arg1219_1, arg1220_1, arg1221_1, arg1222_1, arg1223_1, arg1224_1, arg1225_1, arg1226_1, arg1227_1, arg1228_1, arg1229_1, arg1230_1, arg1231_1, arg1232_1, arg1233_1, arg1234_1, arg1235_1, arg1236_1, arg1237_1, arg1238_1, arg1239_1, arg1240_1, arg1241_1, arg1242_1, arg1243_1, arg1244_1, arg1245_1, arg1246_1, arg1247_1, arg1248_1, arg1249_1, arg1250_1, arg1251_1, arg1252_1, arg1253_1, arg1254_1, arg1255_1, arg1256_1, arg1257_1, arg1258_1, arg1259_1, arg1260_1, arg1261_1, arg1262_1, arg1263_1, arg1264_1, arg1265_1, arg1266_1, arg1267_1, arg1268_1, arg1269_1, arg1270_1, arg1271_1, arg1272_1, arg1273_1, arg1274_1, arg1275_1, arg1276_1, arg1277_1, arg1278_1, arg1279_1, arg1280_1, arg1281_1, arg1282_1, arg1283_1, arg1284_1, arg1285_1, arg1286_1, arg1287_1, arg1288_1, arg1289_1, arg1290_1, arg1291_1, arg1292_1, arg1293_1, arg1294_1, arg1295_1, arg1296_1, arg1297_1, arg1298_1, arg1299_1, arg1300_1, arg1301_1, arg1302_1, arg1303_1, arg1304_1, arg1305_1, arg1306_1, arg1307_1, arg1308_1, arg1309_1, arg1310_1, arg1311_1, arg1312_1, arg1313_1, arg1314_1, arg1315_1, arg1316_1, arg1317_1, arg1318_1, arg1319_1, arg1320_1, arg1321_1, arg1322_1, arg1323_1, arg1324_1, arg1325_1, arg1326_1, arg1327_1, arg1328_1, arg1329_1, arg1330_1, arg1331_1, arg1332_1, arg1333_1, arg1334_1, arg1335_1, arg1336_1, arg1337_1, arg1338_1, arg1339_1, arg1340_1, arg1341_1, arg1342_1, arg1343_1, arg1344_1, arg1345_1, arg1346_1, arg1347_1, arg1348_1, arg1349_1, arg1350_1, arg1351_1, arg1352_1, arg1353_1, arg1354_1, arg1355_1, arg1356_1, arg1357_1, arg1358_1, arg1359_1, arg1360_1, arg1361_1, arg1362_1, arg1363_1, arg1364_1, arg1365_1, arg1366_1, arg1367_1, arg1368_1, arg1369_1, arg1370_1, arg1371_1, arg1372_1, arg1373_1, arg1374_1, arg1375_1, arg1376_1, arg1377_1, arg1378_1, arg1379_1, arg1380_1, arg1381_1, arg1382_1, arg1383_1, arg1384_1, arg1385_1, arg1386_1, arg1387_1, arg1388_1, arg1389_1, arg1390_1, arg1391_1, arg1392_1, arg1393_1, arg1394_1, arg1395_1, arg1396_1, arg1397_1, arg1398_1, arg1399_1, arg1400_1, arg1401_1, arg1402_1, arg1403_1, arg1404_1, arg1405_1, arg1406_1, arg1407_1, arg1408_1, arg1409_1, arg1410_1, arg1411_1, arg1412_1, arg1413_1, arg1414_1, arg1415_1, arg1416_1, arg1417_1, arg1418_1, arg1419_1, arg1420_1, arg1421_1, arg1422_1, arg1423_1, arg1424_1, arg1425_1, arg1426_1, arg1427_1, arg1428_1, arg1429_1, arg1430_1, arg1431_1, arg1432_1, arg1433_1, arg1434_1, arg1435_1, arg1436_1, arg1437_1, arg1438_1, arg1439_1, arg1440_1, arg1441_1, arg1442_1, arg1443_1, arg1444_1, arg1445_1, arg1446_1, arg1447_1, arg1448_1, arg1449_1, arg1450_1, arg1451_1, arg1452_1, arg1453_1, arg1454_1, arg1455_1, arg1456_1, arg1457_1, arg1458_1, arg1459_1, arg1460_1, arg1461_1, arg1462_1, arg1463_1, arg1464_1, arg1465_1, arg1466_1, arg1467_1, arg1468_1, arg1469_1, arg1470_1, arg1471_1, arg1472_1, arg1473_1, arg1474_1, arg1475_1, arg1476_1, arg1477_1, arg1478_1, arg1479_1, arg1480_1, arg1481_1, arg1482_1, arg1483_1, arg1484_1, arg1485_1, arg1486_1, arg1487_1, arg1488_1, arg1489_1, arg1490_1, arg1491_1, arg1492_1, arg1493_1, arg1494_1, arg1495_1, arg1496_1, arg1497_1, arg1498_1, arg1499_1, arg1500_1, arg1501_1, arg1502_1, arg1503_1, arg1504_1, arg1505_1, arg1506_1, arg1507_1, arg1508_1, arg1509_1, arg1510_1, arg1511_1, arg1512_1, arg1513_1, arg1514_1, arg1515_1, arg1516_1, arg1517_1, arg1518_1, arg1519_1, arg1520_1, arg1521_1, arg1522_1, arg1523_1, arg1524_1, arg1525_1, arg1526_1, arg1527_1, arg1528_1, arg1529_1, arg1530_1, arg1531_1, arg1532_1, arg1533_1, arg1534_1, arg1535_1, arg1536_1, arg1537_1, arg1538_1, arg1539_1, arg1540_1, arg1541_1, arg1542_1, arg1543_1, arg1544_1, arg1545_1, arg1546_1, arg1547_1, arg1548_1, arg1549_1, arg1550_1, arg1551_1, arg1552_1, arg1553_1, arg1554_1, arg1555_1, arg1556_1, arg1557_1, arg1558_1, arg1559_1, arg1560_1, arg1561_1, arg1562_1, arg1563_1, arg1564_1, arg1565_1, arg1566_1, arg1567_1, arg1568_1, arg1569_1, arg1570_1, arg1571_1, arg1572_1, arg1573_1, arg1574_1, arg1575_1, arg1576_1, arg1577_1, arg1578_1, arg1579_1, arg1580_1, arg1581_1, arg1582_1, arg1583_1, arg1584_1, arg1585_1, arg1586_1, arg1587_1, arg1588_1, arg1589_1, arg1590_1, arg1591_1, arg1592_1, arg1593_1, arg1594_1, arg1595_1, arg1596_1, arg1597_1, arg1598_1, arg1599_1, arg1600_1, arg1601_1, arg1602_1, arg1603_1, arg1604_1, arg1605_1, arg1606_1, arg1607_1, arg1608_1, arg1609_1, arg1610_1, arg1611_1, arg1612_1, arg1613_1, arg1614_1, arg1615_1, arg1616_1, arg1617_1, arg1618_1, arg1619_1, arg1620_1, arg1621_1, arg1622_1, arg1623_1, arg1624_1, arg1625_1, arg1626_1, arg1627_1, arg1628_1, arg1629_1, arg1630_1, arg1631_1, arg1632_1, arg1633_1, arg1634_1, arg1635_1, arg1636_1, arg1637_1, arg1638_1, arg1639_1, arg1640_1, arg1641_1, arg1642_1, arg1643_1, arg1644_1, arg1645_1, arg1646_1, arg1647_1, arg1648_1, arg1649_1, arg1650_1, arg1651_1, arg1652_1, arg1653_1, arg1654_1, arg1655_1, arg1656_1, arg1657_1, arg1658_1, arg1659_1, arg1660_1, arg1661_1, arg1662_1, arg1663_1, arg1664_1, arg1665_1, arg1666_1, arg1667_1, arg1668_1, arg1669_1, arg1670_1, arg1671_1, arg1672_1, arg1673_1, arg1674_1, arg1675_1, arg1676_1, arg1677_1, arg1678_1, arg1679_1, arg1680_1, arg1681_1, arg1682_1, arg1683_1, arg1684_1, arg1685_1, arg1686_1, arg1687_1, arg1688_1, arg1689_1, arg1690_1, arg1691_1, arg1692_1, arg1693_1, arg1694_1, arg1695_1, arg1696_1, arg1697_1, arg1698_1, arg1699_1, arg1700_1, arg1701_1, arg1702_1, arg1703_1, arg1704_1, arg1705_1, arg1706_1, arg1707_1, arg1708_1, arg1709_1, arg1710_1, arg1711_1, arg1712_1, arg1713_1, arg1714_1, arg1715_1, arg1716_1, arg1717_1, arg1718_1, arg1719_1, arg1720_1, arg1721_1, arg1722_1, arg1723_1, arg1724_1, arg1725_1, arg1726_1, arg1727_1, arg1728_1, arg1729_1, arg1730_1, arg1731_1, arg1732_1, arg1733_1, arg1734_1, arg1735_1, arg1736_1, arg1737_1, arg1738_1, arg1739_1, arg1740_1, arg1741_1, arg1742_1, arg1743_1, arg1744_1, arg1745_1, arg1746_1, arg1747_1, arg1748_1, arg1749_1, arg1750_1, arg1751_1, arg1752_1, arg1753_1, arg1754_1, arg1755_1, arg1756_1, arg1757_1, arg1758_1, arg1759_1, arg1760_1, arg1761_1, arg1762_1, arg1763_1, arg1764_1, arg1765_1, arg1766_1, arg1767_1, arg1768_1, arg1769_1, arg1770_1, arg1771_1, arg1772_1, arg1773_1, arg1774_1, arg1775_1, arg1776_1, arg1777_1, arg1778_1, arg1779_1, arg1780_1, arg1781_1, arg1782_1, arg1783_1, arg1784_1, arg1785_1, arg1786_1, arg1787_1, arg1788_1, arg1789_1, arg1790_1, arg1791_1, arg1792_1, arg1793_1, arg1794_1, arg1795_1, arg1796_1, arg1797_1, arg1798_1, arg1799_1, arg1800_1, arg1801_1, arg1802_1, arg1803_1, arg1804_1, arg1805_1, arg1806_1, arg1807_1, arg1808_1, arg1809_1, arg1810_1, arg1811_1, arg1812_1, arg1813_1, arg1814_1, arg1815_1, arg1816_1, arg1817_1, arg1818_1, arg1819_1, arg1820_1, arg1821_1, arg1822_1, arg1823_1, arg1824_1, arg1825_1, arg1826_1, arg1827_1, arg1828_1, arg1829_1, arg1830_1, arg1831_1, arg1832_1, arg1833_1, arg1834_1, arg1835_1, arg1836_1, arg1837_1, arg1838_1, arg1839_1, arg1840_1, arg1841_1, arg1842_1, arg1843_1, arg1844_1, arg1845_1, arg1846_1, arg1847_1, arg1848_1, arg1849_1, arg1850_1, arg1851_1, arg1852_1, arg1853_1, arg1854_1, arg1855_1, arg1856_1, arg1857_1, arg1858_1, arg1859_1, arg1860_1, arg1861_1, arg1862_1, arg1863_1, arg1864_1, arg1865_1, arg1866_1, arg1867_1, arg1868_1, arg1869_1, arg1870_1, arg1871_1, arg1872_1, arg1873_1, arg1874_1, arg1875_1, arg1876_1, arg1877_1, arg1878_1, arg1879_1, arg1880_1, arg1881_1, arg1882_1, arg1883_1, arg1884_1, arg1885_1, arg1886_1, arg1887_1, arg1888_1, arg1889_1, arg1890_1, arg1891_1, arg1892_1, arg1893_1, arg1894_1, arg1895_1, arg1896_1, arg1897_1, arg1898_1, arg1899_1, arg1900_1, arg1901_1, arg1902_1, arg1903_1, arg1904_1, arg1905_1, arg1906_1, arg1907_1, arg1908_1, arg1909_1, arg1910_1, arg1911_1, arg1912_1, arg1913_1, arg1914_1, arg1915_1, arg1916_1, arg1917_1, arg1918_1, arg1919_1, arg1920_1, arg1921_1, arg1922_1, arg1923_1, arg1924_1, arg1925_1, arg1926_1, arg1927_1, arg1928_1, arg1929_1, arg1930_1, arg1931_1, arg1932_1, arg1933_1, arg1934_1, arg1935_1, arg1936_1, arg1937_1, arg1938_1, arg1939_1, arg1940_1, arg1941_1, arg1942_1, arg1943_1, arg1944_1, arg1945_1, arg1946_1, arg1947_1, arg1948_1, arg1949_1, arg1950_1, arg1951_1, arg1952_1, arg1953_1, arg1954_1, arg1955_1, arg1956_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('hrnet_w18', benchmark_compiled_module)
